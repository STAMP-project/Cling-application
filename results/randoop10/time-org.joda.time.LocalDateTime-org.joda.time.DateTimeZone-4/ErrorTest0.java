import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) -1, (long) 10, chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant18", (dateTime4.compareTo(instant18) == 0) == dateTime4.equals(instant18));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        boolean boolean26 = periodType23.isSupported(durationFieldType25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21, periodType23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 0, (long) 14, periodType23, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZone(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfYear();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays(0);
        int int45 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant46 = dateTime39.toInstant();
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.Period period48 = duration10.toPeriod(periodType23, chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant46", (dateTime4.compareTo(instant46) == 0) == dateTime4.equals(instant46));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.DurationField durationField6 = chronology3.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField5", Math.signum(durationField6.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField6)));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        int int26 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(86400000L, chronology28);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        org.joda.time.DateTime dateTime33 = mutableDateTime25.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology30.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and dateTime33", (mutableDateTime17.compareTo(dateTime33) == 0) == mutableDateTime17.equals(dateTime33));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 1, periodType5);
        org.joda.time.PeriodType periodType7 = periodType5.withWeeksRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        int int36 = dateTime33.getMillisOfSecond();
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime33.toGregorianCalendar();
        java.util.Date date39 = gregorianCalendar38.getTime();
        boolean boolean40 = periodType7.equals((java.lang.Object) gregorianCalendar38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) chronology2, periodType7);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(86400000L, chronology44);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DurationField durationField48 = chronology46.eras();
        mutablePeriod41.setPeriod(1000L, chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField47 and durationField48", Math.signum(durationField47.compareTo(durationField48)) == -Math.signum(durationField48.compareTo(durationField47)));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime18 = dateTime9.withMillis((long) 14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        int int21 = dateMidnight12.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and mutableDateTime20", (dateMidnight12.compareTo(mutableDateTime20) == 0) == dateMidnight12.equals(mutableDateTime20));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (-292275054), dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight9, dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and dateMidnight18", (dateMidnight9.compareTo(dateMidnight18) == 0) == dateMidnight9.equals(dateMidnight18));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.Instant instant21 = mutableDateTime20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withZone(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(0);
        int int49 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTime dateTime50 = dateMidnight48.toDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 1, periodType75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((java.lang.Object) duration71, periodType75);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.time();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, (org.joda.time.ReadableDuration) duration71, periodType78);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration71, (int) '#');
        int int82 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and instant21", (dateMidnight1.compareTo(instant21) == 0) == dateMidnight1.equals(instant21));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((long) ' ', 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.Instant instant21 = mutableDateTime20.toInstant();
        org.joda.time.Instant instant23 = instant21.withMillis(100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and mutableDateTime20", (dateMidnight1.compareTo(mutableDateTime20) == 0) == dateMidnight1.equals(mutableDateTime20));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        mutablePeriod14.setMillis(14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(86400000L, chronology19);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        mutablePeriod14.add((long) (short) 0, chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField23", Math.signum(durationField22.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField22)));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        java.util.Date date68 = gregorianCalendar67.getTime();
        gregorianCalendar30.setTime(date68);
        int int70 = date68.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and gregorianCalendar67", (gregorianCalendar30.compareTo(gregorianCalendar67) == 0) == gregorianCalendar30.equals(gregorianCalendar67));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(10);
        boolean boolean6 = localDate2.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property7 = localDate2.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withChronology(chronology30);
        int int32 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTime dateTime34 = dateTime25.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean36 = dateTime25.isSupported(dateTimeFieldType35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight19.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = dateTime63.toString(dateTimeFormatter64);
        int int66 = dateTime63.getMillisOfSecond();
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        java.util.GregorianCalendar gregorianCalendar68 = dateTime63.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay69 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.plusYears(0);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        boolean boolean75 = dateTimeFieldType35.isSupported(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime8.toDateTime(chronology74);
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 4492800000L, chronology74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime76", (dateTime8.compareTo(dateTime76) == 0) == dateTime8.equals(dateTime76));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        int int26 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(86400000L, chronology28);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        org.joda.time.DateTime dateTime33 = mutableDateTime25.toDateTime(chronology30);
        org.joda.time.Chronology chronology34 = mutableDateTime25.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and dateTime33", (mutableDateTime25.compareTo(dateTime33) == 0) == mutableDateTime25.equals(dateTime33));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withChronology(chronology28);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = dateTime23.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight17.property(dateTimeFieldType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusYears(0);
        org.joda.time.Chronology chronology72 = yearMonthDay71.getChronology();
        boolean boolean73 = dateTimeFieldType33.isSupported(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime6.toDateTime(chronology72);
        org.joda.time.DurationField durationField75 = chronology72.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime74", (dateTime6.compareTo(dateTime74) == 0) == dateTime6.equals(dateTime74));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime14 = dateTime5.minus((long) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 0, (long) 14, periodType25, chronology30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period31);
        boolean boolean34 = interval32.contains(315532800004L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = period38.normalizedStandard(periodType39);
        org.joda.time.Period period42 = period40.minusDays(0);
        org.joda.time.Duration duration43 = period40.toStandardDuration();
        org.joda.time.Duration duration44 = period40.toStandardDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withZone(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfYear();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.minusDays(0);
        int int60 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Instant instant61 = dateTime54.toInstant();
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DateTime dateTime63 = instant61.toDateTimeISO();
        org.joda.time.Interval interval64 = duration44.toIntervalTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Interval interval65 = interval32.gap((org.joda.time.ReadableInterval) interval64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant61", (dateTime2.compareTo(instant61) == 0) == dateTime2.equals(instant61));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        long long26 = duration25.getStandardMinutes();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime52.toString(dateTimeFormatter53);
        int int55 = dateTime52.getMillisOfSecond();
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean57 = duration25.equals((java.lang.Object) period56);
        org.joda.time.DateTime dateTime58 = dateTime18.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(86400000L, chronology62);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((java.lang.Object) period80, chronology81);
        int[] intArray84 = chronology64.get((org.joda.time.ReadablePeriod) period80, (-1L));
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.DateTime dateTime86 = mutableDateTime85.toDateTime();
        boolean boolean87 = instant60.isEqual((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.Period period88 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant60", (dateTime2.compareTo(instant60) == 0) == dateTime2.equals(instant60));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZone(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(0);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant23 = dateTime16.toInstant();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        boolean boolean35 = periodType32.isSupported(durationFieldType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime38 = dateTime2.minus((org.joda.time.ReadableDuration) duration30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant23", (dateTime9.compareTo(instant23) == 0) == dateTime9.equals(instant23));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant21", (dateTime2.compareTo(instant21) == 0) == dateTime2.equals(instant21));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        java.util.Date date68 = gregorianCalendar67.getTime();
        gregorianCalendar30.setTime(date68);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.monthOfYear();
        java.util.Date date73 = localDateTime71.toDate();
        int int74 = date73.getTimezoneOffset();
        date73.setDate(2);
        boolean boolean77 = date68.after(date73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and gregorianCalendar67", (gregorianCalendar30.compareTo(gregorianCalendar67) == 0) == gregorianCalendar30.equals(gregorianCalendar67));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZone(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        int int38 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateTime dateTime39 = dateMidnight37.toDateTime();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 1, periodType64);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) duration60, periodType64);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.time();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration60, periodType67);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        int int72 = duration60.compareTo((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant73 = instant16.minus((org.joda.time.ReadableDuration) duration71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight18", (dateMidnight1.compareTo(dateMidnight18) == 0) == dateMidnight1.equals(dateMidnight18));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate1.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withChronology(chronology29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean35 = dateTime24.isSupported(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight18.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay68 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.plusYears(0);
        org.joda.time.Chronology chronology73 = yearMonthDay72.getChronology();
        boolean boolean74 = dateTimeFieldType34.isSupported(chronology73);
        org.joda.time.DateTime dateTime75 = dateTime7.toDateTime(chronology73);
        org.joda.time.TimeOfDay timeOfDay76 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 100, chronology73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime75", (dateTime7.compareTo(dateTime75) == 0) == dateTime7.equals(dateTime75));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DurationField durationField16 = chronology12.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        java.util.Date date68 = gregorianCalendar67.getTime();
        gregorianCalendar30.setTime(date68);
        date68.setMonth(32770);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and gregorianCalendar67", (gregorianCalendar30.compareTo(gregorianCalendar67) == 0) == gregorianCalendar30.equals(gregorianCalendar67));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 1, periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        boolean boolean34 = periodType31.isSupported(durationFieldType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration29, periodType31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = duration49.plus((long) 'u');
        org.joda.time.Period period52 = duration51.toPeriod();
        boolean boolean53 = duration42.isEqual((org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.years();
        boolean boolean56 = periodType54.isSupported(durationFieldType55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42, periodType54);
        long long58 = duration42.getStandardMinutes();
        org.joda.time.Instant instant60 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration42, 17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant60", (dateTime2.compareTo(instant60) == 0) == dateTime2.equals(instant60));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        int int19 = dateTime18.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.Instant instant22 = instant16.minus((long) 4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant7 = instant0.withDurationAdded((long) 69, 16);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        mutableDateTime9.setDayOfYear(1);
        mutableDateTime9.setMillisOfSecond((int) 'u');
        int int14 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime9.yearOfEra();
        mutableDateTime9.setMillis(536457600119L);
        mutableDateTime9.setSecondOfDay(2152);
        boolean boolean21 = instant7.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate32 = localDate30.plusYears(10);
        org.joda.time.LocalDate.Property property33 = localDate32.year();
        org.joda.time.DateMidnight dateMidnight34 = localDate32.toDateMidnight();
        org.joda.time.LocalDate.Property property35 = localDate32.year();
        java.lang.String str36 = localDate32.toString();
        org.joda.time.LocalDate localDate38 = localDate32.plusMonths(999);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.Interval interval40 = interval29.withChronology(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getMinimalDaysInFirstWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays(0);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant51 = dateTime44.toInstant();
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        boolean boolean53 = gregorianCalendar30.after((java.lang.Object) chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant51", (dateTime2.compareTo(instant51) == 0) == dateTime2.equals(instant51));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withChronology(chronology28);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = dateTime23.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight17.property(dateTimeFieldType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusYears(0);
        org.joda.time.Chronology chronology72 = yearMonthDay71.getChronology();
        boolean boolean73 = dateTimeFieldType33.isSupported(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime6.toDateTime(chronology72);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        boolean boolean80 = period78.isSupported(durationFieldType79);
        org.joda.time.DateTime dateTime82 = dateTime6.withFieldAdded(durationFieldType79, 20);
        java.lang.String str83 = durationFieldType79.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime74", (dateTime6.compareTo(dateTime74) == 0) == dateTime6.equals(dateTime74));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 1);
        mutablePeriod1.setWeeks(11);
        int int6 = mutablePeriod1.getSeconds();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZone(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusDays(0);
        int int24 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Instant instant25 = dateTime18.toInstant();
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        mutablePeriod1.setPeriod((long) 2, 119L, chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant25", (dateTime11.compareTo(instant25) == 0) == dateTime11.equals(instant25));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 1, periodType5);
        org.joda.time.PeriodType periodType7 = periodType5.withWeeksRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        int int36 = dateTime33.getMillisOfSecond();
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime33.toGregorianCalendar();
        java.util.Date date39 = gregorianCalendar38.getTime();
        boolean boolean40 = periodType7.equals((java.lang.Object) gregorianCalendar38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) chronology2, periodType7);
        org.joda.time.PeriodType periodType42 = periodType7.withSecondsRemoved();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.years();
        boolean boolean51 = period49.isSupported(durationFieldType50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight44.plus((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.year();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.withChronology(chronology67);
        int int69 = dateTime62.compareTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.DateTime dateTime71 = dateTime62.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean73 = dateTime62.isSupported(dateTimeFieldType72);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType72.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight55.withFieldAdded(durationFieldType74, 0);
        boolean boolean77 = periodType42.isSupported(durationFieldType74);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property80 = dateMidnight79.dayOfYear();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period(readableInstant81, readableInstant82, periodType83);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.years();
        boolean boolean86 = period84.isSupported(durationFieldType85);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight79.plus((org.joda.time.ReadablePeriod) period84);
        java.util.TimeZone timeZone88 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone88);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight87.withZoneRetainFields(dateTimeZone89);
        org.joda.time.DateMidnight.Property property91 = dateMidnight90.year();
        org.joda.time.DateMidnight.Property property92 = dateMidnight90.dayOfMonth();
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime(86400000L, chronology94);
        org.joda.time.Chronology chronology96 = localDateTime95.getChronology();
        org.joda.time.DateTimeField dateTimeField97 = chronology96.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime98 = dateMidnight90.toMutableDateTime(chronology96);
        org.joda.time.DurationField durationField99 = durationFieldType74.getField(chronology96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight44 and mutableDateTime98", (dateMidnight44.compareTo(mutableDateTime98) == 0) == dateMidnight44.equals(mutableDateTime98));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(0);
        int int36 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateTime dateTime37 = dateMidnight35.toDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = dateTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight35.withFieldAdded(durationFieldType43, 8);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod47.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight45.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod47, 0);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, periodType53);
        org.joda.time.Period period56 = period54.plusDays(1970);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 1, periodType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.years();
        boolean boolean61 = periodType58.isSupported(durationFieldType60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(86400000L, chronology63);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.millisOfSecond();
        boolean boolean68 = durationFieldType60.isSupported(chronology65);
        boolean boolean69 = period56.isSupported(durationFieldType60);
        mutablePeriod47.set(durationFieldType60, 43);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight12.withFieldAdded(durationFieldType60, 57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and mutableDateTime20", (dateMidnight12.compareTo(mutableDateTime20) == 0) == dateMidnight12.equals(mutableDateTime20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        java.util.Date date68 = gregorianCalendar67.getTime();
        gregorianCalendar30.setTime(date68);
        java.lang.String str70 = date68.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and gregorianCalendar67", (gregorianCalendar30.compareTo(gregorianCalendar67) == 0) == gregorianCalendar30.equals(gregorianCalendar67));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration48, 1439);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight27.withYear(52);
        org.joda.time.DateMidnight.Property property62 = dateMidnight27.era();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withZone(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property75 = dateMidnight74.dayOfYear();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.minusDays(0);
        int int78 = dateTime72.compareTo((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Instant instant79 = dateTime72.toInstant();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.DateTime.Property property83 = dateTime82.yearOfEra();
        org.joda.time.DateTime dateTime84 = dateTime82.toDateTime();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period89 = new org.joda.time.Period((long) 1, periodType88);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.years();
        boolean boolean91 = periodType88.isSupported(durationFieldType90);
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableDuration) duration86, periodType88);
        org.joda.time.Instant instant93 = instant79.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration94 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) instant93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant79", (dateTime3.compareTo(instant79) == 0) == dateTime3.equals(instant79));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant7 = instant0.withDurationAdded((long) 69, 16);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant32 = instant30.minus((long) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableInstant66, readableInstant67, periodType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.years();
        boolean boolean71 = period69.isSupported(durationFieldType70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight64.plus((org.joda.time.ReadablePeriod) period69);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.withZoneRetainFields(dateTimeZone74);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.year();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfMonth();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(86400000L, chronology79);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = dateMidnight75.toMutableDateTime(chronology81);
        mutablePeriod61.setPeriod(0L, chronology81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        int int26 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(86400000L, chronology28);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        org.joda.time.DateTime dateTime33 = mutableDateTime25.toDateTime(chronology30);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and dateTime33", (mutableDateTime25.compareTo(dateTime33) == 0) == mutableDateTime25.equals(dateTime33));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.Period period5 = period3.plusDays(9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period3.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.minusDays(0);
        java.lang.String str15 = period14.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withZone(dateTimeZone23);
        org.joda.time.Duration duration25 = period14.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = dateTime24.isBefore((long) 1439);
        org.joda.time.Duration duration28 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property38.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime42 = property38.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime44 = property38.add(23L);
        org.joda.time.MutableDateTime mutableDateTime45 = property38.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime46 = property38.roundFloor();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withZone(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(0);
        int int62 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Instant instant63 = dateTime56.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Instant instant66 = instant63.withMillis((long) 7);
        org.joda.time.DateTime dateTime67 = instant63.toDateTime();
        int int68 = property38.compareTo((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = dateTime71.toString(dateTimeFormatter72);
        org.joda.time.DateTime dateTime75 = dateTime71.withDayOfWeek(4);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(86400000L, chronology77);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        long long84 = chronology79.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField85 = chronology79.minuteOfDay();
        org.joda.time.DateTime dateTime86 = dateTime75.toDateTime(chronology79);
        org.joda.time.DateTime.Property property87 = dateTime75.minuteOfDay();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType89 = periodType88.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime75, periodType88);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant63", (dateTime18.compareTo(instant63) == 0) == dateTime18.equals(instant63));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.DateTime dateTime20 = instant16.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(0);
        org.joda.time.Interval interval23 = dateMidnight22.toInterval();
        boolean boolean24 = dateMidnight22.isEqualNow();
        org.joda.time.DateMidnight.Property property25 = dateMidnight22.dayOfWeek();
        int int26 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight22.withWeekyear(1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        int int40 = dateTime37.getMillisOfSecond();
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime37.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay43 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.plusYears(0);
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DurationField durationField51 = chronology48.years();
        org.joda.time.DateTime dateTime52 = dateTime11.withChronology(chronology48);
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 8, chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime52", (dateTime11.compareTo(dateTime52) == 0) == dateTime11.equals(dateTime52));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.Instant instant21 = mutableDateTime20.toInstant();
        org.joda.time.DateTime dateTime22 = instant21.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and mutableDateTime20", (dateMidnight1.compareTo(mutableDateTime20) == 0) == dateMidnight1.equals(mutableDateTime20));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        int int29 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime31 = dateTime22.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean33 = dateTime22.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight16.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight4.withField(dateTimeFieldType32, 5);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 1, periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration58, periodType62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime67.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime(dateTimeZone70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        int int73 = dateTime71.getDayOfWeek();
        org.joda.time.DateTime.Property property74 = dateTime71.secondOfDay();
        org.joda.time.Chronology chronology75 = dateTime71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType62, chronology75);
        org.joda.time.DurationField durationField77 = chronology75.eras();
        boolean boolean78 = dateTimeFieldType32.isSupported(chronology75);
        org.joda.time.DurationField durationField79 = chronology75.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField77, durationField79, and durationField77", !(durationField77.compareTo(durationField79) == 0) || (Math.signum(durationField77.compareTo(durationField77)) == Math.signum(durationField79.compareTo(durationField77))));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(dateTimeZone4);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(23L, dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(dateTimeZone4);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        long long19 = duration18.getStandardMinutes();
        org.joda.time.Duration duration20 = duration18.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime28.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        mutableDateTime32.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime25.withZoneRetainFields(dateTimeZone37);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        boolean boolean42 = periodType40.isSupported(durationFieldType41);
        org.joda.time.DateTime dateTime44 = dateTime39.withFieldAdded(durationFieldType41, 2);
        org.joda.time.DateTime.Property property45 = dateTime39.minuteOfHour();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZone(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusDays(0);
        int int61 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Instant instant62 = dateTime55.toInstant();
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DateTime dateTime64 = instant62.toDateTimeISO();
        boolean boolean65 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant62);
        boolean boolean66 = dateTimeZone4.equals((java.lang.Object) boolean65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant62", (dateTime14.compareTo(instant62) == 0) == dateTime14.equals(instant62));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean7 = mutableDateTime5.isSupported(dateTimeFieldType6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.DateTime dateTime20 = instant16.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Instant instant12 = instant9.withDurationAdded((long) '4', 292278993);
        org.joda.time.Instant instant14 = instant12.withMillis(1645514116074L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Instant instant66 = dateTime62.toInstant();
        int int67 = dateTime62.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant66", (dateTime2.compareTo(instant66) == 0) == dateTime2.equals(instant66));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime46 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime47.getFieldType((int) (byte) 0);
        int int52 = instant34.get(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        java.lang.String str6 = chronology3.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration31.plus((long) 'u');
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration33, (-1));
        org.joda.time.Instant instant37 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration33, 1955);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Instant instant66 = dateTime62.toInstant();
        org.joda.time.MutableDateTime mutableDateTime67 = instant66.toMutableDateTimeISO();
        long long68 = mutableDateTime67.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant66", (dateTime2.compareTo(instant66) == 0) == dateTime2.equals(instant66));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.Instant instant21 = mutableDateTime20.toInstant();
        java.lang.String str22 = mutableDateTime20.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and instant21", (dateMidnight1.compareTo(instant21) == 0) == dateMidnight1.equals(instant21));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 1);
        mutablePeriod1.setWeeks(11);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod1.toMutablePeriod();
        int int7 = mutablePeriod6.getMillis();
        mutablePeriod6.clear();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 1, (long) 2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DurationField durationField17 = chronology15.eras();
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration11, chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.Period period8 = period6.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        org.joda.time.Period period11 = period8.plusMillis(1970);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 1, periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        boolean boolean17 = periodType14.isSupported(durationFieldType16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(86400000L, chronology19);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        boolean boolean24 = durationFieldType16.isSupported(chronology21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime27.getZone();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone32);
        org.joda.time.Chronology chronology35 = chronology21.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        long long43 = duration42.getStandardMinutes();
        org.joda.time.Duration duration44 = duration42.toDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        mutableDateTime52.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone55);
        mutableDateTime56.setDayOfYear(1);
        mutableDateTime56.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime56.getZone();
        mutableDateTime52.setZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime49.withZoneRetainFields(dateTimeZone61);
        int int65 = dateTimeZone61.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology66 = chronology35.withZone(dateTimeZone61);
        boolean boolean67 = period11.equals((java.lang.Object) chronology35);
        org.joda.time.DurationField durationField68 = chronology35.weekyears();
        org.joda.time.DurationField durationField69 = chronology35.years();
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.fromMillisOfDay((long) 60, chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField68 and durationField69", (durationField68.compareTo(durationField69) == 0) == durationField68.equals(durationField69));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime15.plusMinutes(49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime16", (dateTime2.compareTo(mutableDateTime16) == 0) == dateTime2.equals(mutableDateTime16));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.property(dateTimeFieldType20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setDayOfYear(1);
        mutableDateTime22.setMillisOfSecond((int) 'u');
        int int27 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundFloor();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime36.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = period47.isSupported(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period47);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime36.toDateTime(dateTimeZone52);
        long long57 = dateTimeZone52.convertLocalToUTC((long) 15, false);
        mutableDateTime30.setZoneRetainFields(dateTimeZone52);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime30.add(readableDuration60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and mutableDateTime30", (mutableDateTime20.compareTo(mutableDateTime30) == 0) == mutableDateTime20.equals(mutableDateTime30));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = localTime7.toDateTimeToday();
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMinutes(72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.eras();
        org.joda.time.Period period8 = new org.joda.time.Period(0L, 31097L, chronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField7", Math.signum(durationField6.compareTo(durationField7)) == -Math.signum(durationField7.compareTo(durationField6)));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.DateTime dateTime21 = instant16.toDateTimeISO();
        org.joda.time.LocalDate localDate22 = dateTime21.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType5);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTimeISO();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(86400000L, chronology14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) period32, chronology33);
        int[] intArray36 = chronology16.get((org.joda.time.ReadablePeriod) period32, (-1L));
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTime();
        boolean boolean39 = instant12.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime19", (instant12.compareTo(dateTime19) == 0) == instant12.equals(dateTime19));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.DurationField durationField52 = chronology47.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime51", (dateTime10.compareTo(dateTime51) == 0) == dateTime10.equals(dateTime51));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateMidnight9.toString(dateTimeFormatter19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and dateMidnight18", (dateMidnight9.compareTo(dateMidnight18) == 0) == dateMidnight9.equals(dateMidnight18));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime46 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime47.getFieldType((int) (byte) 0);
        int int52 = instant34.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = instant34.toDateTime();
        int int54 = dateTime53.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.Instant instant4 = instant0.plus(60000L);
        org.joda.time.MutableDateTime mutableDateTime5 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime6 = instant0.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime5", (instant0.compareTo(mutableDateTime5) == 0) == instant0.equals(mutableDateTime5));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        long long9 = duration8.getStandardMinutes();
        org.joda.time.Duration duration10 = duration8.toDuration();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setDayOfYear(1);
        mutableDateTime22.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime22.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime15.withZoneRetainFields(dateTimeZone27);
        boolean boolean30 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(86400000L, chronology33);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.DurationField durationField37 = chronology35.months();
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTime(chronology35);
        org.joda.time.DateTime dateTime40 = dateTime31.plusMonths(292278993);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime44.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 1, periodType66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) duration62, periodType66);
        org.joda.time.PeriodType periodType69 = periodType66.withWeeksRemoved();
        org.joda.time.PeriodType periodType70 = periodType66.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(periodType66);
        org.joda.time.PeriodType periodType72 = periodType66.withMonthsRemoved();
        org.joda.time.Period period73 = period41.withPeriodType(periodType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime38", (dateTime31.compareTo(dateTime38) == 0) == dateTime31.equals(dateTime38));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withChronology(chronology28);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = dateTime23.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight17.property(dateTimeFieldType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusYears(0);
        org.joda.time.Chronology chronology72 = yearMonthDay71.getChronology();
        boolean boolean73 = dateTimeFieldType33.isSupported(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime6.toDateTime(chronology72);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        boolean boolean80 = period78.isSupported(durationFieldType79);
        org.joda.time.DateTime dateTime82 = dateTime6.withFieldAdded(durationFieldType79, 20);
        java.lang.String str83 = durationFieldType79.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime74", (dateTime6.compareTo(dateTime74) == 0) == dateTime6.equals(dateTime74));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        int int4 = period3.getWeeks();
        org.joda.time.Period period6 = period3.minusHours((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime19 = property16.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime20 = property16.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property16.add(23L);
        org.joda.time.MutableDateTime mutableDateTime23 = property16.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property16.roundFloor();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withZone(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.minusDays(0);
        int int40 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Instant instant41 = dateTime34.toInstant();
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.Instant instant44 = instant41.withMillis((long) 7);
        org.joda.time.DateTime dateTime45 = instant41.toDateTime();
        int int46 = property16.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = dateTime49.toString(dateTimeFormatter50);
        org.joda.time.DateTime dateTime53 = dateTime49.withDayOfWeek(4);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(86400000L, chronology55);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        long long62 = chronology57.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = chronology57.minuteOfDay();
        org.joda.time.DateTime dateTime64 = dateTime53.toDateTime(chronology57);
        org.joda.time.DateTime.Property property65 = dateTime53.minuteOfDay();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant41, (org.joda.time.ReadableInstant) dateTime53, periodType66);
        org.joda.time.Period period69 = period3.withFields((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant41", (dateTime27.compareTo(instant41) == 0) == dateTime27.equals(instant41));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.DateTime.Property property62 = dateTime46.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration15 = duration13.plus((long) 'u');
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration15, (-1));
        org.joda.time.Duration duration18 = duration15.toDuration();
        org.joda.time.Duration duration19 = duration15.toDuration();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period21 = duration15.toPeriod(periodType20);
        org.joda.time.Instant instant22 = instant4.minus((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = instant16.toMutableDateTime();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = period25.normalizedStandard(periodType26);
        org.joda.time.Period period29 = period27.minusDays(0);
        org.joda.time.Duration duration30 = period27.toStandardDuration();
        org.joda.time.Duration duration31 = period27.toStandardDuration();
        java.lang.String str32 = duration31.toString();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period34 = duration31.toPeriod(periodType33);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime51", (dateTime10.compareTo(dateTime51) == 0) == dateTime10.equals(dateTime51));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        int int20 = dateTime19.getDayOfYear();
        int int21 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime24", (dateTime2.compareTo(dateTime24) == 0) == dateTime2.equals(dateTime24));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.Instant instant63 = instant34.plus((long) 41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime57", (dateTime46.compareTo(dateTime57) == 0) == dateTime46.equals(dateTime57));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant32 = instant26.withDurationAdded((long) 32769, (int) (short) -1);
        org.joda.time.Instant instant33 = instant26.toInstant();
        org.joda.time.Instant instant35 = instant33.minus((-38090L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant33", (dateTime12.compareTo(instant33) == 0) == dateTime12.equals(instant33));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType5);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTimeISO();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime9);
        mutablePeriod6.addMinutes(25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime9", (instant7.compareTo(mutableDateTime9) == 0) == instant7.equals(mutableDateTime9));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.MutableDateTime mutableDateTime23 = instant16.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        int int18 = mutableDateTime17.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime9.withDayOfMonth(22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant7 = instant0.withDurationAdded((long) 69, 16);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        long long16 = duration15.getStandardMinutes();
        org.joda.time.Duration duration17 = duration15.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        mutableDateTime29.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime29.getZone();
        mutableDateTime25.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime22.withZoneRetainFields(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone34);
        boolean boolean38 = dateTimeZone34.isFixed();
        java.lang.String str40 = dateTimeZone34.getShortName(1970L);
        org.joda.time.DateTime dateTime41 = instant7.toDateTime(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.Instant instant4 = instant0.plus(60000L);
        org.joda.time.MutableDateTime mutableDateTime5 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        mutableDateTime9.setDayOfYear(1);
        mutableDateTime9.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime9.getZone();
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) (short) 1);
        int int18 = dateTimeZone14.getOffsetFromLocal((long) 83459999);
        boolean boolean19 = duration7.equals((java.lang.Object) int18);
        org.joda.time.Instant instant20 = instant0.plus((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime5", (instant0.compareTo(mutableDateTime5) == 0) == instant0.equals(mutableDateTime5));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        boolean boolean12 = localTime6.isSupported(durationFieldType10);
        org.joda.time.LocalTime.Property property13 = localTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = localTime6.toDateTimeToday();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZone(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(0);
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant31 = dateTime24.toInstant();
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime33 = instant31.toMutableDateTimeISO();
        boolean boolean34 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant31", (dateTime17.compareTo(instant31) == 0) == dateTime17.equals(instant31));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime6.minuteOfDay();
        int int19 = property18.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateMidnight dateMidnight7 = dateTime4.toDateMidnight();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(86400000L, chronology9);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime15 = dateTime4.withChronology(chronology11);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 47, 41169600000L, chronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime15", (dateTime4.compareTo(dateTime15) == 0) == dateTime4.equals(dateTime15));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = dateMidnight17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.withFieldAdded(durationFieldType25, 8);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight17);
        int int29 = dateMidnight17.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant30, readableInstant31, periodType32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = period33.normalizedStandard(periodType34);
        org.joda.time.Period period37 = period35.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = period37.getFieldTypes();
        org.joda.time.Period period40 = period37.plusMillis(1970);
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setDayOfYear(1);
        mutableDateTime47.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime47.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds41, (org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight17.minus((org.joda.time.ReadablePeriod) seconds41);
        org.joda.time.Instant instant56 = dateMidnight55.toInstant();
        org.joda.time.Instant instant59 = instant56.withDurationAdded(15L, 2022);
        org.joda.time.Instant instant61 = instant56.plus((long) 152);
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight55 and instant56", (dateMidnight55.compareTo(instant56) == 0) == dateMidnight55.equals(instant56));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withMonthsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(10);
        boolean boolean6 = localDate2.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property7 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate8.minusDays(26209701);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        long long20 = duration19.getStandardMinutes();
        org.joda.time.Duration duration21 = duration19.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        mutableDateTime33.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime26.withZoneRetainFields(dateTimeZone38);
        int int42 = dateTimeZone38.getOffsetFromLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = localDate12.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = dateTime44.plusWeeks(8);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.Duration duration54 = interval52.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime46.withDurationAdded((org.joda.time.ReadableDuration) duration54, 2070);
        boolean boolean57 = duration1.isEqual((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Instant instant58 = org.joda.time.Instant.now();
        org.joda.time.Instant instant59 = instant58.toInstant();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) instant58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime43 and instant58", (mutableDateTime43.compareTo(instant58) == 0) == mutableDateTime43.equals(instant58));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        long long9 = duration8.getStandardMinutes();
        org.joda.time.Duration duration10 = duration8.toDuration();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setDayOfYear(1);
        mutableDateTime22.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime22.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime15.withZoneRetainFields(dateTimeZone27);
        boolean boolean30 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(86400000L, chronology33);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.DurationField durationField37 = chronology35.months();
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTime(chronology35);
        org.joda.time.DateTime dateTime40 = dateTime31.plusMonths(292278993);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology42 = dateMidnight0.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime38", (dateTime31.compareTo(dateTime38) == 0) == dateTime31.equals(dateTime38));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime46 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime47.getFieldType((int) (byte) 0);
        int int52 = instant34.get(dateTimeFieldType51);
        org.joda.time.Instant instant54 = instant34.withMillis((-472953600000L));
        org.joda.time.Instant instant55 = instant54.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.Instant instant22 = instant20.minus((long) (-44));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant20", (dateTime2.compareTo(instant20) == 0) == dateTime2.equals(instant20));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.DurationField durationField19 = chronology15.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight18", (dateMidnight1.compareTo(dateMidnight18) == 0) == dateMidnight1.equals(dateMidnight18));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minus(1010135478993L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.Duration duration17 = duration14.toDuration();
        org.joda.time.Duration duration19 = duration14.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        mutableDateTime21.setRounding(dateTimeField26);
        int int28 = mutableDateTime21.getYearOfEra();
        org.joda.time.Interval interval29 = duration14.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 1, periodType59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) duration55, periodType59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean66 = dateTime64.isSupported(dateTimeFieldType65);
        org.joda.time.DateMidnight dateMidnight67 = dateTime64.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plusMonths(292278993);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 1, periodType73);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.years();
        boolean boolean76 = periodType73.isSupported(durationFieldType75);
        org.joda.time.Period period77 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight71, periodType73);
        org.joda.time.PeriodType periodType78 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, (long) 3, periodType73);
        org.joda.time.Period period80 = new org.joda.time.Period((long) 19, 86400000L, periodType73);
        java.lang.String str81 = periodType73.toString();
        org.joda.time.Period period83 = org.joda.time.Period.millis(22);
        org.joda.time.PeriodType periodType84 = period83.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType86 = periodType84.getFieldType(6);
        boolean boolean87 = periodType73.isSupported(durationFieldType86);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(86400000L, chronology90);
        org.joda.time.Chronology chronology92 = localDateTime91.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight((long) 1, chronology92);
        org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight(chronology92);
        org.joda.time.Period period96 = duration14.toPeriod(periodType73, chronology92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight0 and dateMidnight95", (dateMidnight0.compareTo(dateMidnight95) == 0) == dateMidnight0.equals(dateMidnight95));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime33 = property30.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime34 = property30.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property30.add(23L);
        org.joda.time.MutableDateTime mutableDateTime37 = property30.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = property30.roundFloor();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withZone(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(0);
        int int54 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Instant instant55 = dateTime48.toInstant();
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.Instant instant58 = instant55.withMillis((long) 7);
        org.joda.time.DateTime dateTime59 = instant55.toDateTime();
        int int60 = property30.compareTo((org.joda.time.ReadableInstant) instant55);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.monthOfYear();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime66 = property63.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime67 = property63.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime68 = property63.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime68.getFieldType((int) (byte) 0);
        int int73 = instant55.get(dateTimeFieldType72);
        boolean boolean74 = instant16.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant55", (dateTime2.compareTo(instant55) == 0) == dateTime2.equals(instant55));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration48, 1439);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        int int65 = dateTime62.getMinuteOfHour();
        org.joda.time.Period period66 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration67 = duration48.toDuration();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone68);
        mutableDateTime69.setDayOfYear(1);
        org.joda.time.Instant instant72 = mutableDateTime69.toInstant();
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        long long74 = instant72.getMillis();
        org.joda.time.Period period75 = duration67.toPeriodTo((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Duration duration77 = duration67.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime69 and instant72", (mutableDateTime69.compareTo(instant72) == 0) == mutableDateTime69.equals(instant72));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        boolean boolean8 = dateTimeFormatter7.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime10.setRounding(dateTimeField15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfEvenCopy();
        int int24 = localDateTime23.size();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((-1));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0S");
        int int38 = property31.getMaximumShortTextLength(locale37);
        java.lang.String str39 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime23, 0, locale37);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale37);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getISO3Language();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) ' ');
        java.util.Locale locale49 = java.util.Locale.ITALY;
        int int50 = property46.getMaximumShortTextLength(locale49);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("PT0S");
        int int53 = property46.getMaximumShortTextLength(locale52);
        java.lang.String str54 = locale41.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) ' ');
        java.util.Locale locale63 = java.util.Locale.ITALY;
        int int64 = property60.getMaximumShortTextLength(locale63);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT0S");
        int int67 = property60.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale55.getDisplayVariant(locale66);
        java.lang.String str69 = locale52.getDisplayLanguage(locale55);
        java.lang.String str70 = locale37.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter7.withLocale(locale55);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Locale locale73 = locale72.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter7.withLocale(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 26367315);
        boolean boolean78 = instant4.equals((java.lang.Object) dateTimeFormatter7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration48, 1439);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        int int65 = dateTime62.getMinuteOfHour();
        org.joda.time.Period period66 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration67 = duration48.toDuration();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone68);
        mutableDateTime69.setDayOfYear(1);
        org.joda.time.Instant instant72 = mutableDateTime69.toInstant();
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        long long74 = instant72.getMillis();
        org.joda.time.Period period75 = duration67.toPeriodTo((org.joda.time.ReadableInstant) instant72);
        java.lang.String str76 = duration67.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime69 and instant72", (mutableDateTime69.compareTo(instant72) == 0) == mutableDateTime69.equals(instant72));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.weekyear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        long long28 = duration27.getStandardMinutes();
        org.joda.time.Duration duration29 = duration27.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        mutableDateTime41.setDayOfYear(1);
        mutableDateTime41.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime41.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime34.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillis(10L);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds(39);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.years();
        boolean boolean61 = period59.isSupported(durationFieldType60);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight54.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.property(dateTimeFieldType63);
        org.joda.time.DateMidnight dateMidnight65 = property64.withMinimumValue();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = duration72.plus((long) 'u');
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = dateTime81.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = dateTime83.withZone(dateTimeZone84);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period88 = new org.joda.time.Period((long) 1, periodType87);
        org.joda.time.PeriodType periodType89 = periodType87.withWeeksRemoved();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime85, periodType87);
        org.joda.time.Duration duration92 = duration74.plus(227210054399999999L);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight65.withDurationAdded((org.joda.time.ReadableDuration) duration74, 11);
        org.joda.time.DateTime dateTime95 = dateTime50.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTime dateTime96 = dateTime19.minus((org.joda.time.ReadableDuration) duration74);
        int int97 = dateTime96.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        java.lang.String str62 = instant34.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime57", (dateTime46.compareTo(dateTime57) == 0) == dateTime46.equals(dateTime57));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        long long30 = duration29.getStandardMinutes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = duration44.plus((long) 'u');
        org.joda.time.Period period47 = duration46.toPeriod();
        boolean boolean48 = duration37.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 1, periodType57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.years();
        boolean boolean60 = periodType57.isSupported(durationFieldType59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration55, periodType57);
        org.joda.time.Duration duration62 = duration37.minus((org.joda.time.ReadableDuration) duration55);
        boolean boolean63 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Instant instant65 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration55, 83460007);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(86400000L, chronology7);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.Period period5 = org.joda.time.Period.seconds(0);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = periodType6.isSupported(durationFieldType7);
        org.joda.time.Period period10 = period5.withField(durationFieldType7, 28);
        org.joda.time.DateTime dateTime12 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 0);
        org.joda.time.Period period13 = period10.normalizedStandard();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 5, (long) 6, periodType11, chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight8.withChronology(chronology20);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight8.withYear((-38090));
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays(593);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight8 and dateMidnight36", (dateMidnight8.compareTo(dateMidnight36) == 0) == dateMidnight8.equals(dateMidnight36));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setDayOfYear(1);
        mutableDateTime10.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime1.setZone(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime22.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        int int48 = dateTime45.getMillisOfSecond();
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        java.util.GregorianCalendar gregorianCalendar50 = dateTime45.toGregorianCalendar();
        org.joda.time.DateTime dateTime52 = dateTime45.minusMonths(6);
        int int53 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        long long61 = duration60.getStandardMinutes();
        org.joda.time.Duration duration62 = duration60.toDuration();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(dateTimeZone69);
        mutableDateTime70.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        mutableDateTime74.setDayOfYear(1);
        mutableDateTime74.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone79 = mutableDateTime74.getZone();
        mutableDateTime70.setZoneRetainFields(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = dateTime67.withZoneRetainFields(dateTimeZone79);
        boolean boolean82 = dateTimeZone79.isFixed();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(86400000L, chronology85);
        org.joda.time.Chronology chronology87 = localDateTime86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.clockhourOfDay();
        org.joda.time.DurationField durationField89 = chronology87.months();
        org.joda.time.DateTime dateTime90 = dateTime83.toDateTime(chronology87);
        org.joda.time.DateTime dateTime91 = dateTime45.toDateTime(chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and dateTime90", (mutableDateTime16.compareTo(dateTime90) == 0) == mutableDateTime16.equals(dateTime90));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate1.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withChronology(chronology29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean35 = dateTime24.isSupported(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight18.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay68 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.plusYears(0);
        org.joda.time.Chronology chronology73 = yearMonthDay72.getChronology();
        boolean boolean74 = dateTimeFieldType34.isSupported(chronology73);
        org.joda.time.DateTime dateTime75 = dateTime7.toDateTime(chronology73);
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay((long) 'x', chronology73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime75", (dateTime7.compareTo(dateTime75) == 0) == dateTime7.equals(dateTime75));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType5);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTimeISO();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime9", (instant7.compareTo(mutableDateTime9) == 0) == instant7.equals(mutableDateTime9));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.LocalDateTime localDateTime19 = dateTime17.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 5, (long) 6, periodType11, chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight8.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField37 = chronology20.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight8 and dateMidnight36", (dateMidnight8.compareTo(dateMidnight36) == 0) == dateMidnight8.equals(dateMidnight36));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.Instant instant13 = instant11.withMillis((long) (short) -1);
        boolean boolean14 = instant11.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime4.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        mutableDateTime4.setRounding(dateTimeField9);
        boolean boolean11 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeField dateTimeField12 = mutableDateTime4.getRoundingField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime.Property property31 = dateTime14.year();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight.Property property33 = dateMidnight7.yearOfCentury();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        long long41 = duration40.getStandardMinutes();
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) duration40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Duration duration58 = duration40.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) 31, 52);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean63 = duration58.equals((java.lang.Object) localTime62);
        org.joda.time.Instant instant65 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration58, 28);
        org.joda.time.Instant instant66 = org.joda.time.Instant.now();
        org.joda.time.Instant instant67 = instant66.toInstant();
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        org.joda.time.Instant instant70 = instant66.plus(60000L);
        org.joda.time.MutableDateTime mutableDateTime71 = instant66.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Interval interval74 = duration58.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType17);
        mutableDateTime12.add((org.joda.time.ReadablePeriod) period18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime24 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property20.add(23L);
        org.joda.time.MutableDateTime mutableDateTime27 = property20.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property20.roundFloor();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.withZone(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusDays(0);
        int int44 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Instant instant45 = dateTime38.toInstant();
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Instant instant48 = instant45.withMillis((long) 7);
        org.joda.time.DateTime dateTime49 = instant45.toDateTime();
        int int50 = property20.compareTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = property53.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime57 = property53.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime58 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDateTime58.getFieldType((int) (byte) 0);
        int int63 = instant45.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime10.property(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant45", (dateTime31.compareTo(instant45) == 0) == dateTime31.equals(instant45));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        boolean boolean15 = strSet3.equals((java.lang.Object) 14L);
        int int16 = strSet3.size();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.Instant instant21 = instant17.plus(60000L);
        long long22 = instant17.getMillis();
        org.joda.time.MutableDateTime mutableDateTime23 = instant17.toMutableDateTimeISO();
        boolean boolean24 = strSet3.remove((java.lang.Object) instant17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime23", (instant17.compareTo(mutableDateTime23) == 0) == instant17.equals(mutableDateTime23));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime24 = dateTime6.withCenturyOfEra(7);
        int int25 = dateTime24.getYearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTime dateTime32 = dateTime28.withDayOfWeek(4);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfWeek();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getISO3Language();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property48.addToCopy((int) ' ');
        java.util.Locale locale51 = java.util.Locale.ITALY;
        int int52 = property48.getMaximumShortTextLength(locale51);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("PT0S");
        int int55 = property48.getMaximumShortTextLength(locale54);
        java.lang.String str56 = locale43.getDisplayVariant(locale54);
        java.lang.String str57 = property42.getAsText(locale43);
        java.util.Calendar calendar58 = dateTime32.toCalendar(locale43);
        int int59 = dateTime32.getMonthOfYear();
        int int60 = dateTime32.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.DateTime dateTime63 = dateTime32.toDateTime(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withZoneRetainFields(dateTimeZone64);
        int int66 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime63", (dateTime32.compareTo(dateTime63) == 0) == dateTime32.equals(dateTime63));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime14 = property10.roundHalfEvenCopy();
        int int15 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusWeeks((-1));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime14, 0, locale28);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale28);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getISO3Language();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime39 = property37.addToCopy((int) ' ');
        java.util.Locale locale40 = java.util.Locale.ITALY;
        int int41 = property37.getMaximumShortTextLength(locale40);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("PT0S");
        int int44 = property37.getMaximumShortTextLength(locale43);
        java.lang.String str45 = locale32.getDisplayVariant(locale43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getISO3Language();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.DateTime dateTime53 = property51.addToCopy((int) ' ');
        java.util.Locale locale54 = java.util.Locale.ITALY;
        int int55 = property51.getMaximumShortTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("PT0S");
        int int58 = property51.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale46.getDisplayVariant(locale57);
        java.lang.String str60 = locale43.getDisplayLanguage(locale46);
        java.lang.String str61 = locale28.getDisplayLanguage(locale46);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale46);
        java.util.Set<java.lang.Character> charSet63 = locale46.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar62", (calendar31.compareTo(calendar62) == 0) == calendar31.equals(calendar62));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = period40.normalizedStandard(periodType41);
        org.joda.time.Period period44 = period42.minusDays(0);
        org.joda.time.Duration duration45 = period42.toStandardDuration();
        org.joda.time.Duration duration46 = period42.toStandardDuration();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withZone(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(0);
        int int62 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Instant instant63 = dateTime56.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.DateTime dateTime65 = instant63.toDateTimeISO();
        org.joda.time.Interval interval66 = duration46.toIntervalTo((org.joda.time.ReadableInstant) instant63);
        boolean boolean67 = duration26.isEqual((org.joda.time.ReadableDuration) duration46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant63", (dateTime11.compareTo(instant63) == 0) == dateTime11.equals(instant63));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.dayOfWeek();
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withCenturyOfEra(66);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DurationField durationField49 = chronology47.hours();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight10.toMutableDateTime(chronology47);
        org.joda.time.DurationField durationField51 = chronology47.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight10 and mutableDateTime50", (dateMidnight10.compareTo(mutableDateTime50) == 0) == dateMidnight10.equals(mutableDateTime50));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = period11.isSupported(durationFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight6.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus(10L);
        boolean boolean17 = instant1.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant1.toInstant();
        org.joda.time.Instant instant19 = instant1.toInstant();
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration27.plus((long) 'u');
        org.joda.time.Instant instant31 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) 'x');
        org.joda.time.Instant instant33 = instant19.withDurationAdded((org.joda.time.ReadableDuration) duration27, 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime23", (instant33.compareTo(dateTime23) == 0) == instant33.equals(dateTime23));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration37.plus((long) 'u');
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration39.toPeriod(chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        long long66 = duration65.getStandardMinutes();
        org.joda.time.Duration duration67 = duration65.toDuration();
        org.joda.time.Period period68 = new org.joda.time.Period((java.lang.Object) duration65);
        org.joda.time.Duration duration69 = duration49.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period71 = duration49.toPeriod(periodType70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.Duration duration85 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration88 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration85, (int) (byte) -1);
        boolean boolean89 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Duration duration90 = duration39.toDuration();
        int int91 = duration23.compareTo((org.joda.time.ReadableDuration) duration90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime10 = dateTime4.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = duration22.plus((long) 'u');
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration24, (-1));
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime29.plusMonths(999);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 1, periodType37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) dateTime35, periodType37);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = interval40.withChronology(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(0);
        org.joda.time.Interval interval54 = dateMidnight53.toInterval();
        org.joda.time.Interval interval55 = interval48.gap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Interval interval56 = interval42.gap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime.Property property80 = dateTime63.year();
        org.joda.time.Interval interval81 = interval48.withStart((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str82 = interval48.toString();
        org.joda.time.DateTime dateTime83 = interval48.getEnd();
        long long84 = interval48.getStartMillis();
        org.joda.time.Chronology chronology85 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.weekyear();
        org.joda.time.Chronology chronology87 = chronology85.withUTC();
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight0.withChronology(chronology87);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight0 and dateMidnight88", (dateMidnight0.compareTo(dateMidnight88) == 0) == dateMidnight0.equals(dateMidnight88));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.withYearOfEra(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        boolean boolean72 = dateTimeField70.isLeap((long) 1439);
        boolean boolean74 = dateTimeField70.isLeap(0L);
        long long76 = dateTimeField70.roundFloor((long) (byte) 1);
        boolean boolean77 = dateTimeField70.isSupported();
        long long79 = dateTimeField70.roundHalfEven(119L);
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.lang.String str82 = dateTimeField70.getAsShortText((long) (byte) 100, locale81);
        java.util.Calendar calendar83 = dateTime62.toCalendar(locale81);
        org.joda.time.Instant instant84 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (-1), chronology86);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) (-1), chronology89);
        org.joda.time.Duration duration91 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Duration duration93 = duration91.plus((long) 'u');
        org.joda.time.Instant instant95 = instant84.withDurationAdded((org.joda.time.ReadableDuration) duration91, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime96 = instant84.toMutableDateTimeISO();
        boolean boolean97 = dateTime62.isBefore((org.joda.time.ReadableInstant) mutableDateTime96);
        org.joda.time.DateTime dateTime99 = dateTime62.plusMillis(50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant84 and mutableDateTime96", (instant84.compareTo(mutableDateTime96) == 0) == instant84.equals(mutableDateTime96));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("23:59:59.999");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 1, periodType3, chronology4);
        org.joda.time.LocalTime localTime7 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod5, 292278993);
        org.joda.time.LocalTime localTime9 = localTime1.withMillisOfSecond(10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime29 = instant26.toMutableDateTimeISO();
        boolean boolean30 = localTime1.equals((java.lang.Object) instant26);
        org.joda.time.LocalTime.Property property31 = localTime1.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        int int62 = mutablePeriod61.getWeeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.Instant instant20 = instant16.plus(31536000000L);
        org.joda.time.Instant instant23 = instant16.withDurationAdded((long) 1070, 624);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = localTime7.toDateTimeToday();
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime4.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        mutableDateTime4.setRounding(dateTimeField9);
        boolean boolean11 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        int int12 = mutableDateTime4.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime51", (dateTime10.compareTo(dateTime51) == 0) == dateTime10.equals(dateTime51));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(86400000L, chronology11);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = chronology13.months();
        org.joda.time.DateTime dateTime16 = dateTime6.withChronology(chronology13);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 28, chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        boolean boolean31 = interval29.isAfter((-179973658L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.Chronology chronology62 = instant34.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime57", (dateTime46.compareTo(dateTime57) == 0) == dateTime46.equals(dateTime57));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        java.lang.String str18 = mutableDateTime17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DurationField durationField8 = chronology3.hours();
        java.lang.Object obj9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime11.setDayOfYear(1);
        mutableDateTime11.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime11.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(obj9, dateTimeZone16);
        int[] intArray21 = chronology3.get((org.joda.time.ReadablePartial) localDate19, 1641021621117L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime17", (dateTime5.compareTo(mutableDateTime17) == 0) == dateTime5.equals(mutableDateTime17));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.Interval interval13 = dateMidnight9.toInterval();
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(obj14, chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = period23.normalizedStandard(periodType24);
        org.joda.time.Period period27 = period25.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = period27.getFieldTypes();
        org.joda.time.Period period30 = period27.plusMillis(1970);
        org.joda.time.Seconds seconds31 = period30.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        mutableDateTime37.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime37.getZone();
        mutableDateTime33.setZoneRetainFields(dateTimeZone42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds31, (org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.Interval interval45 = interval19.withPeriodAfterStart((org.joda.time.ReadablePeriod) seconds31);
        boolean boolean46 = interval45.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = dateTime49.toString(dateTimeFormatter50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime.Property property70 = dateTime53.year();
        org.joda.time.DateTime dateTime71 = property70.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMillis(16);
        java.util.GregorianCalendar gregorianCalendar74 = dateTime71.toGregorianCalendar();
        boolean boolean75 = interval45.contains((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean76 = interval13.abuts((org.joda.time.ReadableInterval) interval45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight12", (dateMidnight1.compareTo(dateMidnight12) == 0) == dateMidnight1.equals(dateMidnight12));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths(999);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setDayOfYear(1);
        mutableDateTime40.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateMidnight38.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime21.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight27 and dateMidnight38", (dateMidnight27.compareTo(dateMidnight38) == 0) == dateMidnight27.equals(dateMidnight38));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.plusYears(2000);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        long long25 = duration24.getStandardMinutes();
        org.joda.time.Duration duration26 = duration24.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period34 = period32.plusMonths(11);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period66 = period34.plusMinutes(69);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) period66, (int) (byte) 1);
        org.joda.time.DateMidnight.Property property69 = dateMidnight1.yearOfEra();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight1.plusWeeks(41);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight1.plusMonths(60);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.dayOfYear();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableInstant77, readableInstant78, periodType79);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.years();
        boolean boolean82 = period80.isSupported(durationFieldType81);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight75.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.plus(10L);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(86400000L, chronology87);
        org.joda.time.Chronology chronology89 = localDateTime88.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.days();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight83.withChronology(chronology89);
        org.joda.time.DateTime dateTime93 = dateMidnight73.toDateTime(chronology89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight92", (dateMidnight1.compareTo(dateMidnight92) == 0) == dateMidnight1.equals(dateMidnight92));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant32 = instant26.withDurationAdded((long) 32769, (int) (short) -1);
        org.joda.time.Instant instant34 = instant32.plus((long) 37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths(999);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setDayOfYear(1);
        mutableDateTime40.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateMidnight38.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime21.toDateTime(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight27 and dateMidnight38", (dateMidnight27.compareTo(dateMidnight38) == 0) == dateMidnight27.equals(dateMidnight38));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setYear(1969);
        int int9 = mutableDateTime6.getDayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = dateTime22.isAfterNow();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime42 = dateTime22.minus((org.joda.time.ReadableDuration) duration40);
        long long43 = duration40.getMillis();
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant45, readableInstant46, periodType47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = period48.normalizedStandard(periodType49);
        org.joda.time.Period period52 = period50.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = period52.getFieldTypes();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.forFields(durationFieldTypeArray53);
        boolean boolean55 = duration40.equals((java.lang.Object) periodType54);
        org.joda.time.Period period56 = duration40.toPeriod();
        org.joda.time.Instant instant58 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusMonths(292278993);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        boolean boolean41 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Period period42 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight36, periodType38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.years();
        boolean boolean51 = period49.isSupported(durationFieldType50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight44.plus((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        mutableDateTime57.setDayOfYear(1);
        mutableDateTime57.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime57.getZone();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateMidnight55.toDateTime(dateTimeZone62);
        org.joda.time.Interval interval65 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTime64.getYearOfEra();
        org.joda.time.DateTime dateTime68 = dateTime64.minusWeeks(227);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight44 and dateMidnight55", (dateMidnight44.compareTo(dateMidnight55) == 0) == dateMidnight44.equals(dateMidnight55));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis(10L);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds(39);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfYear();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        boolean boolean40 = period38.isSupported(durationFieldType39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight33.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.property(dateTimeFieldType42);
        org.joda.time.DateMidnight dateMidnight44 = property43.withMinimumValue();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = duration51.plus((long) 'u');
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 1, periodType66);
        org.joda.time.PeriodType periodType68 = periodType66.withWeeksRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime64, periodType66);
        org.joda.time.Duration duration71 = duration53.plus(227210054399999999L);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight44.withDurationAdded((org.joda.time.ReadableDuration) duration53, 11);
        org.joda.time.DateTime dateTime74 = dateTime29.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = dateTime80.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = dateTime82.withZone(dateTimeZone83);
        org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property87 = dateMidnight86.dayOfYear();
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight86.minusDays(0);
        int int90 = dateTime84.compareTo((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology93 = localTime92.getChronology();
        org.joda.time.DateTime dateTime94 = dateTime84.toDateTime(chronology93);
        org.joda.time.DateTime dateTime95 = dateTime29.withChronology(chronology93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime94", (dateTime2.compareTo(dateTime94) == 0) == dateTime2.equals(dateTime94));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalTime localTime3 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfYear();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant41, readableInstant42, periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        boolean boolean46 = period44.isSupported(durationFieldType45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight39.plus((org.joda.time.ReadablePeriod) period44);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        mutableDateTime52.setDayOfYear(1);
        mutableDateTime52.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime52.getZone();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateMidnight50.toDateTime(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay35.toDateMidnight(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = localDate0.toDateTime(localTime3, dateTimeZone57);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) localTime3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight39 and dateMidnight50", (dateMidnight39.compareTo(dateMidnight50) == 0) == dateMidnight39.equals(dateMidnight50));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.DateTime dateTime23 = instant16.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.DateMidnight.Property property19 = dateMidnight9.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and dateMidnight18", (dateMidnight9.compareTo(dateMidnight18) == 0) == dateMidnight9.equals(dateMidnight18));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        java.lang.String str21 = property2.getAsShortText();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localTime23.toDateTimeToday(dateTimeZone25);
        int int30 = property2.compareTo((org.joda.time.ReadablePartial) localTime23);
        java.lang.String str31 = property2.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight7 and dateMidnight18", (dateMidnight7.compareTo(dateMidnight18) == 0) == dateMidnight7.equals(dateMidnight18));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 5, (long) 6, periodType11, chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight8.withChronology(chronology20);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight8.withYear(2005);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime55 = dateTime41.plusDays((-292275054));
        int int56 = dateTime41.getDayOfMonth();
        boolean boolean57 = dateMidnight38.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight8 and dateMidnight36", (dateMidnight8.compareTo(dateMidnight36) == 0) == dateMidnight8.equals(dateMidnight36));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int6 = date5.getYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int9 = timeOfDay8.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withMillisOfSecond((int) (short) 1);
        int int13 = timeOfDay8.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        mutableDateTime15.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, readableInstant19, periodType20);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = period21.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay8.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withMinuteOfHour(52);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.plusMillis(366);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime.Property property54 = dateTime37.year();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.Chronology chronology57 = null;
        boolean boolean58 = dateTimeFieldType56.isSupported(chronology57);
        boolean boolean59 = dateMidnight30.isSupported(dateTimeFieldType56);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay29.property(dateTimeFieldType56);
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        long long67 = dateTimeZone65.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = localTime63.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now(dateTimeZone65);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(23L, dateTimeZone65);
        org.joda.time.DateTime dateTime72 = yearMonthDay7.toDateTime(timeOfDay29, dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight30 and dateMidnight70", (dateMidnight30.compareTo(dateMidnight70) == 0) == dateMidnight30.equals(dateMidnight70));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.DateTime dateTime53 = dateTime10.minus(6L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = dateTime56.toString(dateTimeFormatter57);
        org.joda.time.DateTime dateTime60 = dateTime56.withDayOfWeek(4);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withZone(dateTimeZone68);
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfWeek();
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale71.getISO3Language();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.DateTime.Property property76 = dateTime75.yearOfEra();
        org.joda.time.DateTime dateTime78 = property76.addToCopy((int) ' ');
        java.util.Locale locale79 = java.util.Locale.ITALY;
        int int80 = property76.getMaximumShortTextLength(locale79);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("PT0S");
        int int83 = property76.getMaximumShortTextLength(locale82);
        java.lang.String str84 = locale71.getDisplayVariant(locale82);
        java.lang.String str85 = property70.getAsText(locale71);
        java.util.Calendar calendar86 = dateTime60.toCalendar(locale71);
        int int87 = dateTime60.getMonthOfYear();
        int int88 = dateTime60.getMinuteOfHour();
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardHours((long) 32769);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration90);
        org.joda.time.DateTime dateTime92 = dateTime53.minus((org.joda.time.ReadableDuration) duration90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime51", (dateTime10.compareTo(dateTime51) == 0) == dateTime10.equals(dateTime51));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime17 = dateTime9.minusYears(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone25);
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        boolean boolean36 = period34.isSupported(durationFieldType35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight29.plus((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime23.toDateTime(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) 15, false);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone39);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.DateTime dateTime50 = dateTime46.withFieldAdded(durationFieldType48, 2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime41", (dateTime2.compareTo(dateTime41) == 0) == dateTime2.equals(dateTime41));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.year();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(86400000L, chronology17);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight13.toMutableDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(584558105L, chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight2 and dateMidnight13", (dateMidnight2.compareTo(dateMidnight13) == 0) == dateMidnight2.equals(dateMidnight13));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology4.add(readablePeriod7, (long) 83459999, 99);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(15L, chronology4);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        org.joda.time.Instant instant17 = mutableDateTime14.toInstant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and instant17", (mutableDateTime14.compareTo(instant17) == 0) == mutableDateTime14.equals(instant17));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.TimeOfDay timeOfDay21 = property2.withMinimumValue();
        java.lang.String str22 = property2.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property2.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight7 and dateMidnight18", (dateMidnight7.compareTo(dateMidnight18) == 0) == dateMidnight7.equals(dateMidnight18));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(86400000L, chronology31);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology33.months();
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.plusMonths(292278993);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-59));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime36", (dateTime29.compareTo(dateTime36) == 0) == dateTime29.equals(dateTime36));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(35L);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfYear();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant5, readableInstant6, periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        boolean boolean10 = period8.isSupported(durationFieldType9);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.plus((org.joda.time.ReadablePeriod) period8);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateMidnight14.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        boolean boolean35 = periodType32.isSupported(durationFieldType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.PeriodType periodType37 = periodType32.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime23, periodType32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property50 = dateTime44.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = property50.withMaximumValue();
        boolean boolean52 = dateTime23.equals((java.lang.Object) property50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight14", (dateMidnight1.compareTo(dateMidnight14) == 0) == dateMidnight1.equals(dateMidnight14));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusMonths(292278993);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        boolean boolean41 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Period period42 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight36, periodType38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.years();
        boolean boolean51 = period49.isSupported(durationFieldType50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight44.plus((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        mutableDateTime57.setDayOfYear(1);
        mutableDateTime57.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime57.getZone();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateMidnight55.toDateTime(dateTimeZone62);
        org.joda.time.Interval interval65 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = interval65.containsNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight44 and dateMidnight55", (dateMidnight44.compareTo(dateMidnight55) == 0) == dateMidnight44.equals(dateMidnight55));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval11 = yearMonthDay9.toInterval();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusMonths(1069);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone26);
        java.lang.String str28 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime29 = timeOfDay15.toDateTimeToday(dateTimeZone26);
        int int30 = timeOfDay15.getHourOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withZone(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(0);
        int int46 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateTime dateTime48 = dateTime40.minusYears(0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.withZone(dateTimeZone56);
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfYear();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableInstant62, readableInstant63, periodType64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.years();
        boolean boolean67 = period65.isSupported(durationFieldType66);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.plus((org.joda.time.ReadablePeriod) period65);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = dateTime54.toDateTime(dateTimeZone70);
        long long75 = dateTimeZone70.convertLocalToUTC((long) 15, false);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) dateTime48, dateTimeZone70);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime78 = yearMonthDay13.toDateTime(timeOfDay15, dateTimeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime72", (dateTime2.compareTo(dateTime72) == 0) == dateTime2.equals(dateTime72));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration8, periodType10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 0, (long) 14, periodType10, chronology15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant20, readableInstant21, periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight18.plus((org.joda.time.ReadablePeriod) period23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withZoneRetainFields(dateTimeZone28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) chronology15, dateTimeZone28);
        org.joda.time.LocalTime localTime32 = localTime30.minusMinutes(0);
        org.joda.time.LocalTime localTime34 = localTime30.plusMinutes(1439);
        org.joda.time.LocalTime localTime36 = localTime34.plusMinutes(1);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight18 and dateMidnight29", (dateMidnight18.compareTo(dateMidnight29) == 0) == dateMidnight18.equals(dateMidnight29));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((java.lang.Object) 1033859999L);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration44 = period43.toStandardDuration();
        org.joda.time.Instant instant45 = instant42.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime mutableDateTime46 = instant42.toMutableDateTimeISO();
        boolean boolean47 = mutableInterval40.isBefore((org.joda.time.ReadableInstant) instant42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime46", (instant42.compareTo(mutableDateTime46) == 0) == instant42.equals(mutableDateTime46));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withZoneRetainFields(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(100000L, dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight2 and dateMidnight13", (dateMidnight2.compareTo(dateMidnight13) == 0) == dateMidnight2.equals(dateMidnight13));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        boolean boolean19 = period17.isSupported(durationFieldType18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight12.plus((org.joda.time.ReadablePeriod) period17);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setDayOfYear(1);
        mutableDateTime25.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime25.getZone();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateMidnight23.toDateTime(dateTimeZone30);
        mutableDateTime10.setZone(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and dateMidnight23", (dateMidnight12.compareTo(dateMidnight23) == 0) == dateMidnight12.equals(dateMidnight23));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.getID();
        int int11 = dateTimeZone8.getOffsetFromLocal(86400000L);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone8);
        java.lang.String str14 = dateTimeZone8.getShortName((long) 577);
        org.joda.time.DateMidnight dateMidnight15 = localDate2.toDateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight4 and dateMidnight15", (dateMidnight4.compareTo(dateMidnight15) == 0) == dateMidnight4.equals(dateMidnight15));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        mutableDateTime14.setMillisOfSecond((int) 'u');
        int int19 = mutableDateTime14.getWeekOfWeekyear();
        mutableDateTime14.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        mutableDateTime23.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime14.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths(999);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime52, periodType54);
        org.joda.time.Period period58 = period56.minusDays(12);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 1, periodType60);
        org.joda.time.Period period62 = period58.normalizedStandard(periodType60);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) mutableDateTime14, periodType60);
        org.joda.time.Period period65 = period63.minusMillis(227);
        org.joda.time.Minutes minutes66 = period63.toStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight12", (dateMidnight1.compareTo(dateMidnight12) == 0) == dateMidnight1.equals(dateMidnight12));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(10);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays(0);
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        boolean boolean20 = dateMidnight18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withWeekyear(4);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType27.isSupported(durationFieldType29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(86400000L, chronology32);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.millisOfSecond();
        boolean boolean37 = durationFieldType29.isSupported(chronology34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setDayOfYear(1);
        mutableDateTime40.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone45);
        org.joda.time.Chronology chronology48 = chronology34.withZone(dateTimeZone45);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 5, (long) 6, periodType25, chronology34);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight22.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight11.toMutableDateTime(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight22 and dateMidnight50", (dateMidnight22.compareTo(dateMidnight50) == 0) == dateMidnight22.equals(dateMidnight50));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours(14);
        org.joda.time.DateTime dateTime3 = timeOfDay0.toDateTimeToday();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.PeriodType periodType6 = period4.getPeriodType();
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        int int17 = localTime11.get(dateTimeFieldType15);
        org.joda.time.LocalTime.Property property18 = localTime9.property(dateTimeFieldType15);
        int int19 = property18.getMaximumValueOverall();
        org.joda.time.LocalTime localTime20 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime21 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.eras();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime8, chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateMidnight23", (dateTime8.compareTo(dateMidnight23) == 0) == dateTime8.equals(dateMidnight23));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj1, chronology5);
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.year();
        org.joda.time.DurationField durationField10 = chronology5.eras();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((-1641008284072000L), chronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField10", Math.signum(durationField7.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField7)));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths(999);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setDayOfYear(1);
        mutableDateTime40.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateMidnight38.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime21.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = dateTime48.minusYears(26342);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight27 and dateMidnight38", (dateMidnight27.compareTo(dateMidnight38) == 0) == dateMidnight27.equals(dateMidnight38));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = duration42.plus((long) 'u');
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration44, (-1));
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime49.plusMonths(999);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 1, periodType57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime55, periodType57);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfYear();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.years();
        boolean boolean68 = period66.isSupported(durationFieldType67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight61.plus((org.joda.time.ReadablePeriod) period66);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight69.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        mutableDateTime74.setDayOfYear(1);
        mutableDateTime74.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone79 = mutableDateTime74.getZone();
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = dateMidnight72.toDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime55.toDateTime(dateTimeZone79);
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay(dateTimeZone79);
        org.joda.time.DateTime dateTime84 = yearMonthDay33.toDateTimeAtMidnight(dateTimeZone79);
        org.joda.time.format.DateTimePrinter dateTimePrinter85 = null;
        org.joda.time.format.DateTimeParser dateTimeParser86 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter85, dateTimeParser86);
        boolean boolean88 = dateTimeFormatter87.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter87.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser90 = dateTimeFormatter89.getParser();
        java.lang.Integer int91 = dateTimeFormatter89.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone92 = dateTimeFormatter89.getZone();
        boolean boolean93 = dateTimeZone92.isFixed();
        org.joda.time.DateTime dateTime94 = dateTime84.withZoneRetainFields(dateTimeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight61 and dateMidnight72", (dateMidnight61.compareTo(dateMidnight72) == 0) == dateMidnight61.equals(dateMidnight72));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight12.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setDayOfYear(1);
        mutableDateTime22.setMillisOfSecond((int) 'u');
        int int27 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundFloor();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime36.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = period47.isSupported(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period47);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime36.toDateTime(dateTimeZone52);
        long long57 = dateTimeZone52.convertLocalToUTC((long) 15, false);
        mutableDateTime30.setZoneRetainFields(dateTimeZone52);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        mutableDateTime20.add(69509754028800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight12", (dateMidnight1.compareTo(dateMidnight12) == 0) == dateMidnight1.equals(dateMidnight12));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.Period period13 = period11.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.plusMillis(1970);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        mutableDateTime23.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds17, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Interval interval31 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) seconds17);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZone(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean48 = interval31.contains((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant49 = dateMidnight46.toInstant();
        int int50 = dateMidnight46.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight46 and instant49", (dateMidnight46.compareTo(instant49) == 0) == dateMidnight46.equals(instant49));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        org.joda.time.Duration duration39 = duration36.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        boolean boolean41 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property15.roundCeilingCopy();
        boolean boolean21 = dateTimeZone11.isLocalDateTimeGap(localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours((int) (short) -1);
        int int26 = localDateTime25.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight12", (dateMidnight1.compareTo(dateMidnight12) == 0) == dateMidnight1.equals(dateMidnight12));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) 39);
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        int int18 = property15.getMaximumTextLength(locale17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight20.plus((org.joda.time.ReadablePeriod) period25);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.year();
        int int33 = property15.compareTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.TimeOfDay timeOfDay34 = property15.getTimeOfDay();
        int int35 = localTime12.compareTo((org.joda.time.ReadablePartial) timeOfDay34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight20 and dateMidnight31", (dateMidnight20.compareTo(dateMidnight31) == 0) == dateMidnight20.equals(dateMidnight31));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = period16.isSupported(durationFieldType17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.plus((org.joda.time.ReadablePeriod) period16);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime5.toDateTime(dateTimeZone21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime23", (dateTime2.compareTo(dateTime23) == 0) == dateTime2.equals(dateTime23));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone11);
        long long16 = dateTimeZone11.convertUTCToLocal(41904000043L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight12", (dateMidnight1.compareTo(dateMidnight12) == 0) == dateMidnight1.equals(dateMidnight12));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.Instant instant13 = instant11.withMillis((long) (short) -1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant11.plus(readableDuration14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.TimeOfDay timeOfDay21 = property2.getTimeOfDay();
        java.lang.String str22 = property2.getAsText();
        java.util.Locale locale25 = new java.util.Locale("Property[minuteOfHour]", "2052-03-31");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet27 = locale25.getExtensionKeys();
        java.lang.String str28 = property2.getAsText(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight7 and dateMidnight18", (dateMidnight7.compareTo(dateMidnight18) == 0) == dateMidnight7.equals(dateMidnight18));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.LocalDateTime localDateTime19 = dateTime17.toLocalDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZone(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTime dateTime36 = dateMidnight34.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusDays((int) '#');
        int int40 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        java.util.TimeZone timeZone37 = gregorianCalendar30.getTimeZone();
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder41 = builder38.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder46 = builder41.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder50 = builder41.setDate(51, 14, 973);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.lang.String str52 = timeZone51.getID();
        int int54 = timeZone51.getOffset((long) ' ');
        int int55 = timeZone51.getRawOffset();
        java.util.Calendar.Builder builder56 = builder41.setTimeZone(timeZone51);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone51);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone51);
        int int59 = timeZone51.getRawOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        boolean boolean64 = dateTimeField62.isLeap((long) 1439);
        long long66 = dateTimeField62.roundFloor(0L);
        boolean boolean68 = dateTimeField62.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        mutableDateTime71.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        mutableDateTime71.setRounding(dateTimeField76);
        int int79 = dateTimeField76.getLeapAmount((long) (byte) 10);
        java.lang.String str81 = dateTimeField76.getAsText(0L);
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.lang.String str84 = dateTimeField76.getAsShortText(1969, locale83);
        java.lang.String str85 = dateTimeField62.getAsText((int) (byte) 100, locale83);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone51, locale83);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone37, locale83);
        calendar87.setMinimalDaysInFirstWeek(26383);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar86", (calendar57.compareTo(calendar86) == 0) == calendar57.equals(calendar86));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 1033859999L);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration3 = period2.toStandardDuration();
        org.joda.time.Instant instant4 = instant1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration26.minus((-31536000001L));
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean60 = dateTime56.isAfterNow();
        org.joda.time.DateTime dateTime62 = dateTime56.withCenturyOfEra(100);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration66 = duration30.plus((long) 69);
        org.joda.time.Instant instant67 = instant1.minus((org.joda.time.ReadableDuration) duration30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.TimeOfDay timeOfDay21 = property2.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusSeconds(52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight7 and dateMidnight18", (dateMidnight7.compareTo(dateMidnight18) == 0) == dateMidnight7.equals(dateMidnight18));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(2392146000L, chronology4);
        mutablePeriod9.setHours((-1));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration18.plus((long) 'u');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration20.toPeriod(chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        long long47 = duration46.getStandardMinutes();
        org.joda.time.Duration duration48 = duration46.toDuration();
        org.joda.time.Period period49 = new org.joda.time.Period((java.lang.Object) duration46);
        org.joda.time.Duration duration50 = duration30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period52 = duration30.toPeriod(periodType51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) -1);
        boolean boolean70 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration71 = duration20.toDuration();
        java.lang.String str72 = duration71.toString();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone74);
        mutableDateTime75.setDayOfYear(1);
        org.joda.time.Instant instant78 = mutableDateTime75.toInstant();
        org.joda.time.MutableDateTime mutableDateTime79 = instant78.toMutableDateTime();
        org.joda.time.Chronology chronology80 = instant78.getChronology();
        org.joda.time.Period period81 = duration71.toPeriod(chronology80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime75 and instant78", (mutableDateTime75.compareTo(instant78) == 0) == mutableDateTime75.equals(instant78));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusMonths(292278993);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        boolean boolean41 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Period period42 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight36, periodType38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.years();
        boolean boolean51 = period49.isSupported(durationFieldType50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight44.plus((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        mutableDateTime57.setDayOfYear(1);
        mutableDateTime57.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime57.getZone();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateMidnight55.toDateTime(dateTimeZone62);
        org.joda.time.Interval interval65 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property66 = dateTime64.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.DateTime dateTime70 = dateTime64.withFieldAdded(durationFieldType67, 26440631);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight44 and dateMidnight55", (dateMidnight44.compareTo(dateMidnight55) == 0) == dateMidnight44.equals(dateMidnight55));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        mutablePeriod3.addYears((int) (short) -1);
        mutablePeriod3.addSeconds(4);
        mutablePeriod3.addYears(59);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        int int14 = localTime12.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime12.withPeriodAdded(readablePeriod15, 83459999);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        int int26 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.year();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundFloor();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withZone(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfYear();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableInstant43, readableInstant44, periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        boolean boolean48 = period46.isSupported(durationFieldType47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight41.plus((org.joda.time.ReadablePeriod) period46);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime35.toDateTime(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC((long) 15, false);
        mutableDateTime29.setZoneRetainFields(dateTimeZone51);
        org.joda.time.Chronology chronology58 = chronology18.withZone(dateTimeZone51);
        mutablePeriod3.add(0L, chronology58);
        int int60 = mutablePeriod3.getDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime53", (dateTime32.compareTo(dateTime53) == 0) == dateTime32.equals(dateTime53));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime.Property property31 = dateTime14.year();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight.Property property33 = dateMidnight7.yearOfCentury();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        long long41 = duration40.getStandardMinutes();
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) duration40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Duration duration58 = duration40.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) 31, 52);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean63 = duration58.equals((java.lang.Object) localTime62);
        org.joda.time.Instant instant65 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration58, 28);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime4.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        mutableDateTime4.setRounding(dateTimeField9);
        boolean boolean11 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addWeekyears(2622239);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime8.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime18 = dateTime8.withSecondOfMinute((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime16", (dateTime2.compareTo(mutableDateTime16) == 0) == dateTime2.equals(mutableDateTime16));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(100982246400000L);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = dateTime9.get(dateTimeFieldType12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime16.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime(dateTimeZone19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        int int22 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Instant instant25 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration6, 292278993);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.centuryOfEra();
        int int12 = mutableDateTime10.getDayOfWeek();
        mutableDateTime10.addMonths(48);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZone(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(0);
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant31 = dateTime24.toInstant();
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DateTime dateTime33 = instant31.toDateTimeISO();
        org.joda.time.Instant instant35 = instant31.plus(31536000000L);
        org.joda.time.Instant instant38 = instant31.withDurationAdded((long) 1070, 624);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) instant38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant31", (dateTime17.compareTo(instant31) == 0) == dateTime17.equals(instant31));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        long long13 = instant11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime12", (instant11.compareTo(mutableDateTime12) == 0) == instant11.equals(mutableDateTime12));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod26.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 0);
        mutablePeriod26.setPeriod((long) ' ', 220898664000L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (-292275054), dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.withZone(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.minusDays(0);
        int int53 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Instant instant54 = dateTime47.toInstant();
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DateTime dateTime56 = instant54.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime57 = instant54.toMutableDateTimeISO();
        org.joda.time.Chronology chronology58 = instant54.getChronology();
        org.joda.time.DateTime dateTime59 = instant54.toDateTimeISO();
        mutablePeriod26.setPeriod((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant54", (dateTime2.compareTo(instant54) == 0) == dateTime2.equals(instant54));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        org.joda.time.Period period17 = period15.minusDays(0);
        org.joda.time.Duration duration18 = period15.toStandardDuration();
        org.joda.time.Duration duration19 = period15.toStandardDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZone(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Instant instant36 = dateTime29.toInstant();
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DateTime dateTime38 = instant36.toDateTimeISO();
        org.joda.time.Interval interval39 = duration19.toIntervalTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant42 = instant36.withDurationAdded((long) 32769, (int) (short) -1);
        org.joda.time.Instant instant43 = instant36.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant43", (dateTime22.compareTo(instant43) == 0) == dateTime22.equals(instant43));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        java.lang.Object obj4 = mutablePeriod1.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration18);
        int int20 = period19.getYears();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period19);
        mutablePeriod1.addYears(6);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.plusYears(10);
        boolean boolean28 = localDate24.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property29 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate34 = localDate30.minusDays(26209701);
        org.joda.time.DateTime dateTime35 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate37 = localDate30.minusDays(81);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(44);
        org.joda.time.Interval interval40 = localDate39.toInterval();
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        boolean boolean48 = dateMidnight46.isBefore((-1L));
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime51 = instant50.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        mutableDateTime53.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        mutableDateTime53.setRounding(dateTimeField58);
        boolean boolean60 = mutableDateTime51.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutablePeriod1.addWeeks(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime51", (instant50.compareTo(mutableDateTime51) == 0) == instant50.equals(mutableDateTime51));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType5);
        mutablePeriod6.setMinutes(20);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) 292278993);
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        org.joda.time.Instant instant23 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime24 = instant12.toMutableDateTimeISO();
        org.joda.time.Period period25 = duration10.toPeriodTo((org.joda.time.ReadableInstant) instant12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime24", (instant12.compareTo(mutableDateTime24) == 0) == instant12.equals(mutableDateTime24));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = period11.isSupported(durationFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight6.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus(10L);
        boolean boolean17 = instant1.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant1.toInstant();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        long long26 = duration25.getStandardMinutes();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime52.toString(dateTimeFormatter53);
        int int55 = dateTime52.getMillisOfSecond();
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean57 = duration25.equals((java.lang.Object) period56);
        org.joda.time.Hours hours58 = duration25.toStandardHours();
        org.joda.time.Instant instant59 = instant1.minus((org.joda.time.ReadableDuration) duration25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant59 and dateTime21", (instant59.compareTo(dateTime21) == 0) == instant59.equals(dateTime21));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.weekyear();
        int int21 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(99);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = property4.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime12 = property4.setCopy(4);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean17 = dateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusMonths(292278993);
        long long23 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setDayOfYear(1);
        org.joda.time.Instant instant28 = mutableDateTime25.toInstant();
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight22, chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and instant28", (mutableDateTime25.compareTo(instant28) == 0) == mutableDateTime25.equals(instant28));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 1033859999L);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration3 = period2.toStandardDuration();
        org.joda.time.Instant instant4 = instant1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology6 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Duration duration9 = duration7.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime14.withZoneRetainFields(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(86400000L, chronology32);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.months();
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTime(chronology34);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(220924800000L, chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime37", (dateTime30.compareTo(dateTime37) == 0) == dateTime30.equals(dateTime37));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.Instant instant24 = instant22.minus((long) 72019);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        int int5 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        int int8 = dateTime7.getMillisOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withHourOfDay(3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZone(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays(0);
        int int26 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant27 = dateTime20.toInstant();
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DateTime dateTime29 = instant27.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTimeISO();
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime7.withChronology(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant27", (dateTime2.compareTo(instant27) == 0) == dateTime2.equals(instant27));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType28.isSupported(durationFieldType29);
        org.joda.time.DateTime dateTime32 = dateTime27.withFieldAdded(durationFieldType29, 2);
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withZone(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(0);
        int int49 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Instant instant50 = dateTime43.toInstant();
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DateTime dateTime52 = instant50.toDateTimeISO();
        boolean boolean53 = dateTime27.isAfter((org.joda.time.ReadableInstant) instant50);
        org.joda.time.DateTime.Property property54 = dateTime27.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant50", (dateTime2.compareTo(instant50) == 0) == dateTime2.equals(instant50));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withChronology(chronology29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((long) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        boolean boolean47 = periodType44.isSupported(durationFieldType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration42, periodType44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 0, (long) 14, periodType44, chronology49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = duration60.plus((long) 'u');
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration62, (-1));
        org.joda.time.Interval interval65 = interval51.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Instant instant66 = instant16.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Period period67 = duration62.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Instant instant66 = dateTime62.toInstant();
        org.joda.time.MutableDateTime mutableDateTime67 = instant66.toMutableDateTimeISO();
        mutableDateTime67.addMonths(19045);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant66", (dateTime2.compareTo(instant66) == 0) == dateTime2.equals(instant66));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 1, periodType4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        boolean boolean7 = periodType4.isSupported(durationFieldType6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(86400000L, chronology9);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        boolean boolean14 = durationFieldType6.isSupported(chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        mutableDateTime17.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime17.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone22);
        org.joda.time.Chronology chronology25 = chronology11.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.monthOfYear();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 1, periodType28);
        org.joda.time.Period period30 = period29.negated();
        org.joda.time.Days days31 = period30.toStandardDays();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) days31, (long) (-19045), (int) 'a');
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(60000L, 13148730000L, chronology25);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(86400000L, chronology38);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(384309744566400001L, chronology40);
        mutableDateTime43.addSeconds((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        mutableDateTime43.setZoneRetainFields(dateTimeZone47);
        org.joda.time.Chronology chronology50 = chronology25.withZone(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 32769, chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and dateTime48", (mutableDateTime23.compareTo(dateTime48) == 0) == mutableDateTime23.equals(dateTime48));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1969");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.plus((long) 86399984);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration11, periodType13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration31.plus((long) 'u');
        org.joda.time.Period period34 = duration33.toPeriod();
        boolean boolean35 = duration24.isEqual((org.joda.time.ReadableDuration) duration33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        boolean boolean38 = periodType36.isSupported(durationFieldType37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration24, periodType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withZone(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusDays(0);
        int int55 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTime dateTime56 = dateMidnight54.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 1, periodType81);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration77, periodType81);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.time();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableDuration) duration77, periodType84);
        org.joda.time.Duration duration88 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        int int89 = duration77.compareTo((org.joda.time.ReadableDuration) duration88);
        boolean boolean90 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Instant instant92 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration77, 130);
        org.joda.time.TimeOfDay timeOfDay93 = new org.joda.time.TimeOfDay((java.lang.Object) instant1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant1", (mutableDateTime2.compareTo(instant1) == 0) == mutableDateTime2.equals(instant1));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        java.util.TimeZone timeZone37 = gregorianCalendar30.getTimeZone();
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder41 = builder38.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder46 = builder41.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder50 = builder41.setDate(51, 14, 973);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.lang.String str52 = timeZone51.getID();
        int int54 = timeZone51.getOffset((long) ' ');
        int int55 = timeZone51.getRawOffset();
        java.util.Calendar.Builder builder56 = builder41.setTimeZone(timeZone51);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone51);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone51);
        int int59 = timeZone51.getRawOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        boolean boolean64 = dateTimeField62.isLeap((long) 1439);
        long long66 = dateTimeField62.roundFloor(0L);
        boolean boolean68 = dateTimeField62.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        mutableDateTime71.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        mutableDateTime71.setRounding(dateTimeField76);
        int int79 = dateTimeField76.getLeapAmount((long) (byte) 10);
        java.lang.String str81 = dateTimeField76.getAsText(0L);
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.lang.String str84 = dateTimeField76.getAsShortText(1969, locale83);
        java.lang.String str85 = dateTimeField62.getAsText((int) (byte) 100, locale83);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone51, locale83);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone37, locale83);
        timeZone37.setRawOffset(365);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar87", (calendar57.compareTo(calendar87) == 0) == calendar57.equals(calendar87));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight30 = property26.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusDays((-1));
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withDayOfYear(12);
        org.joda.time.DateTime dateTime35 = dateMidnight30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateMidnight30.toInstant();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight30.withDurationAdded((long) 60, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant36", (dateTime35.compareTo(instant36) == 0) == dateTime35.equals(instant36));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.DateTime dateTime21 = instant16.toDateTimeISO();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withChronology(chronology32);
        int int34 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean38 = dateTime27.isSupported(dateTimeFieldType37);
        int int39 = dateTime27.getYearOfEra();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.DateTime dateTime43 = dateTime27.minus((org.joda.time.ReadablePeriod) period42);
        long long44 = dateTime43.getMillis();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.year();
        org.joda.time.DurationField durationField9 = chronology4.eras();
        org.joda.time.DurationField durationField10 = chronology4.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField9", Math.signum(durationField6.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField6)));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 5, (long) 6, periodType11, chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight8.withChronology(chronology20);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight8.withYear((-38090));
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight8 and dateMidnight36", (dateMidnight8.compareTo(dateMidnight36) == 0) == dateMidnight8.equals(dateMidnight36));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 1033859999L);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration3 = period2.toStandardDuration();
        org.joda.time.Instant instant4 = instant1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        org.joda.time.Instant instant9 = instant6.withMillis(0L);
        org.joda.time.Period period10 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) instant9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight18", (dateMidnight1.compareTo(dateMidnight18) == 0) == dateMidnight1.equals(dateMidnight18));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.plusMillis(1970);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        int int64 = dateTimeZone60.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology65 = chronology34.withZone(dateTimeZone60);
        boolean boolean66 = period10.equals((java.lang.Object) chronology34);
        org.joda.time.DurationField durationField67 = chronology34.weekyears();
        org.joda.time.DurationField durationField68 = chronology34.years();
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField67 and durationField68", (durationField67.compareTo(durationField68) == 0) == durationField67.equals(durationField68));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight1 and dateMidnight18", (dateMidnight1.compareTo(dateMidnight18) == 0) == dateMidnight1.equals(dateMidnight18));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        java.lang.Object obj4 = mutablePeriod1.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration18);
        int int20 = period19.getYears();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period19);
        mutablePeriod1.addYears(6);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.plusYears(10);
        boolean boolean28 = localDate24.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property29 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate34 = localDate30.minusDays(26209701);
        org.joda.time.DateTime dateTime35 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate37 = localDate30.minusDays(81);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(44);
        org.joda.time.Interval interval40 = localDate39.toInterval();
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        boolean boolean48 = dateMidnight46.isBefore((-1L));
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime51 = instant50.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        mutableDateTime53.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        mutableDateTime53.setRounding(dateTimeField58);
        boolean boolean60 = mutableDateTime51.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = duration68.plus((long) 'u');
        org.joda.time.Period period71 = duration70.toPeriod();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.withZone(dateTimeZone80);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period84 = new org.joda.time.Period((long) 1, periodType83);
        org.joda.time.PeriodType periodType85 = periodType83.withWeeksRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime81, periodType83);
        org.joda.time.Period period87 = period86.toPeriod();
        org.joda.time.Weeks weeks88 = period87.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType89 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str90 = durationFieldType89.toString();
        boolean boolean91 = weeks88.isSupported(durationFieldType89);
        java.lang.String str92 = durationFieldType89.getName();
        boolean boolean93 = mutablePeriod1.isSupported(durationFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime51", (instant50.compareTo(mutableDateTime51) == 0) == instant50.equals(mutableDateTime51));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Duration duration9 = duration7.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = duration7.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, readableInstant22, periodType23);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime30 = property26.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime32 = property26.add(23L);
        org.joda.time.MutableDateTime mutableDateTime33 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime34 = property26.roundFloor();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays(0);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant51 = dateTime44.toInstant();
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.Instant instant54 = instant51.withMillis((long) 7);
        org.joda.time.DateTime dateTime55 = instant51.toDateTime();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        org.joda.time.DateTime dateTime63 = dateTime59.withDayOfWeek(4);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(86400000L, chronology65);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        long long72 = chronology67.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField73 = chronology67.minuteOfDay();
        org.joda.time.DateTime dateTime74 = dateTime63.toDateTime(chronology67);
        org.joda.time.DateTime.Property property75 = dateTime63.minuteOfDay();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType77 = periodType76.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant51, (org.joda.time.ReadableInstant) dateTime63, periodType76);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration7, periodType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant51", (dateTime3.compareTo(instant51) == 0) == dateTime3.equals(instant51));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime8.toMutableDateTime(chronology12);
        org.joda.time.DateTime.Property property17 = dateTime8.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime16", (dateTime2.compareTo(mutableDateTime16) == 0) == dateTime2.equals(mutableDateTime16));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        long long21 = instant20.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant20", (dateTime2.compareTo(instant20) == 0) == dateTime2.equals(instant20));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22");
        timeZone1.setRawOffset(5);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        boolean boolean8 = dateTimeFormatter7.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime10.setRounding(dateTimeField15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfEvenCopy();
        int int24 = localDateTime23.size();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((-1));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0S");
        int int38 = property31.getMaximumShortTextLength(locale37);
        java.lang.String str39 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime23, 0, locale37);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale37);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getISO3Language();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) ' ');
        java.util.Locale locale49 = java.util.Locale.ITALY;
        int int50 = property46.getMaximumShortTextLength(locale49);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("PT0S");
        int int53 = property46.getMaximumShortTextLength(locale52);
        java.lang.String str54 = locale41.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) ' ');
        java.util.Locale locale63 = java.util.Locale.ITALY;
        int int64 = property60.getMaximumShortTextLength(locale63);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT0S");
        int int67 = property60.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale55.getDisplayVariant(locale66);
        java.lang.String str69 = locale52.getDisplayLanguage(locale55);
        java.lang.String str70 = locale37.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter7.withLocale(locale55);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Locale locale73 = locale72.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter7.withLocale(locale72);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = locale72.getDisplayVariant(locale76);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone1, locale72);
        int int80 = timeZone1.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) '#');
        long long5 = instant4.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZone(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusDays(0);
        int int21 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateTime dateTime23 = dateTime15.minusYears(0);
        int int24 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime.Property property25 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime26 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration37 = duration35.plus((long) 'u');
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration37, (-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = dateTime52.isAfterNow();
        org.joda.time.DateTime dateTime58 = dateTime52.withCenturyOfEra(100);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration37, 32);
        org.joda.time.Instant instant63 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration37, 1969);
        org.joda.time.Chronology chronology64 = instant4.getChronology();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) 26368, chronology64);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(27425238L, (long) 1070, chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight65", (dateMidnight17.compareTo(dateMidnight65) == 0) == dateMidnight17.equals(dateMidnight65));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant32 = instant26.withDurationAdded((long) 32769, (int) (short) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant7 = instant0.withDurationAdded((long) 69, 16);
        org.joda.time.MutableDateTime mutableDateTime8 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        java.lang.String str14 = dateTimeFieldType12.getName();
        boolean boolean15 = mutableDateTime8.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean23 = dateTime19.isAfterNow();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateTime19.minus((org.joda.time.ReadableDuration) duration37);
        long long40 = duration37.getMillis();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Period period57 = duration56.toPeriod();
        boolean boolean58 = duration47.isEqual((org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration61 = duration56.plus(100L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withChronology(chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = dateTime73.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.withZone(dateTimeZone76);
        boolean boolean78 = dateMidnight64.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        mutableDateTime80.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        mutableDateTime80.setRounding(dateTimeField85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime80.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime88 = property87.roundCeiling();
        int int89 = dateTime77.compareTo((org.joda.time.ReadableInstant) mutableDateTime88);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(86400000L, chronology91);
        org.joda.time.Chronology chronology93 = localDateTime92.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.millisOfSecond();
        org.joda.time.DateTime dateTime96 = mutableDateTime88.toDateTime(chronology93);
        org.joda.time.Period period97 = duration56.toPeriodTo((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.PeriodType periodType98 = period97.getPeriodType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime80 and dateTime96", (mutableDateTime80.compareTo(dateTime96) == 0) == mutableDateTime80.equals(dateTime96));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        int int29 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime31 = dateTime22.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean33 = dateTime22.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight16.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight4.withField(dateTimeFieldType32, 5);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 1, periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration58, periodType62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime67.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime(dateTimeZone70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        int int73 = dateTime71.getDayOfWeek();
        org.joda.time.DateTime.Property property74 = dateTime71.secondOfDay();
        org.joda.time.Chronology chronology75 = dateTime71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType62, chronology75);
        org.joda.time.DurationField durationField77 = chronology75.eras();
        boolean boolean78 = dateTimeFieldType32.isSupported(chronology75);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(periodType79);
        mutablePeriod80.setYears((int) (short) 1);
        mutablePeriod80.addMillis(39);
        int int85 = mutablePeriod80.getMonths();
        int[] intArray87 = chronology75.get((org.joda.time.ReadablePeriod) mutablePeriod80, (long) 'u');
        org.joda.time.DateTimeField dateTimeField88 = chronology75.millisOfDay();
        org.joda.time.DurationField durationField89 = chronology75.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField77, durationField89, and durationField77", !(durationField77.compareTo(durationField89) == 0) || (Math.signum(durationField77.compareTo(durationField77)) == Math.signum(durationField89.compareTo(durationField77))));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.Instant instant13 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime12", (instant13.compareTo(mutableDateTime12) == 0) == instant13.equals(mutableDateTime12));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = instant16.toMutableDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        long long29 = duration28.getStandardMinutes();
        org.joda.time.Duration duration30 = duration28.toDuration();
        org.joda.time.Duration duration32 = duration28.minus(0L);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Period period35 = duration28.toPeriod(periodType34);
        org.joda.time.Instant instant36 = instant16.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = period40.normalizedStandard(periodType41);
        org.joda.time.Period period44 = period42.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = period44.getFieldTypes();
        org.joda.time.Period period47 = period44.plusMillis(1970);
        org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        mutableDateTime50.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        mutableDateTime54.setDayOfYear(1);
        mutableDateTime54.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime54.getZone();
        mutableDateTime50.setZoneRetainFields(dateTimeZone59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds48, (org.joda.time.ReadableInstant) mutableDateTime50);
        boolean boolean62 = interval61.isAfterNow();
        org.joda.time.TimeOfDay timeOfDay63 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int64 = timeOfDay63.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay63.withMillisOfSecond((int) (short) 1);
        int int68 = timeOfDay63.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(dateTimeZone69);
        mutableDateTime70.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant73, readableInstant74, periodType75);
        mutableDateTime70.add((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period79 = period76.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay80 = timeOfDay63.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period82 = period76.minusSeconds((int) (byte) 10);
        org.joda.time.Duration duration83 = period82.toStandardDuration();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (-1), chronology85);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) (-1), chronology88);
        org.joda.time.Duration duration90 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = duration83.isEqual((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval92 = interval61.withDurationAfterStart((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Instant instant94 = new org.joda.time.Instant((long) '#');
        org.joda.time.Interval interval95 = interval92.withStart((org.joda.time.ReadableInstant) instant94);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) instant94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 1, periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = periodType6.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(86400000L, chronology11);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfSecond();
        boolean boolean16 = durationFieldType8.isSupported(chronology13);
        boolean boolean17 = localDateTime1.isSupported(durationFieldType8);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.Period period28 = period21.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime1.plus((org.joda.time.ReadablePeriod) period25);
        int int30 = localDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        org.joda.time.Instant instant35 = mutableDateTime32.toInstant();
        org.joda.time.MutableDateTime mutableDateTime36 = instant35.toMutableDateTime();
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((java.lang.Object) localDateTime1, chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and instant35", (mutableDateTime32.compareTo(instant35) == 0) == mutableDateTime32.equals(instant35));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(86400000L, chronology12);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(384309744566400001L, chronology14);
        mutableDateTime17.add((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime36 = dateTime22.plusDays((-292275054));
        org.joda.time.DateTime dateTime37 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        org.joda.time.DateTime dateTime46 = property41.roundHalfFloorCopy();
        boolean boolean47 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        boolean boolean52 = dateTimeField50.isLeap((long) 1439);
        boolean boolean54 = dateTimeField50.isLeap(0L);
        long long56 = dateTimeField50.roundFloor((long) (byte) 1);
        int int58 = dateTimeField50.get((long) 5);
        org.joda.time.DurationField durationField59 = dateTimeField50.getRangeDurationField();
        java.lang.String str61 = dateTimeField50.getAsShortText((long) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField50.getType();
        int int63 = dateTime46.get(dateTimeFieldType62);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime17.property(dateTimeFieldType62);
        java.lang.String str65 = dateTimeFieldType62.toString();
        org.joda.time.DateTime.Property property66 = dateTime8.property(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((long) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTime();
        org.joda.time.Instant instant10 = dateTime6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.Duration duration25 = duration21.toDuration();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period27 = duration21.toPeriod(periodType26);
        org.joda.time.Instant instant29 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration21, 366);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = duration43.plus((long) 'u');
        org.joda.time.Period period46 = duration45.toPeriod();
        boolean boolean47 = duration36.isEqual((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration56.plus((long) 'u');
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration58, (-1));
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime63.plusMonths(999);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 1, periodType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableInstant) dateTime69, periodType71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        long long81 = duration80.getStandardMinutes();
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration80);
        int int83 = duration36.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant85 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration80, 1070);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime10 = dateTime4.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = duration22.plus((long) 'u');
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration24, (-1));
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime29.plusMonths(999);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 1, periodType37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) dateTime35, periodType37);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = interval40.withChronology(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(0);
        org.joda.time.Interval interval54 = dateMidnight53.toInterval();
        org.joda.time.Interval interval55 = interval48.gap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Interval interval56 = interval42.gap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime.Property property80 = dateTime63.year();
        org.joda.time.Interval interval81 = interval48.withStart((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str82 = interval48.toString();
        org.joda.time.DateTime dateTime83 = interval48.getEnd();
        long long84 = interval48.getStartMillis();
        org.joda.time.Chronology chronology85 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.weekyear();
        org.joda.time.Chronology chronology87 = chronology85.withUTC();
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight0.withChronology(chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight0 and dateMidnight88", (dateMidnight0.compareTo(dateMidnight88) == 0) == dateMidnight0.equals(dateMidnight88));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        boolean boolean6 = periodType3.isSupported(durationFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        boolean boolean13 = durationFieldType5.isSupported(chronology10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone21);
        org.joda.time.Chronology chronology24 = chronology10.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.monthOfYear();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.Period period29 = period28.negated();
        org.joda.time.Days days30 = period29.toStandardDays();
        long long33 = chronology24.add((org.joda.time.ReadablePeriod) days30, (long) (-19045), (int) 'a');
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(60000L, 13148730000L, chronology24);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(86400000L, chronology37);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(384309744566400001L, chronology39);
        mutableDateTime42.addSeconds((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        mutableDateTime42.setZoneRetainFields(dateTimeZone46);
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField50 = chronology24.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime47", (mutableDateTime22.compareTo(dateTime47) == 0) == mutableDateTime22.equals(dateTime47));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = dateMidnight17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.withFieldAdded(durationFieldType25, 8);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight17);
        int int29 = dateMidnight17.getYearOfCentury();
        boolean boolean30 = dateMidnight17.isAfterNow();
        org.joda.time.Instant instant31 = dateMidnight17.toInstant();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant31, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime37.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        long long53 = duration52.getStandardMinutes();
        org.joda.time.Duration duration54 = duration52.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone61);
        mutableDateTime62.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone65);
        mutableDateTime66.setDayOfYear(1);
        mutableDateTime66.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone71 = mutableDateTime66.getZone();
        mutableDateTime62.setZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = dateTime59.withZoneRetainFields(dateTimeZone71);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone71);
        org.joda.time.Interval interval75 = yearMonthDay44.toInterval(dateTimeZone71);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay44.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay44.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay80 = property78.addWrapFieldToCopy(5);
        org.joda.time.YearMonthDay yearMonthDay82 = property78.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeField dateTimeField83 = property78.getField();
        java.lang.String str84 = property78.getAsString();
        org.joda.time.YearMonthDay yearMonthDay85 = property78.getYearMonthDay();
        org.joda.time.Period period87 = org.joda.time.Period.seconds(0);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType89 = org.joda.time.DurationFieldType.years();
        boolean boolean90 = periodType88.isSupported(durationFieldType89);
        org.joda.time.Period period92 = period87.withField(durationFieldType89, 28);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay85.withFieldAdded(durationFieldType89, 19);
        mutablePeriod34.set(durationFieldType89, 46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight14 and instant31", (dateMidnight14.compareTo(instant31) == 0) == dateMidnight14.equals(instant31));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        boolean boolean25 = dateTimeField23.isLeap((long) 1439);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 11, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.DateTime dateTime39 = yearMonthDay38.toDateTimeAtCurrentTime();
        int[] intArray40 = yearMonthDay38.getValues();
        int int41 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray40);
        org.joda.time.LocalDate localDate43 = localDate28.withWeekyear(15);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.minusYears(1);
        int int56 = yearMonthDay55.getDayOfMonth();
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusYears(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = yearMonthDay61.getFieldType((int) (byte) 1);
        int int64 = localDate28.get(dateTimeFieldType63);
        boolean boolean65 = instant20.isSupported(dateTimeFieldType63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant20", (dateTime2.compareTo(instant20) == 0) == dateTime2.equals(instant20));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(35L);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        boolean boolean15 = period13.isSupported(durationFieldType14);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight8.plus((org.joda.time.ReadablePeriod) period13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateMidnight19.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 1, periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        boolean boolean40 = periodType37.isSupported(durationFieldType39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35, periodType37);
        org.joda.time.PeriodType periodType42 = periodType37.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, periodType45, chronology46);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.PeriodType periodType51 = periodType49.withWeeksRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime54.toString(dateTimeFormatter55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.toDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = dateTime77.toString(dateTimeFormatter78);
        int int80 = dateTime77.getMillisOfSecond();
        org.joda.time.Period period81 = duration72.toPeriodFrom((org.joda.time.ReadableInstant) dateTime77);
        java.util.GregorianCalendar gregorianCalendar82 = dateTime77.toGregorianCalendar();
        java.util.Date date83 = gregorianCalendar82.getTime();
        boolean boolean84 = periodType51.equals((java.lang.Object) gregorianCalendar82);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) chronology46, periodType51);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) (-1), chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean90 = dateTime88.isSupported(dateTimeFieldType89);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int92 = dateTime88.get(dateTimeFieldType91);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType91.getDurationType();
        int int94 = periodType51.indexOf(durationFieldType93);
        int int95 = periodType37.indexOf(durationFieldType93);
        boolean boolean96 = localDate2.isSupported(durationFieldType93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight6 and dateMidnight19", (dateMidnight6.compareTo(dateMidnight19) == 0) == dateMidnight6.equals(dateMidnight19));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusDays(0);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withChronology(chronology32);
        int int34 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean38 = dateTime27.isSupported(dateTimeFieldType37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight21.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight9.withField(dateTimeFieldType37, 5);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period68 = new org.joda.time.Period((long) 1, periodType67);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration63, periodType67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = dateTime72.toString(dateTimeFormatter73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.toDateTime(dateTimeZone75);
        org.joda.time.LocalTime localTime77 = dateTime76.toLocalTime();
        int int78 = dateTime76.getDayOfWeek();
        org.joda.time.DateTime.Property property79 = dateTime76.secondOfDay();
        org.joda.time.Chronology chronology80 = dateTime76.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType67, chronology80);
        org.joda.time.DurationField durationField82 = chronology80.eras();
        boolean boolean83 = dateTimeFieldType37.isSupported(chronology80);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1645514209701L, 536457600119L, chronology80);
        org.joda.time.Period period85 = new org.joda.time.Period((long) (short) 0, 0L, chronology80);
        org.joda.time.LocalTime localTime86 = org.joda.time.LocalTime.fromMillisOfDay((long) 60, chronology80);
        org.joda.time.DurationField durationField87 = chronology80.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField82, durationField87, and durationField82", !(durationField82.compareTo(durationField87) == 0) || (Math.signum(durationField82.compareTo(durationField82)) == Math.signum(durationField87.compareTo(durationField82))));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withZoneRetainFields(dateTimeZone12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(366L, dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime22.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime.Property property43 = dateTime26.year();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean45 = timeOfDay17.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime47 = dateTime26.minusWeeks(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int49 = dateTime26.get(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime26.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        mutableDateTime52.setDayOfYear(1);
        mutableDateTime52.setMillisOfSecond((int) 'u');
        int int57 = mutableDateTime52.getWeekOfWeekyear();
        mutableDateTime52.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime61.getZone();
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        boolean boolean65 = dateTimeZone62.isStandardOffset((long) 2021);
        long long67 = dateTimeZone50.getMillisKeepLocal(dateTimeZone62, (long) 502);
        long long69 = dateTimeZone50.nextTransition(25252904995200000L);
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(100982246400000L, dateTimeZone50);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((java.lang.Object) 366L, dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight2 and dateMidnight13", (dateMidnight2.compareTo(dateMidnight13) == 0) == dateMidnight2.equals(dateMidnight13));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = period7.normalizedStandard(periodType8);
        org.joda.time.Period period11 = period9.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = period11.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, (-31536000001L), periodType13);
        org.joda.time.PeriodType periodType16 = periodType13.withYearsRemoved();
        java.lang.String str17 = periodType13.getName();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        boolean boolean22 = periodType19.isSupported(durationFieldType21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(86400000L, chronology24);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        boolean boolean29 = durationFieldType21.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        mutableDateTime32.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime32.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone37);
        org.joda.time.Chronology chronology40 = chronology26.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        long long48 = duration47.getStandardMinutes();
        org.joda.time.Duration duration49 = duration47.toDuration();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfEra();
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        mutableDateTime57.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone60);
        mutableDateTime61.setDayOfYear(1);
        mutableDateTime61.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime61.getZone();
        mutableDateTime57.setZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime54.withZoneRetainFields(dateTimeZone66);
        int int70 = dateTimeZone66.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology71 = chronology40.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = chronology71.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int75 = localDateTime74.getWeekyear();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.millisOfSecond();
        long long78 = chronology71.set((org.joda.time.ReadablePartial) localDateTime74, (long) ' ');
        org.joda.time.DateTimeField dateTimeField79 = chronology71.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 26209701, (long) (-1));
        mutablePeriod82.addHours(365);
        mutablePeriod82.setMillis(25);
        long long89 = chronology71.add((org.joda.time.ReadablePeriod) mutablePeriod82, 1645514357397L, 2070);
        org.joda.time.Period period90 = new org.joda.time.Period(1645513200000L, periodType13, chronology71);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(86400000L, chronology92);
        org.joda.time.Chronology chronology94 = localDateTime93.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.days();
        org.joda.time.DurationField durationField96 = chronology94.eras();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(obj0, periodType13, chronology94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField95 and durationField96", Math.signum(durationField95.compareTo(durationField96)) == -Math.signum(durationField96.compareTo(durationField95)));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = property16.getAsText(locale17);
        java.util.Calendar calendar32 = dateTime6.toCalendar(locale17);
        int int33 = dateTime6.getMonthOfYear();
        int int34 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.DateTime dateTime37 = dateTime6.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime37.withMinuteOfHour(9);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) 450);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime47.toString(dateTimeFormatter48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime.Property property68 = dateTime51.year();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateMidnight.Property property70 = dateMidnight44.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight72 = property70.setCopy("22");
        org.joda.time.DateMidnight dateMidnight74 = property70.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight75 = property70.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight76 = property70.getDateMidnight();
        java.lang.String str77 = property70.toString();
        java.lang.String str78 = property70.toString();
        org.joda.time.DateMidnight dateMidnight80 = property70.addToCopy((long) 6);
        org.joda.time.Interval interval81 = duration43.toIntervalFrom((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DateTime dateTime82 = dateTime41.plus((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime37", (dateTime6.compareTo(dateTime37) == 0) == dateTime6.equals(dateTime37));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("97");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str6 = locale3.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale3.stripExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder12 = builder9.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder17 = builder12.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder21 = builder12.setDate(51, 14, 973);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.lang.String str23 = timeZone22.getID();
        int int25 = timeZone22.getOffset((long) ' ');
        int int26 = timeZone22.getRawOffset();
        java.util.Calendar.Builder builder27 = builder12.setTimeZone(timeZone22);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone22);
        boolean boolean29 = timeZone1.hasSameRules(timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar28", (calendar8.compareTo(calendar28) == 0) == calendar8.equals(calendar28));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        boolean boolean6 = periodType3.isSupported(durationFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        boolean boolean13 = durationFieldType5.isSupported(chronology10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone21);
        org.joda.time.Chronology chronology24 = chronology10.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.monthOfYear();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.Period period29 = period28.negated();
        org.joda.time.Days days30 = period29.toStandardDays();
        long long33 = chronology24.add((org.joda.time.ReadablePeriod) days30, (long) (-19045), (int) 'a');
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(60000L, 13148730000L, chronology24);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(86400000L, chronology37);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(384309744566400001L, chronology39);
        mutableDateTime42.addSeconds((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        mutableDateTime42.setZoneRetainFields(dateTimeZone46);
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField50 = chronology49.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime47", (mutableDateTime22.compareTo(dateTime47) == 0) == mutableDateTime22.equals(dateTime47));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology5 = timeOfDay1.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'u', chronology5);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DurationField durationField10 = chronology5.weekyears();
        org.joda.time.DurationField durationField11 = chronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField6, and durationField10", !(durationField11.compareTo(durationField6) == 0) || (Math.signum(durationField11.compareTo(durationField10)) == Math.signum(durationField6.compareTo(durationField10))));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime2.get(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime0.property(dateTimeFieldType6);
        int int10 = localTime0.size();
        org.joda.time.LocalTime localTime12 = localTime0.plusMinutes(2005);
        org.joda.time.DateTime dateTime13 = localTime12.toDateTimeToday();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration24.plus((long) 'u');
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration26, (-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean45 = dateTime41.isAfterNow();
        org.joda.time.DateTime dateTime47 = dateTime41.withCenturyOfEra(100);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusYears((int) '4');
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType51);
        mutablePeriod52.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval55 = null;
        mutablePeriod52.setPeriod(readableInterval55);
        org.joda.time.DateTime dateTime58 = dateTime50.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, 1969);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.centuries();
        boolean boolean60 = mutablePeriod52.isSupported(durationFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime13.withFieldAdded(durationFieldType59, 44);
        org.joda.time.DateTime dateTime64 = dateTime62.withMillisOfDay(235);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.withZone(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.dayOfYear();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight76.minusDays(0);
        int int80 = dateTime74.compareTo((org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.Instant instant81 = dateTime74.toInstant();
        org.joda.time.Chronology chronology82 = instant81.getChronology();
        org.joda.time.DateTime dateTime83 = instant81.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime84 = instant81.toMutableDateTimeISO();
        org.joda.time.Chronology chronology85 = instant81.getChronology();
        org.joda.time.DateTime dateTime86 = instant81.toDateTimeISO();
        boolean boolean87 = dateTime62.equals((java.lang.Object) dateTime86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant81", (dateTime5.compareTo(instant81) == 0) == dateTime5.equals(instant81));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        int int10 = mutableDateTime1.getRoundingMode();
        mutableDateTime1.setDate((long) 624);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        long long20 = duration19.getStandardMinutes();
        org.joda.time.Duration duration21 = duration19.toDuration();
        org.joda.time.Duration duration23 = duration19.minus(0L);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L);
        org.joda.time.format.PeriodFormatter periodFormatter26 = null;
        java.lang.String str27 = mutablePeriod25.toString(periodFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration38, (-1));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime43.plusMonths(999);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 1, periodType51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime49, periodType51);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfYear();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant57, readableInstant58, periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight55.plus((org.joda.time.ReadablePeriod) period60);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.withZoneRetainFields(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone67);
        mutableDateTime68.setDayOfYear(1);
        mutableDateTime68.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone73 = mutableDateTime68.getZone();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = dateMidnight66.toDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime49.toDateTime(dateTimeZone73);
        org.joda.time.Duration duration77 = mutablePeriod25.toDurationTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration79 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration77, 1070);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight66 and dateTime75", (dateMidnight66.compareTo(dateTime75) == 0) == dateMidnight66.equals(dateTime75));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
        int int6 = dateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.millisOfSecond();
        org.joda.time.DurationField durationField15 = property14.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean20 = dateTimeField18.isLeap((long) 1439);
        boolean boolean22 = dateTimeField18.isLeap(0L);
        long long24 = dateTimeField18.roundFloor((long) (byte) 1);
        int int26 = dateTimeField18.get((long) 5);
        long long29 = dateTimeField18.add((long) 4, (int) (byte) 10);
        long long31 = dateTimeField18.roundHalfFloor((long) 99);
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = dateTimeField18.getAsText(2022, locale33);
        java.lang.String str37 = property14.getAsShortText(locale33);
        org.joda.time.LocalDateTime localDateTime38 = property14.withMaximumValue();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant43 = instant40.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.DateTime dateTime44 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTime dateTime45 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant40", (dateTime5.compareTo(instant40) == 0) == dateTime5.equals(instant40));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTime dateTime19 = dateTime11.minusYears(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZone(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        boolean boolean38 = period36.isSupported(durationFieldType37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight31.plus((org.joda.time.ReadablePeriod) period36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime25.toDateTime(dateTimeZone41);
        long long46 = dateTimeZone41.convertLocalToUTC((long) 15, false);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime19, dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (-70), dateTimeZone41);
        boolean boolean49 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime43", (dateTime4.compareTo(dateTime43) == 0) == dateTime4.equals(dateTime43));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration24.plus((long) 'u');
        org.joda.time.Period period27 = duration26.toPeriod();
        boolean boolean28 = duration17.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration37.plus((long) 'u');
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime44.plusMonths(999);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 1, periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) dateTime50, periodType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        long long62 = duration61.getStandardMinutes();
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration61);
        int int64 = duration17.compareTo((org.joda.time.ReadableDuration) duration61);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableInstant65, readableInstant66, periodType67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = period68.normalizedStandard(periodType69);
        org.joda.time.Period period72 = period70.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = period72.getFieldTypes();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.forFields(durationFieldTypeArray73);
        org.joda.time.PeriodType periodType75 = periodType74.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration61, periodType75);
        org.joda.time.Hours hours77 = duration61.toStandardHours();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) (-1), chronology82);
        org.joda.time.Duration duration84 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = dateTime83.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = dateTime85.withZone(dateTimeZone86);
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property90 = dateMidnight89.dayOfYear();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight89.minusDays(0);
        int int93 = dateTime87.compareTo((org.joda.time.ReadableInstant) dateMidnight92);
        org.joda.time.Instant instant94 = dateTime87.toInstant();
        org.joda.time.Chronology chronology95 = instant94.getChronology();
        org.joda.time.DateTime dateTime96 = instant94.toDateTimeISO();
        org.joda.time.Period period97 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant94", (dateTime13.compareTo(instant94) == 0) == dateTime13.equals(instant94));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.Instant instant7 = instant4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant7", (mutableDateTime1.compareTo(instant7) == 0) == mutableDateTime1.equals(instant7));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DateTime dateTime20 = instant18.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.Chronology chronology22 = instant18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = instant18.toMutableDateTime();
        org.joda.time.Chronology chronology24 = instant18.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 43, chronology24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant18", (dateTime4.compareTo(instant18) == 0) == dateTime4.equals(instant18));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        org.joda.time.Instant instant6 = instant1.withMillis(15L);
        org.joda.time.Instant instant8 = instant6.plus((long) (-192830));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(100982246400000L);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1969");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear((int) (short) 10);
        int int8 = localDate4.getValue(0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = period12.normalizedStandard(periodType13);
        java.lang.String str15 = period12.toString();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        org.joda.time.Period period22 = period12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) period19);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime27.toString(dateTimeFormatter28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTime.Property property48 = dateTime31.year();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateMidnight.Property property50 = dateMidnight24.yearOfCentury();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        long long58 = duration57.getStandardMinutes();
        org.joda.time.Duration duration59 = duration57.toDuration();
        org.joda.time.Period period60 = new org.joda.time.Period((java.lang.Object) duration57);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration62 = period19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Period period63 = period19.normalizedStandard();
        org.joda.time.LocalDate localDate64 = localDate4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalDate localDate66 = localDate4.minusYears(26209701);
        org.joda.time.LocalDate localDate68 = localDate4.plusMonths(38);
        int int69 = localDate4.getYear();
        org.joda.time.DateTime dateTime70 = localDate4.toDateTimeAtMidnight();
        boolean boolean71 = instant1.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property74 = dateMidnight73.dayOfYear();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        boolean boolean80 = period78.isSupported(durationFieldType79);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight73.plus((org.joda.time.ReadablePeriod) period78);
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight81.withZoneRetainFields(dateTimeZone83);
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.year();
        org.joda.time.DateMidnight.Property property86 = dateMidnight84.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight87 = property86.withMaximumValue();
        org.joda.time.DateMidnight.Property property88 = dateMidnight87.dayOfWeek();
        org.joda.time.DateMidnight.Property property89 = dateMidnight87.centuryOfEra();
        boolean boolean90 = dateTime70.isAfter((org.joda.time.ReadableInstant) dateMidnight87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime5.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime5.minusHours((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(60);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 39, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime20", (dateTime2.compareTo(dateTime20) == 0) == dateTime2.equals(dateTime20));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.Instant instant4 = instant0.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and mutableDateTime3", (instant4.compareTo(mutableDateTime3) == 0) == instant4.equals(mutableDateTime3));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean23 = dateTime19.isAfterNow();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateTime19.minus((org.joda.time.ReadableDuration) duration37);
        long long40 = duration37.getMillis();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Period period57 = duration56.toPeriod();
        boolean boolean58 = duration47.isEqual((org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration61 = duration56.plus(100L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withChronology(chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = dateTime73.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.withZone(dateTimeZone76);
        boolean boolean78 = dateMidnight64.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        mutableDateTime80.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        mutableDateTime80.setRounding(dateTimeField85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime80.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime88 = property87.roundCeiling();
        int int89 = dateTime77.compareTo((org.joda.time.ReadableInstant) mutableDateTime88);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(86400000L, chronology91);
        org.joda.time.Chronology chronology93 = localDateTime92.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.millisOfSecond();
        org.joda.time.DateTime dateTime96 = mutableDateTime88.toDateTime(chronology93);
        org.joda.time.Period period97 = duration56.toPeriodTo((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.Period period99 = period97.withMinutes(2038);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime80 and dateTime96", (mutableDateTime80.compareTo(dateTime96) == 0) == mutableDateTime80.equals(dateTime96));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration13 = duration10.toDuration();
        org.joda.time.Duration duration15 = duration10.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        int int24 = mutableDateTime17.getYearOfEra();
        org.joda.time.Interval interval25 = duration10.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.setTime((long) 47);
        org.joda.time.Instant instant28 = mutableDateTime17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) (short) 1);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 51, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        mutableDateTime41.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        mutableDateTime41.setRounding(dateTimeField46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.monthOfYear();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime53 = property50.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime54 = property50.roundHalfEvenCopy();
        int int55 = localDateTime54.size();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusWeeks((-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime64 = property62.addToCopy((int) ' ');
        java.util.Locale locale65 = java.util.Locale.ITALY;
        int int66 = property62.getMaximumShortTextLength(locale65);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("PT0S");
        int int69 = property62.getMaximumShortTextLength(locale68);
        java.lang.String str70 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime54, 0, locale68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime54.withCenturyOfEra((int) '4');
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusMillis(51);
        boolean boolean75 = dateTimeZone36.equals((java.lang.Object) localDateTime72);
        mutableDateTime17.setZone(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.monthOfYear();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime82 = property79.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime83 = property79.roundHalfEvenCopy();
        int int84 = localDateTime83.size();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.yearOfCentury();
        int int88 = property87.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime90 = property87.addToCopy(0L);
        boolean boolean91 = dateTimeZone36.isLocalDateTimeGap(localDateTime90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant28", (mutableDateTime17.compareTo(instant28) == 0) == mutableDateTime17.equals(instant28));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = instant16.toMutableDateTime();
        org.joda.time.Chronology chronology22 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        long long26 = dateTimeField23.roundHalfFloor((long) 2191769);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusYears(0);
        int int21 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime55 = dateTime49.withCenturyOfEra(100);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration34, 32);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 1969);
        org.joda.time.Instant instant62 = instant60.minus((-28857600001L));
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime64 = instant60.toMutableDateTimeISO();
        mutableDateTime64.setDayOfYear(17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime63", (instant60.compareTo(mutableDateTime63) == 0) == instant60.equals(mutableDateTime63));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(86400000L, chronology31);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology33.months();
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.secondOfMinute();
        java.lang.String str39 = property38.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime36", (dateTime29.compareTo(dateTime36) == 0) == dateTime29.equals(dateTime36));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight0.minusDays(51);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight0.minusMonths(32769);
        org.joda.time.DateTime dateTime30 = dateMidnight0.toDateTime();
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int32 = timeOfDay31.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology35 = timeOfDay31.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.halfdays();
        org.joda.time.DurationField durationField37 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfHalfday();
        org.joda.time.Chronology chronology39 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime41 = dateMidnight0.toDateTime(chronology35);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight0.plus(1645514384224L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime41", (dateTime30.compareTo(dateTime41) == 0) == dateTime30.equals(dateTime41));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusYears(0);
        int int21 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime55 = dateTime49.withCenturyOfEra(100);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration34, 32);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 1969);
        org.joda.time.Instant instant62 = instant60.minus((-28857600001L));
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime64 = instant60.toMutableDateTimeISO();
        int int65 = mutableDateTime64.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime63", (instant60.compareTo(mutableDateTime63) == 0) == instant60.equals(mutableDateTime63));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.Instant instant20 = instant16.plus(31536000000L);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((long) 100964, (int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(86400000L, chronology11);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime9.toMutableDateTime(chronology13);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay((-52500000L), chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime17", (dateTime3.compareTo(mutableDateTime17) == 0) == dateTime3.equals(mutableDateTime17));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22");
        timeZone1.setRawOffset(5);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        boolean boolean8 = dateTimeFormatter7.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime10.setRounding(dateTimeField15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfEvenCopy();
        int int24 = localDateTime23.size();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((-1));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0S");
        int int38 = property31.getMaximumShortTextLength(locale37);
        java.lang.String str39 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime23, 0, locale37);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale37);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getISO3Language();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) ' ');
        java.util.Locale locale49 = java.util.Locale.ITALY;
        int int50 = property46.getMaximumShortTextLength(locale49);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("PT0S");
        int int53 = property46.getMaximumShortTextLength(locale52);
        java.lang.String str54 = locale41.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) ' ');
        java.util.Locale locale63 = java.util.Locale.ITALY;
        int int64 = property60.getMaximumShortTextLength(locale63);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT0S");
        int int67 = property60.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale55.getDisplayVariant(locale66);
        java.lang.String str69 = locale52.getDisplayLanguage(locale55);
        java.lang.String str70 = locale37.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter7.withLocale(locale55);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Locale locale73 = locale72.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter7.withLocale(locale72);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = locale72.getDisplayVariant(locale76);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone1, locale72);
        timeZone1.setID("PT358H-16M-49.702S");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = dateMidnight17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.withFieldAdded(durationFieldType25, 8);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight17);
        int int29 = dateMidnight17.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant30, readableInstant31, periodType32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = period33.normalizedStandard(periodType34);
        org.joda.time.Period period37 = period35.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = period37.getFieldTypes();
        org.joda.time.Period period40 = period37.plusMillis(1970);
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setDayOfYear(1);
        mutableDateTime47.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime47.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds41, (org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight17.minus((org.joda.time.ReadablePeriod) seconds41);
        org.joda.time.Instant instant56 = dateMidnight55.toInstant();
        org.joda.time.Instant instant59 = instant56.withDurationAdded(15L, 2022);
        org.joda.time.Instant instant61 = instant56.plus((long) 152);
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight55 and instant56", (dateMidnight55.compareTo(instant56) == 0) == dateMidnight55.equals(instant56));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.DateTime dateTime20 = instant16.toDateTime();
        org.joda.time.DateTime dateTime21 = instant16.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours(49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(periodType52);
        mutablePeriod53.addYears((int) (short) 0);
        mutablePeriod53.setPeriod(2, (int) (byte) 100, 100, 2, 0, 4, 999, (int) (short) 1);
        mutablePeriod53.addMonths((int) (byte) 0);
        mutablePeriod53.addWeeks((int) (short) 10);
        int[] intArray71 = chronology47.get((org.joda.time.ReadablePeriod) mutablePeriod53, (long) (-292275054), 48L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime51", (dateTime10.compareTo(dateTime51) == 0) == dateTime10.equals(dateTime51));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withMillisRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setDayOfYear(1);
        mutableDateTime6.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        mutableDateTime13.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.addWrapField(365);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        long long33 = duration32.getStandardMinutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        int int62 = dateTime59.getMillisOfSecond();
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean64 = duration32.equals((java.lang.Object) period63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.withZone(dateTimeZone73);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfCentury();
        org.joda.time.DateTime dateTime77 = dateTime74.minusMonths(9);
        org.joda.time.Period period78 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean80 = dateTime74.isEqual((long) (byte) 0);
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableDateTime mutableDateTime82 = mutableDateTime24.copy();
        int int83 = mutableDateTime82.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime82.weekOfWeekyear();
        boolean boolean85 = instant4.isAfter((org.joda.time.ReadableInstant) mutableDateTime82);
        org.joda.time.Instant instant86 = instant4.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        org.joda.time.LocalDate.Property property4 = localDate3.year();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.LocalDate.Property property6 = localDate3.year();
        java.lang.String str7 = localDate3.toString();
        org.joda.time.LocalDate localDate9 = localDate3.plusMonths(999);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, periodType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = dateTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusMonths(292278993);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.years();
        boolean boolean52 = periodType49.isSupported(durationFieldType51);
        org.joda.time.Period period53 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight47, periodType49);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfYear();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant57, readableInstant58, periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight55.plus((org.joda.time.ReadablePeriod) period60);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.withZoneRetainFields(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone67);
        mutableDateTime68.setDayOfYear(1);
        mutableDateTime68.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone73 = mutableDateTime68.getZone();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = dateMidnight66.toDateTime(dateTimeZone73);
        org.joda.time.Interval interval76 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableInstant77, readableInstant78, periodType79);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.years();
        boolean boolean82 = period80.isSupported(durationFieldType81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadablePeriod) period80);
        long long86 = chronology10.add((org.joda.time.ReadablePeriod) period80, (long) 26, 32770);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(obj0, chronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight66 and dateTime75", (dateMidnight66.compareTo(dateTime75) == 0) == dateMidnight66.equals(dateTime75));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean20 = dateTime18.isSupported(dateTimeFieldType19);
        java.lang.String str21 = dateTimeFieldType19.getName();
        org.joda.time.DateTime dateTime23 = dateTime15.withField(dateTimeFieldType19, (int) (byte) 10);
        int int24 = dateTime23.getMillisOfDay();
        boolean boolean25 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration(28857600000L);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateTime35.toString(dateTimeFormatter36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 1, periodType57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((java.lang.Object) duration53, periodType57);
        org.joda.time.PeriodType periodType60 = periodType57.withWeeksRemoved();
        org.joda.time.PeriodType periodType61 = periodType57.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((-9859239358822378L), (long) 1166, periodType57);
        org.joda.time.Period period64 = new org.joda.time.Period((long) 'a', (-28857600001L), periodType57);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant69 = instant66.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfYear();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant73, readableInstant74, periodType75);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.years();
        boolean boolean78 = period76.isSupported(durationFieldType77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight71.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.plus(10L);
        boolean boolean82 = instant66.isAfter((org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.Instant instant83 = instant66.toInstant();
        org.joda.time.Chronology chronology84 = instant83.getChronology();
        org.joda.time.Period period85 = duration27.toPeriod(periodType57, chronology84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant66", (dateTime2.compareTo(instant66) == 0) == dateTime2.equals(instant66));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = dateTime19.toInstant();
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.joda.time.Interval interval29 = duration9.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Seconds seconds30 = duration9.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant26", (dateTime12.compareTo(instant26) == 0) == dateTime12.equals(instant26));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.Instant instant63 = instant34.plus(1645514394142L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime57", (dateTime20.compareTo(dateTime57) == 0) == dateTime20.equals(dateTime57));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime42.withDayOfWeek(4);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(86400000L, chronology48);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        long long55 = chronology50.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime.Property property58 = dateTime46.minuteOfDay();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime46, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withYearsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusDays((-292275054));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) period36, chronology37);
        int[] intArray40 = chronology20.get((org.joda.time.ReadablePeriod) period36, (-1L));
        org.joda.time.DateTimeField dateTimeField41 = chronology20.monthOfYear();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.Period period47 = period45.plusDays(9);
        int[] intArray49 = chronology20.get((org.joda.time.ReadablePeriod) period47, (long) 8);
        org.joda.time.DateTime dateTime50 = dateTime16.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField51 = chronology20.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime50", (dateTime16.compareTo(dateTime50) == 0) == dateTime16.equals(dateTime50));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration14.plus((long) 'u');
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration16, (-1));
        long long19 = mutableDateTime7.getMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        long long43 = duration42.getStandardMinutes();
        org.joda.time.Duration duration44 = duration42.toDuration();
        org.joda.time.Period period45 = new org.joda.time.Period((java.lang.Object) duration42);
        org.joda.time.Duration duration46 = duration26.plus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration42, 25202);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, readableInstant49);
        org.joda.time.Period period51 = duration42.toPeriod();
        org.joda.time.Instant instant52 = instant4.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant54 = instant4.minus((long) (-70014));
        org.joda.time.DateTime dateTime55 = instant4.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType5);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTimeISO();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime9);
        int int11 = mutablePeriod6.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime9", (instant7.compareTo(mutableDateTime9) == 0) == instant7.equals(mutableDateTime9));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.Period period5 = org.joda.time.Period.seconds(0);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = periodType6.isSupported(durationFieldType7);
        org.joda.time.Period period10 = period5.withField(durationFieldType7, 28);
        org.joda.time.DateTime dateTime12 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 0);
        boolean boolean14 = dateTime12.isBefore(1645514555731L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime12", (instant0.compareTo(dateTime12) == 0) == instant0.equals(dateTime12));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusYears(0);
        int int21 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime55 = dateTime49.withCenturyOfEra(100);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration34, 32);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 1969);
        org.joda.time.Instant instant62 = instant60.minus((-28857600001L));
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfYear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.minusDays(0);
        org.joda.time.Interval interval69 = dateMidnight68.toInterval();
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.minusDays(0);
        org.joda.time.Interval interval75 = dateMidnight74.toInterval();
        org.joda.time.Interval interval76 = interval69.gap((org.joda.time.ReadableInterval) interval75);
        boolean boolean77 = interval75.isAfterNow();
        org.joda.time.DateTime dateTime78 = interval75.getEnd();
        int int79 = instant60.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Chronology chronology80 = instant60.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime63", (instant60.compareTo(mutableDateTime63) == 0) == instant60.equals(mutableDateTime63));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property6 = localDate1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        int int13 = mutableDateTime8.getWeekOfWeekyear();
        mutableDateTime8.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        mutableDateTime17.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime17.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime8.setZone(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate1.toDateTimeAtStartOfDay(dateTimeZone22);
        boolean boolean27 = dateTimeZone22.isStandardOffset((long) 27);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) instant0, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        java.util.Date date32 = localDateTime30.toDate();
        org.joda.time.DateTime dateTime33 = localDateTime30.toDateTime();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant34, readableInstant35, periodType36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = period37.normalizedStandard(periodType38);
        org.joda.time.Period period41 = period39.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = period41.getFieldTypes();
        org.joda.time.Period period44 = period41.plusMillis(1970);
        org.joda.time.Period period46 = period44.withHours(10);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = periodType47.isSupported(durationFieldType48);
        boolean boolean50 = period44.isSupported(durationFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime30.withFieldAdded(durationFieldType48, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.monthOfYear();
        java.util.Date date56 = localDateTime54.toDate();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withCenturyOfEra(10);
        int int61 = localDateTime60.getMonthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = duration68.plus((long) 'u');
        org.joda.time.Period period71 = duration70.toPeriod();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime60.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime52.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime23", (instant0.compareTo(mutableDateTime23) == 0) == instant0.equals(mutableDateTime23));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = dateTime12.minus((org.joda.time.ReadableDuration) duration30);
        int int33 = dateTime12.getSecondOfDay();
        org.joda.time.Instant instant34 = dateTime12.toInstant();
        org.joda.time.Instant instant37 = instant34.withDurationAdded(0L, (-19045));
        org.joda.time.Instant instant39 = instant37.plus(1033859999L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant37", (dateTime2.compareTo(instant37) == 0) == dateTime2.equals(instant37));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTime dateTime8 = dateTime4.withDayOfWeek(4);
        org.joda.time.DateTime.Property property9 = dateTime4.minuteOfHour();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = periodType11.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        boolean boolean21 = durationFieldType13.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField23 = chronology18.minutes();
        org.joda.time.DateTime dateTime24 = dateTime4.withChronology(chronology18);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-86400060L), 117L, chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime24", (dateTime4.compareTo(dateTime24) == 0) == dateTime4.equals(dateTime24));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.Instant instant4 = instant0.plus(60000L);
        long long5 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(0);
        int int34 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTime dateTime35 = dateMidnight33.toDateTime();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 1, periodType60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration56, periodType60);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.time();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableDuration) duration56, periodType63);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration56, (int) '#');
        org.joda.time.Instant instant68 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration56, 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant68 and mutableDateTime6", (instant68.compareTo(mutableDateTime6) == 0) == instant68.equals(mutableDateTime6));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 1, periodType21);
        org.joda.time.PeriodType periodType23 = periodType21.withWeeksRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime19, periodType21);
        org.joda.time.Duration duration26 = duration8.plus(227210054399999999L);
        long long27 = duration26.getMillis();
        org.joda.time.Duration duration29 = duration26.minus(112L);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((java.lang.Object) 112L);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType32);
        mutablePeriod33.addYears((int) (short) 0);
        java.lang.Object obj36 = mutablePeriod33.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration50);
        int int52 = period51.getYears();
        mutablePeriod33.add((org.joda.time.ReadablePeriod) period51);
        mutablePeriod33.addYears(6);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate58 = localDate56.plusYears(10);
        boolean boolean60 = localDate56.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property61 = localDate56.weekOfWeekyear();
        org.joda.time.LocalDate localDate62 = property61.roundFloorCopy();
        org.joda.time.LocalDate localDate64 = localDate62.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate66 = localDate62.minusDays(26209701);
        org.joda.time.DateTime dateTime67 = localDate62.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate69 = localDate62.minusDays(81);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(44);
        org.joda.time.Interval interval72 = localDate71.toInterval();
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.dayOfYear();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight75.minusDays(0);
        boolean boolean80 = dateMidnight78.isBefore((-1L));
        org.joda.time.Instant instant82 = new org.joda.time.Instant((long) '#');
        org.joda.time.MutableDateTime mutableDateTime83 = instant82.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(dateTimeZone84);
        mutableDateTime85.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType88.getField(chronology89);
        mutableDateTime85.setRounding(dateTimeField90);
        boolean boolean92 = mutableDateTime83.isEqual((org.joda.time.ReadableInstant) mutableDateTime85);
        mutablePeriod33.setPeriod((org.joda.time.ReadableInstant) dateMidnight78, (org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant82 and mutableDateTime83", (instant82.compareTo(mutableDateTime83) == 0) == instant82.equals(mutableDateTime83));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime46 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime47.getFieldType((int) (byte) 0);
        int int52 = instant34.get(dateTimeFieldType51);
        org.joda.time.Instant instant54 = instant34.withMillis((-472953600000L));
        org.joda.time.Instant instant56 = instant54.withMillis(157766401000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.Instant instant13 = instant0.withMillis(9651094761000L);
        org.joda.time.DateTime dateTime14 = instant0.toDateTime();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = dateTime20.isSupported(dateTimeFieldType21);
        int int23 = localTime17.get(dateTimeFieldType21);
        org.joda.time.LocalTime.Property property24 = localTime15.property(dateTimeFieldType21);
        int int25 = property24.getMaximumValueOverall();
        org.joda.time.LocalTime localTime26 = property24.withMaximumValue();
        org.joda.time.LocalTime localTime27 = property24.roundCeilingCopy();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology28);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology28);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusMonths(577);
        boolean boolean33 = instant0.isEqual((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plus((long) 216);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime14", (instant0.compareTo(dateTime14) == 0) == instant0.equals(dateTime14));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        long long23 = duration22.getStandardMinutes();
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) duration22);
        org.joda.time.Duration duration26 = duration6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period28 = duration6.toPeriod(periodType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableInstant50, readableInstant51, periodType52);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime47.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime58 = property55.addWrapField(69);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime58.copy();
        int int60 = mutableDateTime58.getDayOfMonth();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        mutableDateTime63.setMillisOfSecond((int) 'u');
        int int68 = mutableDateTime63.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime63.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime63.secondOfDay();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.TimeOfDay timeOfDay72 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int73 = timeOfDay72.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay72.withMillisOfSecond((int) (short) 1);
        int int77 = timeOfDay72.getValue(3);
        org.joda.time.DateTime dateTime78 = timeOfDay72.toDateTimeToday();
        org.joda.time.LocalTime localTime79 = timeOfDay72.toLocalTime();
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfDay();
        org.joda.time.DateTime dateTime81 = localTime79.toDateTimeToday();
        org.joda.time.Instant instant82 = dateTime81.toInstant();
        org.joda.time.MutableDateTime mutableDateTime83 = instant82.toMutableDateTime();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType85 = periodType84.withHoursRemoved();
        org.joda.time.Period period86 = duration45.toPeriodFrom((org.joda.time.ReadableInstant) instant82, periodType85);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) (-1), chronology88);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((long) (-1), chronology91);
        org.joda.time.Duration duration93 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime89, (org.joda.time.ReadableInstant) dateTime92);
        long long94 = duration93.getStandardMinutes();
        org.joda.time.Duration duration95 = duration93.toDuration();
        org.joda.time.Duration duration97 = duration93.minus(0L);
        boolean boolean98 = duration45.isEqual((org.joda.time.ReadableDuration) duration97);
        org.joda.time.Duration duration99 = duration45.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime78 and instant82", (dateTime78.compareTo(instant82) == 0) == dateTime78.equals(instant82));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        int int18 = dateTime6.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((long) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTime();
        org.joda.time.Instant instant10 = dateTime6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.Duration duration25 = duration21.toDuration();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period27 = duration21.toPeriod(periodType26);
        org.joda.time.Instant instant29 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration21, 366);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        int int34 = mutableDateTime31.getSecondOfMinute();
        mutableDateTime31.addYears((int) 'a');
        mutableDateTime31.addMinutes(12);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime31.yearOfEra();
        mutableDateTime31.setMillisOfSecond((int) '#');
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis(1645514252213L);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration45 = duration21.minus((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration48, 1439);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        int int65 = dateTime62.getMinuteOfHour();
        org.joda.time.Period period66 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology69 = localTime68.getChronology();
        int int70 = localTime68.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalTime localTime73 = localTime68.withPeriodAdded(readablePeriod71, 83459999);
        org.joda.time.Chronology chronology74 = localTime73.getChronology();
        org.joda.time.DateTime dateTime75 = dateTime62.toDateTime(chronology74);
        int int76 = dateTime62.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime75", (dateTime3.compareTo(dateTime75) == 0) == dateTime3.equals(dateTime75));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = property16.getAsText(locale17);
        java.util.Calendar calendar32 = dateTime6.toCalendar(locale17);
        int int33 = dateTime6.getMonthOfYear();
        int int34 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.DateTime dateTime37 = dateTime6.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        long long47 = duration46.getStandardMinutes();
        org.joda.time.Duration duration48 = duration46.toDuration();
        org.joda.time.Duration duration50 = duration46.minus(0L);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType52 = periodType51.withMinutesRemoved();
        org.joda.time.Period period53 = duration46.toPeriod(periodType52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        long long61 = duration60.getStandardMinutes();
        org.joda.time.Duration duration62 = duration60.toDuration();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean73 = dateTime71.isSupported(dateTimeFieldType72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int75 = dateTime71.get(dateTimeFieldType74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = dateTime78.toString(dateTimeFormatter79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime(dateTimeZone81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(dateTimeZone83);
        mutableDateTime84.setDayOfYear(1);
        mutableDateTime84.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone89 = mutableDateTime84.getZone();
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime(dateTimeZone89);
        org.joda.time.DateTime dateTime91 = dateTime82.withZoneRetainFields(dateTimeZone89);
        boolean boolean92 = dateTime71.equals((java.lang.Object) dateTime82);
        org.joda.time.Interval interval93 = duration60.toIntervalTo((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean94 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime96 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration60, 26461865);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime37", (dateTime2.compareTo(dateTime37) == 0) == dateTime2.equals(dateTime37));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        java.lang.String str4 = gregorianCalendar3.getCalendarType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 1, periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        boolean boolean12 = periodType9.isSupported(durationFieldType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(86400000L, chronology14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        boolean boolean19 = durationFieldType11.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.joda.time.DateTime dateTime22 = dateTime2.withChronology(chronology16);
        org.joda.time.Chronology chronology23 = chronology16.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime22", (dateTime2.compareTo(dateTime22) == 0) == dateTime2.equals(dateTime22));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period21, chronology22);
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePeriod) period21, (-1L));
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTime();
        boolean boolean28 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        int int29 = mutableDateTime26.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        int int29 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime31 = dateTime22.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean33 = dateTime22.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight16.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight4.withField(dateTimeFieldType32, 5);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 1, periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration58, periodType62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime67.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime(dateTimeZone70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        int int73 = dateTime71.getDayOfWeek();
        org.joda.time.DateTime.Property property74 = dateTime71.secondOfDay();
        org.joda.time.Chronology chronology75 = dateTime71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType62, chronology75);
        org.joda.time.DurationField durationField77 = chronology75.eras();
        boolean boolean78 = dateTimeFieldType32.isSupported(chronology75);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(periodType79);
        mutablePeriod80.setYears((int) (short) 1);
        mutablePeriod80.addMillis(39);
        int int85 = mutablePeriod80.getMonths();
        int[] intArray87 = chronology75.get((org.joda.time.ReadablePeriod) mutablePeriod80, (long) 'u');
        org.joda.time.DateTimeField dateTimeField88 = chronology75.millisOfDay();
        org.joda.time.DurationField durationField89 = dateTimeField88.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField77, durationField89, and durationField77", !(durationField77.compareTo(durationField89) == 0) || (Math.signum(durationField77.compareTo(durationField77)) == Math.signum(durationField89.compareTo(durationField77))));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant20", (dateTime2.compareTo(instant20) == 0) == dateTime2.equals(instant20));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime.Property property18 = dateTime6.minuteOfDay();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str35 = locale20.getExtension('u');
        java.lang.String str36 = locale19.getDisplayVariant(locale20);
        java.lang.String str37 = locale19.getScript();
        java.util.Locale locale38 = locale19.stripExtensions();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = property18.getAsText(locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime17", (dateTime2.compareTo(dateTime17) == 0) == dateTime2.equals(dateTime17));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime28.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear(2070);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(2);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean38 = dateTime36.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int40 = dateTime36.get(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration52 = duration50.plus((long) 'u');
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration52, (-1));
        org.joda.time.Duration duration55 = duration52.toDuration();
        org.joda.time.Duration duration57 = duration52.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        mutableDateTime59.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        mutableDateTime59.setRounding(dateTimeField64);
        int int66 = mutableDateTime59.getYearOfEra();
        org.joda.time.Interval interval67 = duration52.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(86400000L, chronology69);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.yearOfCentury();
        mutableDateTime59.setChronology(chronology71);
        org.joda.time.DurationField durationField75 = durationFieldType41.getField(chronology71);
        org.joda.time.DateTime dateTime76 = dateTime31.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime76", (dateTime31.compareTo(dateTime76) == 0) == dateTime31.equals(dateTime76));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (-23));
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.plusYears(10);
        boolean boolean7 = localDate3.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYearOfCentury(5);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(10);
        java.util.Date date13 = localDate12.toDate();
        boolean boolean14 = localDate9.equals((java.lang.Object) localDate12);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime18 = localDate9.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime2.withZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime23.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute(39);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra(247);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.minusDays(0);
        org.joda.time.Interval interval40 = dateMidnight39.toInterval();
        boolean boolean41 = dateMidnight39.isEqualNow();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withWeekyear(4);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withChronology(chronology54);
        int int56 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateTime dateTime58 = dateTime49.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean60 = dateTime49.isSupported(dateTimeFieldType59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight43.withField(dateTimeFieldType59, 7);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus(0L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.millis(2392146000L);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight62.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime68 = dateTime34.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime70 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration66, 91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime20", (instant1.compareTo(dateTime20) == 0) == instant1.equals(dateTime20));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusDays((-292275054));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) period36, chronology37);
        int[] intArray40 = chronology20.get((org.joda.time.ReadablePeriod) period36, (-1L));
        org.joda.time.DateTimeField dateTimeField41 = chronology20.monthOfYear();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.Period period47 = period45.plusDays(9);
        int[] intArray49 = chronology20.get((org.joda.time.ReadablePeriod) period47, (long) 8);
        org.joda.time.DateTime dateTime50 = dateTime16.withChronology(chronology20);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(chronology51);
        org.joda.time.LocalTime localTime54 = localTime52.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property55 = localTime54.secondOfMinute();
        org.joda.time.LocalTime localTime57 = property55.setCopy((int) ' ');
        org.joda.time.LocalTime localTime58 = property55.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime60 = property55.addCopy(2032);
        org.joda.time.DateTimeField dateTimeField61 = property55.getField();
        org.joda.time.LocalTime localTime62 = property55.roundCeilingCopy();
        org.joda.time.LocalTime localTime63 = property55.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime65 = property55.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.LocalTime.Property property66 = localTime65.minuteOfHour();
        org.joda.time.LocalTime localTime68 = localTime65.plusMinutes(53);
        int[] intArray70 = chronology20.get((org.joda.time.ReadablePartial) localTime68, (-60936451200000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime50", (dateTime16.compareTo(dateTime50) == 0) == dateTime16.equals(dateTime50));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime.Property property31 = dateTime14.year();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight.Property property33 = dateMidnight7.yearOfCentury();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        long long41 = duration40.getStandardMinutes();
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) duration40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Duration duration58 = duration40.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) 31, 52);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean63 = duration58.equals((java.lang.Object) localTime62);
        org.joda.time.Instant instant65 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration58, 28);
        java.lang.String str66 = duration58.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(86400000L, chronology31);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology33.months();
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.plusMonths(292278993);
        org.joda.time.DateTime dateTime40 = dateTime29.plusMinutes(26209701);
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears(37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime36", (dateTime29.compareTo(dateTime36) == 0) == dateTime29.equals(dateTime36));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (-23));
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.plusYears(10);
        boolean boolean7 = localDate3.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYearOfCentury(5);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(10);
        java.util.Date date13 = localDate12.toDate();
        boolean boolean14 = localDate9.equals((java.lang.Object) localDate12);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime18 = localDate9.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime2.withZoneRetainFields(dateTimeZone19);
        int int21 = dateTime2.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean21 = dateTime17.isAfterNow();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime dateTime37 = dateTime17.minus((org.joda.time.ReadableDuration) duration35);
        long long38 = duration35.getMillis();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = duration52.plus((long) 'u');
        org.joda.time.Period period55 = duration54.toPeriod();
        boolean boolean56 = duration45.isEqual((org.joda.time.ReadableDuration) duration54);
        boolean boolean57 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration54);
        long long58 = duration54.getStandardMinutes();
        org.joda.time.Instant instant59 = instant4.plus((org.joda.time.ReadableDuration) duration54);
        long long60 = duration54.getStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZone(dateTimeZone20);
        boolean boolean22 = dateMidnight8.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        mutableDateTime24.setRounding(dateTimeField29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundCeiling();
        int int33 = dateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(86400000L, chronology35);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfSecond();
        org.joda.time.DateTime dateTime40 = mutableDateTime32.toDateTime(chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(86400000L, chronology42);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.minuteOfHour();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean50 = dateTime48.isSupported(dateTimeFieldType49);
        java.lang.String str51 = dateTimeFieldType49.getName();
        boolean boolean52 = localDateTime43.isSupported(dateTimeFieldType49);
        boolean boolean53 = dateTime40.isSupported(dateTimeFieldType49);
        int int54 = localDateTime6.get(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and dateTime40", (mutableDateTime24.compareTo(dateTime40) == 0) == mutableDateTime24.equals(dateTime40));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.Instant instant3 = instant0.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime2", (instant3.compareTo(dateTime2) == 0) == instant3.equals(dateTime2));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.Period period8 = period6.minusDays(0);
        org.joda.time.Duration duration9 = period6.toStandardDuration();
        org.joda.time.Duration duration10 = period6.toStandardDuration();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZone(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays(0);
        int int26 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant27 = dateTime20.toInstant();
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DateTime dateTime29 = instant27.toDateTimeISO();
        org.joda.time.Interval interval30 = duration10.toIntervalTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant33 = instant27.withDurationAdded((long) 32769, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = instant27.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType44 = mutablePeriod43.getPeriodType();
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) instant27, periodType44);
        org.joda.time.Period period47 = period45.minusWeeks(227);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.withZone(dateTimeZone66);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.PeriodType periodType71 = periodType69.withWeeksRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        org.joda.time.Period period73 = duration56.toPeriod();
        org.joda.time.Period period74 = period73.toPeriod();
        org.joda.time.Period period75 = period45.withFields((org.joda.time.ReadablePeriod) period74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant27", (dateTime13.compareTo(instant27) == 0) == dateTime13.equals(instant27));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = dateMidnight17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.withFieldAdded(durationFieldType25, 8);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight17);
        int int29 = dateMidnight17.getYearOfCentury();
        boolean boolean30 = dateMidnight17.isAfterNow();
        org.joda.time.Instant instant31 = dateMidnight17.toInstant();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant31, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.MutableDateTime mutableDateTime35 = instant31.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight14 and instant31", (dateMidnight14.compareTo(instant31) == 0) == dateMidnight14.equals(instant31));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.roundFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Instant instant21 = instant18.withDurationAdded((long) '4', 292278993);
        org.joda.time.MutableDateTime mutableDateTime22 = instant18.toMutableDateTime();
        boolean boolean23 = localTime8.equals((java.lang.Object) instant18);
        org.joda.time.LocalTime localTime25 = localTime8.plusHours(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant18", (dateTime11.compareTo(instant18) == 0) == dateTime11.equals(instant18));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.MutableDateTime mutableDateTime41 = property9.add(954);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant34", (dateTime20.compareTo(instant34) == 0) == dateTime20.equals(instant34));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis(14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant15", (dateTime2.compareTo(instant15) == 0) == dateTime2.equals(instant15));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean19 = dateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = dateTime17.get(dateTimeFieldType20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = dateTime24.toString(dateTimeFormatter25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        mutableDateTime30.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime30.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime28.withZoneRetainFields(dateTimeZone35);
        boolean boolean38 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Interval interval39 = duration6.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(86400000L, chronology42);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(2392146000L, chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekOfWeekyear();
        boolean boolean51 = interval39.equals((java.lang.Object) chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime36 and dateTime46", (mutableDateTime36.compareTo(dateTime46) == 0) == mutableDateTime36.equals(dateTime46));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant6 = instant0.minus((long) 32769);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime dateTime8 = instant6.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.Instant instant4 = instant0.minus(0L);
        org.joda.time.DateTime dateTime5 = instant0.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.Instant instant21 = instant19.minus(1645514367315L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration18.plus((long) 'u');
        org.joda.time.Period period21 = duration20.toPeriod();
        boolean boolean22 = duration11.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration31.plus((long) 'u');
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration33, (-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime38.plusMonths(999);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 1, periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) dateTime44, periodType46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        long long56 = duration55.getStandardMinutes();
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration55);
        int int58 = duration11.compareTo((org.joda.time.ReadableDuration) duration55);
        long long59 = duration11.getStandardMinutes();
        org.joda.time.Instant instant60 = instant0.minus((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime3", (instant60.compareTo(mutableDateTime3) == 0) == instant60.equals(mutableDateTime3));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = instant16.getChronology();
        org.joda.time.DateTime dateTime21 = instant16.toDateTimeISO();
        org.joda.time.Instant instant24 = instant16.withDurationAdded((long) 86404, 66);
        org.joda.time.Instant instant26 = instant24.plus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.DateTime dateTime20 = instant16.toDateTime();
        org.joda.time.DateTime dateTime21 = instant16.toDateTimeISO();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(86400000L, chronology30);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.millisOfSecond();
        boolean boolean35 = durationFieldType27.isSupported(chronology32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime38.setDayOfYear(1);
        mutableDateTime38.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime38.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone43);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.monthOfYear();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.Period period51 = period50.negated();
        org.joda.time.Days days52 = period51.toStandardDays();
        long long55 = chronology46.add((org.joda.time.ReadablePeriod) days52, (long) (-19045), (int) 'a');
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(60000L, 13148730000L, chronology46);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(86400000L, chronology59);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(384309744566400001L, chronology61);
        mutableDateTime64.addSeconds((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        mutableDateTime64.setZoneRetainFields(dateTimeZone68);
        org.joda.time.Chronology chronology71 = chronology46.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime21.withZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.plusMillis(1970);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        int int64 = dateTimeZone60.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology65 = chronology34.withZone(dateTimeZone60);
        boolean boolean66 = period10.equals((java.lang.Object) chronology34);
        org.joda.time.DurationField durationField67 = chronology34.weekyears();
        org.joda.time.DurationField durationField68 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField69 = chronology34.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField67 and durationField68", (durationField67.compareTo(durationField68) == 0) == durationField67.equals(durationField68));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Instant instant11 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime12 = instant0.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime16.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime.Property property37 = dateTime20.year();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateMidnight.Property property39 = dateMidnight13.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = property39.withMinimumValue();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = dateTime66.toString(dateTimeFormatter67);
        int int69 = dateTime66.getMillisOfSecond();
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight40.withDurationAdded((org.joda.time.ReadableDuration) duration61, 1439);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.DateTime.Property property76 = dateTime75.yearOfEra();
        org.joda.time.DateTime dateTime77 = dateTime75.toDateTime();
        int int78 = dateTime75.getMinuteOfHour();
        org.joda.time.Period period79 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration81 = duration61.plus((long) 6);
        org.joda.time.Minutes minutes82 = duration81.toStandardMinutes();
        org.joda.time.ReadableDuration readableDuration83 = null;
        boolean boolean84 = duration81.isLongerThan(readableDuration83);
        long long85 = duration81.getStandardSeconds();
        org.joda.time.Instant instant86 = instant0.plus((org.joda.time.ReadableDuration) duration81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime12", (instant0.compareTo(mutableDateTime12) == 0) == instant0.equals(mutableDateTime12));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(728, 10, (int) (short) 1, 2012);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setDayOfYear(1);
        mutableDateTime7.setMillisOfSecond((int) 'u');
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology20.weekyears();
        org.joda.time.DateTime dateTime26 = mutableDateTime7.toDateTime(chronology20);
        mutablePeriod4.add((long) 262097, chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime26", (mutableDateTime7.compareTo(dateTime26) == 0) == mutableDateTime7.equals(dateTime26));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        java.lang.Object obj35 = null;
        boolean boolean36 = gregorianCalendar30.before(obj35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        java.util.Date date68 = gregorianCalendar67.getTime();
        gregorianCalendar30.setTime(date68);
        java.util.Date date75 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        date75.setDate(10);
        date75.setDate(99);
        long long80 = date75.getTime();
        date75.setTime((-28857600001L));
        org.joda.time.LocalTime localTime83 = org.joda.time.LocalTime.fromDateFields(date75);
        date75.setTime(31097L);
        boolean boolean86 = date68.before(date75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and gregorianCalendar67", (gregorianCalendar30.compareTo(gregorianCalendar67) == 0) == gregorianCalendar30.equals(gregorianCalendar67));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        int int3 = dateMidnight1.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        int int45 = dateTime42.getMillisOfSecond();
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.util.GregorianCalendar gregorianCalendar47 = dateTime42.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.plusYears(0);
        org.joda.time.Chronology chronology53 = yearMonthDay52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfMonth();
        org.joda.time.DurationField durationField56 = chronology53.years();
        org.joda.time.DateTime dateTime57 = dateTime16.withChronology(chronology53);
        org.joda.time.DateTime dateTime58 = dateMidnight5.toDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.weekyear();
        int int60 = dateTimeField59.getMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight5 and dateTime58", (dateMidnight5.compareTo(dateTime58) == 0) == dateMidnight5.equals(dateTime58));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        int int3 = dateMidnight1.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        int int45 = dateTime42.getMillisOfSecond();
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.util.GregorianCalendar gregorianCalendar47 = dateTime42.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.plusYears(0);
        org.joda.time.Chronology chronology53 = yearMonthDay52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfMonth();
        org.joda.time.DurationField durationField56 = chronology53.years();
        org.joda.time.DateTime dateTime57 = dateTime16.withChronology(chronology53);
        org.joda.time.DateTime dateTime58 = dateMidnight5.toDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.weekyear();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight5 and dateTime58", (dateMidnight5.compareTo(dateTime58) == 0) == dateMidnight5.equals(dateTime58));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMinutes(28);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology21);
        mutableDateTime0.setChronology(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime22", (dateTime5.compareTo(dateTime22) == 0) == dateTime5.equals(dateTime22));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(32769);
        org.joda.time.DateTime.Property property15 = dateTime12.era();
        org.joda.time.DateTime dateTime16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withChronology(chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZone(dateTimeZone31);
        boolean boolean33 = dateMidnight19.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight19.withCenturyOfEra(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.property(dateTimeFieldType36);
        java.lang.String str38 = dateTimeFieldType36.toString();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType36.getDurationType();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(86400000L, chronology42);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(2392146000L, chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType36.getField(chronology44);
        org.joda.time.Period period52 = new org.joda.time.Period(62887196422000L, chronology44);
        org.joda.time.DateTime dateTime53 = dateTime16.toDateTime(chronology44);
        org.joda.time.DurationField durationField54 = chronology44.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime53", (dateTime12.compareTo(dateTime53) == 0) == dateTime12.equals(dateTime53));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(16);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(60);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 39, dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean35 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfYear();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant40, readableInstant41, periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.years();
        boolean boolean45 = period43.isSupported(durationFieldType44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight38.plus((org.joda.time.ReadablePeriod) period43);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        mutableDateTime51.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime51.getZone();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateMidnight49.toDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime34.withZone(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and mutableDateTime57", (dateTime33.compareTo(mutableDateTime57) == 0) == dateTime33.equals(mutableDateTime57));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = instant16.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = property16.getAsText(locale17);
        java.util.Calendar calendar32 = dateTime6.toCalendar(locale17);
        int int33 = dateTime6.getMonthOfYear();
        int int34 = dateTime6.getMinuteOfHour();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 32769);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfYear();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant41, readableInstant42, periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        boolean boolean46 = period44.isSupported(durationFieldType45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight39.plus((org.joda.time.ReadablePeriod) period44);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.year();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfMonth();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(86400000L, chronology54);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight50.toMutableDateTime(chronology56);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateMidnight50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight50 and mutableDateTime58", (dateMidnight50.compareTo(mutableDateTime58) == 0) == dateMidnight50.equals(mutableDateTime58));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.getMaximumValue((long) 227);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("22");
        timeZone13.setRawOffset(5);
        boolean boolean16 = timeZone13.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        boolean boolean20 = dateTimeFormatter19.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        mutableDateTime22.setRounding(dateTimeField27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime35 = property31.roundHalfEvenCopy();
        int int36 = localDateTime35.size();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusWeeks((-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((int) ' ');
        java.util.Locale locale46 = java.util.Locale.ITALY;
        int int47 = property43.getMaximumShortTextLength(locale46);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("PT0S");
        int int50 = property43.getMaximumShortTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime35, 0, locale49);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale49);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getISO3Language();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("PT0S");
        int int65 = property58.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale53.getDisplayVariant(locale64);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale67.getISO3Language();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.yearOfEra();
        org.joda.time.DateTime dateTime74 = property72.addToCopy((int) ' ');
        java.util.Locale locale75 = java.util.Locale.ITALY;
        int int76 = property72.getMaximumShortTextLength(locale75);
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("PT0S");
        int int79 = property72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = locale67.getDisplayVariant(locale78);
        java.lang.String str81 = locale64.getDisplayLanguage(locale67);
        java.lang.String str82 = locale49.getDisplayLanguage(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter19.withLocale(locale67);
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.util.Locale locale85 = locale84.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter19.withLocale(locale84);
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.util.Locale locale88 = locale87.stripExtensions();
        java.util.Set<java.lang.String> strSet89 = locale88.getUnicodeLocaleKeys();
        java.lang.String str90 = locale84.getDisplayVariant(locale88);
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone13, locale84);
        java.lang.String str92 = dateTimeField2.getAsText(292278993, locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar52 and calendar91", (calendar52.compareTo(calendar91) == 0) == calendar52.equals(calendar91));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusYears(0);
        int int21 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime55 = dateTime49.withCenturyOfEra(100);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration34, 32);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 1969);
        org.joda.time.Instant instant62 = instant60.minus((-28857600001L));
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime64 = instant60.toMutableDateTimeISO();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime67.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime(dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone72);
        mutableDateTime73.setDayOfYear(1);
        mutableDateTime73.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone78 = mutableDateTime73.getZone();
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = dateTime71.withZoneRetainFields(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime71.toDateTimeISO();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean86 = dateTime84.isSupported(dateTimeFieldType85);
        org.joda.time.DateTime.Property property87 = dateTime71.property(dateTimeFieldType85);
        int int88 = mutableDateTime64.get(dateTimeFieldType85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime63", (instant60.compareTo(mutableDateTime63) == 0) == instant60.equals(mutableDateTime63));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        boolean boolean42 = period40.isSupported(durationFieldType41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight35.plus((org.joda.time.ReadablePeriod) period40);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        mutableDateTime48.setDayOfYear(1);
        mutableDateTime48.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime48.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateMidnight46.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay31.toDateMidnight(dateTimeZone53);
        java.lang.String str57 = dateMidnight56.toString();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.minusYears(83);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.DateTime.Property property66 = dateTime62.yearOfCentury();
        org.joda.time.DateTime.Property property67 = dateTime62.dayOfWeek();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = dateTime70.toString(dateTimeFormatter71);
        org.joda.time.DateTime dateTime74 = dateTime70.withDayOfWeek(4);
        org.joda.time.DateTime.Property property75 = dateTime70.minuteOfHour();
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 1, periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        boolean boolean80 = periodType77.isSupported(durationFieldType79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(86400000L, chronology82);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.millisOfSecond();
        boolean boolean87 = durationFieldType79.isSupported(chronology84);
        org.joda.time.DateTimeField dateTimeField88 = chronology84.secondOfDay();
        org.joda.time.DurationField durationField89 = chronology84.minutes();
        org.joda.time.DateTime dateTime90 = dateTime70.withChronology(chronology84);
        org.joda.time.DateTime dateTime92 = dateTime90.withYearOfEra(26461865);
        int int93 = dateTime62.compareTo((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = dateMidnight59.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime90", (dateTime2.compareTo(dateTime90) == 0) == dateTime2.equals(dateTime90));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Instant instant12 = instant9.withDurationAdded((long) '4', 292278993);
        org.joda.time.Instant instant14 = instant12.minus((long) 441);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundFloor();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        long long17 = duration16.getStandardMinutes();
        org.joda.time.Duration duration18 = duration16.toDuration();
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) duration16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableDuration) duration16, periodType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        org.joda.time.Instant instant26 = mutableDateTime23.toInstant();
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTime();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        boolean boolean29 = periodType20.equals((java.lang.Object) instant26);
        org.joda.time.PeriodType periodType30 = periodType20.withMonthsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and instant26", (mutableDateTime23.compareTo(instant26) == 0) == mutableDateTime23.equals(instant26));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusYears(0);
        int int21 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime55 = dateTime49.withCenturyOfEra(100);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration34, 32);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 1969);
        org.joda.time.Instant instant62 = instant60.minus((-28857600001L));
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfYear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.minusDays(0);
        org.joda.time.Interval interval69 = dateMidnight68.toInterval();
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.minusDays(0);
        org.joda.time.Interval interval75 = dateMidnight74.toInterval();
        org.joda.time.Interval interval76 = interval69.gap((org.joda.time.ReadableInterval) interval75);
        boolean boolean77 = interval75.isAfterNow();
        org.joda.time.DateTime dateTime78 = interval75.getEnd();
        int int79 = instant60.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableDateTime mutableDateTime80 = instant60.toMutableDateTimeISO();
        org.joda.time.Instant instant81 = instant60.toInstant();
        boolean boolean83 = instant60.isBefore(2264518192246246L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime63 and instant60", (mutableDateTime63.compareTo(instant60) == 0) == mutableDateTime63.equals(instant60));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.Instant instant20 = instant16.plus(31536000000L);
        org.joda.time.DateTime dateTime21 = instant20.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("07:10:59.666");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime27.toString(dateTimeFormatter28);
        int int30 = dateTime27.getMillisOfSecond();
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime27.toGregorianCalendar();
        gregorianCalendar32.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar32, chronology35);
        java.lang.Object obj37 = null;
        boolean boolean38 = gregorianCalendar32.before(obj37);
        java.util.TimeZone timeZone39 = gregorianCalendar32.getTimeZone();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder43 = builder40.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder48 = builder43.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder52 = builder43.setDate(51, 14, 973);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.lang.String str54 = timeZone53.getID();
        int int56 = timeZone53.getOffset((long) ' ');
        int int57 = timeZone53.getRawOffset();
        java.util.Calendar.Builder builder58 = builder43.setTimeZone(timeZone53);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone53);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone53);
        int int61 = timeZone53.getRawOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean66 = dateTimeField64.isLeap((long) 1439);
        long long68 = dateTimeField64.roundFloor(0L);
        boolean boolean70 = dateTimeField64.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone72);
        mutableDateTime73.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType76.getField(chronology77);
        mutableDateTime73.setRounding(dateTimeField78);
        int int81 = dateTimeField78.getLeapAmount((long) (byte) 10);
        java.lang.String str83 = dateTimeField78.getAsText(0L);
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = dateTimeField78.getAsShortText(1969, locale85);
        java.lang.String str87 = dateTimeField64.getAsText((int) (byte) 100, locale85);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone53, locale85);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone39, locale85);
        boolean boolean90 = timeZone1.hasSameRules(timeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar59 and calendar89", (calendar59.compareTo(calendar89) == 0) == calendar59.equals(calendar89));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        mutableDateTime1.addMinutes(12);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        mutableDateTime1.setSecondOfDay(47);
        java.lang.String str14 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime17.toString(dateTimeFormatter18);
        org.joda.time.DateTime dateTime21 = dateTime17.withDayOfWeek(4);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(86400000L, chronology23);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        long long30 = chronology25.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfDay();
        org.joda.time.DateTime dateTime32 = dateTime21.toDateTime(chronology25);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        boolean boolean39 = dateMidnight37.isEqualNow();
        org.joda.time.DateMidnight.Property property40 = dateMidnight37.dayOfWeek();
        int int41 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateMidnight37);
        boolean boolean42 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int43 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime32", (dateTime17.compareTo(dateTime32) == 0) == dateTime17.equals(dateTime32));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        int int8 = dateTime6.getDayOfWeek();
        org.joda.time.DateTime.Property property9 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int15 = timeOfDay14.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = timeOfDay17.toDateTimeToday(dateTimeZone18);
        int[] intArray20 = timeOfDay17.getValues();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay17.property(dateTimeFieldType24);
        int int27 = property26.getMinimumValueOverall();
        org.joda.time.DurationField durationField28 = property26.getDurationField();
        int int29 = property26.getMinimumValueOverall();
        java.lang.String str30 = property26.getAsString();
        org.joda.time.TimeOfDay timeOfDay32 = property26.addToCopy(83459999);
        long long34 = chronology10.set((org.joda.time.ReadablePartial) timeOfDay32, (long) 56);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField28", (durationField12.compareTo(durationField28) == 0) == durationField12.equals(durationField28));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration24.plus((long) 'u');
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration26, (-1));
        org.joda.time.Duration duration29 = duration26.toDuration();
        org.joda.time.Duration duration30 = duration26.toDuration();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) 802);
        org.joda.time.Seconds seconds33 = duration32.toStandardSeconds();
        org.joda.time.Duration duration35 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration32, 44);
        org.joda.time.Instant instant36 = instant15.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant39 = instant15.withDurationAdded(0L, (-263502));
        org.joda.time.Instant instant42 = instant15.withDurationAdded(1645514495771L, 58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant15", (dateTime2.compareTo(instant15) == 0) == dateTime2.equals(instant15));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 99);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("22");
        timeZone9.setRawOffset(5);
        boolean boolean12 = timeZone9.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        boolean boolean16 = dateTimeFormatter15.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property27.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime31 = property27.roundHalfEvenCopy();
        int int32 = localDateTime31.size();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusWeeks((-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((int) ' ');
        java.util.Locale locale42 = java.util.Locale.ITALY;
        int int43 = property39.getMaximumShortTextLength(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("PT0S");
        int int46 = property39.getMaximumShortTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime31, 0, locale45);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale45);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getISO3Language();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.DateTime dateTime56 = property54.addToCopy((int) ' ');
        java.util.Locale locale57 = java.util.Locale.ITALY;
        int int58 = property54.getMaximumShortTextLength(locale57);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("PT0S");
        int int61 = property54.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale49.getDisplayVariant(locale60);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getISO3Language();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.DateTime dateTime70 = property68.addToCopy((int) ' ');
        java.util.Locale locale71 = java.util.Locale.ITALY;
        int int72 = property68.getMaximumShortTextLength(locale71);
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("PT0S");
        int int75 = property68.getMaximumShortTextLength(locale74);
        java.lang.String str76 = locale63.getDisplayVariant(locale74);
        java.lang.String str77 = locale60.getDisplayLanguage(locale63);
        java.lang.String str78 = locale45.getDisplayLanguage(locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter15.withLocale(locale63);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.util.Locale locale81 = locale80.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter15.withLocale(locale80);
        java.util.Locale locale83 = java.util.Locale.FRANCE;
        java.util.Locale locale84 = locale83.stripExtensions();
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleKeys();
        java.lang.String str86 = locale80.getDisplayVariant(locale84);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone9, locale80);
        java.util.TimeZone timeZone88 = calendar87.getTimeZone();
        boolean boolean89 = timeZone3.hasSameRules(timeZone88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar87", (calendar48.compareTo(calendar87) == 0) == calendar48.equals(calendar87));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        int int5 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property7 = dateTime2.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTime dateTime14 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime.Property property15 = dateTime10.minuteOfHour();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 1, periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        boolean boolean20 = periodType17.isSupported(durationFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(86400000L, chronology22);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfSecond();
        boolean boolean27 = durationFieldType19.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        org.joda.time.DateTime dateTime30 = dateTime10.withChronology(chronology24);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra(26461865);
        int int33 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime2.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime30", (dateTime10.compareTo(dateTime30) == 0) == dateTime10.equals(dateTime30));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withChronology(chronology29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((long) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        boolean boolean47 = periodType44.isSupported(durationFieldType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration42, periodType44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 0, (long) 14, periodType44, chronology49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = duration60.plus((long) 'u');
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration62, (-1));
        org.joda.time.Interval interval65 = interval51.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Instant instant66 = instant16.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) 26461865);
        org.joda.time.Instant instant69 = instant16.plus((org.joda.time.ReadableDuration) duration68);
        long long70 = duration68.getStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTime dateTime18 = instant16.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration14.plus((long) 'u');
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration16, (-1));
        long long19 = mutableDateTime7.getMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        long long43 = duration42.getStandardMinutes();
        org.joda.time.Duration duration44 = duration42.toDuration();
        org.joda.time.Period period45 = new org.joda.time.Period((java.lang.Object) duration42);
        org.joda.time.Duration duration46 = duration26.plus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration42, 25202);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, readableInstant49);
        org.joda.time.Period period51 = duration42.toPeriod();
        org.joda.time.Instant instant52 = instant4.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant54 = instant4.minus((long) (-70014));
        org.joda.time.Instant instant56 = instant54.withMillis((long) 728);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant4", (mutableDateTime1.compareTo(instant4) == 0) == mutableDateTime1.equals(instant4));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withChronology(chronology22);
        int int24 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime17.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.minusHours(9);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        mutableDateTime30.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime30.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZone(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight9.toMutableDateTime(dateTimeZone35);
        org.joda.time.Instant instant38 = dateMidnight9.toInstant();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(86400000L, chronology43);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj41, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = dateTime49.toString(dateTimeFormatter50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 1, periodType71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, periodType71);
        org.joda.time.PeriodType periodType74 = periodType71.withWeeksRemoved();
        org.joda.time.Period period75 = interval46.toPeriod(periodType71);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(86400000L, chronology77);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 84961100, (long) 26425526, periodType71, chronology79);
        org.joda.time.Period period86 = new org.joda.time.Period(61, (int) (short) -1, 502, 502);
        mutablePeriod81.mergePeriod((org.joda.time.ReadablePeriod) period86);
        int int88 = period86.getMillis();
        org.joda.time.Days days89 = period86.toStandardDays();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight9.withPeriodAdded((org.joda.time.ReadablePeriod) days89, 1971);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and instant38", (dateMidnight9.compareTo(instant38) == 0) == dateMidnight9.equals(instant38));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant16", (dateTime2.compareTo(instant16) == 0) == dateTime2.equals(instant16));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        boolean boolean5 = instant0.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime3", (instant0.compareTo(mutableDateTime3) == 0) == instant0.equals(mutableDateTime3));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        gregorianCalendar3.set(2028, 515, 383);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 11, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtCurrentTime();
        int[] intArray19 = yearMonthDay17.getValues();
        int int20 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate7, intArray19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime35.setDayOfYear(1);
        mutableDateTime35.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime35.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getShortName((long) ' ');
        mutableDateTime22.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localDate7.toDateTimeAtStartOfDay(dateTimeZone40);
        int int46 = localDate7.size();
        org.joda.time.LocalDate localDate48 = localDate7.plusYears(5);
        org.joda.time.LocalDate localDate50 = localDate7.minusWeeks(769);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withZone(dateTimeZone58);
        org.joda.time.DateTime.Property property60 = dateTime56.dayOfWeek();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        java.lang.String str63 = dateTimeZone62.getID();
        int int65 = dateTimeZone62.getOffsetFromLocal((long) 2);
        org.joda.time.DateTime dateTime66 = dateTime56.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = localDate50.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(2042, 1166, 1955, 84961100);
        boolean boolean73 = dateTime67.equals((java.lang.Object) 1166);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime66", (dateTime10.compareTo(dateTime66) == 0) == dateTime10.equals(dateTime66));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (-23));
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.plusYears(10);
        boolean boolean7 = localDate3.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYearOfCentury(5);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(10);
        java.util.Date date13 = localDate12.toDate();
        boolean boolean14 = localDate9.equals((java.lang.Object) localDate12);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime18 = localDate9.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime2.withZoneRetainFields(dateTimeZone19);
        int int21 = dateTime2.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(57);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23);
        int int25 = mutableDateTime18.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime18.add(readablePeriod26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration36);
        java.lang.String str38 = duration36.toString();
        org.joda.time.DateTime dateTime40 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration36, 26432314);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(periodType41);
        mutablePeriod42.addDays((int) '#');
        mutablePeriod42.setMillis(16);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.monthOfYear();
        java.util.Date date52 = localDateTime50.toDate();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withCenturyOfEra(10);
        int int57 = localDateTime56.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.weekyear();
        org.joda.time.LocalDateTime localDateTime59 = property58.getLocalDateTime();
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        mutablePeriod42.setPeriod((long) 26, (long) 1069, chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime64 = dateTime14.toDateTime(chronology60);
        org.joda.time.DateTime.Property property65 = dateTime14.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime64", (dateTime14.compareTo(dateTime64) == 0) == dateTime14.equals(dateTime64));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22");
        timeZone1.setRawOffset(5);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        boolean boolean8 = dateTimeFormatter7.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime10.setRounding(dateTimeField15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfEvenCopy();
        int int24 = localDateTime23.size();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((-1));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0S");
        int int38 = property31.getMaximumShortTextLength(locale37);
        java.lang.String str39 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime23, 0, locale37);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale37);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getISO3Language();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) ' ');
        java.util.Locale locale49 = java.util.Locale.ITALY;
        int int50 = property46.getMaximumShortTextLength(locale49);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("PT0S");
        int int53 = property46.getMaximumShortTextLength(locale52);
        java.lang.String str54 = locale41.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) ' ');
        java.util.Locale locale63 = java.util.Locale.ITALY;
        int int64 = property60.getMaximumShortTextLength(locale63);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT0S");
        int int67 = property60.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale55.getDisplayVariant(locale66);
        java.lang.String str69 = locale52.getDisplayLanguage(locale55);
        java.lang.String str70 = locale37.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter7.withLocale(locale55);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Locale locale73 = locale72.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter7.withLocale(locale72);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = locale72.getDisplayVariant(locale76);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone1, locale72);
        java.util.TimeZone timeZone80 = calendar79.getTimeZone();
        int int81 = timeZone80.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }
}


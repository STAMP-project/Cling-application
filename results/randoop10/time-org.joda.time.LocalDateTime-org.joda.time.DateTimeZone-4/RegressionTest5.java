import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT0.117S", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt0.117s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.setPeriod(readableInterval4);
        mutablePeriod1.setPeriod(0, 10, 0, (int) (byte) 100, 32769, 100, 1970, 1970);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = period18.normalizedStandard(periodType19);
        java.lang.String str21 = period18.toString();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period18);
        mutablePeriod1.addSeconds(2030);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime33 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        int int35 = property34.getMaximumValue();
        org.joda.time.DurationField durationField36 = property34.getLeapDurationField();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withChronology(chronology28);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = dateTime23.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight17.property(dateTimeFieldType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusYears(0);
        org.joda.time.Chronology chronology72 = yearMonthDay71.getChronology();
        boolean boolean73 = dateTimeFieldType33.isSupported(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime6.toDateTime(chronology72);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        boolean boolean80 = period78.isSupported(durationFieldType79);
        org.joda.time.DateTime dateTime82 = dateTime6.withFieldAdded(durationFieldType79, 20);
        boolean boolean83 = dateTime6.isBeforeNow();
        int int84 = dateTime6.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str40, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str63, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(gregorianCalendar66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2022 + "'", int84 == 2022);
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(14);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYear(26277594);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withSecondOfMinute(26266117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26266117 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology4.add(readablePeriod7, (long) 83459999, 99);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(15L, chronology4);
        org.joda.time.DateTimeField dateTimeField13 = chronology4.weekOfWeekyear();
        long long15 = dateTimeField13.remainder((long) 2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 83459999L + "'", long10 == 83459999L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 259200002L + "'", long15 == 259200002L);
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        java.util.Date date3 = new java.util.Date(59, 100, 1969);
        date3.setHours(2022);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getYear();
        int int8 = date3.compareTo(date6);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Dec 12 06:00:00 GMT+00:00 1972");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:19:41 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 122 + "'", int7 == 122);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate5 = property3.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withYearOfCentury(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(734642L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property4.setCopy((-19045));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("Tempo universale coordinato");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Tempo universale coordinato\" is malformed at \"empo universale coordinato\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("mardi");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"mardi\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(122, 2052, 35, (int) (byte) 100, 2922789, 69, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        org.joda.time.Period period9 = period7.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.forFields(durationFieldTypeArray10);
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, (-31536000001L), periodType11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withChronology(chronology24);
        int int26 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((java.lang.Object) period42, chronology43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) period42);
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval45);
        long long47 = interval45.toDurationMillis();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        java.lang.String str10 = dateTimeFieldType8.getName();
        org.joda.time.DateTime dateTime12 = dateTime4.withField(dateTimeFieldType8, (int) (byte) 10);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMinutes(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime15.withDate(43, 69, 71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minuteOfHour" + "'", str10, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 83459999 + "'", int13 == 83459999);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-472953600000L));
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime11 = property7.set(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        int int4 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withWeekyear((int) 'a');
        java.util.Date date7 = localDate0.toDate();
        java.lang.String str8 = date7.toLocaleString();
        date7.setHours(42);
        date7.setSeconds((-23));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Feb 23 17:59:37 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22-feb-2022 0.00.00" + "'", str8, "22-feb-2022 0.00.00");
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        java.util.Date date3 = new java.util.Date(24, 2152, 16);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed May 16 00:00:00 GMT+00:00 2103");
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.minusSeconds(366);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.plusYears(10);
        org.joda.time.LocalDate.Property property6 = localDate5.year();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime11.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration29.plus((long) 'u');
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime42, periodType44);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = interval47.withChronology(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusDays(0);
        org.joda.time.Interval interval55 = dateMidnight54.toInterval();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusDays(0);
        org.joda.time.Interval interval61 = dateMidnight60.toInterval();
        org.joda.time.Interval interval62 = interval55.gap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Interval interval63 = interval49.gap((org.joda.time.ReadableInterval) interval55);
        boolean boolean64 = localDate5.equals((java.lang.Object) interval63);
        org.joda.time.LocalDate.Property property65 = localDate5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getRangeDurationType();
        org.joda.time.LocalDate.Property property68 = localDate5.property(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime70 = localTime0.withField(dateTimeFieldType66, (-23));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNull(interval62);
        org.junit.Assert.assertNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNull(durationFieldType67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withWeekyear(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withEra(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean6 = dateTimeField4.isLeap((long) 1439);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 11, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime12.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.DateTime dateTime20 = yearMonthDay19.toDateTimeAtCurrentTime();
        int[] intArray21 = yearMonthDay19.getValues();
        int int22 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDate9, intArray21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant27, readableInstant28, periodType29);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        mutableDateTime37.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime37.getZone();
        mutableDateTime33.setZoneRetainFields(dateTimeZone42);
        java.lang.String str45 = dateTimeZone42.getShortName((long) ' ');
        mutableDateTime24.setZone(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate9.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.PeriodType periodType50 = periodType48.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime47, periodType50);
        int int52 = dateTime47.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2053, 3, 31]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusDays((-292275054));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) period36, chronology37);
        int[] intArray40 = chronology20.get((org.joda.time.ReadablePeriod) period36, (-1L));
        org.joda.time.DateTimeField dateTimeField41 = chronology20.monthOfYear();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.Period period47 = period45.plusDays(9);
        int[] intArray49 = chronology20.get((org.joda.time.ReadablePeriod) period47, (long) 8);
        org.joda.time.DateTime dateTime50 = dateTime16.withChronology(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period51 = new org.joda.time.Period((java.lang.Object) chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 8]");
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfDay(2152);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusDays(69);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(26252);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusWeeks(2005);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMonthOfYear(152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(2022);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        int int23 = dateMidnight21.getEra();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.plusWeeks(2022);
        org.joda.time.DateMidnight.Property property26 = dateMidnight21.yearOfEra();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.withDayOfMonth(31);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withChronology(chronology39);
        int int41 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateTime dateTime43 = dateTime34.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean45 = dateTime34.isSupported(dateTimeFieldType44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight21.property(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property47 = timeOfDay17.property(dateTimeFieldType44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int9 = dateTimeField6.getLeapAmount((long) (byte) 10);
        org.joda.time.DurationField durationField10 = dateTimeField6.getDurationField();
        java.lang.String str12 = dateTimeField6.getAsShortText((long) 32770);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate6 = localDate2.withField(dateTimeFieldType4, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        int int8 = dateMidnight7.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.plusDays(12);
        int int11 = dateMidnight7.getWeekOfWeekyear();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getISO3Language();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((int) ' ');
        java.util.Locale locale21 = java.util.Locale.ITALY;
        int int22 = property18.getMaximumShortTextLength(locale21);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("PT0S");
        int int25 = property18.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale13.getDisplayVariant(locale24);
        java.lang.String str27 = locale24.getVariant();
        java.lang.String str29 = locale24.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateMidnight7.toString("hours", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "deu" + "'", str14, "deu");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant5, readableInstant6, periodType7);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) period8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundCeiling();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        long long20 = duration19.getStandardMinutes();
        org.joda.time.Duration duration21 = duration19.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        mutableDateTime33.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime26.withZoneRetainFields(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone38);
        mutableDateTime11.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        mutableDateTime51.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime51.getZone();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime49.withZoneRetainFields(dateTimeZone56);
        mutableDateTime11.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 973, dateTimeZone56);
        java.lang.Class<?> wildcardClass61 = dateTimeZone56.getClass();
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str47, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        long long28 = duration27.getStandardMinutes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime54.toString(dateTimeFormatter55);
        int int57 = dateTime54.getMillisOfSecond();
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean59 = duration27.equals((java.lang.Object) period58);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration27);
        mutableDateTime7.setWeekyear(32770);
        int int63 = mutableDateTime7.getSecondOfDay();
        int int64 = mutableDateTime7.getEra();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays(2629746000L);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.minus(readableDuration67);
        long long69 = duration68.getStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.add((org.joda.time.ReadableDuration) duration68, 122);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 227210054400000000 * 122");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str33, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str56, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 999 + "'", int57 == 999);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 26382 + "'", int63 == 26382);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 227210054400000L + "'", long69 == 227210054400000L);
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        java.util.Locale locale1 = new java.util.Locale("Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        java.util.Date date5 = localDateTime3.toDate();
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear(16);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        boolean boolean12 = locale1.equals((java.lang.Object) property11);
        org.junit.Assert.assertEquals(locale1.toString(), "thu jan 01 00:00:00 gmt+00:00 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension('4', "10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        int int4 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withWeekyear((int) 'a');
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths(2);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        int int11 = localDate9.getDayOfWeek();
        int int12 = localDate9.getYear();
        int int13 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate9.withWeekyear((int) 'a');
        org.joda.time.LocalDate localDate17 = localDate15.minusDays(22);
        org.joda.time.LocalDate localDate19 = localDate15.plusDays(1970);
        int int20 = localDate0.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = period25.normalizedStandard(periodType26);
        org.joda.time.LocalTime localTime28 = localTime21.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withChronology(chronology39);
        int int41 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateTime dateTime43 = dateTime34.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean45 = dateTime34.isSupported(dateTimeFieldType44);
        int int46 = dateTime34.getYearOfEra();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 1, periodType48);
        org.joda.time.DateTime dateTime50 = dateTime34.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.LocalTime localTime51 = localTime21.minus((org.joda.time.ReadablePeriod) period49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDate0.compareTo((org.joda.time.ReadablePartial) localTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1969 + "'", int46 == 1969);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime5.toMutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.minuteOfDay();
        mutableDateTime14.setDate(83459999L);
        int int18 = mutableDateTime14.getMonthOfYear();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Deutsch");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setVariant("1-gen-1969 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1-gen-1969 0.00.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(10);
        boolean boolean6 = localDate2.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property7 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate8.minusDays(26209701);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        long long20 = duration19.getStandardMinutes();
        org.joda.time.Duration duration21 = duration19.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        mutableDateTime33.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime26.withZoneRetainFields(dateTimeZone38);
        int int42 = dateTimeZone38.getOffsetFromLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = localDate12.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = dateTime44.plusWeeks(8);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.Duration duration54 = interval52.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime46.withDurationAdded((org.joda.time.ReadableDuration) duration54, 2070);
        boolean boolean57 = duration1.isEqual((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        mutableDateTime59.setDayOfYear(1);
        mutableDateTime59.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime59.getZone();
        boolean boolean66 = dateTimeZone64.isStandardOffset((long) (short) 1);
        int int68 = dateTimeZone64.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        java.util.Locale.Category category74 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        long long76 = dateTimeField71.set((long) ' ', "22", locale75);
        boolean boolean77 = dateTimeZone64.equals((java.lang.Object) "22");
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        mutableDateTime80.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        mutableDateTime80.setRounding(dateTimeField85);
        int int88 = dateTimeField85.getLeapAmount((long) (byte) 10);
        java.lang.String str90 = dateTimeField85.getAsText(0L);
        java.util.Locale locale92 = java.util.Locale.ITALIAN;
        java.lang.String str93 = dateTimeField85.getAsShortText(1969, locale92);
        java.lang.String str94 = dateTimeZone64.getName((long) 1439, locale92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate95 = new org.joda.time.LocalDate((java.lang.Object) duration54, dateTimeZone64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.FORMAT + "'", category74.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale75);
// flaky:         org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-61472908799968L) + "'", long76 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970" + "'", str90, "1970");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1969" + "'", str93, "1969");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00" + "'", str94, "+00:00");
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight.Property property27 = dateMidnight0.dayOfWeek();
        int int28 = dateMidnight0.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = dateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType13.getRangeDurationType();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.withFieldAdded(durationFieldType15, 1439);
        org.joda.time.LocalTime localTime19 = timeOfDay18.toLocalTime();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusHours((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = timeOfDay18.isAfter((org.joda.time.ReadablePartial) localDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) period19, chronology20);
        int[] intArray23 = chronology3.get((org.joda.time.ReadablePeriod) period19, (-1L));
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology3);
        int int25 = mutableDateTime24.getSecondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTime.Property property49 = dateTime32.year();
        org.joda.time.DateTime.Property property50 = dateTime32.weekyear();
        org.joda.time.DateTime dateTime52 = dateTime32.minusMinutes(2152);
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = dateTime56.toString(dateTimeFormatter57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = null;
        java.lang.String str82 = dateTime80.toString(dateTimeFormatter81);
        org.joda.time.DateTime.Property property83 = dateTime80.secondOfDay();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property85 = dateTime80.year();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, -1]");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 42 + "'", int25 == 42);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str30, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str58, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str82, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 1, periodType33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration29, periodType33);
        mutablePeriod35.setValue(4, 6);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod8.setHours(86399);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue(17, 26357117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str13, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.withMinimumValue();
        boolean boolean8 = property4.isLeap();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DurationField[weekyears]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=durationfield[weekyears]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        long long17 = dateTimeZone13.convertUTCToLocal((long) 999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(26339731, 37, 26357397, 44, 802, 1955, 86399984, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 999L + "'", long17 == 999L);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.set(28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDayOfMonth((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italian", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Italian", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean14 = strSet12.isEmpty();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet12);
        boolean boolean17 = strSet12.add("T00:00:00.000");
        java.lang.String str18 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet12);
        java.util.stream.Stream<java.lang.String> strStream19 = strSet12.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream20 = strSet12.parallelStream();
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12, filteringMode21);
        strSet12.clear();
        java.lang.Object[] objArray24 = strSet12.toArray();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime33 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        java.util.Locale locale37 = new java.util.Locale("Jan", "P-100W");
        java.lang.String str38 = property34.getAsShortText(locale37);
        long long39 = property34.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = property34.setCopy("00:00:02.005");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:02.005\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals(locale37.toString(), "jan_P-100W");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "59" + "'", str38, "59");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 59999L + "'", long39 == 59999L);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(86400000L, chronology6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean11 = durationFieldType3.isSupported(chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        mutableDateTime14.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone19);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = duration44.plus((long) 'u');
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration46, (-1));
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime51.plusMonths(999);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 1, periodType59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime57, periodType59);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = interval62.withChronology(chronology63);
        boolean boolean65 = interval64.containsNow();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        mutableDateTime67.setDayOfYear(1);
        mutableDateTime67.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime67.getZone();
        org.joda.time.Interval interval73 = interval64.withEnd((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.DateTimeZone dateTimeZone74 = mutableDateTime67.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) chronology22, dateTimeZone74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        long long23 = duration22.getStandardMinutes();
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) duration22);
        org.joda.time.Duration duration26 = duration6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period28 = duration6.toPeriod(periodType27);
        org.joda.time.Period period30 = period28.plusDays((-1645517977));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property11.roundCeilingCopy();
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy(22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology24);
        org.joda.time.LocalTime localTime27 = localTime25.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property28 = localTime27.secondOfMinute();
        org.joda.time.LocalTime localTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalTime localTime31 = property28.addNoWrapToCopy(3);
        org.joda.time.LocalTime localTime33 = localTime31.minusSeconds(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean35 = localTime31.isSupported(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = property3.get();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 71);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, periodType32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean39 = dateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime37.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusMonths(292278993);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 1, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = periodType46.isSupported(durationFieldType48);
        org.joda.time.Period period50 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight44, periodType46);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        long long58 = duration57.getStandardMinutes();
        org.joda.time.Duration duration59 = duration57.toDuration();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight44.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight69 = property67.addWrapFieldToCopy((int) '#');
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withMillis((long) 28);
        long long72 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight69);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str12, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-24356617L) + "'", long72 == (-24356617L));
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap39 = gregorianCalendar30.getDisplayNames(235, 152, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime.Property property24 = dateTime6.weekyear();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((java.lang.Object) durationField25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight0.minusDays(51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withEra(51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime25.plusHours(45);
        int int68 = dateTime25.getHourOfDay();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1439 + "'", int63 == 1439);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 23 + "'", int68 == 23);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay11.toDateMidnight();
        int int15 = yearMonthDay11.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.plusMonths(3);
        int int18 = yearMonthDay11.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay11.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-03-31" + "'", str13, "2052-03-31");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        long long23 = duration22.getStandardMinutes();
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) duration22);
        org.joda.time.Duration duration26 = duration6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period28 = duration6.toPeriod(periodType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableInstant50, readableInstant51, periodType52);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime47.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime58 = property55.addWrapField(69);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime58.copy();
        int int60 = mutableDateTime58.getDayOfMonth();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        mutableDateTime63.setMillisOfSecond((int) 'u');
        int int68 = mutableDateTime63.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime63.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime63.secondOfDay();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) mutableDateTime63);
        boolean boolean73 = mutableDateTime63.isBefore((long) (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.DateTime dateTime26 = property23.addToCopy((long) 26209701);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) property23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType28.isSupported(durationFieldType29);
        org.joda.time.DateTime dateTime32 = dateTime27.withFieldAdded(durationFieldType29, 2);
        int int33 = dateTime32.getYearOfEra();
        org.joda.time.DateTime dateTime36 = dateTime32.withDurationAdded((long) 90, 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1971 + "'", int33 == 1971);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: halfdays");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = property16.getAsText(locale17);
        java.util.Calendar calendar32 = dateTime6.toCalendar(locale17);
        int int33 = dateTime6.getMonthOfYear();
        int int34 = dateTime6.getCenturyOfEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Mittwoch" + "'", str31, "Mittwoch");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=86399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = localTime7.toDateTimeToday();
        int int10 = dateTime9.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        int int37 = gregorianCalendar34.getMinimalDaysInFirstWeek();
        int int38 = gregorianCalendar34.getMinimalDaysInFirstWeek();
        boolean boolean39 = gregorianCalendar34.isLenient();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str31, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate12 = localDate6.withFields((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate15 = property13.setCopy(10);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType27 = mutablePeriod26.getPeriodType();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime53.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.plusYears(0);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay63.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 32769);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) period64);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period64, (int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay15.minusYears(19);
        org.joda.time.DateMidnight dateMidnight72 = yearMonthDay15.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str55, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 999 + "'", int56 == 999);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(gregorianCalendar58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) chronology3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = property28.setCopy("07:18:46.817");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"07:18:46.817\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = dateTimeFormatter4.parseLocalDate("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(17);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(86399);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusWeeks(50);
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDateTime13.compareTo(readablePartial14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.roundFloor();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant34 = dateTime27.toInstant();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Instant instant37 = instant34.withMillis((long) 7);
        org.joda.time.DateTime dateTime38 = instant34.toDateTime();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime46 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime47.getFieldType((int) (byte) 0);
        int int52 = instant34.get(dateTimeFieldType51);
        org.joda.time.Instant instant54 = instant34.withMillis((-472953600000L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1969 + "'", int52 == 1969);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1070, 43, 264, chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod26.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 0);
        org.joda.time.Chronology chronology31 = dateMidnight24.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology31.getDateTimeMillis(2922789, 1, (int) (byte) -1, 83459999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        long long36 = duration35.getStandardMinutes();
        org.joda.time.Duration duration37 = duration35.toDuration();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        mutableDateTime49.setDayOfYear(1);
        mutableDateTime49.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime49.getZone();
        mutableDateTime45.setZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime42.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime56);
        mutablePeriod58.setPeriod((long) 52, (long) 2);
        mutablePeriod58.addSeconds(35);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2052\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 1, periodType33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration29, periodType33);
        mutablePeriod35.setValue(4, 6);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod8.setHours(86399);
        mutablePeriod8.setPeriod(0, 292278993, 26252, 227, 1069, 0, 86399, 38);
        mutablePeriod8.addMinutes(26291448);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str13, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("fr");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withTime(2005, (int) (byte) 100, 22, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2005 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = localTime27.withSecondOfMinute(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        long long19 = duration18.getStandardMinutes();
        org.joda.time.Duration duration20 = duration18.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime28.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        mutableDateTime32.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime25.withZoneRetainFields(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone37);
        mutableDateTime10.setZone(dateTimeZone37);
        int int43 = dateTimeZone37.getStandardOffset(2595542400000L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        gregorianCalendar30.setMinimalDaysInFirstWeek(99);
        int int36 = gregorianCalendar30.getWeekYear();
        gregorianCalendar30.setFirstDayOfWeek((-1));
        boolean boolean40 = gregorianCalendar30.isSet((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1969 + "'", int36 == 1969);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((long) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTime();
        org.joda.time.Instant instant10 = dateTime6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.Duration duration25 = duration21.toDuration();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period27 = duration21.toPeriod(periodType26);
        org.joda.time.Instant instant29 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration21, 366);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(16);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.toMutableDateTime();
        mutableDateTime23.setYear(66);
        mutableDateTime23.setYear((int) '4');
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(52066L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property11.roundCeilingCopy();
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = property21.addToCopy(6156761356800007L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6156761356800007");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setExtension('u', "Thu Mar 24 04:00:40 GMT+00:00 1960");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: Thu Mar 24 04:00:40 GMT+00:00 1960 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = localTime3.withSecondOfMinute((-19045));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        gregorianCalendar34.setTimeInMillis((long) 6);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime41.toString(dateTimeFormatter42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        int int67 = dateTime64.getMillisOfSecond();
        org.joda.time.Period period68 = duration59.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime64.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay70 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay72.plusYears(0);
        org.joda.time.Period period75 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay74.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 32769);
        org.joda.time.Period period79 = period75.minusMinutes(26252);
        org.joda.time.Period period81 = period75.minusDays(81);
        boolean boolean82 = gregorianCalendar34.equals((java.lang.Object) period75);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str31, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str43, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str66, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 999 + "'", int67 == 999);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((java.lang.Object) property2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime1.toGregorianCalendar();
        gregorianCalendar16.setFirstDayOfWeek((int) (byte) 10);
        int int19 = gregorianCalendar16.getFirstDayOfWeek();
        gregorianCalendar16.setMinimalDaysInFirstWeek(83459999);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        boolean boolean35 = periodType32.isSupported(durationFieldType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, periodType32, chronology37);
        int int39 = periodType32.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        org.joda.time.Period period56 = duration55.toPeriod();
        boolean boolean57 = duration46.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 1, periodType66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = periodType66.isSupported(durationFieldType68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration64, periodType66);
        org.joda.time.Duration duration71 = duration46.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType73 = periodType72.withHoursRemoved();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = dateTime76.toString(dateTimeFormatter77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = dateTime76.toDateTime(dateTimeZone79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        int int82 = dateTime80.getDayOfWeek();
        org.joda.time.DateTime.Property property83 = dateTime80.secondOfDay();
        org.joda.time.Chronology chronology84 = dateTime80.getChronology();
        org.joda.time.DurationField durationField85 = chronology84.hours();
        org.joda.time.Period period86 = duration46.toPeriod(periodType72, chronology84);
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period88 = new org.joda.time.Period((java.lang.Object) gregorianCalendar16, periodType32, chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.GregorianCalendar");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str78, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        int int4 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withWeekyear((int) 'a');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        org.joda.time.LocalDate.Property property10 = localDate9.year();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime26.toString(dateTimeFormatter27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime.Property property47 = dateTime30.year();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateMidnight.Property property49 = dateMidnight23.yearOfCentury();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        long long57 = duration56.getStandardMinutes();
        org.joda.time.Duration duration58 = duration56.toDuration();
        org.joda.time.Period period59 = new org.joda.time.Period((java.lang.Object) duration56);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration56);
        boolean boolean61 = dateTimeZone21.equals((java.lang.Object) dateMidnight23);
        org.joda.time.DateTime dateTime62 = localDate9.toDateTimeAtCurrentTime(dateTimeZone21);
        java.util.TimeZone timeZone63 = dateTimeZone21.toTimeZone();
        org.joda.time.Interval interval64 = localDate0.toInterval(dateTimeZone21);
        int int65 = localDate0.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate67 = localDate0.withWeekOfWeekyear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str28, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.add(102L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter66.withLocale(locale67);
        java.lang.Integer int69 = dateTimeFormatter68.getPivotYear();
        java.lang.Appendable appendable70 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter68.printTo(appendable70, 66L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514384671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=44,MILLISECOND=761,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNull(int69);
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.dayOfWeek();
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateMidnight4.toString("PT0.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.addCopy(2032);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        java.lang.String str11 = dateTimeField10.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str11, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 11, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtCurrentTime();
        int[] intArray19 = yearMonthDay17.getValues();
        int int20 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate7, intArray19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime35.setDayOfYear(1);
        mutableDateTime35.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime35.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getShortName((long) ' ');
        mutableDateTime22.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localDate7.toDateTimeAtStartOfDay(dateTimeZone40);
        boolean boolean46 = dateTime45.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2053, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("era");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"era\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minus(1010135478993L);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.dayOfWeek();
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) '#');
        java.lang.String str7 = period6.toString();
        org.joda.time.Seconds seconds8 = period6.toStandardSeconds();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight0.withPeriodAdded((org.joda.time.ReadablePeriod) seconds8, 515);
        int int11 = dateMidnight0.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.035S" + "'", str7, "PT0.035S");
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        long long6 = dateTimeField2.roundFloor(0L);
        boolean boolean8 = dateTimeField2.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime11.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        mutableDateTime11.setRounding(dateTimeField16);
        int int19 = dateTimeField16.getLeapAmount((long) (byte) 10);
        java.lang.String str21 = dateTimeField16.getAsText(0L);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = dateTimeField16.getAsShortText(1969, locale23);
        java.lang.String str25 = dateTimeField2.getAsText((int) (byte) 100, locale23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfWeek();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.lang.String str50 = property35.getAsText(locale36);
        java.util.Set<java.lang.Character> charSet51 = locale36.getExtensionKeys();
        java.lang.String str52 = locale36.getISO3Country();
        java.lang.String str53 = locale23.getDisplayVariant(locale36);
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int55 = timeOfDay54.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay54.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay54.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.LocalTime localTime63 = timeOfDay62.toLocalTime();
        boolean boolean64 = locale23.equals((java.lang.Object) localTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969" + "'", str24, "1969");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Mittwoch" + "'", str50, "Mittwoch");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration1 = period0.toStandardDuration();
        int int2 = period0.size();
        org.joda.time.Period period4 = period0.plusYears(2922789);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period17 = period15.minusHours(52);
        org.joda.time.Period period19 = period17.minusWeeks(216);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        boolean boolean4 = durationField3.isPrecise();
        int int6 = durationField3.getValue((long) 5);
        long long8 = durationField3.getMillis((long) (short) 0);
        boolean boolean9 = durationField3.isSupported();
        int int12 = durationField3.getValue(1645514209701L, 157766401000L);
        long long13 = durationField3.getUnitMillis();
        long long16 = durationField3.getMillis(25, (long) 577);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 625 + "'", int12 == 625);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2629746000L + "'", long13 == 2629746000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 65750400000L + "'", long16 == 65750400000L);
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime6.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTimeISO();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        long long24 = duration23.getStandardMinutes();
        org.joda.time.Duration duration25 = duration23.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusYears(38);
        org.joda.time.DateTime dateTime35 = dateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 985);
        org.joda.time.DateTime.Property property36 = dateTime35.centuryOfEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate0.withYear(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object) localDate7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withCenturyOfEra(2022);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime22.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime(dateTimeZone25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getDayOfWeek();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.Chronology chronology30 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean38 = dateTimeField36.isLeap((long) 1439);
        boolean boolean40 = dateTimeField36.isLeap(0L);
        long long42 = dateTimeField36.roundFloor((long) (byte) 1);
        int int44 = dateTimeField36.get((long) 5);
        long long47 = dateTimeField36.add((long) 4, (int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getISO3Language();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.DateTime dateTime56 = property54.addToCopy((int) ' ');
        java.util.Locale locale57 = java.util.Locale.ITALY;
        int int58 = property54.getMaximumShortTextLength(locale57);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("PT0S");
        int int61 = property54.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale49.getDisplayVariant(locale60);
        java.lang.String str64 = locale49.getExtension('u');
        java.lang.String str65 = dateTimeField36.getAsText(10L, locale49);
        long long66 = dateTimeField31.set(0L, "23", locale49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight67 = property18.setCopy("clockhourOfHalfday", locale49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"clockhourOfHalfday\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str24, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 315532800004L + "'", long47 == 315532800004L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970" + "'", str65, "1970");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 23L + "'", long66 == 23L);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.minuteOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.minusDays(0);
        int int29 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTime dateTime30 = dateMidnight28.toDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean35 = dateTime33.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight28.withFieldAdded(durationFieldType36, 8);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateMidnight28);
        int int40 = dateMidnight28.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant41, readableInstant42, periodType43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = period44.normalizedStandard(periodType45);
        org.joda.time.Period period48 = period46.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = period48.getFieldTypes();
        org.joda.time.Period period51 = period48.plusMillis(1970);
        org.joda.time.Seconds seconds52 = period51.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        mutableDateTime54.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone57);
        mutableDateTime58.setDayOfYear(1);
        mutableDateTime58.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime58.getZone();
        mutableDateTime54.setZoneRetainFields(dateTimeZone63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds52, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight28.minus((org.joda.time.ReadablePeriod) seconds52);
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.era();
        java.lang.String str69 = property68.getName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "era" + "'", str69, "era");
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime.Property property24 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime26 = dateTime6.minusMinutes(2152);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime26.withTime((int) 'a', 2, 292278993, 235);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((long) 1970);
        boolean boolean14 = dateMidnight13.isEqualNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((-1L));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withTime((int) '#', 69, 1972, 216);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear((int) (short) 10);
        int int5 = localDate1.getValue(0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        java.lang.String str12 = period9.toString();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = period16.normalizedStandard(periodType17);
        org.joda.time.Period period19 = period9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((java.lang.Object) period16);
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = dateTime24.toString(dateTimeFormatter25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime.Property property45 = dateTime28.year();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight21, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateMidnight.Property property47 = dateMidnight21.yearOfCentury();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        long long55 = duration54.getStandardMinutes();
        org.joda.time.Duration duration56 = duration54.toDuration();
        org.joda.time.Period period57 = new org.joda.time.Period((java.lang.Object) duration54);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration59 = period16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period60 = period16.normalizedStandard();
        org.joda.time.LocalDate localDate61 = localDate1.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDate localDate63 = localDate1.minusYears(26209701);
        org.joda.time.LocalDate localDate65 = localDate1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime66 = localDate65.toDateTimeAtStartOfDay();
        int int67 = dateTime66.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0S" + "'", str12, "PT0S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str26, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.set(12, 1439, 23, 28, (int) (byte) 0);
        java.util.TimeZone timeZone37 = gregorianCalendar30.getTimeZone();
        timeZone37.setRawOffset(56);
        int int40 = timeZone37.getRawOffset();
        int int41 = timeZone37.getDSTSavings();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 56 + "'", int40 == 56);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, readableInstant19, periodType20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = period21.normalizedStandard(periodType22);
        java.lang.String str24 = period21.toString();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = period28.normalizedStandard(periodType29);
        org.joda.time.Period period31 = period21.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object) period28);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime.Property property57 = dateTime40.year();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight.Property property59 = dateMidnight33.yearOfCentury();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        long long67 = duration66.getStandardMinutes();
        org.joda.time.Duration duration68 = duration66.toDuration();
        org.joda.time.Period period69 = new org.joda.time.Period((java.lang.Object) duration66);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration71 = period28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.withZone(dateTimeZone80);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.dayOfYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight83.minusDays(0);
        int int87 = dateTime81.compareTo((org.joda.time.ReadableInstant) dateMidnight86);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime81, periodType88);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DateTime dateTime91 = yearMonthDay90.toDateTimeAtMidnight();
        int int92 = yearMonthDay90.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight93 = yearMonthDay90.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay90.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType97 = yearMonthDay95.getFieldType(1966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0S" + "'", str24, "PT0S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str38, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(yearMonthDay95);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        long long27 = duration26.getStandardMinutes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        org.joda.time.Period period44 = duration43.toPeriod();
        boolean boolean45 = duration34.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.years();
        boolean boolean57 = periodType54.isSupported(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration52, periodType54);
        org.joda.time.Duration duration59 = duration34.minus((org.joda.time.ReadableDuration) duration52);
        boolean boolean60 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration62 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = dateTime65.toString(dateTimeFormatter66);
        org.joda.time.DateTime dateTime69 = dateTime65.withDayOfWeek(4);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.withZone(dateTimeZone77);
        org.joda.time.DateTime.Property property79 = dateTime75.dayOfWeek();
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale80.getISO3Language();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.DateTime.Property property85 = dateTime84.yearOfEra();
        org.joda.time.DateTime dateTime87 = property85.addToCopy((int) ' ');
        java.util.Locale locale88 = java.util.Locale.ITALY;
        int int89 = property85.getMaximumShortTextLength(locale88);
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("PT0S");
        int int92 = property85.getMaximumShortTextLength(locale91);
        java.lang.String str93 = locale80.getDisplayVariant(locale91);
        java.lang.String str94 = property79.getAsText(locale80);
        java.util.Calendar calendar95 = dateTime69.toCalendar(locale80);
        int int96 = dateTime69.getMonthOfYear();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime99 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration62, 59);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str67, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "deu" + "'", str81, "deu");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Mittwoch" + "'", str94, "Mittwoch");
        org.junit.Assert.assertNotNull(calendar95);
        org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=86399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setDayOfYear(1);
        mutableDateTime2.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime2.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(227228371200100L);
        int int13 = localDateTime12.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 213 + "'", int13 == 213);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime7.getFieldType((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) dateTimeFieldType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getISO3Language();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((int) ' ');
        java.util.Locale locale9 = java.util.Locale.ITALY;
        int int10 = property6.getMaximumShortTextLength(locale9);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("PT0S");
        int int13 = property6.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale1.getDisplayVariant(locale12);
        java.lang.String str17 = nameProvider0.getShortName(locale1, "yearOfCentury", "PT1.969S");
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str21 = nameProvider0.getName(locale18, "PT0S", "hi!");
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str25 = nameProvider0.getShortName(locale22, "hi!", "years");
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str30 = nameProvider0.getName(locale26, "2052-03-31", "1970");
        java.util.Locale locale31 = null;
        java.lang.String str34 = nameProvider0.getName(locale31, "", "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis(10L);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        gregorianCalendar30.set(1971, 0, 366, (-192830), 577);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar30.set(50, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property4.addNoWrapToCopy((int) (short) 100);
        org.joda.time.LocalTime localTime8 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar calendar4 = builder0.build();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime.Property property30 = dateTime13.year();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateMidnight.Property property32 = dateMidnight6.yearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        long long40 = duration39.getStandardMinutes();
        org.joda.time.Duration duration41 = duration39.toDuration();
        org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration39);
        boolean boolean44 = calendar4.after((java.lang.Object) duration39);
        java.lang.String str45 = calendar4.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str11, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]" + "'", str45, "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(2000, (int) '#', (int) (byte) 100);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Calendar.Builder builder10 = builder6.setDate(122, 84961100, (-38090));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar11 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.TimeOfDay timeOfDay25 = property2.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay26 = property2.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays(0);
        org.joda.time.Interval interval32 = dateMidnight31.toInterval();
        boolean boolean33 = dateMidnight31.isEqualNow();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.withWeekyear(4);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withChronology(chronology46);
        int int48 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateTime dateTime50 = dateTime41.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean52 = dateTime41.isSupported(dateTimeFieldType51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight35.withField(dateTimeFieldType51, 7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property55 = timeOfDay26.property(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(2, (-292275054), 1971, 973);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getWeeksInWeekYear();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("PT0S");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap39 = gregorianCalendar30.getDisplayNames(1972, (-70), locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        boolean boolean9 = dateTimeField2.isSupported();
        long long11 = dateTimeField2.roundHalfEven(119L);
        org.joda.time.DurationField durationField12 = dateTimeField2.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime5.toMutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone26);
        java.lang.String str28 = dateTimeZone26.toString();
        mutableDateTime14.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        mutableDateTime6.setRounding(dateTimeField11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfEvenCopy();
        int int20 = localDateTime19.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusWeeks((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime19, 0, locale33);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addToCopy((int) ' ');
        java.util.Locale locale45 = java.util.Locale.ITALY;
        int int46 = property42.getMaximumShortTextLength(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT0S");
        int int49 = property42.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getISO3Language();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((int) ' ');
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = property56.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("PT0S");
        int int63 = property56.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale51.getDisplayVariant(locale62);
        java.lang.String str65 = locale48.getDisplayLanguage(locale51);
        java.lang.String str66 = locale33.getDisplayLanguage(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter3.withLocale(locale51);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = locale68.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter3.withLocale(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.parse("23:59:59.999", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514386001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=46,MILLISECOND=91,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deu" + "'", str52, "deu");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.DateTime dateTime4 = localDateTime1.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate.Property property4 = localDate2.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 22 00:00:00 GMT+00:00 2032");
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-31536000001L));
        org.joda.time.Duration duration2 = duration1.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days3 = duration1.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -31536000001");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 213 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMinuteOfHour(2);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        java.lang.String str8 = period7.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.Duration duration18 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        long long37 = duration36.getStandardMinutes();
        org.joda.time.Duration duration38 = duration36.toDuration();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime46.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        mutableDateTime50.setDayOfYear(1);
        mutableDateTime50.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime50.getZone();
        mutableDateTime46.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime43.withZoneRetainFields(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone55);
        org.joda.time.Interval interval59 = yearMonthDay28.toInterval(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfYear();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.years();
        boolean boolean68 = period66.isSupported(durationFieldType67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight61.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plus(10L);
        org.joda.time.DateTime dateTime72 = yearMonthDay28.toDateTime((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.withWeekOfWeekyear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType75.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight71.withField(dateTimeFieldType75, 81);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType75.getDurationType();
        org.joda.time.Period period81 = period7.withFieldAdded(durationFieldType79, 439);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNull(durationFieldType76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = dateTimeFormatter4.parseLocalTime("Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight6 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYear((int) '#');
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = property9.setCopy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        int int11 = property10.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(86399);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withTime(1, 40, (-292275054), 26342);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withWeekyear(11);
        org.joda.time.DateMidnight.Property property5 = dateMidnight1.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.withYearOfCentury(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addWrapFieldToCopy(5);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeField dateTimeField48 = property43.getField();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean55 = dateTimeField53.isLeap((long) 1439);
        boolean boolean57 = dateTimeField53.isLeap(0L);
        long long59 = dateTimeField53.roundFloor((long) (byte) 1);
        int int61 = dateTimeField53.get((long) 5);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.DateTime dateTime68 = property66.addToCopy((int) ' ');
        java.util.Locale locale69 = java.util.Locale.ITALY;
        int int70 = property66.getMaximumShortTextLength(locale69);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("PT0S");
        int int73 = property66.getMaximumShortTextLength(locale72);
        java.lang.String str74 = locale72.getDisplayScript();
        java.lang.String str75 = dateTimeField53.getAsText(8, locale72);
        java.lang.String str76 = locale72.getDisplayLanguage();
        java.util.Locale.Builder builder77 = builder50.setLocale(locale72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay78 = property43.setCopy("fra", locale72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"fra\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "8" + "'", str75, "8");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        mutableDateTime8.setRounding(dateTimeField13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property17.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime21 = property17.roundHalfEvenCopy();
        int int22 = localDateTime21.size();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusWeeks((-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = property29.addToCopy((int) ' ');
        java.util.Locale locale32 = java.util.Locale.ITALY;
        int int33 = property29.getMaximumShortTextLength(locale32);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("PT0S");
        int int36 = property29.getMaximumShortTextLength(locale35);
        java.lang.String str37 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime21, 0, locale35);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale35);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getISO3Language();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale39.getDisplayVariant(locale50);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getISO3Language();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("PT0S");
        int int65 = property58.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale53.getDisplayVariant(locale64);
        java.lang.String str67 = locale50.getDisplayLanguage(locale53);
        java.lang.String str68 = locale35.getDisplayLanguage(locale53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter5.withLocale(locale53);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Locale locale71 = locale70.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter5.withLocale(locale70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeFormatter73.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(2070, 47, 71, dateTimeZone74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645514386574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=46,MILLISECOND=664,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.Period period13 = period11.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.plusMillis(1970);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        mutableDateTime23.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds17, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Interval interval31 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) seconds17);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZone(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean48 = interval31.contains((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) 7);
        org.joda.time.Interval interval51 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        boolean boolean53 = interval51.contains((-3599948L));
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (byte) 100);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Instant instant9 = instant6.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant13 = instant6.withDurationAdded((long) 69, 16);
        org.joda.time.MutableDateTime mutableDateTime14 = instant6.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateTimeFormatter5.print((org.joda.time.ReadableInstant) mutableDateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withChronology(chronology15);
        int int17 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) period33, chronology34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime39.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = duration57.plus((long) 'u');
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration59, (-1));
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = dateTime64.plusMonths(999);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 1, periodType72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, (org.joda.time.ReadableInstant) dateTime70, periodType72);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = interval75.withChronology(chronology76);
        org.joda.time.Interval interval78 = interval36.overlap((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Chronology chronology79 = interval75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (long) 6, chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.yearOfEra();
        org.joda.time.DurationField durationField82 = chronology79.centuries();
        org.joda.time.Chronology chronology83 = chronology79.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay84 = new org.joda.time.TimeOfDay(32769, 502, 953, chronology83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNull(interval78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear((int) (short) 10);
        org.joda.time.LocalDate.Property property4 = localDate1.era();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean9 = localTime6.isEqual((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.LocalTime localTime11 = localTime8.plusSeconds((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate1.compareTo((org.joda.time.ReadablePartial) localTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(81, 769, (-192830), 7, 1969, 9, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, periodType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime.Property property37 = dateTime34.secondOfDay();
        org.joda.time.Chronology chronology38 = dateTime34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType25, chronology38);
        org.joda.time.DurationField durationField40 = chronology38.weeks();
        long long42 = durationField40.getValueAsLong((long) 25202);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = period7.normalizedStandard(periodType8);
        org.joda.time.Period period11 = period9.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = period11.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, (-31536000001L), periodType13);
        org.joda.time.PeriodType periodType16 = periodType13.withYearsRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getDayOfWeek();
        org.joda.time.DateTime.Property property26 = dateTime23.secondOfDay();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(993600000L, (long) 2152, periodType13, chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str21, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        int int7 = dateTime6.getYear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime1.add(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        boolean boolean22 = dateTimeField20.isLeap((long) 1439);
        long long24 = dateTimeField20.roundFloor(0L);
        int int25 = dateTimeField20.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField20, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 44");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, periodType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime.Property property37 = dateTime34.secondOfDay();
        org.joda.time.Chronology chronology38 = dateTime34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType25, chronology38);
        org.joda.time.DurationField durationField40 = chronology38.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology38.getDateTimeMillis(636, 985, 2030, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 985 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor1 = strSet0.iterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        mutablePeriod3.addYears((int) (short) -1);
        mutablePeriod3.addSeconds(4);
        int int8 = mutablePeriod3.getMonths();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.Period period13 = period11.plusDays(1970);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 1, periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = periodType15.isSupported(durationFieldType17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(86400000L, chronology20);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        boolean boolean25 = durationFieldType17.isSupported(chronology22);
        boolean boolean26 = period13.isSupported(durationFieldType17);
        boolean boolean27 = mutablePeriod3.isSupported(durationFieldType17);
        int int28 = mutablePeriod3.getDays();
        int int29 = mutablePeriod3.getSeconds();
        mutablePeriod3.setPeriod(951177600000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = period14.plusMonths(11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        long long24 = duration23.getStandardMinutes();
        org.joda.time.Duration duration25 = duration23.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        mutableDateTime37.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime37.getZone();
        mutableDateTime33.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime30.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime44);
        int int47 = period16.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = period16.getValue(2023);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2023");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property2.setCopy("2059-10-04T07:16:54.117Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2059-10-04T07:16:54.117Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        int int9 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1970, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        int int17 = dateTimeField15.getMaximumValue((long) 498);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(2000, (int) '#', (int) (byte) 100);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Calendar.Builder builder10 = builder6.setTimeOfDay(450, 10, 32769);
        java.util.Calendar.Builder builder14 = builder6.setWeekDate(13, 66, 40);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime17.toString(dateTimeFormatter18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        int int43 = dateTime40.getMillisOfSecond();
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        java.util.GregorianCalendar gregorianCalendar45 = dateTime40.toGregorianCalendar();
        int int47 = gregorianCalendar45.getActualMaximum(2);
        int int48 = gregorianCalendar45.getWeeksInWeekYear();
        int int49 = gregorianCalendar45.getMinimalDaysInFirstWeek();
        java.util.Date date50 = gregorianCalendar45.getTime();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder51 = builder6.setInstant(date50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str19, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str42, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(gregorianCalendar45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight29 = property26.roundCeilingCopy();
        int int30 = property26.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight32 = property26.setCopy("Heure de Greenwich");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Heure de Greenwich\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("23");
        java.util.Locale locale4 = new java.util.Locale("Property[minuteOfHour]", "2052-03-31");
        java.lang.String str5 = timeZone1.getDisplayName(locale4);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals(locale4.toString(), "property[minuteofhour]_2052-03-31");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Greenwich Mean Time" + "'", str5, "Greenwich Mean Time");
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        boolean boolean11 = localDate7.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property12 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate13.minusDays(26209701);
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) (short) 1);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 51, dateTimeZone26);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) (short) 100);
        org.joda.time.Interval interval32 = localDate13.toInterval(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(31, 41, 235, (-70), (int) '#', 25202, 2030, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = property3.get();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 71);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMonths(26266117);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withWeekOfWeekyear(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        java.io.IOException iOException2 = new java.io.IOException("1969-12-31T23:59:59.999Z");
        java.io.IOException iOException3 = new java.io.IOException("PeriodType[DayTime]", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.String str5 = iOException4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException: java.io.IOException: 1969-12-31T23:59:59.999Z" + "'", str5, "java.io.IOException: java.io.IOException: 1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay7 = property2.setCopy(1955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1955 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        int int8 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withWeekyear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime10.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(4, 26209701, (int) (short) 100, 26357117, 69, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26357117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology4);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property9 = localDate4.property(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) ' ');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration28, (-1));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths(999);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) dateTime39, periodType41);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval59 = interval52.gap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Interval interval60 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        boolean boolean61 = localDate2.equals((java.lang.Object) interval60);
        org.joda.time.LocalDate localDate63 = localDate2.withYearOfEra(38);
        int int64 = localDate2.getMonthOfYear();
        org.joda.time.LocalDate localDate66 = localDate2.withWeekyear(365);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) 28);
        int int69 = localDate2.compareTo((org.joda.time.ReadablePartial) yearMonthDay68);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay42.plusMonths(12);
        org.joda.time.LocalDate localDate46 = yearMonthDay42.toLocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = localDate46.withDayOfYear(26357397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26357397 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "gen");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"gen\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay42.plusMonths(12);
        org.joda.time.LocalDate localDate46 = yearMonthDay42.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay42.plusDays(2152);
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime52.toString(dateTimeFormatter53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime.Property property73 = dateTime56.year();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateMidnight.Property property75 = dateMidnight49.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight77 = property75.setCopy("22");
        org.joda.time.DateMidnight dateMidnight79 = property75.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight80 = property75.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight82 = property75.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight84 = property75.addWrapFieldToCopy(577);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (-1), chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean89 = dateTime87.isSupported(dateTimeFieldType88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int91 = dateTime87.get(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType90.getDurationType();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType90.getDurationType();
        int int94 = dateMidnight84.get(dateTimeFieldType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property95 = yearMonthDay48.property(dateTimeFieldType90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str54, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 59 + "'", int91 == 59);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(2030, 83459999, (-38090), 1, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) duration37, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.time();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration37, periodType44);
        int int46 = period45.getHours();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str21, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-472953600000L));
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(90);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight7, dateTimeZone11);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.DateTime dateTime14 = localTime12.toDateTimeToday();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = localTime12.toString("24", locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime2.toString("2022-02-22T00:01:40.696Z", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.000" + "'", str13, "00:00:00.000");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "24" + "'", str18, "24");
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(2922789, (-292278), 25, 9, (int) (short) -1, 28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26367315);
        java.lang.StringBuffer stringBuffer73 = null;
        org.joda.time.Instant instant75 = new org.joda.time.Instant((java.lang.Object) 1033859999L);
        org.joda.time.Period period76 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration77 = period76.toStandardDuration();
        org.joda.time.Instant instant78 = instant75.plus((org.joda.time.ReadableDuration) duration77);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer73, (org.joda.time.ReadableInstant) instant75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514388553,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=48,MILLISECOND=643,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay11.toDateMidnight();
        int int15 = yearMonthDay11.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.plusMonths(3);
        int int18 = yearMonthDay11.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay11.minusMonths(60);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-03-31" + "'", str13, "2052-03-31");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(100982246400000L);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 16, (long) 20, periodType2);
        java.lang.String str4 = mutablePeriod3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0.004S" + "'", str4, "PT0.004S");
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(chronology3);
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, 57, 100611, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100611 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("PeriodType[DayTime]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = timeZone1.getDisplayName(true, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 17");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        int int33 = dateTime30.getMillisOfSecond();
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime30.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay36 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        mutableDateTime42.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime42.getZone();
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) (short) 1);
        int int51 = dateTimeZone47.getOffsetFromLocal((long) 83459999);
        org.joda.time.Interval interval52 = yearMonthDay38.toInterval(dateTimeZone47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 1, periodType61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.years();
        boolean boolean64 = periodType61.isSupported(durationFieldType63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration59, periodType61);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration81 = duration79.plus((long) 'u');
        org.joda.time.Period period82 = duration81.toPeriod();
        boolean boolean83 = duration72.isEqual((org.joda.time.ReadableDuration) duration81);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.years();
        boolean boolean86 = periodType84.isSupported(durationFieldType85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration72, periodType84);
        int int88 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean90 = dateTimeZone47.isStandardOffset((long) 13);
        int int92 = dateTimeZone47.getStandardOffset((long) 7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(636, 66, 0, 84961100, 86399999, dateTimeZone47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 84961100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str9, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.setDayOfMonth(6);
        mutableDateTime0.setMillis(2629746000L);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, periodType7, chronology8);
        mutablePeriod9.addYears((int) (short) -1);
        mutablePeriod9.addSeconds(4);
        int int14 = mutablePeriod9.getMonths();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays(0);
        org.joda.time.Interval interval20 = dateMidnight19.toInterval();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays(0);
        org.joda.time.Interval interval26 = dateMidnight25.toInterval();
        org.joda.time.Interval interval27 = interval20.gap((org.joda.time.ReadableInterval) interval26);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod9.addHours(2);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod9, (-23));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property44 = dateTime38.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = dateTime38.minusHours((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property48 = dateTime46.property(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime0.property(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        java.lang.String str51 = property49.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNull(interval27);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[era]" + "'", str51, "Property[era]");
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = property4.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime12 = property4.setCopy(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean18 = dateTimeField16.isLeap((long) 1439);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 11, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime24.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.DateTime dateTime32 = yearMonthDay31.toDateTimeAtCurrentTime();
        int[] intArray33 = yearMonthDay31.getValues();
        int int34 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDate21, intArray33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        mutableDateTime36.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant39, readableInstant40, periodType41);
        mutableDateTime36.add((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        mutableDateTime49.setDayOfYear(1);
        mutableDateTime49.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime49.getZone();
        mutableDateTime45.setZoneRetainFields(dateTimeZone54);
        java.lang.String str57 = dateTimeZone54.getShortName((long) ' ');
        mutableDateTime36.setZone(dateTimeZone54);
        org.joda.time.DateTime dateTime59 = localDate21.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(1645517977622L, dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) localTime12, dateTimeZone54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2053, 3, 31]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime26.toString(dateTimeFormatter27);
        int int29 = dateTime26.getMillisOfSecond();
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime26.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusYears(0);
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.centuryOfEra();
        boolean boolean39 = durationFieldType0.isSupported(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology37.getDateTimeMillis(57, 26266117, 20, 593);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26266117 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str28, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 999 + "'", int29 == 999);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((java.lang.Object) localTime0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean7 = dateTimeField5.isLeap((long) 1439);
        boolean boolean9 = dateTimeField5.isLeap(0L);
        long long11 = dateTimeField5.roundFloor((long) (byte) 1);
        int int13 = dateTimeField5.get((long) 5);
        long long16 = dateTimeField5.add((long) 4, (int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getISO3Language();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = property23.addToCopy((int) ' ');
        java.util.Locale locale26 = java.util.Locale.ITALY;
        int int27 = property23.getMaximumShortTextLength(locale26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("PT0S");
        int int30 = property23.getMaximumShortTextLength(locale29);
        java.lang.String str31 = locale18.getDisplayVariant(locale29);
        java.lang.String str33 = locale18.getExtension('u');
        java.lang.String str34 = dateTimeField5.getAsText(10L, locale18);
        int int35 = property1.getMaximumTextLength(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale18.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 315532800004L + "'", long16 == 315532800004L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "deu" + "'", str19, "deu");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970" + "'", str34, "1970");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType27 = mutablePeriod26.getPeriodType();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime53.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.plusYears(0);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay63.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 32769);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) period64);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period64, (int) (byte) 10);
        int int70 = period64.getYears();
        org.joda.time.Period period72 = period64.plusMillis(99);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str55, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 999 + "'", int56 == 999);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(gregorianCalendar58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        mutableDateTime3.setRounding(dateTimeField8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime16 = property12.roundHalfEvenCopy();
        int int17 = localDateTime16.size();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusWeeks((-1));
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) ' ');
        java.util.Locale locale27 = java.util.Locale.ITALY;
        int int28 = property24.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT0S");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.lang.String str32 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, 0, locale30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime16.withCenturyOfEra((int) '4');
        boolean boolean35 = dateTimeZone1.isLocalDateTimeGap(localDateTime16);
        java.util.TimeZone timeZone36 = dateTimeZone1.toTimeZone();
        boolean boolean37 = timeZone36.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+07:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((-1L));
        org.joda.time.LocalDateTime localDateTime7 = property2.addWrapFieldToCopy(60);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 2030);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setExtension('x', "Tue Oct 02 08:49:00 UTC 1979");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: Tue Oct 02 08:49:00 UTC 1979 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("July");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withSecondOfMinute(39);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration36 = duration32.minus((-31536000001L));
        org.joda.time.DateTime dateTime37 = dateTime8.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        mutableDateTime52.setDayOfYear(1);
        mutableDateTime52.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime52.getZone();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone57);
        mutableDateTime39.setTime((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.toDateTime(dateTimeZone65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period85 = new org.joda.time.Period((long) 1, periodType84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((java.lang.Object) duration80, periodType84);
        java.lang.String str87 = periodType84.getName();
        org.joda.time.Period period88 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime58, periodType84);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime58.setMinuteOfHour(26357397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26357397 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str16, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str64, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DayTime" + "'", str87, "DayTime");
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(9, 35, (int) '4', 2922789, 1439, 8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setDayOfYear(1);
        mutableDateTime47.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime47.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime40.withZoneRetainFields(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone52);
        org.joda.time.Interval interval56 = yearMonthDay25.toInterval(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay11.toDateMidnight(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.secondOfMinute();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime58.weekyear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Date date4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder5 = builder0.setInstant(date4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod26.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 0);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.Period period35 = period33.plusDays(1970);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 1, periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        boolean boolean40 = periodType37.isSupported(durationFieldType39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(86400000L, chronology42);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.millisOfSecond();
        boolean boolean47 = durationFieldType39.isSupported(chronology44);
        boolean boolean48 = period35.isSupported(durationFieldType39);
        mutablePeriod26.set(durationFieldType39, 43);
        int int51 = mutablePeriod26.getSeconds();
        int int52 = mutablePeriod26.getMonths();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar3.get((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "chinois" + "'", str1, "chinois");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514389520,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=49,MILLISECOND=610,ZONE_OFFSET=90,DST_OFFSET=0]");
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, periodType10, chronology11);
        mutablePeriod12.addYears((int) (short) -1);
        mutablePeriod12.addSeconds(4);
        int int17 = mutablePeriod12.getMonths();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, periodType19);
        org.joda.time.Period period22 = period20.plusDays(1970);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        boolean boolean27 = periodType24.isSupported(durationFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(86400000L, chronology29);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfSecond();
        boolean boolean34 = durationFieldType26.isSupported(chronology31);
        boolean boolean35 = period22.isSupported(durationFieldType26);
        boolean boolean36 = mutablePeriod12.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod12.copy();
        mutablePeriod12.setPeriod((long) 2000, 83459999L);
        mutablePeriod12.setMonths(26357397);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        org.joda.time.DateTime dateTime19 = property14.roundHalfFloorCopy();
        boolean boolean20 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime19.withCenturyOfEra(29);
        org.joda.time.DateTime dateTime24 = dateTime19.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        mutableDateTime1.setMinuteOfDay(5);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        int int46 = dateTime43.getMillisOfSecond();
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime43.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.plusYears(0);
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.centuryOfEra();
        java.lang.String str57 = dateTimeField55.getAsShortText(1000L);
        mutableDateTime1.setRounding(dateTimeField55);
        java.lang.String str59 = dateTimeField55.toString();
        int int61 = dateTimeField55.getMaximumValue((long) 57);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str22, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str45, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str59, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2922789 + "'", int61 == 2922789);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 1, periodType21);
        org.joda.time.PeriodType periodType23 = periodType21.withWeeksRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime19, periodType21);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant26, readableInstant27, periodType28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = period29.normalizedStandard(periodType30);
        org.joda.time.LocalTime localTime32 = localTime25.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = period36.normalizedStandard(periodType37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) period36, periodType39);
        org.joda.time.LocalTime localTime42 = localTime32.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 4);
        org.joda.time.Period period43 = period24.plus((org.joda.time.ReadablePeriod) period36);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.setYears((int) (short) 1);
        org.joda.time.Chronology chronology5 = null;
        mutablePeriod1.add((-1641008284072000L), chronology5);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("22");
        timeZone31.setRawOffset(5);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) dateTime28, dateTimeZone34);
        boolean boolean37 = dateTime28.isBefore(2625177600000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        int int44 = property43.getMinimumValueOverall();
        org.joda.time.ReadablePartial readablePartial45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = property43.compareTo(readablePartial45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.io.IOException iOException4 = new java.io.IOException("Property[secondOfMinute]", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException3.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException("27425238", (java.lang.Throwable) iOException3);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        java.time.Instant instant4 = date3.toInstant();
        date3.setTime(0L);
        int int7 = date3.getMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        boolean boolean15 = strSet3.equals((java.lang.Object) 14L);
        boolean boolean17 = strSet3.add("1970");
        java.lang.Object[] objArray18 = strSet3.toArray();
        int int19 = strSet3.size();
        java.util.Iterator<java.lang.String> strItor20 = strSet3.iterator();
        strSet3.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[Coordinated Universal Time, PT0.035S, 1970]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[Coordinated Universal Time, PT0.035S, 1970]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(strItor20);
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(1);
        int int13 = yearMonthDay12.getDayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period14, (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone43);
        mutableDateTime44.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        mutableDateTime48.setDayOfYear(1);
        mutableDateTime48.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime48.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateTime41.withZoneRetainFields(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone53);
        org.joda.time.Interval interval57 = yearMonthDay26.toInterval(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay12.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) ' ', dateTimeZone53);
        org.joda.time.LocalDate.Property property60 = localDate59.centuryOfEra();
        org.joda.time.LocalDate.Property property61 = localDate59.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = localDate59.isSupported(dateTimeFieldType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate67 = localDate59.withCenturyOfEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setDayOfYear(1);
        mutableDateTime2.setMillisOfSecond((int) 'u');
        int int7 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2);
        mutableDateTime2.add((long) 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder6 = builder0.setWeekDefinition((-1), 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property2.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime9.getValue(26252);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26252");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-472953600000L));
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay5 = property2.setCopy("Chinese");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Chinese\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        java.lang.String str22 = period19.toString();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant23, readableInstant24, periodType25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = period26.normalizedStandard(periodType27);
        org.joda.time.Period period29 = period19.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) period26);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime.Property property55 = dateTime38.year();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateMidnight.Property property57 = dateMidnight31.yearOfCentury();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        long long65 = duration64.getStandardMinutes();
        org.joda.time.Duration duration66 = duration64.toDuration();
        org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) duration64);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration69 = period26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period71 = period26.plusMonths(1);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period71);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime74 = property73.roundFloor();
        mutableDateTime74.addMonths(2000);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime78 = property77.roundHalfEven();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str36, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime.Property property9 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime11 = localTime7.minusMillis(50);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = dateTime32.isSupported(dateTimeFieldType33);
        int int35 = localTime29.get(dateTimeFieldType33);
        int int36 = dateTime24.get(dateTimeFieldType33);
        int int37 = localTime11.get(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23:59:59.999" + "'", str8, "23:59:59.999");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2032-02-22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2032-02-22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-31536000001L));
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Period period4 = org.joda.time.Period.millis(1969);
        org.joda.time.format.PeriodFormatter periodFormatter5 = null;
        java.lang.String str6 = period4.toString(periodFormatter5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        long long14 = duration13.getStandardMinutes();
        org.joda.time.Duration duration15 = duration13.toDuration();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime20.withZoneRetainFields(dateTimeZone32);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.years();
        boolean boolean37 = periodType35.isSupported(durationFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime34.withFieldAdded(durationFieldType36, 2);
        int int40 = period4.get(durationFieldType36);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 1, periodType42);
        org.joda.time.Period period44 = period4.normalizedStandard(periodType42);
        org.joda.time.PeriodType periodType45 = periodType42.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = duration2.toPeriod(periodType42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -31536000001");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1.969S" + "'", str6, "PT1.969S");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period33 = period28.plusSeconds(2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 86399984, (long) 81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withChronology(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        long long38 = duration37.getStandardMinutes();
        org.joda.time.Duration duration39 = duration37.toDuration();
        org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) duration37);
        org.joda.time.Duration duration41 = duration21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period43 = duration21.toPeriod(periodType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime14, periodType42);
        org.joda.time.DateTime.Property property45 = dateTime14.secondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1439 + "'", int5 == 1439);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        int int3 = localTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime1.withPeriodAdded(readablePeriod4, 83459999);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology7.getDateTimeMillis(2038, (-1), 498, 81, (-19045), 24, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll(3, (int) 'a');
        calendar0.setLenient(false);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withChronology(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZone(dateTimeZone19);
        boolean boolean21 = dateMidnight7.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        mutableDateTime23.setRounding(dateTimeField28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundCeiling();
        int int32 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTime.Property property33 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime20.minusDays(26291448);
        boolean boolean36 = calendar0.before((java.lang.Object) 26291448);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=50,MILLISECOND=801,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setMillisOfDay((-23));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusYears(19);
        int int13 = localDateTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfDay();
        mutableDateTime1.setDayOfYear(69);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        java.lang.Object obj10 = mutableDateTime1.clone();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime.Property property35 = dateTime18.year();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight.Property property37 = dateMidnight11.yearOfCentury();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        long long45 = duration44.getStandardMinutes();
        org.joda.time.Duration duration46 = duration44.toDuration();
        org.joda.time.Period period47 = new org.joda.time.Period((java.lang.Object) duration44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = duration57.plus((long) 'u');
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration59, (-1));
        org.joda.time.Duration duration62 = duration44.plus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime1.era();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean69 = dateTime67.isSupported(dateTimeFieldType68);
        org.joda.time.DateMidnight dateMidnight70 = dateTime67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.dayOfYear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight84.withChronology(chronology86);
        int int88 = dateTime81.compareTo((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.DateTime dateTime90 = dateTime81.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean92 = dateTime81.isSupported(dateTimeFieldType91);
        org.joda.time.DateMidnight.Property property93 = dateMidnight75.property(dateTimeFieldType91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1969-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1969-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1969-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str16, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withDate(2022, 100611, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100611 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) 'a', 27425238, (int) (byte) 1, 59, 0, 439, 2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        int int8 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withWeekyear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withDayOfMonth((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.LocalDate localDate25 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate28 = localDate26.plusYears(10);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.LocalDate localDate31 = localDate28.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight32 = localDate31.toDateMidnight();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime35.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusYears(1);
        int int45 = yearMonthDay44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay44.getFieldTypes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        long long54 = duration53.getStandardMinutes();
        org.joda.time.Duration duration55 = duration53.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        mutableDateTime67.setDayOfYear(1);
        mutableDateTime67.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime67.getZone();
        mutableDateTime63.setZoneRetainFields(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = dateTime60.withZoneRetainFields(dateTimeZone72);
        org.joda.time.Interval interval75 = yearMonthDay44.toInterval(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight32.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight14.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.plusMonths(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.withEra(26277594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26277594 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("1969-12-31T23:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-12-31t23:59:59.999z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.minusYears(22);
        org.joda.time.DateMidnight.Property property12 = dateMidnight1.yearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withDayOfWeek(29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        long long6 = dateTimeField2.roundFloor(0L);
        boolean boolean8 = dateTimeField2.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime11.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        mutableDateTime11.setRounding(dateTimeField16);
        int int19 = dateTimeField16.getLeapAmount((long) (byte) 10);
        java.lang.String str21 = dateTimeField16.getAsText(0L);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = dateTimeField16.getAsShortText(1969, locale23);
        java.lang.String str25 = dateTimeField2.getAsText((int) (byte) 100, locale23);
        long long28 = dateTimeField2.add((long) 19, 22);
        long long31 = dateTimeField2.add((long) 1, 12178291L);
        java.lang.String str33 = dateTimeField2.getAsShortText(978566400090L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969" + "'", str24, "1969");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 694224000019L + "'", long28 == 694224000019L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 384309744566400001L + "'", long31 == 384309744566400001L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2001" + "'", str33, "2001");
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        long long7 = interval5.getEndMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) 45);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime12.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = duration30.plus((long) 'u');
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration32, (-1));
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime37.plusMonths(999);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1, periodType45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime43, periodType45);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        long long73 = duration72.getStandardMinutes();
        org.joda.time.Duration duration74 = duration72.toDuration();
        org.joda.time.Period period75 = new org.joda.time.Period((java.lang.Object) duration72);
        org.joda.time.Duration duration76 = duration56.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval77 = interval49.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval78 = interval9.gap((org.joda.time.ReadableInterval) interval77);
        java.lang.String str79 = interval9.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01T00:00:00.045Z/1970-01-02T00:00:00.000Z" + "'", str79, "1970-01-01T00:00:00.045Z/1970-01-02T00:00:00.000Z");
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.getMutableDateTime();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getISO3Language();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((int) ' ');
        java.util.Locale locale21 = java.util.Locale.ITALY;
        int int22 = property18.getMaximumShortTextLength(locale21);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("PT0S");
        int int25 = property18.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale13.getDisplayVariant(locale24);
        java.lang.String str28 = locale13.getExtension('u');
        java.lang.String str29 = locale12.getDisplayVariant(locale13);
        java.lang.String str30 = property10.getAsText(locale12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "deu" + "'", str14, "deu");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "439" + "'", str30, "439");
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate localDate4 = localDate0.withYearOfCentury(22);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setDayOfYear(1);
        org.joda.time.Instant instant9 = mutableDateTime6.toInstant();
        mutableDateTime6.addMonths(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean13 = mutableDateTime6.isSupported(dateTimeFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property14 = localDate4.property(dateTimeFieldType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime16.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime.Property property37 = dateTime20.year();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateMidnight.Property property39 = dateMidnight13.yearOfCentury();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        long long47 = duration46.getStandardMinutes();
        org.joda.time.Duration duration48 = duration46.toDuration();
        org.joda.time.Period period49 = new org.joda.time.Period((java.lang.Object) duration46);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = duration59.plus((long) 'u');
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration61, (-1));
        org.joda.time.Duration duration64 = duration46.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration66 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration46, 16);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.dayOfYear();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.minusDays(0);
        org.joda.time.Interval interval72 = dateMidnight71.toInterval();
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.Duration duration74 = interval72.toDuration();
        boolean boolean75 = duration66.equals((java.lang.Object) duration74);
        org.joda.time.Period period76 = duration74.toPeriod();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str18, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        int int11 = property10.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(0L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        java.lang.String str15 = property14.getName();
        int int16 = property14.getMinimumValue();
        org.joda.time.LocalDate localDate18 = property14.setCopy(12);
        java.lang.String str19 = property14.getName();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZone(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfWeek();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getISO3Language();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime37 = property35.addToCopy((int) ' ');
        java.util.Locale locale38 = java.util.Locale.ITALY;
        int int39 = property35.getMaximumShortTextLength(locale38);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("PT0S");
        int int42 = property35.getMaximumShortTextLength(locale41);
        java.lang.String str43 = locale30.getDisplayVariant(locale41);
        java.lang.String str44 = property29.getAsText(locale30);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property48.addToCopy((int) ' ');
        java.util.Locale locale51 = java.util.Locale.ITALY;
        int int52 = property48.getMaximumShortTextLength(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getISO3Language();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("PT0S");
        int int65 = property58.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale53.getDisplayVariant(locale64);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale67.getISO3Language();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.yearOfEra();
        org.joda.time.DateTime dateTime74 = property72.addToCopy((int) ' ');
        java.util.Locale locale75 = java.util.Locale.ITALY;
        int int76 = property72.getMaximumShortTextLength(locale75);
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("PT0S");
        int int79 = property72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = locale67.getDisplayVariant(locale78);
        java.lang.String str81 = locale64.getDisplayLanguage(locale67);
        java.lang.String str82 = locale51.getDisplayLanguage(locale64);
        java.lang.String str83 = locale30.getDisplayVariant(locale51);
        java.lang.String str84 = property14.getAsShortText(locale51);
        java.lang.String str85 = dateTimeField2.getAsText((long) 100, locale51);
        boolean boolean87 = dateTimeField2.isLeap((long) 26342);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfCentury" + "'", str15, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "deu" + "'", str31, "deu");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Mittwoch" + "'", str44, "Mittwoch");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "deu" + "'", str68, "deu");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Italian" + "'", str82, "Italian");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22" + "'", str84, "22");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970" + "'", str85, "1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = period14.plusMillis(99);
        org.joda.time.Period period18 = period14.withSeconds(26209701);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        mutableDateTime9.setDayOfYear(1);
        mutableDateTime9.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime9.getZone();
        mutableDateTime5.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime.Property property40 = dateTime23.year();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight.Property property42 = dateMidnight16.yearOfCentury();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        long long50 = duration49.getStandardMinutes();
        org.joda.time.Duration duration51 = duration49.toDuration();
        org.joda.time.Period period52 = new org.joda.time.Period((java.lang.Object) duration49);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration49);
        boolean boolean54 = dateTimeZone14.equals((java.lang.Object) dateMidnight16);
        org.joda.time.DateTime dateTime55 = localDate2.toDateTimeAtCurrentTime(dateTimeZone14);
        java.util.TimeZone timeZone56 = dateTimeZone14.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int63 = timeZone56.getOffset(26367315, 57, 59, 97, 366, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 26367315");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str21, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.addCopy((-308433560090L));
        int int7 = localTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int6 = date5.getYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date5);
        int int8 = date5.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Mar 24 03:59:00 GMT+00:00 1960");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 60 + "'", int6 == 60);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        int int8 = mutableDateTime5.getSecondOfMinute();
        mutableDateTime5.addYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        boolean boolean23 = dateTimeField21.isLeap((long) 1439);
        boolean boolean25 = dateTimeField21.isLeap(0L);
        long long27 = dateTimeField21.roundFloor((long) (byte) 1);
        int int29 = dateTimeField21.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField21.getType();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime18.property(dateTimeFieldType30);
        mutableDateTime5.set(dateTimeFieldType30, 99);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withChronology(chronology44);
        int int46 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateTime dateTime48 = dateTime39.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean50 = dateTime39.isSupported(dateTimeFieldType49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime5.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = mutableDateTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(31, (-292278), 81, 59, chronology52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration10 = period9.toStandardDuration();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int17 = dateTime13.get(dateTimeFieldType16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period29 = period27.minusYears(999);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant30, readableInstant31, periodType32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = period33.normalizedStandard(periodType34);
        org.joda.time.Period period37 = period35.minusDays(0);
        org.joda.time.Period period38 = period35.toPeriod();
        org.joda.time.Period period39 = period29.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.withChronology(chronology50);
        int int52 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTime dateTime54 = dateTime45.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean56 = dateTime45.isSupported(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType55.getRangeDurationType();
        int int58 = period29.indexOf(durationFieldType57);
        org.joda.time.MutablePeriod mutablePeriod59 = period29.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod59.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str22, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        int int29 = dateMidnight28.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays(23);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        java.lang.String str36 = localDateTime33.toString("+00:00");
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusMinutes((int) '4');
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType48 = mutablePeriod47.getPeriodType();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(86400000L, chronology51);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        mutablePeriod47.setPeriod((-61472908799968L), chronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime33.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod47, (int) 'u');
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod47, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusWeeks(100);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        java.lang.String str7 = period4.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.Period period14 = period4.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) period11);
        mutablePeriod15.setMillis(14);
        mutablePeriod15.addMonths(23);
        mutablePeriod15.setMillis(26291448);
        org.joda.time.LocalTime localTime22 = localTime0.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = localTime22.withHourOfDay((-23));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long13 = dateTimeField10.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField14 = dateTimeField10.getRangeDurationField();
        int int17 = dateTimeField10.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime19, (int) 'a', locale22);
        java.util.Locale.setDefault(locale22);
        java.util.Calendar calendar25 = mutableDateTime1.toCalendar(locale22);
        calendar25.setFirstDayOfWeek(10);
        java.lang.Object obj28 = calendar25.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000001L) + "'", long13 == (-31536000001L));
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-31536000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "java.util.GregorianCalendar[time=-31536000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "java.util.GregorianCalendar[time=-31536000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "java.util.GregorianCalendar[time=-31536000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = period14.minusYears(38);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) duration37, periodType41);
        org.joda.time.PeriodType periodType44 = periodType41.withWeeksRemoved();
        org.joda.time.PeriodType periodType45 = periodType41.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(periodType41);
        org.joda.time.PeriodType periodType47 = periodType41.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = period16.normalizedStandard(periodType41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str21, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        org.joda.time.Period period24 = duration23.toPeriod();
        boolean boolean25 = duration14.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 1, periodType34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.years();
        boolean boolean37 = periodType34.isSupported(durationFieldType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType34);
        org.joda.time.Duration duration39 = duration14.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean40 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = dateTime66.toString(dateTimeFormatter67);
        int int69 = dateTime66.getMillisOfSecond();
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        java.util.GregorianCalendar gregorianCalendar71 = dateTime66.toGregorianCalendar();
        java.util.Date date72 = gregorianCalendar71.getTime();
        gregorianCalendar71.clear();
        java.time.Instant instant74 = gregorianCalendar71.toInstant();
        boolean boolean75 = duration32.equals((java.lang.Object) gregorianCalendar71);
        java.util.Date date76 = new java.util.Date();
        boolean boolean77 = gregorianCalendar71.before((java.lang.Object) date76);
        int int78 = date76.getMinutes();
        date76.setSeconds(71);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str45, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str68, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 999 + "'", int69 == 999);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(gregorianCalendar71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Tue Feb 22 07:20:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 19 + "'", int78 == 19);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(32770);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.minuteOfHour();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        int int12 = property9.getMaximumTextLength(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getISO3Language();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((int) ' ');
        java.util.Locale locale22 = java.util.Locale.ITALY;
        int int23 = property19.getMaximumShortTextLength(locale22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("PT0S");
        int int26 = property19.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale14.getDisplayVariant(locale25);
        java.lang.String str29 = locale14.getExtension('u');
        java.lang.String str30 = locale13.getDisplayVariant(locale14);
        int int31 = property9.getMaximumShortTextLength(locale14);
        java.lang.String str32 = locale14.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter6.withLocale(locale14);
        java.util.Set<java.lang.Character> charSet34 = locale14.getExtensionKeys();
        java.lang.String str35 = locale14.getISO3Language();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "deu" + "'", str15, "deu");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deu" + "'", str32, "deu");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder3.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder12 = builder3.setDate(13, (int) (byte) 100, 70);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("22");
        timeZone14.setRawOffset(5);
        java.util.Calendar.Builder builder17 = builder12.setTimeZone(timeZone14);
        java.util.Calendar.Builder builder21 = builder12.setTimeOfDay((int) (short) 1, 2023, 52);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period21, chronology22);
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePeriod) period21, (-1L));
        org.joda.time.DateTimeField dateTimeField26 = chronology5.monthOfYear();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 99, (long) (byte) 1, chronology5);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis(50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withYearOfEra((-292278));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292278 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645517917833L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        long long10 = duration9.getStandardMinutes();
        org.joda.time.Duration duration11 = duration9.toDuration();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        mutableDateTime23.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime16.withZoneRetainFields(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(86400000L, chronology34);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.DurationField durationField38 = chronology36.months();
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTime(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(0, 71, 4, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay35.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 32769);
        org.joda.time.Period period40 = period36.minusMinutes(26252);
        org.joda.time.Period period42 = period36.minusDays(81);
        org.joda.time.PeriodType periodType43 = period42.getPeriodType();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime47.toString(dateTimeFormatter48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime.Property property68 = dateTime51.year();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateMidnight.Property property70 = dateMidnight44.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight72 = property70.setCopy("22");
        org.joda.time.DateMidnight dateMidnight74 = property70.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight75 = property70.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight76 = property70.getDateMidnight();
        java.lang.String str77 = property70.toString();
        org.joda.time.DateMidnight dateMidnight78 = property70.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight79 = property70.roundFloorCopy();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean84 = dateTime82.isSupported(dateTimeFieldType83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int86 = dateTime82.get(dateTimeFieldType85);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType85.getDurationType();
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType85.getDurationType();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight79.withFieldAdded(durationFieldType88, 802);
        boolean boolean91 = periodType43.isSupported(durationFieldType88);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str49, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Property[yearOfCentury]" + "'", str77, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 59 + "'", int86 == 59);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime2.get(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime0.property(dateTimeFieldType6);
        int int10 = property9.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology13);
        java.lang.String str16 = dateMidnight15.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str16, "2022-02-22T00:00:00.000Z");
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(16);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds(1);
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, periodType26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration22, periodType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean33 = dateTime31.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight34 = dateTime31.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusMonths(292278993);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1, periodType40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        boolean boolean43 = periodType40.isSupported(durationFieldType42);
        org.joda.time.Period period44 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight38, periodType40);
        org.joda.time.PeriodType periodType45 = periodType40.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, (long) 3, periodType40);
        org.joda.time.Period period47 = mutablePeriod46.toPeriod();
        mutablePeriod46.addHours((-292275054));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str6, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        java.lang.Integer int7 = dateTimeFormatter5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter5.getZone();
        java.util.Locale locale10 = dateTimeFormatter5.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.parse("+05:00", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(locale10);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = localDate1.toString("DurationField[years]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period((java.lang.Object) mutableDateTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        long long13 = dateTimeField2.add((long) 4, (int) (byte) 10);
        long long15 = dateTimeField2.roundHalfFloor((long) 99);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeField2.getAsText(2022, locale17);
        long long23 = dateTimeField2.set((long) 6, 69);
        java.lang.String str24 = dateTimeField2.toString();
        long long26 = dateTimeField2.roundFloor(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 315532800004L + "'", long13 == 315532800004L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u53f0\u6e7e" + "'", str19, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59989679999994L) + "'", long23 == (-59989679999994L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[year]" + "'", str24, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        int int34 = dateTime31.getMillisOfSecond();
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime31.toGregorianCalendar();
        java.util.Date date37 = gregorianCalendar36.getTime();
        boolean boolean38 = periodType5.equals((java.lang.Object) gregorianCalendar36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 0, periodType5);
        int int40 = period39.size();
        java.lang.Class<?> wildcardClass41 = period39.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray42 = new java.lang.reflect.GenericDeclaration[] { wildcardClass41 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration[] genericDeclarationArray43 = strSet0.toArray(genericDeclarationArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str10, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str33, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(genericDeclarationArray42);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        mutablePeriod25.addSeconds(15);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = period45.normalizedStandard(periodType46);
        org.joda.time.Period period49 = period47.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = period49.getFieldTypes();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.forFields(durationFieldTypeArray50);
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(734642L, (long) (short) 0, periodType51, chronology53);
        org.joda.time.Period period55 = new org.joda.time.Period(26L, periodType51);
        org.joda.time.Period period56 = new org.joda.time.Period(31, 20, 624, 39, 2, (-19045), 227, 365, periodType51);
        java.lang.String str57 = periodType51.toString();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 1, periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        boolean boolean62 = periodType59.isSupported(durationFieldType61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(86400000L, chronology64);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.millisOfSecond();
        boolean boolean69 = durationFieldType61.isSupported(chronology66);
        org.joda.time.DateTimeField dateTimeField70 = chronology66.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 52, 82800000L, periodType51, chronology66);
        mutablePeriod25.add((long) 90, chronology66);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PeriodType[Standard]" + "'", str57, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean23 = dateTime19.isAfterNow();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateTime19.minus((org.joda.time.ReadableDuration) duration37);
        long long40 = duration37.getMillis();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Period period57 = duration56.toPeriod();
        boolean boolean58 = duration47.isEqual((org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration61 = duration56.plus(100L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withChronology(chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = dateTime73.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.withZone(dateTimeZone76);
        boolean boolean78 = dateMidnight64.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        mutableDateTime80.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        mutableDateTime80.setRounding(dateTimeField85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime80.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime88 = property87.roundCeiling();
        int int89 = dateTime77.compareTo((org.joda.time.ReadableInstant) mutableDateTime88);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(86400000L, chronology91);
        org.joda.time.Chronology chronology93 = localDateTime92.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.millisOfSecond();
        org.joda.time.DateTime dateTime96 = mutableDateTime88.toDateTime(chronology93);
        org.joda.time.Period period97 = duration56.toPeriodTo((org.joda.time.ReadableInstant) dateTime96);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = localDate29.withWeekyear((int) (short) 10);
        org.joda.time.LocalDate localDate33 = localDate29.withYearOfEra(83459999);
        org.joda.time.DateTime dateTime34 = dateTime13.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property35 = localDate33.dayOfMonth();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        int int11 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        java.lang.String[] strArray16 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZone(dateTimeZone38);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.PeriodType periodType43 = periodType41.withWeeksRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime39, periodType41);
        boolean boolean45 = strSet17.equals((java.lang.Object) period44);
        java.lang.String[] strArray48 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean51 = strSet49.isEmpty();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        java.util.Date date55 = localDateTime53.toDate();
        org.joda.time.DateTime dateTime56 = localDateTime53.toDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusMonths((int) (short) 100);
        boolean boolean59 = strSet49.remove((java.lang.Object) localDateTime58);
        boolean boolean60 = strSet17.equals((java.lang.Object) strSet49);
        org.joda.time.tz.Provider provider61 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet62 = provider61.getAvailableIDs();
        boolean boolean63 = strSet17.addAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean64 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray65 = strSet62.toArray();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray65);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime34.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = duration52.plus((long) 'u');
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration54, (-1));
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime59.plusMonths(999);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period68 = new org.joda.time.Period((long) 1, periodType67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime45, (org.joda.time.ReadableInstant) dateTime65, periodType67);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = interval70.withChronology(chronology71);
        org.joda.time.Interval interval73 = interval31.overlap((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Chronology chronology74 = interval70.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.minutes();
        long long76 = durationField75.getUnitMillis();
        java.lang.String str77 = durationField75.getName();
        long long80 = durationField75.getMillis(0, 31556952000L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 60000L + "'", long76 == 60000L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "minutes" + "'", str77, "minutes");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(315532800004L);
        mutableDateTime1.setYear(43);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfYear();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        boolean boolean12 = period10.isSupported(durationFieldType11);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight5.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus(10L);
        boolean boolean16 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        int int17 = mutableDateTime1.getRoundingMode();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, readableInstant19, periodType20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = period21.normalizedStandard(periodType22);
        org.joda.time.Period period25 = period21.minusMonths(0);
        org.joda.time.Period period27 = period25.withYears((int) '#');
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period25, 1070);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        long long13 = dateTimeField2.add((long) 4, (int) (byte) 10);
        long long15 = dateTimeField2.roundHalfFloor((long) 99);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeField2.getAsText(2022, locale17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        long long28 = dateTimeField23.set((long) ' ', "22", locale27);
        int int29 = dateTimeField2.getMaximumTextLength(locale27);
        java.lang.String str30 = locale27.getISO3Country();
        java.lang.String str32 = locale27.getExtension('u');
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 315532800004L + "'", long13 == 315532800004L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u53f0\u6e7e" + "'", str19, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61472908799968L) + "'", long28 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FRA" + "'", str30, "FRA");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"yearOfCentury\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(32769);
        int int13 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        long long21 = duration20.getStandardMinutes();
        org.joda.time.Duration duration22 = duration20.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime34.setDayOfYear(1);
        mutableDateTime34.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime34.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime27.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillis(10L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = dateTime41.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime10.withField(dateTimeFieldType44, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime10.withWeekOfWeekyear(264);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 264 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addWrapFieldToCopy(5);
        int int46 = property43.get();
        org.joda.time.YearMonthDay yearMonthDay47 = property43.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusMonths(46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.withMonthOfYear(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours(52);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, readableInstant19);
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra(2023);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        long long8 = durationField6.getMillis(7);
        boolean boolean9 = durationField6.isSupported();
        long long12 = durationField6.getMillis((long) 26266117, (long) '#');
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 220898664000L + "'", long8 == 220898664000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 828878593536000000L + "'", long12 == 828878593536000000L);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(29865670533000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField3 = localTime1.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        long long29 = duration28.getStandardMinutes();
        org.joda.time.Duration duration30 = duration28.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime38.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        mutableDateTime42.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime42.getZone();
        mutableDateTime38.setZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime35.withZoneRetainFields(dateTimeZone47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone47);
        org.joda.time.Interval interval51 = yearMonthDay20.toInterval(dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay20.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay20.monthOfYear();
        java.lang.String str55 = property54.toString();
        int int56 = property54.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay57 = property54.getYearMonthDay();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("1969-12-31T23:59:59.999Z");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) yearMonthDay57, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Property[monthOfYear]" + "'", str55, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay35.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 32769);
        org.joda.time.Period period40 = period36.minusMinutes(26252);
        org.joda.time.Period period42 = period40.plusMonths(31);
        org.joda.time.Minutes minutes43 = period40.toStandardMinutes();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(minutes43);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime11.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Period period27 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getMinuteOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        int int39 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime.Property property40 = dateTime37.secondOfDay();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime30.toDateTime(chronology41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(315532800071L, chronology41);
        mutablePeriod44.setDays(54);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str20, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1439 + "'", int28 == 1439);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str35, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = dateMidnight8.toDateTime();
        org.joda.time.Interval interval14 = dateMidnight8.toInterval();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        java.util.Date date18 = localDateTime16.toDate();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setDayOfYear(1);
        mutableDateTime24.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime24.getZone();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean35 = dateTimeField33.isLeap((long) 1439);
        boolean boolean37 = dateTimeField33.isLeap(0L);
        long long39 = dateTimeField33.roundFloor((long) (byte) 1);
        int int41 = dateTimeField33.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField33.getType();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime30.property(dateTimeFieldType42);
        boolean boolean44 = localDateTime22.isSupported(dateTimeFieldType42);
        boolean boolean45 = localDateTime16.isSupported(dateTimeFieldType42);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight8.withField(dateTimeFieldType42, 2053);
        int int48 = dateMidnight8.getHourOfDay();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DurationField durationField8 = chronology3.hours();
        org.joda.time.Period period10 = org.joda.time.Period.months(366);
        org.joda.time.Period period12 = period10.withMonths(7);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology3.add((org.joda.time.ReadablePeriod) period10, (long) 40, 83460007);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 30546362562");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        java.util.Locale locale16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = property14.setCopy("100", locale16);
        org.joda.time.DurationField durationField18 = property14.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField19 = property14.getField();
        org.joda.time.DurationField durationField20 = property14.getRangeDurationField();
        java.lang.String str21 = property14.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay23 = property14.addWrapFieldToCopy(60);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-03-31" + "'", str13, "2052-03-31");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2052" + "'", str21, "2052");
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        gregorianCalendar30.clear();
        gregorianCalendar30.setTimeInMillis((long) 15);
        boolean boolean36 = gregorianCalendar30.isWeekDateSupported();
        boolean boolean37 = gregorianCalendar30.isWeekDateSupported();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        mutableDateTime1.addMinutes(12);
        mutableDateTime1.setMillis(951177600000L);
        int int11 = mutableDateTime1.getYear();
        mutableDateTime1.addWeekyears(1439);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.hourOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) period19, chronology20);
        int[] intArray23 = chronology3.get((org.joda.time.ReadablePeriod) period19, (-1L));
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology3);
        int int25 = mutableDateTime24.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setTime(86399, 802, 42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, -1]");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        java.lang.String str3 = property2.getAsString();
        org.joda.time.LocalDate localDate4 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022" + "'", str3, "2022");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology71 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter2.withDefaultYear(2000);
        java.lang.Integer int74 = dateTimeFormatter2.getPivotYear();
        java.lang.Integer int75 = dateTimeFormatter2.getPivotYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514393146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=53,MILLISECOND=236,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        java.util.Locale locale1 = new java.util.Locale("und");
        org.junit.Assert.assertEquals(locale1.toString(), "und");
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withChronology(chronology29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean35 = dateTime24.isSupported(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight18.property(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property37 = dateMidnight4.property(dateTimeFieldType34);
        boolean boolean38 = property37.isLeap();
        org.joda.time.DateMidnight dateMidnight40 = property37.setCopy("19");
        java.lang.String str41 = dateMidnight40.toString();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withPeriodAdded(readablePeriod42, 14);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-19T00:00:00.000Z" + "'", str41, "1970-01-19T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.Duration duration51 = duration33.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration54 = duration51.withDurationAdded((long) 31, 52);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean56 = duration51.equals((java.lang.Object) localTime55);
        int int57 = localTime55.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property27 = dateTime10.year();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean29 = timeOfDay1.equals((java.lang.Object) dateTime10);
        java.lang.String str31 = timeOfDay1.toString("2032-02-22");
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay1.plusMillis(16);
        org.joda.time.LocalTime localTime34 = timeOfDay1.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = timeOfDay1.getFieldType(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2032-02-22" + "'", str31, "2032-02-22");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        mutablePeriod3.addYears((int) (short) -1);
        mutablePeriod3.addSeconds(4);
        int int8 = mutablePeriod3.getMonths();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.Period period13 = period11.plusDays(1970);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 1, periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = periodType15.isSupported(durationFieldType17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(86400000L, chronology20);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        boolean boolean25 = durationFieldType17.isSupported(chronology22);
        boolean boolean26 = period13.isSupported(durationFieldType17);
        boolean boolean27 = mutablePeriod3.isSupported(durationFieldType17);
        int int28 = mutablePeriod3.getDays();
        int int29 = mutablePeriod3.getMillis();
        mutablePeriod3.setWeeks(26209701);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfCentury(2);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateTime42.isAfterNow();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime42.minus((org.joda.time.ReadableDuration) duration60);
        int int63 = dateTime62.getMinuteOfDay();
        int int64 = dateTime62.getMillisOfSecond();
        int int65 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.withYearOfEra(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        boolean boolean72 = dateTimeField70.isLeap((long) 1439);
        boolean boolean74 = dateTimeField70.isLeap(0L);
        long long76 = dateTimeField70.roundFloor((long) (byte) 1);
        boolean boolean77 = dateTimeField70.isSupported();
        long long79 = dateTimeField70.roundHalfEven(119L);
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.lang.String str82 = dateTimeField70.getAsShortText((long) (byte) 100, locale81);
        java.util.Calendar calendar83 = dateTime62.toCalendar(locale81);
        org.joda.time.Instant instant84 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (-1), chronology86);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) (-1), chronology89);
        org.joda.time.Duration duration91 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Duration duration93 = duration91.plus((long) 'u');
        org.joda.time.Instant instant95 = instant84.withDurationAdded((org.joda.time.ReadableDuration) duration91, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime96 = instant84.toMutableDateTimeISO();
        boolean boolean97 = dateTime62.isBefore((org.joda.time.ReadableInstant) mutableDateTime96);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1439 + "'", int63 == 1439);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970" + "'", str82, "1970");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        java.util.Locale locale16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = property14.setCopy("100", locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusYears(100);
        int int20 = yearMonthDay17.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-03-31" + "'", str13, "2052-03-31");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        int int8 = dateTime6.getDayOfWeek();
        org.joda.time.DateTime.Property property9 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean18 = dateTimeField16.isLeap((long) 1439);
        boolean boolean20 = dateTimeField16.isLeap(0L);
        long long22 = dateTimeField16.roundFloor((long) (byte) 1);
        int int24 = dateTimeField16.get((long) 5);
        long long27 = dateTimeField16.add((long) 4, (int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getISO3Language();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((int) ' ');
        java.util.Locale locale37 = java.util.Locale.ITALY;
        int int38 = property34.getMaximumShortTextLength(locale37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("PT0S");
        int int41 = property34.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale29.getDisplayVariant(locale40);
        java.lang.String str44 = locale29.getExtension('u');
        java.lang.String str45 = dateTimeField16.getAsText(10L, locale29);
        long long46 = dateTimeField11.set(0L, "23", locale29);
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.era();
        org.joda.time.DateMidnight.Property property49 = dateMidnight47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getISO3Language();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime59 = property57.addToCopy((int) ' ');
        java.util.Locale locale60 = java.util.Locale.ITALY;
        int int61 = property57.getMaximumShortTextLength(locale60);
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("PT0S");
        int int64 = property57.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale52.getDisplayVariant(locale63);
        java.lang.String str67 = locale52.getExtension('u');
        java.lang.String str68 = locale51.getDisplayVariant(locale52);
        org.joda.time.DateMidnight dateMidnight69 = property49.setCopy("32", locale51);
        java.lang.String str70 = locale29.getDisplayVariant(locale51);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 315532800004L + "'", long27 == 315532800004L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "deu" + "'", str30, "deu");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 23L + "'", long46 == 23L);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "deu" + "'", str53, "deu");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime11.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Period period27 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType28);
        boolean boolean30 = date0.equals((java.lang.Object) mutablePeriod29);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:19:53 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str20, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        long long14 = duration13.getStandardMinutes();
        org.joda.time.Duration duration15 = duration13.toDuration();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.plusYears((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((-472953600000L));
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean32 = dateTimeField30.isLeap((long) 1439);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 11, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime38.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        org.joda.time.DateTime dateTime46 = yearMonthDay45.toDateTimeAtCurrentTime();
        int[] intArray47 = yearMonthDay45.getValues();
        int int48 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDate35, intArray47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        mutableDateTime50.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant53, readableInstant54, periodType55);
        mutableDateTime50.add((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        mutableDateTime59.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        mutableDateTime63.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime63.getZone();
        mutableDateTime59.setZoneRetainFields(dateTimeZone68);
        java.lang.String str71 = dateTimeZone68.getShortName((long) ' ');
        mutableDateTime50.setZone(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = localDate35.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.Interval interval74 = yearMonthDay26.toInterval(dateTimeZone68);
        org.joda.time.Interval interval75 = localDate24.toInterval(dateTimeZone68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(0, 97, 26291448, 2000, 46, (int) (byte) 1, 2922789, dateTimeZone68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2053, 3, 31]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = dateTime12.minus((org.joda.time.ReadableDuration) duration30);
        long long33 = duration30.getMillis();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Period period50 = duration49.toPeriod();
        boolean boolean51 = duration40.isEqual((org.joda.time.ReadableDuration) duration49);
        boolean boolean52 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration54 = duration49.plus(100L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = dateTime67.toDateTime();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = dateTime67.isAfterNow();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.Duration duration85 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateTime dateTime87 = dateTime67.minus((org.joda.time.ReadableDuration) duration85);
        boolean boolean88 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration85);
        long long89 = duration49.getStandardDays();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay42.plusMonths(12);
        org.joda.time.LocalDate localDate46 = yearMonthDay42.toLocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate.Property property48 = localDate46.yearOfEra();
        org.joda.time.LocalDate localDate50 = property48.setCopy((int) ' ');
        java.util.Date date51 = localDate50.toDate();
        date51.setMonth(84961100);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Fri Sep 10 00:00:00 GMT+00:00 7080123");
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = mutableDateTime1.getRoundingField();
        long long13 = dateTimeField10.add((long) (short) 100, 5);
        java.lang.String str14 = dateTimeField10.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property27.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime31 = property27.roundHalfEvenCopy();
        int int32 = localDateTime31.size();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusWeeks((-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((int) ' ');
        java.util.Locale locale42 = java.util.Locale.ITALY;
        int int43 = property39.getMaximumShortTextLength(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("PT0S");
        int int46 = property39.getMaximumShortTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime31, 0, locale45);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale45);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getISO3Language();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.DateTime dateTime56 = property54.addToCopy((int) ' ');
        java.util.Locale locale57 = java.util.Locale.ITALY;
        int int58 = property54.getMaximumShortTextLength(locale57);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("PT0S");
        int int61 = property54.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale49.getDisplayVariant(locale60);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getISO3Language();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.DateTime dateTime70 = property68.addToCopy((int) ' ');
        java.util.Locale locale71 = java.util.Locale.ITALY;
        int int72 = property68.getMaximumShortTextLength(locale71);
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("PT0S");
        int int75 = property68.getMaximumShortTextLength(locale74);
        java.lang.String str76 = locale63.getDisplayVariant(locale74);
        java.lang.String str77 = locale60.getDisplayLanguage(locale63);
        java.lang.String str78 = locale45.getDisplayLanguage(locale63);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeField10.set(0L, "italien", locale63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"italien\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 157766400100L + "'", long13 == 157766400100L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[year]" + "'", str14, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514393857,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=53,MILLISECOND=947,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("gregory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: gregory");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(999);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime9.getValue(636);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 636");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusHours((int) '#');
        int int6 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMonths(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.Instant instant4 = instant0.plus(60000L);
        long long5 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = instant0.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514394142L + "'", long5 == 1645514394142L);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.LocalDate localDate25 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate28 = localDate26.plusYears(10);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.LocalDate localDate31 = localDate28.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight32 = localDate31.toDateMidnight();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime35.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusYears(1);
        int int45 = yearMonthDay44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay44.getFieldTypes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        long long54 = duration53.getStandardMinutes();
        org.joda.time.Duration duration55 = duration53.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        mutableDateTime67.setDayOfYear(1);
        mutableDateTime67.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime67.getZone();
        mutableDateTime63.setZoneRetainFields(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = dateTime60.withZoneRetainFields(dateTimeZone72);
        org.joda.time.Interval interval75 = yearMonthDay44.toInterval(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight32.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight14.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.plusMonths(43);
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime(chronology81);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        int int88 = localTime82.get(dateTimeFieldType86);
        org.joda.time.LocalTime.Property property89 = localTime80.property(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight91 = dateMidnight79.withField(dateTimeFieldType86, 26388899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26388899 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 19 + "'", int88 == 19);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        java.util.Date date14 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withCenturyOfEra(10);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = dateTime43.toDateTime();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean47 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableDuration) duration28);
        mutablePeriod48.setPeriod(384309744566400001L);
        mutablePeriod48.addMinutes(130);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        mutablePeriod5.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.clear();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        boolean boolean15 = period13.isSupported(durationFieldType14);
        java.lang.String str16 = durationFieldType14.getName();
        int int17 = mutablePeriod5.indexOf(durationFieldType14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        mutableDateTime19.setRounding(dateTimeField24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundCeiling();
        mutableDateTime27.setDate((long) 32770);
        org.joda.time.Duration duration30 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "years" + "'", str16, "years");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        org.joda.time.DurationField durationField11 = dateTimeField2.getRangeDurationField();
        int int13 = dateTimeField2.get((long) 3);
        java.lang.String str14 = dateTimeField2.toString();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate17 = localDate15.plusYears(10);
        org.joda.time.LocalDate.Property property18 = localDate15.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime21.toString(dateTimeFormatter22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime44.toString(dateTimeFormatter45);
        int int47 = dateTime44.getMillisOfSecond();
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime44.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.plusYears(0);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay54.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 32769);
        org.joda.time.Period period59 = period55.minusMinutes(26252);
        org.joda.time.LocalDate localDate60 = localDate15.minus((org.joda.time.ReadablePeriod) period55);
        int int61 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate60);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[year]" + "'", str14, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str23, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 999 + "'", int47 == 999);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-292275054) + "'", int61 == (-292275054));
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        long long26 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight28 = property2.addToCopy((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight30 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight32 = property2.addToCopy((long) 14);
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getISO3Language();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((int) ' ');
        java.util.Locale locale43 = java.util.Locale.ITALY;
        int int44 = property40.getMaximumShortTextLength(locale43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT0S");
        int int47 = property40.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        java.lang.String str51 = nameProvider34.getShortName(locale35, "yearOfCentury", "PT1.969S");
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str55 = nameProvider34.getName(locale52, "PT0S", "hi!");
        org.joda.time.DateMidnight dateMidnight56 = property2.setCopy("28", locale52);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        long long65 = dateTimeField60.set((long) ' ', "22", locale64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight66 = property2.setCopy("2059-10-04T07:16:54.117Z", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2059-10-04T07:16:54.117Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str7, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-61472908799968L) + "'", long65 == (-61472908799968L));
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        int[] intArray41 = yearMonthDay9.getValues();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay9.plusYears((-292275054));
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay9.year();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2053, 3, 31]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.addWrapFieldToCopy(44);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long13 = dateTimeField10.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField14 = dateTimeField10.getRangeDurationField();
        int int17 = dateTimeField10.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime19, (int) 'a', locale22);
        org.joda.time.LocalTime localTime24 = property4.setCopy("39", locale22);
        org.joda.time.LocalTime localTime26 = localTime24.withMinuteOfHour(40);
        org.joda.time.LocalTime localTime28 = localTime24.minusMinutes((int) (short) 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000001L) + "'", long13 == (-31536000001L));
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        int int26 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        int int27 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime14.withCenturyOfEra(22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime14.withChronology(chronology30);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration14.plus((long) 'u');
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration16, (-1));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean35 = dateTime31.isAfterNow();
        org.joda.time.DateTime dateTime37 = dateTime31.withCenturyOfEra(100);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime37.minusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        mutableDateTime42.setMillisOfSecond((int) 'u');
        int int47 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime42.year();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        mutableDateTime51.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime51.getZone();
        mutableDateTime49.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime37.toMutableDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology59 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(625, 86399984, (-1), 39, (int) (byte) -1, (-23), chronology59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime.Property property26 = dateTime9.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        int int33 = dateTime29.getMonthOfYear();
        boolean boolean34 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime35 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDate localDate37 = localDate0.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDate localDate39 = localDate0.withCenturyOfEra(124);
        int int40 = localDate0.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str7, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str31, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime25.withTime(0, 32772, (int) 'u', 38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.add((long) 593);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setDayOfYear(1);
        mutableDateTime7.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime7.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime15 = timeOfDay1.toDateTimeToday(dateTimeZone12);
        long long16 = dateTime15.getMillis();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645574399999L + "'", long16 == 1645574399999L);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((java.lang.Object) period26, chronology27);
        int[] intArray30 = chronology10.get((org.joda.time.ReadablePeriod) period26, (-1L));
        org.joda.time.DateTimeField dateTimeField31 = chronology10.monthOfYear();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 99, (long) (byte) 1, chronology10);
        org.joda.time.DurationField durationField33 = chronology10.months();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(5, 0, 450, (int) (byte) 10, (int) (byte) 100, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean38 = dateTimeField36.isLeap((long) 1439);
        boolean boolean40 = dateTimeField36.isLeap(0L);
        long long42 = dateTimeField36.roundFloor((long) (byte) 1);
        int int44 = dateTimeField36.get((long) 5);
        org.joda.time.DurationField durationField45 = dateTimeField36.getRangeDurationField();
        java.lang.String str47 = dateTimeField36.getAsShortText((long) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField36.getType();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay31.withField(dateTimeFieldType48, 366);
        java.lang.String str52 = yearMonthDay31.toString("07:10:38.081");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1969" + "'", str47, "1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "07:10:38.081" + "'", str52, "07:10:38.081");
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = timeOfDay3.toDateTimeToday(dateTimeZone4);
        int[] intArray6 = timeOfDay3.getValues();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay3.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = timeOfDay3.toDateTimeToday();
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(235);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.plusMillis(1970);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        int int64 = dateTimeZone60.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology65 = chronology34.withZone(dateTimeZone60);
        boolean boolean66 = period10.equals((java.lang.Object) chronology34);
        org.joda.time.DurationField durationField67 = chronology34.weekyears();
        org.joda.time.DurationField durationField68 = chronology34.years();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = chronology34.getDateTimeMillis(26291448, 86399999, 213, 802);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.TimeOfDay timeOfDay6 = property2.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property2.getFieldType();
        org.joda.time.TimeOfDay timeOfDay9 = property2.addNoWrapToCopy(61);
        int int10 = timeOfDay9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property11.roundCeilingCopy();
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy(81);
        int int23 = localDateTime22.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        java.util.Iterator<java.lang.String> strItor14 = strSet3.iterator();
        java.lang.String[] strArray17 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean20 = strSet18.isEmpty();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration27.plus((long) 'u');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withZone(dateTimeZone39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 1, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withWeeksRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime40, periodType42);
        boolean boolean46 = strSet18.equals((java.lang.Object) period45);
        java.lang.String[] strArray49 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        boolean boolean52 = strSet50.isEmpty();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.monthOfYear();
        java.util.Date date56 = localDateTime54.toDate();
        org.joda.time.DateTime dateTime57 = localDateTime54.toDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.minusMonths((int) (short) 100);
        boolean boolean60 = strSet50.remove((java.lang.Object) localDateTime59);
        boolean boolean61 = strSet18.equals((java.lang.Object) strSet50);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray67 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        boolean boolean70 = strSet68.isEmpty();
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet68);
        boolean boolean72 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet68);
        java.lang.String[] strArray75 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        boolean boolean78 = strSet76.isEmpty();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.monthOfYear();
        java.util.Date date82 = localDateTime80.toDate();
        org.joda.time.DateTime dateTime83 = localDateTime80.toDateTime();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.minusMonths((int) (short) 100);
        boolean boolean86 = strSet76.remove((java.lang.Object) localDateTime85);
        boolean boolean87 = strSet50.containsAll((java.util.Collection<java.lang.String>) strSet76);
        java.util.Spliterator<java.lang.String> strSpliterator88 = strSet76.spliterator();
        boolean boolean89 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet76);
        strSet76.clear();
        java.util.Locale locale91 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream93 = strSet92.stream();
        boolean boolean94 = strSet76.retainAll((java.util.Collection<java.lang.String>) strSet92);
        strSet92.clear();
        java.util.stream.Stream<java.lang.String> strStream96 = strSet92.stream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(date82);
// flaky:         org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(strStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strStream96);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(2922789, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        int int36 = yearMonthDay35.size();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        int int41 = period40.getWeeks();
        org.joda.time.Period period43 = period40.plusMillis((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withYear((int) 'u');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withChronology(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMonths((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime51.getZone();
        boolean boolean56 = dateTimeZone54.equals((java.lang.Object) "months");
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay44.toDateMidnight(dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = yearMonthDay44.getFieldType(39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateMidnight57);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getAsString();
        org.joda.time.LocalDate localDate4 = property1.addToCopy(26209701);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "22" + "'", str2, "22");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(86399984);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399984 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("14");
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime.Property property26 = dateTime9.year();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight.Property property28 = dateMidnight2.yearOfCentury();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        long long36 = duration35.getStandardMinutes();
        org.joda.time.Duration duration37 = duration35.toDuration();
        org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) duration35);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = duration48.plus((long) 'u');
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration50, (-1));
        org.joda.time.Duration duration53 = duration35.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 1, periodType55);
        org.joda.time.PeriodType periodType57 = periodType55.withDaysRemoved();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(86400000L, chronology59);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfDay();
        long long66 = chronology61.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period67 = duration53.toPeriod(periodType55, chronology61);
        org.joda.time.Duration duration69 = duration53.minus(993600000L);
        org.joda.time.Duration duration70 = duration53.toDuration();
        org.joda.time.Instant instant72 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration70, 86399);
        org.joda.time.Instant instant74 = instant1.withMillis((long) 2022);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str7, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant74);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("year");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"year\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.joda.time.Period period1 = org.joda.time.Period.hours(502);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration11.plus((long) 'u');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZone(dateTimeZone23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withWeeksRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime24, periodType26);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight4.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 53);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 1, periodType56);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration52, periodType56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        org.joda.time.DateMidnight dateMidnight64 = dateTime61.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plusMonths(292278993);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 1, periodType70);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.years();
        boolean boolean73 = periodType70.isSupported(durationFieldType72);
        org.joda.time.Period period74 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight68, periodType70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime80);
        long long82 = duration81.getStandardMinutes();
        org.joda.time.Duration duration83 = duration81.toDuration();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (-1), chronology85);
        org.joda.time.DateTime.Property property87 = dateTime86.yearOfEra();
        org.joda.time.DateTime dateTime88 = dateTime86.toDateTime();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration81, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight68.minus((org.joda.time.ReadableDuration) duration81);
        boolean boolean91 = dateMidnight31.isBefore((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight31.withYearOfCentury((int) '#');
        org.joda.time.Interval interval94 = dateMidnight31.toInterval();
        long long95 = interval94.toDurationMillis();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str36, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 86400000L + "'", long95 == 86400000L);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withField(dateTimeFieldType6, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(45);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime37 = dateTime19.withCenturyOfEra(7);
        org.joda.time.DateTime dateTime39 = dateTime19.withWeekyear(45);
        org.joda.time.DateTime dateTime41 = dateTime39.withYear(2052);
        boolean boolean42 = localDateTime12.equals((java.lang.Object) 2052);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "minuteOfHour" + "'", str8, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str17, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        java.util.Date date0 = new java.util.Date();
        date0.setHours(8);
        date0.setDate(12);
        date0.setMonth(2000);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Sep 12 08:19:55 GMT+00:00 2188");
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) (short) 1);
        long long10 = dateTimeZone6.nextTransition((long) 14);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFieldAdded(durationFieldType12, 52);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.property(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 14L + "'", long10 == 14L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        int int29 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime31 = dateTime22.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean33 = dateTime22.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight16.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight4.withField(dateTimeFieldType32, 5);
        org.joda.time.DateTime dateTime37 = dateMidnight4.toDateTimeISO();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setMonthOfYear(2070);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration13 = duration10.toDuration();
        org.joda.time.Duration duration15 = duration10.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        int int24 = mutableDateTime17.getYearOfEra();
        org.joda.time.Interval interval25 = duration10.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = duration34.plus((long) 'u');
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration36, (-1));
        org.joda.time.Duration duration40 = duration36.withMillis((-28857600001L));
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        mutableDateTime42.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime42.getZone();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        int int49 = mutableDateTime48.getDayOfYear();
        mutableDateTime48.setTime((long) 32);
        org.joda.time.Period period52 = duration40.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean53 = interval25.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.months();
        mutableDateTime48.add(durationFieldType54, 11);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setMillisOfSecond(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.parse("DurationField[minutes]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        boolean boolean70 = dateTimeFormatter2.isPrinter();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.monthOfYear();
        java.util.Date date74 = localDateTime72.toDate();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.minuteOfHour();
        int int79 = localDateTime76.getValue(3);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.minusYears(973);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514395764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=55,MILLISECOND=854,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(date74);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis(10L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        long long37 = duration36.getStandardMinutes();
        org.joda.time.Duration duration38 = duration36.toDuration();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime46.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        mutableDateTime50.setDayOfYear(1);
        mutableDateTime50.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime50.getZone();
        mutableDateTime46.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime43.withZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis(10L);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        int int63 = dateTime59.get(dateTimeFieldType62);
        org.joda.time.DateTime.Property property64 = dateTime27.property(dateTimeFieldType62);
        long long65 = dateTime27.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime27.withSecondOfMinute((-23));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        mutableDateTime5.setMillisOfSecond((int) 'u');
        int int10 = mutableDateTime5.getWeekOfWeekyear();
        mutableDateTime5.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        mutableDateTime14.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime5.setZone(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localTime3.toDateTimeToday(dateTimeZone19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(0L, 13148730000L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone19);
        int int26 = dateTimeZone19.getOffset(0L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        int int36 = mutableDateTime31.getWeekOfWeekyear();
        mutableDateTime31.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setDayOfYear(1);
        mutableDateTime40.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime31.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localTime29.toDateTimeToday(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        mutableDateTime51.setRounding(dateTimeField56);
        int int59 = dateTimeField56.getLeapAmount((long) (byte) 10);
        java.lang.String str61 = dateTimeField56.getAsText(0L);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = dateTimeField56.getAsShortText(1969, locale63);
        java.lang.String str65 = dateTimeZone45.getName((long) 2053, locale63);
        java.lang.String str66 = dateTimeZone19.getShortName(0L, locale63);
        java.lang.Object obj67 = null;
        boolean boolean68 = dateTimeZone19.equals(obj67);
        java.util.TimeZone timeZone69 = dateTimeZone19.toTimeZone();
        java.lang.Object obj70 = timeZone69.clone();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1969" + "'", str64, "1969");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        mutableDateTime7.addHours((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDate(6, 31, 122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(26347715);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = yearMonthDay11.getField(26252);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26252");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withMonthsRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(86400000L, chronology5);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.Period period9 = new org.joda.time.Period(obj0, periodType1, chronology7);
        java.lang.String str10 = periodType1.getName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DayTime" + "'", str10, "DayTime");
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone16);
        mutableDateTime1.setZoneRetainFields(dateTimeZone16);
        mutableDateTime1.addSeconds(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        org.joda.time.Period period1 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period3 = period1.plusSeconds((int) (short) 100);
        org.joda.time.Period period5 = period1.withMillis((int) (byte) 1);
        org.joda.time.Period period7 = period5.minusDays(26209701);
        int int8 = period7.getMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, periodType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = dateTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusMonths(292278993);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.years();
        boolean boolean52 = periodType49.isSupported(durationFieldType51);
        org.joda.time.Period period53 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight47, periodType49);
        org.joda.time.PeriodType periodType54 = periodType49.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, (long) 3, periodType49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withChronology(chronology66);
        int int68 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateTime dateTime70 = dateTime61.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean72 = dateTime61.isSupported(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getRangeDurationType();
        int int74 = mutablePeriod55.get(durationFieldType73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = dateTime78.toString(dateTimeFormatter79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime(dateTimeZone81);
        org.joda.time.LocalTime localTime83 = dateTime82.toLocalTime();
        int int84 = dateTime82.getDayOfWeek();
        org.joda.time.DateTime.Property property85 = dateTime82.secondOfDay();
        org.joda.time.Chronology chronology86 = dateTime82.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.hours();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) 1970, chronology86);
        org.joda.time.DurationField durationField89 = durationFieldType73.getField(chronology86);
        boolean boolean90 = period7.isSupported(durationFieldType73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration91 = new org.joda.time.Duration((java.lang.Object) period7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str15, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str80, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury(66);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 1);
        int int21 = dateTimeZone17.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        long long29 = dateTimeField24.set((long) ' ', "22", locale28);
        boolean boolean30 = dateTimeZone17.equals((java.lang.Object) "22");
        java.lang.String str32 = dateTimeZone17.getShortName((-31536000001L));
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone17);
        java.lang.String str35 = dateTimeZone17.getShortName(0L);
        org.joda.time.DateTime dateTime36 = localDate10.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime36.withTime(2070, 69, (-1645517977), 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61472908799968L) + "'", long29 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("chinois (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"chinois (Taiwan)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType2.getDurationType();
        java.lang.String str5 = durationFieldType4.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = property2.compareTo(readablePartial3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        long long2 = instant0.getMillis();
        org.joda.time.Instant instant4 = instant0.withMillis((long) 13);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514396422L + "'", long2 == 1645514396422L);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = dateTimeFormatter4.parseLocalTime("era");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(0);
        org.joda.time.Interval interval13 = dateMidnight12.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays(0);
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        org.joda.time.Interval interval20 = interval13.gap((org.joda.time.ReadableInterval) interval19);
        boolean boolean21 = interval19.isAfterNow();
        org.joda.time.DateTime dateTime22 = interval19.getEnd();
        boolean boolean23 = localDateTime1.equals((java.lang.Object) dateTime22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        int int4 = dateTimeField2.getMaximumShortTextLength(locale3);
        boolean boolean6 = dateTimeField2.isLeap((long) 13);
        java.util.Date date12 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int13 = date12.getYear();
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromDateFields(date12);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period19, periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = period19.get(durationFieldType24);
        org.joda.time.Period period27 = period19.plusMillis(7);
        org.joda.time.Period period29 = period27.plusMonths(12);
        int[] intArray30 = period29.getValues();
        int int31 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay14, intArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Mar 24 03:59:00 GMT+00:00 1960");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60 + "'", int13 == 60);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 12, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        java.lang.StringBuffer stringBuffer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer6, (-31536000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        mutableDateTime3.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime3.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) (short) 1);
        int int12 = dateTimeZone8.getOffsetFromLocal((long) 83459999);
        boolean boolean13 = duration1.equals((java.lang.Object) int12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        mutableDateTime15.setDayOfYear(1);
        mutableDateTime15.setMillisOfSecond((int) 'u');
        int int20 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime15.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        int int23 = mutableDateTime22.getDayOfMonth();
        int int24 = mutableDateTime22.getMillisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime27.toString(dateTimeFormatter28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) duration45, periodType49);
        org.joda.time.Hours hours52 = duration45.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        mutableDateTime54.setYear(1969);
        int int57 = mutableDateTime54.getDayOfWeek();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = dateTime70.isAfterNow();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (-1), chronology86);
        org.joda.time.Duration duration88 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.DateTime dateTime90 = dateTime70.minus((org.joda.time.ReadableDuration) duration88);
        long long91 = duration88.getMillis();
        mutableDateTime54.add((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Period period93 = duration45.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime54);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Period period98 = period96.multipliedBy(439);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str29, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        int int11 = yearMonthDay9.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) int11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        mutableDateTime3.setMillisOfSecond((int) 'u');
        int int8 = mutableDateTime3.getWeekOfWeekyear();
        mutableDateTime3.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime3.setZone(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localTime1.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        mutableDateTime23.setRounding(dateTimeField28);
        int int31 = dateTimeField28.getLeapAmount((long) (byte) 10);
        java.lang.String str33 = dateTimeField28.getAsText(0L);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = dateTimeField28.getAsShortText(1969, locale35);
        java.lang.String str37 = dateTimeZone17.getName((long) 2053, locale35);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        java.lang.String str39 = dateTimeZone17.getID();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969" + "'", str36, "1969");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight1, dateTimeZone5);
        java.lang.String str7 = localTime6.toString();
        org.joda.time.DateTime dateTime8 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime.Property property9 = localTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property9.setCopy("July");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"July\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.000" + "'", str7, "00:00:00.000");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime2.get(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime0.property(dateTimeFieldType6);
        int int10 = property9.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property9.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property9.setCopy((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(32770, 71, 39, 0, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add(1970);
        java.lang.String str10 = property7.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime12 = property7.add((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setHourOfDay(2030);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate5 = property1.setCopy(12);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setDayOfYear(1);
        mutableDateTime7.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime7.getZone();
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) (short) 1);
        int int16 = dateTimeZone12.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateMidnight dateMidnight17 = localDate5.toDateMidnight(dateTimeZone12);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        boolean boolean21 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        mutableDateTime23.setRounding(dateTimeField28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = property32.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime36 = property32.roundHalfEvenCopy();
        int int37 = localDateTime36.size();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusWeeks((-1));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime36, 0, locale50);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale50);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getISO3Language();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((int) ' ');
        java.util.Locale locale62 = java.util.Locale.ITALY;
        int int63 = property59.getMaximumShortTextLength(locale62);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("PT0S");
        int int66 = property59.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale54.getDisplayVariant(locale65);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getISO3Language();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfEra();
        org.joda.time.DateTime dateTime75 = property73.addToCopy((int) ' ');
        java.util.Locale locale76 = java.util.Locale.ITALY;
        int int77 = property73.getMaximumShortTextLength(locale76);
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("PT0S");
        int int80 = property73.getMaximumShortTextLength(locale79);
        java.lang.String str81 = locale68.getDisplayVariant(locale79);
        java.lang.String str82 = locale65.getDisplayLanguage(locale68);
        java.lang.String str83 = locale50.getDisplayLanguage(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter20.withLocale(locale68);
        java.util.Locale locale85 = java.util.Locale.FRANCE;
        java.util.Locale locale86 = locale85.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter20.withLocale(locale85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter20.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = localDate5.toString(dateTimeFormatter88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearOfCentury" + "'", str2, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514396952,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=57,MILLISECOND=42,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "deu" + "'", str69, "deu");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        mutablePeriod5.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.clear();
        mutablePeriod5.setMinutes(32772);
        mutablePeriod5.clear();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        org.joda.time.Period period1 = org.joda.time.Period.months(1);
        org.joda.time.Period period3 = period1.plusWeeks(0);
        int int4 = period3.getHours();
        org.joda.time.Period period6 = period3.plusDays(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant28, readableInstant29, periodType30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = period31.normalizedStandard(periodType32);
        java.lang.String str34 = period31.toString();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = period38.normalizedStandard(periodType39);
        org.joda.time.Period period41 = period31.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) period38);
        org.joda.time.Period period44 = period38.minusSeconds(11);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight27.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.YearMonthDay yearMonthDay46 = dateMidnight27.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        mutableDateTime48.setDayOfYear(1);
        mutableDateTime48.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime48.getZone();
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) (short) 1);
        int int57 = dateTimeZone53.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        long long65 = dateTimeField60.set((long) ' ', "22", locale64);
        boolean boolean66 = dateTimeZone53.equals((java.lang.Object) "22");
        java.lang.String str68 = dateTimeZone53.getShortName((-31536000001L));
        long long72 = dateTimeZone53.convertLocalToUTC(100L, true, (long) 22);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight27, dateTimeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-61472908799968L) + "'", long65 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.getLocalTime();
        org.joda.time.LocalTime localTime9 = property4.addCopy((long) 16);
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(42);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localTime11.getValue(26368);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26368");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType16 = mutablePeriod15.getPeriodType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(86400000L, chronology19);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        mutablePeriod15.setPeriod((-61472908799968L), chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(1069, 2032, 515, 45, 44, 985, 17999, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology6.getDateTimeMillis(2030, 2021, 16, 59, (int) (short) -1, 61, 39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusYears((int) 'a');
        int int41 = dateMidnight40.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setDayOfYear(1);
        mutableDateTime7.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime7.getZone();
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) (short) 1);
        int int16 = dateTimeZone12.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        long long24 = dateTimeField19.set((long) ' ', "22", locale23);
        boolean boolean25 = dateTimeZone12.equals((java.lang.Object) "22");
        java.lang.String str27 = dateTimeZone12.getShortName((-31536000001L));
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-61472908799968L) + "'", long24 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        java.lang.String str4 = property3.getAsText();
        org.joda.time.LocalDate localDate5 = property3.roundCeilingCopy();
        org.joda.time.LocalDate localDate7 = property3.setCopy(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate7.withMonthOfYear(1069);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1069 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "20" + "'", str4, "20");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(6);
        org.joda.time.DateTime dateTime10 = dateTime6.minusSeconds(3);
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 1, periodType14);
        org.joda.time.PeriodType periodType16 = periodType14.withWeeksRemoved();
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int18 = timeOfDay17.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology21 = timeOfDay17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = new org.joda.time.Period((java.lang.Object) property11, periodType14, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = dateTime5.toString("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withField(dateTimeFieldType3, 9);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusWeeks(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withSecondOfMinute(1955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1955 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2052, 498, (int) (short) 1, 577, (-23));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 577 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay42.plusMonths(12);
        org.joda.time.LocalDate localDate46 = yearMonthDay42.toLocalDate();
        int int47 = yearMonthDay42.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime1.add(readableDuration16);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        boolean boolean21 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        mutableDateTime23.setRounding(dateTimeField28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = property32.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime36 = property32.roundHalfEvenCopy();
        int int37 = localDateTime36.size();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusWeeks((-1));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime36, 0, locale50);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale50);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getISO3Language();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((int) ' ');
        java.util.Locale locale62 = java.util.Locale.ITALY;
        int int63 = property59.getMaximumShortTextLength(locale62);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("PT0S");
        int int66 = property59.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale54.getDisplayVariant(locale65);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getISO3Language();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfEra();
        org.joda.time.DateTime dateTime75 = property73.addToCopy((int) ' ');
        java.util.Locale locale76 = java.util.Locale.ITALY;
        int int77 = property73.getMaximumShortTextLength(locale76);
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("PT0S");
        int int80 = property73.getMaximumShortTextLength(locale79);
        java.lang.String str81 = locale68.getDisplayVariant(locale79);
        java.lang.String str82 = locale65.getDisplayLanguage(locale68);
        java.lang.String str83 = locale50.getDisplayLanguage(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter20.withLocale(locale68);
        java.util.Locale locale85 = java.util.Locale.FRANCE;
        java.util.Locale locale86 = locale85.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter20.withLocale(locale85);
        java.util.Calendar calendar88 = mutableDateTime1.toCalendar(locale85);
        mutableDateTime1.setDayOfYear(56);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514397561,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=57,MILLISECOND=651,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "deu" + "'", str69, "deu");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1894605597117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2030,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=14,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=57,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        org.joda.time.PeriodType periodType27 = mutablePeriod26.getPeriodType();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime53.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.plusYears(0);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay63.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 32769);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) period64);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period64, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableInstant70, readableInstant71, periodType72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = period73.normalizedStandard(periodType74);
        org.joda.time.Period period77 = period75.minusDays(0);
        org.joda.time.Period period78 = period75.toPeriod();
        org.joda.time.Period period79 = period64.minus((org.joda.time.ReadablePeriod) period78);
        int int80 = period79.getHours();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str55, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 999 + "'", int56 == 999);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(gregorianCalendar58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        java.lang.Integer int6 = dateTimeFormatter4.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter4.getZone();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 1, periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        boolean boolean12 = periodType9.isSupported(durationFieldType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(86400000L, chronology14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        boolean boolean19 = durationFieldType11.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter4.withChronology(chronology16);
        java.lang.StringBuffer stringBuffer23 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime29 = property26.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra(25);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter22.printTo(stringBuffer23, (org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration13);
        int int15 = period14.getMillis();
        org.joda.time.Period period17 = period14.withDays(60);
        int int18 = period14.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType20 = period14.getFieldType(14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter70.getZone();
        org.joda.time.Chronology chronology72 = dateTimeFormatter70.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514397827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=57,MILLISECOND=917,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNull(chronology72);
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        org.joda.time.Period period1 = org.joda.time.Period.millis(22);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        org.joda.time.Period period4 = period1.minusYears(2030);
        int int5 = period1.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfMonth(100611);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100611 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withChronology(chronology12);
        int int14 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) period30, chronology31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) period30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime61.plusMonths(999);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = interval72.withChronology(chronology73);
        org.joda.time.Interval interval75 = interval33.overlap((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Chronology chronology76 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(100L, (long) 6, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.yearOfEra();
        org.joda.time.DurationField durationField79 = chronology76.centuries();
        org.joda.time.Chronology chronology80 = chronology76.withUTC();
        org.joda.time.DurationField durationField81 = chronology76.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology76.minuteOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology76);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        mutableDateTime9.setDayOfYear(1);
        mutableDateTime9.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime9.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean20 = dateTimeField18.isLeap((long) 1439);
        boolean boolean22 = dateTimeField18.isLeap(0L);
        long long24 = dateTimeField18.roundFloor((long) (byte) 1);
        int int26 = dateTimeField18.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField18.getType();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime15.property(dateTimeFieldType27);
        boolean boolean29 = localDateTime7.isSupported(dateTimeFieldType27);
        boolean boolean30 = localDateTime1.isSupported(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDateTime1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        java.lang.Object obj4 = mutablePeriod1.clone();
        mutablePeriod1.setPeriod((long) 31, (long) 100);
        mutablePeriod1.clear();
        mutablePeriod1.add((long) 16);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(86400000L, chronology14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology16.add(readablePeriod19, (long) 83459999, 99);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyear();
        mutablePeriod1.setPeriod(2678400000L, (long) 1969, chronology16);
        int int25 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "P-4W-2DT-23H-59M-58.031S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "P-4W-2DT-23H-59M-58.031S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "P-4W-2DT-23H-59M-58.031S");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 83459999L + "'", long22 == 83459999L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-4) + "'", int25 == (-4));
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(14);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds(33);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.LocalTime localTime7 = localTime0.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) period11, periodType14);
        org.joda.time.LocalTime localTime17 = localTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 4);
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(59);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType20);
        mutablePeriod21.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval24 = null;
        mutablePeriod21.setPeriod(readableInterval24);
        mutablePeriod21.setPeriod(1645514179114L, (long) '#');
        org.joda.time.LocalTime localTime29 = localTime19.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.LocalTime localTime31 = localTime19.minusMillis(45);
        int int32 = localTime31.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 955 + "'", int32 == 955);
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay0.withMinuteOfHour(2);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay0.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration33);
        long long36 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight38 = property12.addToCopy((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight40 = property12.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight42 = property12.addToCopy((long) 14);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getISO3Language();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) ' ');
        java.util.Locale locale53 = java.util.Locale.ITALY;
        int int54 = property50.getMaximumShortTextLength(locale53);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("PT0S");
        int int57 = property50.getMaximumShortTextLength(locale56);
        java.lang.String str58 = locale45.getDisplayVariant(locale56);
        java.lang.String str61 = nameProvider44.getShortName(locale45, "yearOfCentury", "PT1.969S");
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str65 = nameProvider44.getName(locale62, "PT0S", "hi!");
        org.joda.time.DateMidnight dateMidnight66 = property12.setCopy("28", locale62);
        int int67 = property9.getMaximumShortTextLength(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = locale62.getUnicodeLocaleType("2022-02-22T00:01:40.120Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T00:01:40.120Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str17, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "deu" + "'", str46, "deu");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths(26383);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear((int) (short) 10);
        org.joda.time.LocalDate.Property property4 = localDate1.era();
        org.joda.time.LocalDate localDate5 = property4.withMinimumValue();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.LocalTime localTime13 = localTime6.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, readableInstant15, periodType16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = period17.normalizedStandard(periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) period17, periodType20);
        org.joda.time.LocalTime localTime23 = localTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 4);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean28 = dateTime26.isSupported(dateTimeFieldType27);
        java.lang.String str29 = dateTimeFieldType27.getName();
        boolean boolean30 = localTime23.isSupported(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property31 = localDate5.property(dateTimeFieldType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minuteOfHour" + "'", str29, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(2023, 206, 29, 227);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.Duration duration51 = duration33.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withDaysRemoved();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(86400000L, chronology57);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        long long64 = chronology59.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period65 = duration51.toPeriod(periodType53, chronology59);
        org.joda.time.Duration duration67 = duration51.minus(993600000L);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone68);
        mutableDateTime69.setDayOfYear(1);
        mutableDateTime69.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone74 = mutableDateTime69.getZone();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone74);
        org.joda.time.Chronology chronology76 = mutableDateTime75.getChronology();
        org.joda.time.Chronology chronology77 = chronology76.withUTC();
        org.joda.time.Period period78 = duration67.toPeriod(chronology77);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean23 = dateTime19.isAfterNow();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateTime19.minus((org.joda.time.ReadableDuration) duration37);
        long long40 = duration37.getMillis();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Period period57 = duration56.toPeriod();
        boolean boolean58 = duration47.isEqual((org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration61 = duration56.plus(100L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration56);
        mutableDateTime1.setMillisOfDay((int) '4');
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 58 + "'", int4 == 58);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        java.io.Writer writer7 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        int int12 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours(2030);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.plusYears(32770);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, (org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 10);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.Interval interval4 = yearMonthDay3.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        long long12 = duration11.getStandardMinutes();
        org.joda.time.Duration duration13 = duration11.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = period19.plusMonths(11);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        long long29 = duration28.getStandardMinutes();
        org.joda.time.Duration duration30 = duration28.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime38.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        mutableDateTime42.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime42.getZone();
        mutableDateTime38.setZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime35.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period53 = period21.plusMinutes(69);
        org.joda.time.Period period55 = period21.plusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period21, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 11 * -292275054");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = period47.isSupported(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plus(10L);
        org.joda.time.DateTime dateTime53 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.era();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateMidnight52.toString("Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        int int37 = gregorianCalendar34.getMinimalDaysInFirstWeek();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar34);
        int int39 = localTime38.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int41 = localTime38.get(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str31, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.lang.Appendable appendable67 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable67, 7300800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514398541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=58,MILLISECOND=631,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("1970-01-01T00:00:00.100", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        date5.setDate(10);
        date5.setDate(99);
        java.util.Date date15 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        date15.setSeconds(99);
        boolean boolean18 = date5.before(date15);
        java.lang.String str19 = date15.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Jun 07 03:59:00 GMT+00:00 1960");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Mar 24 04:00:39 GMT+00:00 1960");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "24 Mar 1960 04:00:38 GMT" + "'", str19, "24 Mar 1960 04:00:38 GMT");
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        mutableDateTime13.setDayOfYear(1);
        mutableDateTime13.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime13.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean24 = dateTimeField22.isLeap((long) 1439);
        boolean boolean26 = dateTimeField22.isLeap(0L);
        long long28 = dateTimeField22.roundFloor((long) (byte) 1);
        int int30 = dateTimeField22.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField22.getType();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime19.property(dateTimeFieldType31);
        boolean boolean33 = localDateTime11.isSupported(dateTimeFieldType31);
        int int34 = localDateTime6.indexOf(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = localDateTime6.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = timeOfDay3.toDateTimeToday(dateTimeZone4);
        int[] intArray6 = timeOfDay3.getValues();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay3.property(dateTimeFieldType10);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay3.minusMillis(16);
        int int15 = timeOfDay3.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = timeOfDay3.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.era();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight24 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        long long32 = duration31.getStandardMinutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int39 = dateTime35.get(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime(dateTimeZone45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        int int48 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime50 = dateTime46.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Period period51 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.PeriodType periodType52 = period51.getPeriodType();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateMidnight24, periodType52);
        org.joda.time.DateTime dateTime55 = dateTime19.plusMinutes(23);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str44, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getWeeksInWeekYear();
        gregorianCalendar30.setFirstDayOfWeek(6);
        gregorianCalendar30.setLenient(false);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate39.withMonthOfYear(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        int int56 = dateTime53.getMillisOfSecond();
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration48, 1439);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        int int65 = dateTime62.getMinuteOfHour();
        org.joda.time.Period period66 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration67 = duration48.toDuration();
        org.joda.time.Duration duration69 = duration67.minus(347181477594L);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration80 = duration78.plus((long) 'u');
        mutableDateTime71.add((org.joda.time.ReadableDuration) duration80, (-1));
        org.joda.time.Duration duration84 = duration80.withMillis((-28857600001L));
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone85);
        mutableDateTime86.setDayOfYear(1);
        mutableDateTime86.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone91 = mutableDateTime86.getZone();
        org.joda.time.MutableDateTime mutableDateTime92 = new org.joda.time.MutableDateTime(dateTimeZone91);
        int int93 = mutableDateTime92.getDayOfYear();
        mutableDateTime92.setTime((long) 32);
        org.joda.time.Period period96 = duration84.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime92);
        org.joda.time.Hours hours97 = duration84.toStandardHours();
        org.joda.time.Duration duration98 = duration67.minus((org.joda.time.ReadableDuration) duration84);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str32, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str55, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 999 + "'", int56 == 999);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 53 + "'", int93 == 53);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(hours97);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(86400000L, chronology4);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(54, (int) (byte) 0, 26347715, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 26209701, 4);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.Instant instant7 = instant0.withDurationAdded((long) 69, 16);
        org.joda.time.MutableDateTime mutableDateTime8 = instant0.toMutableDateTimeISO();
        long long9 = instant0.getMillis();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514399109L + "'", long9 == 1645514399109L);
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate5 = property1.setCopy(12);
        org.joda.time.DurationField durationField6 = property1.getRangeDurationField();
        long long9 = durationField6.getValueAsLong((long) 502, (long) 2021);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = durationField6.getMillis(227210054400000L, 1645514252L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 22721005440000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearOfCentury" + "'", str2, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonthDay11.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        long long21 = duration20.getStandardMinutes();
        org.joda.time.Duration duration22 = duration20.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime34.setDayOfYear(1);
        mutableDateTime34.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime34.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime27.withZoneRetainFields(dateTimeZone39);
        org.joda.time.Interval interval42 = yearMonthDay11.toInterval(dateTimeZone39);
        long long43 = interval42.getEndMillis();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration52 = duration50.plus((long) 'u');
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.withZone(dateTimeZone62);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 1, periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withWeeksRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime63, periodType65);
        org.joda.time.Period period69 = interval42.toPeriod(periodType65);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2595542400000L + "'", long43 == 2595542400000L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj6, chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        long long16 = dateTimeField13.getDifferenceAsLong((long) (-38090), (long) 502);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 10, 45, 49, 17);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean9 = localTime6.isEqual((org.joda.time.ReadablePartial) localTime8);
        int int10 = timeOfDay4.compareTo((org.joda.time.ReadablePartial) localTime6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = timeOfDay4.getFieldType(23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 23");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration13 = duration10.toDuration();
        org.joda.time.Duration duration15 = duration10.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        int int24 = mutableDateTime17.getYearOfEra();
        org.joda.time.Interval interval25 = duration10.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.setTime((long) 47);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        int int37 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime.Property property38 = dateTime35.secondOfDay();
        org.joda.time.Chronology chronology39 = dateTime35.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1970, chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        mutableDateTime17.setChronology(chronology39);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str33, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(4);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay3.plusSeconds(32772);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay3.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        long long5 = durationField3.getValueAsLong((long) 52);
        long long8 = durationField3.subtract((long) (short) -1, 3);
        long long11 = durationField3.getValueAsLong((long) 70, (-31536000001L));
        long long14 = durationField3.getMillis((long) 99, 1961046979114L);
        long long16 = durationField3.getMillis(15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-7948800001L) + "'", long8 == (-7948800001L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 260236800000L + "'", long14 == 260236800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 39446190000L + "'", long16 == 39446190000L);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        int int36 = dateTime33.getMillisOfSecond();
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = duration6.equals((java.lang.Object) period37);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withDaysRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period44 = new org.joda.time.Period((java.lang.Object) boolean38, periodType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str12, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str35, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        org.joda.time.Period period4 = new org.joda.time.Period(11, 2005, 26347715, (-19045));
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        java.lang.Object obj4 = mutablePeriod1.clone();
        mutablePeriod1.setPeriod((long) (short) -1, (long) '#');
        int int8 = mutablePeriod1.getMinutes();
        java.lang.String str9 = mutablePeriod1.toString();
        int int10 = mutablePeriod1.getDays();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "PT0.036S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "PT0.036S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "PT0.036S");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.036S" + "'", str9, "PT0.036S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("23");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(86400000L, chronology6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean11 = durationFieldType3.isSupported(chronology8);
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate6 = localDate2.withField(dateTimeFieldType4, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        int int8 = dateMidnight7.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.plusDays(12);
        int int11 = dateMidnight7.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2032) + "'", int11 == (-2032));
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        java.util.Date date3 = new java.util.Date(7, 15, (int) (byte) -1);
        int int4 = date3.getDate();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Mar 30 00:00:00 GMT+00:00 1908");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 30 + "'", int4 == 30);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusMonths(0);
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTimeAtMidnight();
        int int37 = yearMonthDay33.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = yearMonthDay33.getFieldType(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        int int10 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime.Property property11 = dateTime8.secondOfDay();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(1641021484572L, 227228371200100L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology12.getDateTimeMillis(993600000L, 439, (-1645517977), (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str6, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime17 = dateTime2.withCenturyOfEra(1955);
        java.lang.String str18 = dateTime2.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str18, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime(dateTimeZone28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        int int31 = dateTime29.getDayOfWeek();
        org.joda.time.DateTime.Property property32 = dateTime29.secondOfDay();
        org.joda.time.Chronology chronology33 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        boolean boolean41 = dateTimeField39.isLeap((long) 1439);
        boolean boolean43 = dateTimeField39.isLeap(0L);
        long long45 = dateTimeField39.roundFloor((long) (byte) 1);
        int int47 = dateTimeField39.get((long) 5);
        long long50 = dateTimeField39.add((long) 4, (int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getISO3Language();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime59 = property57.addToCopy((int) ' ');
        java.util.Locale locale60 = java.util.Locale.ITALY;
        int int61 = property57.getMaximumShortTextLength(locale60);
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("PT0S");
        int int64 = property57.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale52.getDisplayVariant(locale63);
        java.lang.String str67 = locale52.getExtension('u');
        java.lang.String str68 = dateTimeField39.getAsText(10L, locale52);
        long long69 = dateTimeField34.set(0L, "23", locale52);
        java.util.Locale locale70 = java.util.Locale.PRC;
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale72.getISO3Language();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.joda.time.DateTime dateTime79 = property77.addToCopy((int) ' ');
        java.util.Locale locale80 = java.util.Locale.ITALY;
        int int81 = property77.getMaximumShortTextLength(locale80);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("PT0S");
        int int84 = property77.getMaximumShortTextLength(locale83);
        java.lang.String str85 = locale72.getDisplayVariant(locale83);
        java.lang.String str88 = nameProvider71.getShortName(locale72, "yearOfCentury", "PT1.969S");
        java.lang.String str89 = locale70.getDisplayName(locale72);
        java.lang.String str90 = locale52.getDisplayCountry(locale72);
        java.util.Calendar calendar91 = dateTime6.toCalendar(locale52);
        calendar91.setFirstDayOfWeek((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            calendar91.clear(59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 315532800004L + "'", long50 == 315532800004L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "deu" + "'", str53, "deu");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 23L + "'", long69 == 23L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "deu" + "'", str73, "deu");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Chinesisch (China)" + "'", str89, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(calendar91);
        org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=100,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        int int13 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.year();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        mutableDateTime17.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime17.getZone();
        mutableDateTime15.setZone(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(0, 152, (-44), 1955, 44, (-292275054), 100611, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate2.compareTo((org.joda.time.ReadablePartial) localTime3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.Period period5 = org.joda.time.Period.seconds(0);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = periodType6.isSupported(durationFieldType7);
        org.joda.time.Period period10 = period5.withField(durationFieldType7, 28);
        org.joda.time.DateTime dateTime12 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 0);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology5.add(readablePeriod8, (long) 83459999, 99);
        org.joda.time.DateTimeField dateTimeField12 = chronology5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(50, 1971, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 83459999L + "'", long11 == 83459999L);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeField6.set((long) 40, "1970-12-31T23:59:56.099");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-12-31T23:59:56.099\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean29 = dateTime25.isAfterNow();
        org.joda.time.DateTime dateTime31 = dateTime25.withCenturyOfEra(100);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime35.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime60.plusMonths(999);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 1, periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime46, (org.joda.time.ReadableInstant) dateTime66, periodType68);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = interval71.withChronology(chronology72);
        boolean boolean74 = interval73.containsNow();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(dateTimeZone75);
        mutableDateTime76.setDayOfYear(1);
        mutableDateTime76.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone81 = mutableDateTime76.getZone();
        org.joda.time.Interval interval82 = interval73.withEnd((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime76.toMutableDateTime();
        org.joda.time.Duration duration84 = period32.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime76);
        mutableDateTime76.addMillis(245);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(duration84);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration8.toPeriod(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration34);
        org.joda.time.Duration duration38 = duration18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period40 = duration18.toPeriod(periodType39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) -1);
        boolean boolean58 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Seconds seconds59 = duration57.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(seconds59);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) ' ');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration28, (-1));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths(999);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) dateTime39, periodType41);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval59 = interval52.gap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Interval interval60 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        boolean boolean61 = localDate2.equals((java.lang.Object) interval60);
        org.joda.time.LocalDate localDate63 = localDate2.withYearOfEra(38);
        int int64 = localDate2.getMonthOfYear();
        int int65 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate localDate67 = localDate2.plusMonths((int) (byte) 1);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        long long8 = chronology3.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.millisOfDay();
        long long13 = dateTimeField10.add((long) 60, (long) 39);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 99L + "'", long13 == 99L);
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(17999, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17999 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.yearOfCentury();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        long long12 = durationField10.getMillis(15);
        java.lang.String str13 = durationField10.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 47335428000000L + "'", long12 == 47335428000000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DurationField[centuries]" + "'", str13, "DurationField[centuries]");
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(86400000L, chronology4);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        java.lang.String str8 = chronology6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((-1), 81, 26388899, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 1, periodType50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, periodType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        int int61 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime.Property property62 = dateTime59.secondOfDay();
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType50, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime24.withChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.weekyearOfCentury();
        long long71 = dateTimeField68.getDifferenceAsLong((long) 18, 2392146000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str30, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str57, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        java.io.IOException iOException1 = new java.io.IOException("DayTime");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.String str3 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: java.io.IOException: DayTime" + "'", str3, "java.io.IOException: java.io.IOException: DayTime");
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        boolean boolean9 = dateTimeFormatter8.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withZoneUTC();
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withDefaultYear(2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter10.withDefaultYear((int) (short) 1);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property3.setCopy("Property[minuteOfHour]", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[minuteOfHour]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22" + "'", str2, "2022-02-22");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.withDayOfWeek(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZone(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfWeek();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = property19.getAsText(locale20);
        java.util.Calendar calendar35 = dateTime9.toCalendar(locale20);
        int int36 = dateTime9.getCenturyOfEra();
        org.joda.time.DateTime.Property property37 = dateTime9.centuryOfEra();
        org.joda.time.Chronology chronology38 = dateTime9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(152, 0, 30, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str7, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Mittwoch" + "'", str34, "Mittwoch");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=86399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        java.lang.String str44 = property43.getAsText();
        int int45 = property43.get();
        org.joda.time.YearMonthDay yearMonthDay46 = property43.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay48 = property43.addToCopy(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.withDayOfMonth(450);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 450 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mars" + "'", str44, "mars");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) (short) 1);
        int int10 = dateTimeZone6.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        long long18 = dateTimeField13.set((long) ' ', "22", locale17);
        boolean boolean19 = dateTimeZone6.equals((java.lang.Object) "22");
        java.lang.String str21 = dateTimeZone6.getShortName((-31536000001L));
        long long25 = dateTimeZone6.convertLocalToUTC(100L, true, (long) 22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusHours((int) '#');
        org.joda.time.Period period33 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Period period35 = period33.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = period35.minusSeconds(59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-61472908799968L) + "'", long18 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(227210054399999999L, dateTimeZone11);
        boolean boolean13 = dateTimeZone6.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = new org.joda.time.Period((java.lang.Object) property14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime14 = dateTime5.minus((long) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 0, (long) 14, periodType25, chronology30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime35.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plusMonths(292278993);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        long long52 = duration51.getStandardMinutes();
        org.joda.time.Duration duration53 = duration51.toDuration();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone60);
        mutableDateTime61.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(dateTimeZone64);
        mutableDateTime65.setDayOfYear(1);
        mutableDateTime65.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone70 = mutableDateTime65.getZone();
        mutableDateTime61.setZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = dateTime58.withZoneRetainFields(dateTimeZone70);
        int int74 = dateTimeZone70.getOffsetFromLocal((long) 0);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 10, dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 100, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight42.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight77.plus(26209701L);
        boolean boolean81 = interval32.contains((org.joda.time.ReadableInstant) dateMidnight77);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(124, 2070, 26277594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        int int20 = localDate18.getDayOfWeek();
        int int21 = localDate18.getYear();
        int int22 = localDate18.getCenturyOfEra();
        org.joda.time.LocalDate localDate24 = localDate18.withWeekyear((int) 'a');
        java.util.Date date25 = localDate18.toDate();
        org.joda.time.LocalDate.Property property26 = localDate18.yearOfEra();
        org.joda.time.LocalDate localDate28 = localDate18.minusYears(23);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay17, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        int int31 = localDate28.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight30 = property26.addToCopy(31);
        int int31 = dateMidnight30.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withWeekOfWeekyear(152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2053 + "'", int31 == 2053);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMinutes(28);
        mutableDateTime0.addMillis(32772);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = property5.set("Ora media di Greenwich");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Ora media di Greenwich\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T00:01:40.426Z");
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Heure de Greenwich" + "'", str2, "Heure de Greenwich");
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.setCopy("GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        long long13 = dateTimeField2.add((long) 4, (int) (byte) 10);
        long long15 = dateTimeField2.roundHalfFloor((long) 99);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeField2.getAsText(2022, locale17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        long long28 = dateTimeField23.set((long) ' ', "22", locale27);
        int int29 = dateTimeField2.getMaximumTextLength(locale27);
        long long32 = dateTimeField2.add(119L, 17);
        int int35 = dateTimeField2.getDifference(220898664000L, (long) 1969);
        int int37 = dateTimeField2.getMaximumValue((long) 56);
        java.util.Date date43 = new java.util.Date(32772, 22, 12, (int) (byte) 0, 90);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromDateFields(date43);
        org.joda.time.LocalTime localTime46 = localTime44.minusHours((int) (byte) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = dateTime50.toString(dateTimeFormatter51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime.Property property71 = dateTime54.year();
        int int72 = property71.getMinimumValueOverall();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = property71.getAsShortText(locale73);
        java.lang.String str75 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localTime44, (int) 'a', locale73);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 315532800004L + "'", long13 == 315532800004L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u53f0\u6e7e" + "'", str19, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61472908799968L) + "'", long28 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 536457600119L + "'", long32 == 536457600119L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Nov 12 01:30:00 GMT+00:00 34673");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str52, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-292275054) + "'", int72 == (-292275054));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1969" + "'", str74, "1969");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "97" + "'", str75, "97");
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        int int5 = dateTime2.getMinuteOfHour();
        org.joda.time.DateTime.Property property6 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime2.minusYears(6);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant2);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusWeeks(47);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int7 = timeOfDay6.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology10 = timeOfDay6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DurationField durationField12 = chronology10.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) property5, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property27 = dateTime10.year();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean29 = timeOfDay1.equals((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime31 = dateTime10.minusWeeks(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int33 = dateTime10.get(dateTimeFieldType32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime10.withZone(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime10.dayOfYear();
        java.util.Locale locale39 = new java.util.Locale("Jan", "P-100W");
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = property36.getAsShortText(locale39);
        org.joda.time.DateTime dateTime42 = property36.getDateTime();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(locale39.toString(), "jan_P-100W");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "jan" + "'", str40, "jan");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "365" + "'", str41, "365");
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime43.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset(119L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay11.toDateMidnight();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale locale18 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = yearMonthDay11.toString("months", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-03-31" + "'", str13, "2052-03-31");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        long long13 = dateTimeField2.add((long) 4, (int) (byte) 10);
        long long15 = dateTimeField2.roundHalfFloor((long) 99);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeField2.getAsText(2022, locale17);
        java.lang.String str21 = dateTimeField2.getName();
        java.lang.String str23 = dateTimeField2.getAsShortText((long) (short) -1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.plusYears(10);
        boolean boolean28 = localDate24.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property29 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = localDate24.minusYears((int) 'a');
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weeks();
        boolean boolean33 = localDate24.isSupported(durationFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        long long60 = property36.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateMidnight dateMidnight62 = property36.addToCopy((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight64 = property36.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight66 = property36.addToCopy((long) 14);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getISO3Language();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.DateTime dateTime76 = property74.addToCopy((int) ' ');
        java.util.Locale locale77 = java.util.Locale.ITALY;
        int int78 = property74.getMaximumShortTextLength(locale77);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("PT0S");
        int int81 = property74.getMaximumShortTextLength(locale80);
        java.lang.String str82 = locale69.getDisplayVariant(locale80);
        java.lang.String str85 = nameProvider68.getShortName(locale69, "yearOfCentury", "PT1.969S");
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str89 = nameProvider68.getName(locale86, "PT0S", "hi!");
        org.joda.time.DateMidnight dateMidnight90 = property36.setCopy("28", locale86);
        java.lang.String str91 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDate24, locale86);
        org.joda.time.LocalDate.Property property92 = localDate24.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 315532800004L + "'", long13 == 315532800004L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u53f0\u6e7e" + "'", str19, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "year" + "'", str21, "year");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969" + "'", str23, "1969");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str41, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "deu" + "'", str70, "deu");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022" + "'", str91, "2022");
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay35.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 32769);
        org.joda.time.Period period40 = period36.minusMinutes(26252);
        org.joda.time.Period period42 = period36.minusDays(81);
        org.joda.time.PeriodType periodType43 = period42.getPeriodType();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        int int52 = dateTime50.getDayOfWeek();
        org.joda.time.DateTime.Property property53 = dateTime50.secondOfDay();
        org.joda.time.Chronology chronology54 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfDay();
        org.joda.time.DurationField durationField56 = chronology54.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) period42, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str48, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        mutableDateTime6.setRounding(dateTimeField11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfEvenCopy();
        int int20 = localDateTime19.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusWeeks((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime19, 0, locale33);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addToCopy((int) ' ');
        java.util.Locale locale45 = java.util.Locale.ITALY;
        int int46 = property42.getMaximumShortTextLength(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT0S");
        int int49 = property42.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getISO3Language();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((int) ' ');
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = property56.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("PT0S");
        int int63 = property56.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale51.getDisplayVariant(locale62);
        java.lang.String str65 = locale48.getDisplayLanguage(locale51);
        java.lang.String str66 = locale33.getDisplayLanguage(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter3.withLocale(locale51);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = locale68.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter3.withLocale(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology72 = dateTimeFormatter3.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.parse("86499-03-31", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514401652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"T00:00:00.000\",offset=90,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=1,MILLISECOND=742,ZONE_OFFSET=90,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deu" + "'", str52, "deu");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(chronology72);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        int[] intArray41 = yearMonthDay9.getValues();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay9.minusMonths(1971);
        java.lang.String str46 = yearMonthDay9.toString();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2053, 3, 31]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2053-03-31" + "'", str46, "2053-03-31");
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay0, chronology18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay0.minusMinutes(66);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay0.minusMillis(2021);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZone(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusDays(0);
        int int39 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateTime dateTime40 = dateMidnight38.toDateTime();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.withFieldAdded(durationFieldType46, 8);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod50.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight48.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, 0);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.withMillisOfSecond(2030);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(timeOfDay55);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int6 = dateTime2.get(dateTimeFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.centuryOfEra();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str11, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        org.joda.time.Period period8 = new org.joda.time.Period((int) '4', 439, 52, 24, 1955, 26357117, 0, 2021);
        org.joda.time.Period period10 = period8.withWeeks(2022);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        java.lang.String str16 = period13.toString();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = period20.normalizedStandard(periodType21);
        org.joda.time.Period period23 = period13.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) period20);
        org.joda.time.Period period26 = period20.minusSeconds(11);
        org.joda.time.Period period28 = period26.plusMillis(28);
        org.joda.time.DateTime dateTime29 = dateTime9.minus((org.joda.time.ReadablePeriod) period28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime9.withEra(26383);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26383 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(256132800000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(26209701);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26209701 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(384309744566400001L, chronology4);
        mutableDateTime7.add((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime26 = dateTime12.plusDays((-292275054));
        org.joda.time.DateTime dateTime27 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        org.joda.time.DateTime dateTime36 = property31.roundHalfFloorCopy();
        boolean boolean37 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean42 = dateTimeField40.isLeap((long) 1439);
        boolean boolean44 = dateTimeField40.isLeap(0L);
        long long46 = dateTimeField40.roundFloor((long) (byte) 1);
        int int48 = dateTimeField40.get((long) 5);
        org.joda.time.DurationField durationField49 = dateTimeField40.getRangeDurationField();
        java.lang.String str51 = dateTimeField40.getAsShortText((long) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField40.getType();
        int int53 = dateTime36.get(dateTimeFieldType52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime7.property(dateTimeFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfHour(66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1969" + "'", str51, "1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((int) (byte) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        long long14 = duration13.getStandardMinutes();
        org.joda.time.Duration duration15 = duration13.toDuration();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime20.withZoneRetainFields(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withZone(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("38", dateTimeFormatter35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundFloorCopy();
        int int10 = localDateTime9.getYearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(0);
        org.joda.time.Interval interval46 = dateMidnight45.toInterval();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.Interval interval53 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval54 = interval40.gap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = dateTime57.toString(dateTimeFormatter58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateTime.Property property78 = dateTime61.year();
        org.joda.time.Interval interval79 = interval46.withStart((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.dayOfYear();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight81.minusDays(0);
        org.joda.time.Interval interval85 = dateMidnight84.toInterval();
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property88 = dateMidnight87.dayOfYear();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight87.minusDays(0);
        org.joda.time.Interval interval91 = dateMidnight90.toInterval();
        org.joda.time.Interval interval92 = interval85.gap((org.joda.time.ReadableInterval) interval91);
        org.joda.time.Interval interval93 = interval46.gap((org.joda.time.ReadableInterval) interval92);
        long long94 = interval46.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNull(interval53);
        org.junit.Assert.assertNull(interval54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str59, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getWeeksInWeekYear();
        gregorianCalendar30.setFirstDayOfWeek(6);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = gregorianCalendar30.getGreatestMinimum(2021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2021");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str27, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        java.util.stream.Stream<java.lang.String> strStream14 = strSet3.stream();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 1, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withWeeksRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(0);
        int int34 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant35 = dateTime28.toInstant();
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DateTime dateTime37 = instant35.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime38 = instant35.toMutableDateTimeISO();
        org.joda.time.Chronology chronology39 = instant35.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) strStream14, periodType18, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.stream.ReferencePipeline$Head");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(0);
        org.joda.time.Interval interval46 = dateMidnight45.toInterval();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.Interval interval53 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        boolean boolean54 = interval38.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval56 = interval38.withStartMillis((long) 292278993);
        boolean boolean58 = interval38.contains((long) ' ');
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period21, chronology22);
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePeriod) period21, (-1L));
        org.joda.time.DateTimeField dateTimeField26 = chronology5.monthOfYear();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 99, (long) (byte) 1, chronology5);
        org.joda.time.DurationField durationField28 = chronology5.months();
        long long31 = durationField28.add((long) 26277594, (int) (byte) 0);
        long long33 = durationField28.getValueAsLong(2010787200733L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 26277594L + "'", long31 == 26277594L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 764L + "'", long33 == 764L);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        int int32 = dateTime5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = dateTime5.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean57 = dateTime55.isSupported(dateTimeFieldType56);
        int int58 = localTime52.get(dateTimeFieldType56);
        int int59 = dateTime47.get(dateTimeFieldType56);
        org.joda.time.DateTime dateTime61 = dateTime47.minus(119L);
        boolean boolean62 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property63 = dateTime61.era();
        org.joda.time.DateTime.Property property64 = dateTime61.minuteOfDay();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        java.io.IOException iOException1 = new java.io.IOException("und");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: und" + "'", str2, "java.io.IOException: und");
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.Period period5 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period7 = period5.plusSeconds((int) (short) 100);
        org.joda.time.LocalDate localDate9 = localDate2.withPeriodAdded((org.joda.time.ReadablePeriod) period7, (-1));
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 83459999, (long) 10, periodType12);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime17.toString(dateTimeFormatter18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime.Property property38 = dateTime21.year();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight.Property property40 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight41 = property40.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = period45.normalizedStandard(periodType46);
        java.lang.String str48 = period45.toString();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableInstant49, readableInstant50, periodType51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = period52.normalizedStandard(periodType53);
        org.joda.time.Period period55 = period45.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((java.lang.Object) period52);
        org.joda.time.Period period58 = period52.minusSeconds(11);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight41.minus((org.joda.time.ReadablePeriod) period58);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableInstant62, readableInstant63, periodType64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = period65.normalizedStandard(periodType66);
        org.joda.time.LocalTime localTime68 = localTime61.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.dayOfYear();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight77.withChronology(chronology79);
        int int81 = dateTime74.compareTo((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.DateTime dateTime83 = dateTime74.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean85 = dateTime74.isSupported(dateTimeFieldType84);
        int int86 = dateTime74.getYearOfEra();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period89 = new org.joda.time.Period((long) 1, periodType88);
        org.joda.time.DateTime dateTime90 = dateTime74.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.LocalTime localTime91 = localTime61.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DurationFieldType durationFieldType92 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean93 = localTime61.isSupported(durationFieldType92);
        int int94 = period58.get(durationFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate96 = localDate2.withFieldAdded(durationFieldType92, 2032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str19, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0S" + "'", str48, "PT0S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1969 + "'", int86 == 1969);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        java.lang.String str6 = localDate2.toString();
        org.joda.time.LocalDate localDate8 = localDate2.plusMonths(999);
        org.joda.time.LocalDate.Property property9 = localDate2.centuryOfEra();
        java.lang.String str10 = localDate2.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property13.addToCopy(20);
        int int17 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusDays(17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours(20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = localDate2.isEqual((org.joda.time.ReadablePartial) localDateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2032-02-22" + "'", str6, "2032-02-22");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2032-02-22" + "'", str10, "2032-02-22");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusMonths(292278993);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        boolean boolean41 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Period period42 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight36, periodType38);
        org.joda.time.PeriodType periodType43 = periodType38.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType38);
        mutablePeriod44.addDays(624);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str4, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((-1L));
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        int int7 = property6.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy(3);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property11.setCopy("de_DE");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"de_DE\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(4);
        int int10 = timeOfDay9.size();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        java.util.Date date14 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.property(dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property20 = timeOfDay9.property(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        boolean boolean8 = interval5.isAfter((long) 100);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        java.lang.String str10 = interval5.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str10, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(86400000L, chronology6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj4, chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(21, 35, 0, 100611, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100611 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 1, periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = periodType6.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(86400000L, chronology11);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfSecond();
        boolean boolean16 = durationFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        mutableDateTime19.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone24);
        org.joda.time.Chronology chronology27 = chronology13.withZone(dateTimeZone24);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 5, (long) 6, periodType4, chronology13);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime32.toString(dateTimeFormatter33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTime.Property property53 = dateTime36.year();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = dateTime58.toString(dateTimeFormatter59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration76);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 1, periodType80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((java.lang.Object) duration76, periodType80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = dateTime85.toString(dateTimeFormatter86);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = dateTime85.toDateTime(dateTimeZone88);
        org.joda.time.LocalTime localTime90 = dateTime89.toLocalTime();
        int int91 = dateTime89.getDayOfWeek();
        org.joda.time.DateTime.Property property92 = dateTime89.secondOfDay();
        org.joda.time.Chronology chronology93 = dateTime89.getChronology();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType80, chronology93);
        org.joda.time.DateTime dateTime95 = dateTime54.withChronology(chronology93);
        org.joda.time.DurationField durationField96 = chronology93.days();
        org.joda.time.DateTimeField dateTimeField97 = chronology93.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField98 = chronology93.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period99 = new org.joda.time.Period((long) 71, 227228371200100L, periodType4, chronology93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3787139520");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str34, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str60, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str87, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }
}

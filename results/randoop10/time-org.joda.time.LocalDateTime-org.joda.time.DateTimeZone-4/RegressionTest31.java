import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest31 {

    public static boolean debug = false;

    @Test
    public void test15501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15501");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        int int3 = dateMidnight1.getEra();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withDayOfYear(14);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test15502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        java.util.Date date31 = gregorianCalendar30.getTime();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 1, periodType33);
        org.joda.time.PeriodType periodType35 = periodType33.withWeeksRemoved();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        java.util.Date date67 = gregorianCalendar66.getTime();
        boolean boolean68 = periodType35.equals((java.lang.Object) gregorianCalendar66);
        gregorianCalendar66.setTimeInMillis((long) 6);
        java.util.Date date74 = new java.util.Date(47, 999, 70);
        gregorianCalendar66.setTime(date74);
        int int76 = date74.getSeconds();
        java.lang.String str77 = date74.toLocaleString();
        gregorianCalendar30.setTime(date74);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = null;
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        gregorianCalendar30.setTimeZone(timeZone79);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = gregorianCalendar30.getLeastMaximum(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 GMT+14:35 1969");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType35);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str40, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str63, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(gregorianCalendar66);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:59:59 GMT+14:35 1969");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Sun Jun 09 00:00:00 GMT+14:35 2030");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9-giu-2030 0.00.00" + "'", str77, "9-giu-2030 0.00.00");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test15503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15503");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, periodType27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = dateTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight35 = dateTime32.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusMonths(292278993);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        boolean boolean44 = periodType41.isSupported(durationFieldType43);
        org.joda.time.Period period45 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight39, periodType41);
        org.joda.time.PeriodType periodType46 = periodType41.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, (long) 3, periodType41);
        org.joda.time.Period period48 = new org.joda.time.Period(86400000L, periodType41);
        org.joda.time.PeriodType periodType49 = periodType41.withMonthsRemoved();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str7, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test15504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15504");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        int int39 = dateTime36.getMillisOfSecond();
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime36.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(0);
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology47);
        org.joda.time.DateTime.Property property52 = dateTime10.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str15, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str38, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(gregorianCalendar41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test15505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        int int11 = property10.getMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = dateTime12.isSupported(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime24 = dateTime6.withCenturyOfEra(7);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean30 = dateTime28.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int32 = dateTime28.get(dateTimeFieldType31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateTime35.toString(dateTimeFormatter36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime(dateTimeZone38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        int int41 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime43 = dateTime39.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        long long46 = mutableInterval45.getStartMillis();
        boolean boolean47 = mutableInterval45.containsNow();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 34 + "'", int32 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str37, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-37868342400001L) + "'", long46 == (-37868342400001L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundCeiling();
        mutableDateTime9.setSecondOfMinute(16);
        mutableDateTime9.addWeekyears(51);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 1, periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = periodType15.isSupported(durationFieldType17);
        java.lang.String str19 = durationFieldType17.getName();
        mutableDateTime9.add(durationFieldType17, 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
    }

    @Test
    public void test15508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15508");
        org.joda.time.Period period1 = org.joda.time.Period.months(1);
        org.joda.time.Period period3 = period1.plusWeeks(0);
        int int4 = period3.getHours();
        org.joda.time.Period period6 = period3.plusDays(19);
        org.joda.time.Period period8 = period6.withWeeks(90);
        int int9 = period6.getMinutes();
        org.joda.time.Period period11 = period6.minusYears(33);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.Period period14 = period11.withWeeks(52499999);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test15509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(16);
        org.joda.time.MutableDateTime mutableDateTime24 = property20.add((int) (short) 0);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType25);
        mutablePeriod26.addYears((int) (short) 0);
        java.lang.Object obj29 = mutablePeriod26.clone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration43);
        int int45 = period44.getYears();
        mutablePeriod26.add((org.joda.time.ReadablePeriod) period44);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Duration duration49 = new org.joda.time.Duration(28857600000L);
        mutablePeriod26.add((org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-52500000L) + "'", long16 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P47W5D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P47W5D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P47W5D");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test15510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15510");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test15511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15511");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
    }

    @Test
    public void test15512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15512");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        int int13 = localDate12.getWeekOfWeekyear();
        int int14 = localDate12.getWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
    }

    @Test
    public void test15513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 47);
        org.joda.time.LocalDate localDate14 = localDate12.withEra(0);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        java.lang.String str17 = property16.getName();
        int int18 = property16.getMinimumValue();
        org.joda.time.LocalDate localDate20 = property16.setCopy(12);
        int int21 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusYears(1);
        int int35 = yearMonthDay34.getDayOfMonth();
        java.lang.String str36 = yearMonthDay34.toString();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay34.year();
        java.util.Locale locale39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = property37.setCopy("100", locale39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = dateTime69.toString(dateTimeFormatter70);
        int int72 = dateTime69.getMillisOfSecond();
        org.joda.time.Period period73 = duration64.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        java.util.GregorianCalendar gregorianCalendar74 = dateTime69.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay75 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.plusYears(0);
        org.joda.time.Chronology chronology80 = yearMonthDay79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.centuryOfEra();
        org.joda.time.DurationField durationField82 = chronology80.hours();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(1010135478993L, (-61472908799968L), chronology80);
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(6156761356800007L, chronology80);
        boolean boolean85 = property37.equals((java.lang.Object) 6156761356800007L);
        java.util.Locale.Builder builder86 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder87 = builder86.clear();
        java.util.Locale locale88 = builder87.build();
        boolean boolean89 = locale88.hasExtensions();
        int int90 = property37.getMaximumShortTextLength(locale88);
        java.lang.String str91 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDate20, 91, locale88);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfCentury" + "'", str17, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2052-04-01" + "'", str36, "2052-04-01");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str48, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str71, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 999 + "'", int72 == 999);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(gregorianCalendar74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "91" + "'", str91, "91");
    }

    @Test
    public void test15514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15514");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test15515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15515");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int18 = timeOfDay17.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.withMillisOfSecond((int) (short) 1);
        int int22 = timeOfDay17.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant27, readableInstant28, periodType29);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period33 = period30.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay17.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period36 = period30.minusSeconds((int) (byte) 10);
        org.joda.time.Period period38 = period30.plusMinutes(31);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period38, 3);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DateMidnight dateMidnight46 = dateTime43.toDateMidnight();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateMidnight46);
        mutableDateTime1.addHours(1970);
        mutableDateTime1.setTime((long) '#');
        mutableDateTime1.setMillisOfDay(2935);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test15516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15516");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        mutablePeriod4.addYears((int) (short) 0);
        java.lang.Object obj7 = mutablePeriod4.clone();
        mutablePeriod4.addDays(2053);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay12 = property11.getTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "P2053D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "P2053D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "P2053D");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test15517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15517");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        int int5 = dateTimeFormatter2.getDefaultYear();
        int int6 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(0);
        java.lang.Appendable appendable10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable10, readableInstant11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test15518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15518");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfMonth();
        org.joda.time.DurationField durationField39 = chronology36.years();
        org.joda.time.DurationField durationField40 = chronology36.months();
        org.joda.time.DurationField durationField41 = chronology36.hours();
        boolean boolean42 = durationField41.isPrecise();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test15519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15519");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight30 = property26.addToCopy(31);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration51.minus((-31536000001L));
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableInstant56, readableInstant57, periodType58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = period59.normalizedStandard(periodType60);
        org.joda.time.Period period63 = period61.minusDays(0);
        org.joda.time.Duration duration64 = period61.toStandardDuration();
        org.joda.time.Duration duration65 = period61.toStandardDuration();
        org.joda.time.Duration duration67 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration65, 17);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration51, periodType68);
        org.joda.time.Minutes minutes70 = duration51.toStandardMinutes();
        org.joda.time.Duration duration73 = new org.joda.time.Duration(63040L, 1645514179114L);
        long long74 = duration73.getMillis();
        java.lang.String str75 = duration73.toString();
        org.joda.time.Duration duration76 = duration51.plus((org.joda.time.ReadableDuration) duration73);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str35, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645514116074L + "'", long74 == 1645514116074L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT1645514116.074S" + "'", str75, "PT1645514116.074S");
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test15520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15520");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.Period period15 = period13.minusDays(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plus((org.joda.time.ReadablePeriod) period13);
        int int17 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusWeeks(58);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        org.joda.time.LocalDateTime localDateTime25 = property22.addToCopy((long) 31);
        boolean boolean26 = localDateTime19.equals((java.lang.Object) localDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime19.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = dateMidnight8.toDateTime();
        org.joda.time.DateMidnight.Property property14 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = property14.withMinimumValue();
        java.lang.String str17 = property14.getAsShortText();
        org.joda.time.DateMidnight dateMidnight18 = property14.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "19" + "'", str17, "19");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test15522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15522");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis(100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withChronology(chronology18);
        int int20 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTime dateTime21 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight16.withDurationAdded(1645514553867L, 14);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight16.minusWeeks(2152);
        boolean boolean27 = dateMidnight26.isBeforeNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test15523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15523");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate6 = localDate2.withField(dateTimeFieldType4, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus(9651094761000L);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMillis(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test15524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15524");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        long long6 = dateTimeField2.roundFloor(0L);
        boolean boolean8 = dateTimeField2.isLeap((long) 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        boolean boolean14 = dateTimeField12.isLeap((long) 1439);
        boolean boolean16 = dateTimeField12.isLeap(0L);
        long long18 = dateTimeField12.roundFloor((long) (byte) 1);
        int int20 = dateTimeField12.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField12.getType();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfWeek();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getISO3Language();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((int) ' ');
        java.util.Locale locale43 = java.util.Locale.ITALY;
        int int44 = property40.getMaximumShortTextLength(locale43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT0S");
        int int47 = property40.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        java.lang.String str49 = property34.getAsText(locale35);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfEra();
        org.joda.time.DateTime dateTime55 = property53.addToCopy((int) ' ');
        java.util.Locale locale56 = java.util.Locale.ITALY;
        int int57 = property53.getMaximumShortTextLength(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale58.getISO3Language();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((int) ' ');
        java.util.Locale locale66 = java.util.Locale.ITALY;
        int int67 = property63.getMaximumShortTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("PT0S");
        int int70 = property63.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale58.getDisplayVariant(locale69);
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale72.getISO3Language();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.joda.time.DateTime dateTime79 = property77.addToCopy((int) ' ');
        java.util.Locale locale80 = java.util.Locale.ITALY;
        int int81 = property77.getMaximumShortTextLength(locale80);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("PT0S");
        int int84 = property77.getMaximumShortTextLength(locale83);
        java.lang.String str85 = locale72.getDisplayVariant(locale83);
        java.lang.String str86 = locale69.getDisplayLanguage(locale72);
        java.lang.String str87 = locale56.getDisplayLanguage(locale69);
        java.lang.String str88 = locale35.getDisplayVariant(locale56);
        java.lang.String str89 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localTime23, 23, locale56);
        java.lang.String str90 = dateTimeField2.getAsText(0, locale56);
        java.lang.String str92 = locale56.getExtension('a');
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(locale56);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-52500000L) + "'", long6 == (-52500000L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-52500000L) + "'", long18 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Donnerstag" + "'", str49, "Donnerstag");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "deu" + "'", str59, "deu");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "deu" + "'", str73, "deu");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Italian" + "'", str87, "Italian");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "23" + "'", str89, "23");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0" + "'", str90, "0");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1645514754555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=25,SECOND=53,MILLISECOND=680,ZONE_OFFSET=-875,DST_OFFSET=0]");
    }

    @Test
    public void test15525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15525");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plus((long) 32769);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.withMillis(432001439L);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withYear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withWeekOfWeekyear(8);
        org.joda.time.DateMidnight.Property property21 = dateMidnight18.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight22 = property21.withMinimumValue();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight24 = property23.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test15526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15526");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfMonth();
        org.joda.time.Chronology chronology39 = chronology36.withUTC();
        org.joda.time.Chronology chronology40 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.centuryOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test15527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getWeeksInWeekYear();
        gregorianCalendar30.setFirstDayOfWeek(6);
        gregorianCalendar30.setLenient(false);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.LocalDate.Property property40 = localDate39.centuryOfEra();
        org.joda.time.LocalDate.Property property41 = localDate39.dayOfMonth();
        org.joda.time.LocalDate localDate43 = localDate39.withCenturyOfEra(32);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test15528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15528");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 29);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test15529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15529");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.Period period13 = period11.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.plusMillis(1970);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        mutableDateTime23.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds17, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Interval interval31 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) seconds17);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZone(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean48 = interval31.contains((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) 7);
        org.joda.time.Interval interval51 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = interval31.toPeriod();
        org.joda.time.Chronology chronology53 = interval31.getChronology();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test15530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15530");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        long long7 = interval5.getEndMillis();
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) chronology11, dateTimeZone13);
        boolean boolean15 = localDate9.equals((java.lang.Object) localDate14);
        int int16 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate18 = localDate14.withWeekyear(245);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = duration28.plus((long) 'u');
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration30, (-1));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime35.plusMonths(999);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 1, periodType43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime41, periodType43);
        org.joda.time.Period period47 = period45.minusDays(12);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, periodType49);
        org.joda.time.Period period51 = period47.normalizedStandard(periodType49);
        org.joda.time.PeriodType periodType52 = periodType49.withMillisRemoved();
        org.joda.time.Period period53 = duration8.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType49);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = dateTime56.toString(dateTimeFormatter57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone61);
        mutableDateTime62.setDayOfYear(1);
        mutableDateTime62.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime62.getZone();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime60.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone67);
        boolean boolean72 = dateTimeZone67.isStandardOffset((-472953600000L));
        java.lang.String str73 = dateTimeZone67.getID();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime75 = dateTime19.toDateTime(dateTimeZone67);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 33900000L + "'", long7 == 33900000L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str58, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+14:35" + "'", str73, "+14:35");
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test15531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15531");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(32770L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test15532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15532");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period15 = period13.withMonths((int) (byte) 1);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.Period period18 = period15.withMinutes(19);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        java.util.Date date22 = localDateTime20.toDate();
        org.joda.time.DateTime dateTime23 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusMonths((int) (short) 100);
        int[] intArray26 = localDateTime20.getValues();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withChronology(chronology37);
        int int39 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateTime dateTime41 = dateTime32.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean43 = dateTime32.isSupported(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType42.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime20.withFieldAdded(durationFieldType44, 51);
        boolean boolean47 = period18.isSupported(durationFieldType44);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1, 52500100]");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test15533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15533");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        int int10 = period6.getWeeks();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test15534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15534");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        int int5 = localDate0.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test15535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15535");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis(25);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        java.util.Date date12 = localDateTime10.toDate();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withCenturyOfEra(10);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration28.toPeriod(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration28, 19);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property36.addToCopy(20);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.LocalDateTime.Property property43 = localDateTime19.property(dateTimeFieldType42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime7.withField(dateTimeFieldType42, 34);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test15536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15536");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 8);
        org.joda.time.LocalTime localTime3 = localTime1.plusMillis(19);
        org.joda.time.Chronology chronology4 = localTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime1.withHourOfDay((-59));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test15537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15537");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        boolean boolean8 = interval5.isAfter((long) 100);
        org.joda.time.Interval interval9 = interval5.toInterval();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        org.joda.time.Period period17 = period15.minusDays(0);
        org.joda.time.Duration duration18 = period15.toStandardDuration();
        org.joda.time.Duration duration19 = period15.toStandardDuration();
        int int20 = period15.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        long long28 = duration27.getStandardMinutes();
        org.joda.time.Duration duration29 = duration27.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = dateTime34.getChronology();
        boolean boolean37 = period15.equals((java.lang.Object) chronology36);
        org.joda.time.Period period46 = new org.joda.time.Period(2152, 26252, 3, 81, (int) (short) 0, (-19045), 26252, (int) ' ');
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int49 = timeOfDay48.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay48.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay48.minusHours((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.plusSeconds(5);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay53.plusHours(81);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay53.minusHours(16);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = duration66.plus((long) 'u');
        org.joda.time.Period period69 = duration68.toPeriod();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.withZone(dateTimeZone78);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 1, periodType81);
        org.joda.time.PeriodType periodType83 = periodType81.withWeeksRemoved();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime79, periodType81);
        org.joda.time.Period period85 = period84.toPeriod();
        org.joda.time.Weeks weeks86 = period85.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str88 = durationFieldType87.toString();
        boolean boolean89 = weeks86.isSupported(durationFieldType87);
        org.joda.time.TimeOfDay timeOfDay91 = timeOfDay53.withFieldAdded(durationFieldType87, 26291448);
        boolean boolean92 = periodType47.isSupported(durationFieldType87);
        org.joda.time.Period period94 = period15.withFieldAdded(durationFieldType87, 28);
        org.joda.time.Interval interval95 = interval9.withPeriodAfterStart((org.joda.time.ReadablePeriod) period94);
        boolean boolean96 = interval9.containsNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(weeks86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "seconds" + "'", str88, "seconds");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test15538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15538");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusHours(18);
        int int4 = timeOfDay1.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test15539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15539");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        long long8 = chronology3.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField10 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfMonth();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology18 = chronology3.withZone(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52500010L + "'", long16 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test15540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(43);
        org.joda.time.DateTime dateTime31 = property28.withMinimumValue();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1, periodType40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        boolean boolean43 = periodType40.isSupported(durationFieldType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38, periodType40);
        org.joda.time.DateTime dateTime46 = dateTime34.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfDay();
        int int49 = property28.getDifference((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime51 = dateTime47.minus(1645514600491L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test15541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15541");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        long long13 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        long long37 = duration36.getStandardMinutes();
        org.joda.time.Duration duration38 = duration36.toDuration();
        org.joda.time.Period period39 = new org.joda.time.Period((java.lang.Object) duration36);
        org.joda.time.Duration duration40 = duration20.plus((org.joda.time.ReadableDuration) duration36);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration36, 25202);
        java.lang.String str44 = mutableDateTime1.toString("1969");
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.weekyear();
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514754799L + "'", long13 == 1645514754799L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969" + "'", str44, "1969");
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test15542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15542");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        int int34 = dateTime31.getMillisOfSecond();
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime31.toGregorianCalendar();
        java.util.Date date37 = gregorianCalendar36.getTime();
        boolean boolean38 = periodType5.equals((java.lang.Object) gregorianCalendar36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 2524, 361L, periodType5);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(86400000L, chronology43);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        long long50 = chronology45.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.minuteOfDay();
        org.joda.time.DurationField durationField52 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = chronology45.hourOfDay();
        mutablePeriod39.setPeriod((long) (byte) 10, 59999L, chronology45);
        org.joda.time.DateTimeField dateTimeField55 = chronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology45.getZone();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.monthOfYear();
        java.util.Date date60 = localDateTime58.toDate();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.weekyear();
        boolean boolean64 = dateTimeZone56.isLocalDateTimeGap(localDateTime58);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str10, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str33, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:59:59 GMT+14:35 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15543");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) chronology45, dateTimeZone47);
        boolean boolean49 = yearMonthDay42.isAfter((org.joda.time.ReadablePartial) localDate48);
        int int50 = localDate48.getYear();
        org.joda.time.LocalDate localDate52 = localDate48.minusDays(22);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test15544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15544");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.plusMillis(1970);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = periodType13.isSupported(durationFieldType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(86400000L, chronology18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        boolean boolean23 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        int int64 = dateTimeZone60.getOffsetFromLocal((long) 0);
        org.joda.time.Chronology chronology65 = chronology34.withZone(dateTimeZone60);
        boolean boolean66 = period10.equals((java.lang.Object) chronology34);
        org.joda.time.DurationField durationField67 = chronology34.weekyears();
        long long71 = chronology34.add(14L, (long) 7, 14);
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.withWeekyear(953);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52500000 + "'", int64 == 52500000);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 112L + "'", long71 == 112L);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
    }

    @Test
    public void test15545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15545");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = localDate7.minusDays(26209701);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        long long19 = duration18.getStandardMinutes();
        org.joda.time.Duration duration20 = duration18.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime28.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        mutableDateTime32.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime25.withZoneRetainFields(dateTimeZone37);
        int int41 = dateTimeZone37.getOffsetFromLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = localDate11.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(2720L, dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52500000 + "'", int41 == 52500000);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test15546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15546");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        boolean boolean8 = interval5.isAfter((long) 100);
        org.joda.time.Interval interval9 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval10 = interval9.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withChronology(chronology21);
        int int23 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) period39, chronology40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) period39);
        int int43 = dateTime16.getYear();
        org.joda.time.Interval interval44 = null; // flaky: interval9.withEnd((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
// flaky:         org.junit.Assert.assertNotNull(interval44);
    }

    @Test
    public void test15547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15547");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(0);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = periodType2.isSupported(durationFieldType3);
        org.joda.time.Period period6 = period1.withField(durationFieldType3, 28);
        int int7 = period6.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 28 + "'", int7 == 28);
    }

    @Test
    public void test15548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15548");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        mutablePeriod3.addYears((int) (short) -1);
        mutablePeriod3.addSeconds(4);
        int int8 = mutablePeriod3.getMonths();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays(0);
        org.joda.time.Interval interval20 = dateMidnight19.toInterval();
        org.joda.time.Interval interval21 = interval14.gap((org.joda.time.ReadableInterval) interval20);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod24.addMillis((int) (short) 1);
        mutablePeriod24.setWeeks(11);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod24.toMutablePeriod();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean35 = dateTime33.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getRangeDurationType();
        mutablePeriod24.set(durationFieldType36, (-1));
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate46 = localDate44.plusYears(10);
        org.joda.time.LocalDate.Property property47 = localDate46.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate50 = localDate46.withField(dateTimeFieldType48, (int) (short) 0);
        java.util.Date date51 = localDate46.toDate();
        org.joda.time.DateTime dateTime52 = dateTime43.withFields((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.Duration duration53 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime55 = dateTime43.plus((-31536000000L));
        org.joda.time.DateTime dateTime57 = dateTime43.minus((long) 26386846);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = dateTime43.isBefore(readableInstant58);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52500010L + "'", long42 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 22 00:00:00 GMT+14:35 2032");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15549");
        java.util.Locale locale1 = new java.util.Locale("italien");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("PT101.969S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: PT101.969S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "italien");
    }

    @Test
    public void test15550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15550");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        gregorianCalendar30.set((int) (byte) 100, 1969, (int) 'a');
        int int38 = gregorianCalendar30.getLeastMaximum(3);
        gregorianCalendar30.setFirstDayOfWeek(2032);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51 + "'", int38 == 51);
    }

    @Test
    public void test15551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15551");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withChronology(chronology19);
        int int21 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime23 = dateTime14.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean25 = dateTime14.isSupported(dateTimeFieldType24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight8.withField(dateTimeFieldType24, 7);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus(0L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis(2392146000L);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.Duration duration46 = duration43.toDuration();
        org.joda.time.Duration duration47 = duration43.toDuration();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period49 = duration43.toPeriod(periodType48);
        java.lang.String str50 = duration43.toString();
        boolean boolean51 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration54 = duration31.withDurationAdded((long) 577, (-98));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.117S" + "'", str50, "PT0.117S");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration54);
    }

    @Test
    public void test15552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15552");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfDay(2152);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusDays(69);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((-292278));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withTime(26520, 645, 58, 2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26520 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test15553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = dateTime12.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = period36.normalizedStandard(periodType37);
        org.joda.time.Period period40 = period38.minusDays(0);
        java.lang.String str41 = period40.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.withZone(dateTimeZone49);
        org.joda.time.Duration duration51 = period40.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property53 = dateTime12.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test15554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15554");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(59);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withChronology(chronology22);
        int int24 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) period40, chronology41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = duration64.plus((long) 'u');
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration66, (-1));
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = dateTime71.plusMonths(999);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 1, periodType79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateTime77, periodType79);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = interval82.withChronology(chronology83);
        org.joda.time.Interval interval85 = interval43.overlap((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Chronology chronology86 = interval82.getChronology();
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(chronology86);
        org.joda.time.MutableDateTime mutableDateTime88 = mutableDateTime11.toMutableDateTime(chronology86);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime88.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNull(interval85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test15555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15555");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("23");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType3, 93);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 93 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
    }

    @Test
    public void test15556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15556");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property2.withMaximumValue();
        int int10 = localDateTime9.getDayOfYear();
        int int11 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMonths(20);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withWeekOfWeekyear(5);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(4218);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 335 + "'", int10 == 335);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test15557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15557");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2038");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2038\" is malformed at \"38\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15558");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) (short) 100);
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime12);
        boolean boolean15 = strSet3.equals((java.lang.Object) 14L);
        boolean boolean17 = strSet3.add("1970");
        java.lang.Object[] objArray18 = strSet3.toArray();
        int int19 = strSet3.size();
        java.util.Iterator<java.lang.String> strItor20 = strSet3.iterator();
        java.lang.Object[] objArray21 = strSet3.toArray();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[Coordinated Universal Time, PT0.035S, 1970]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[Coordinated Universal Time, PT0.035S, 1970]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[Coordinated Universal Time, PT0.035S, 1970]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[Coordinated Universal Time, PT0.035S, 1970]");
    }

    @Test
    public void test15559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15559");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        int int5 = dateTimeFormatter2.getDefaultYear();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15560");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean55 = dateTimeField53.isLeap((long) 1439);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField53.getType();
        long long59 = dateTimeField53.add((long) 26277594, 11);
        mutableDateTime50.setRounding(dateTimeField53);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime50.era();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        mutableDateTime63.setDayOfYear(1);
        mutableDateTime63.setMillisOfSecond((int) 'u');
        int int68 = mutableDateTime63.getWeekOfWeekyear();
        mutableDateTime63.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime63.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = property71.roundHalfCeiling();
        int int73 = mutableDateTime50.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 347181477594L + "'", long59 == 347181477594L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test15561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15561");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar calendar4 = builder0.build();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusSeconds((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = new org.joda.time.Period((java.lang.Object) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test15562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15562");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfYear(35);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.plusYears(10);
        org.joda.time.LocalDate.Property property8 = localDate5.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.setCopy(22);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        int int15 = localDate13.getDayOfWeek();
        int int16 = localDate13.getYear();
        int int17 = localDate13.getCenturyOfEra();
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear((int) 'a');
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate22 = localDate20.plusYears(10);
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        mutableDateTime29.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime29.getZone();
        mutableDateTime25.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTime.Property property60 = dateTime43.year();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateMidnight.Property property62 = dateMidnight36.yearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        long long70 = duration69.getStandardMinutes();
        org.joda.time.Duration duration71 = duration69.toDuration();
        org.joda.time.Period period72 = new org.joda.time.Period((java.lang.Object) duration69);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration69);
        boolean boolean74 = dateTimeZone34.equals((java.lang.Object) dateMidnight36);
        org.joda.time.DateTime dateTime75 = localDate22.toDateTimeAtCurrentTime(dateTimeZone34);
        java.util.TimeZone timeZone76 = dateTimeZone34.toTimeZone();
        org.joda.time.Interval interval77 = localDate13.toInterval(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight78 = localDate12.toDateMidnight(dateTimeZone34);
        int int80 = dateTimeZone34.getStandardOffset(1645514489729L);
        org.joda.time.DateMidnight dateMidnight81 = localDate0.toDateMidnight(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20" + "'", str9, "20");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str41, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateMidnight78);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52500000 + "'", int80 == 52500000);
        org.junit.Assert.assertNotNull(dateMidnight81);
    }

    @Test
    public void test15563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15563");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        org.joda.time.LocalDate.Property property7 = localDate0.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.Period period13 = period11.plusDays(9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period11.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = period18.normalizedStandard(periodType19);
        org.joda.time.Period period22 = period20.minusDays(0);
        java.lang.String str23 = period22.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.Duration duration33 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = dateTime32.isBefore((long) 1439);
        org.joda.time.Duration duration36 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime32);
        long long37 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate38 = property7.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0S" + "'", str23, "PT0S");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test15564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15564");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period15 = period13.withMonths((int) (byte) 1);
        java.lang.String str16 = period13.toString();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period20 = org.joda.time.Period.months(1);
        org.joda.time.Period period22 = period20.plusWeeks(0);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, periodType24, chronology25);
        mutablePeriod26.addYears((int) (short) -1);
        mutablePeriod26.addSeconds(4);
        int int31 = mutablePeriod26.getMonths();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 1, periodType33);
        org.joda.time.Period period36 = period34.plusDays(1970);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        boolean boolean41 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(86400000L, chronology43);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.millisOfSecond();
        boolean boolean48 = durationFieldType40.isSupported(chronology45);
        boolean boolean49 = period36.isSupported(durationFieldType40);
        boolean boolean50 = mutablePeriod26.isSupported(durationFieldType40);
        org.joda.time.Period period52 = period22.withFieldAdded(durationFieldType40, (int) '#');
        mutablePeriod18.set(durationFieldType40, 83459999);
        org.joda.time.Period period56 = period13.withField(durationFieldType40, (-38090));
        org.joda.time.Period period57 = period13.toPeriod();
        int int58 = period13.size();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
    }

    @Test
    public void test15565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 1, periodType50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, periodType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        int int61 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime.Property property62 = dateTime59.secondOfDay();
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType50, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime24.withChronology(chronology63);
        org.joda.time.DateTime dateTime67 = dateTime24.withMinuteOfHour(14);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(chronology68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        mutableDateTime71.setDayOfYear(1);
        mutableDateTime71.setMillisOfSecond((int) 'u');
        int int76 = mutableDateTime71.getWeekOfWeekyear();
        mutableDateTime71.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone79);
        mutableDateTime80.setDayOfYear(1);
        mutableDateTime80.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone85 = mutableDateTime80.getZone();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone85);
        mutableDateTime71.setZone(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = localTime69.toDateTimeToday(dateTimeZone85);
        org.joda.time.DateTime dateTime89 = dateTime67.toDateTime(dateTimeZone85);
        int int90 = dateTime89.getDayOfMonth();
        org.joda.time.DateTime dateTime92 = dateTime89.withMinuteOfHour(2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str30, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType50);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str57, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test15566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15566");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((-1L));
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        int int7 = property6.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfDay(2152);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusDays(69);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusSeconds(26252);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(2005);
        java.lang.String str27 = localDateTime21.toString("4");
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.minusWeeks(2032);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType31 = periodType30.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime8, (org.joda.time.ReadablePartial) localDateTime21, periodType31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 15250284381");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "4" + "'", str27, "4");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test15567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15567");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int6 = dateTime2.get(dateTimeFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withDayOfWeek(802207);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 802207 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 34 + "'", int6 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str11, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test15568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15568");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        int int5 = localTime3.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime3.withPeriodAdded(readablePeriod6, 83459999);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(11, 40, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology9.millis();
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test15569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15569");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay0, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean32 = dateTimeField30.isLeap((long) 1439);
        boolean boolean34 = dateTimeField30.isLeap(0L);
        long long36 = dateTimeField30.roundFloor((long) (byte) 1);
        int int38 = dateTimeField30.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField30.getType();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime27.property(dateTimeFieldType39);
        org.joda.time.MutableDateTime mutableDateTime42 = property40.add(16);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime42.toMutableDateTime();
        mutableDateTime43.addMillis(59);
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime43.getZone();
        org.joda.time.DateTime dateTime47 = timeOfDay0.toDateTimeToday(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-52500000L) + "'", long36 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test15570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15570");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.LocalTime localTime7 = localTime0.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) period11, periodType14);
        org.joda.time.LocalTime localTime17 = localTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 4);
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(59);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType20);
        mutablePeriod21.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval24 = null;
        mutablePeriod21.setPeriod(readableInterval24);
        mutablePeriod21.setPeriod(1645514179114L, (long) '#');
        org.joda.time.LocalTime localTime29 = localTime19.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.LocalTime.Property property30 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime31 = property30.withMaximumValue();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 1, periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.years();
        boolean boolean45 = periodType42.isSupported(durationFieldType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration40, periodType42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 0, (long) 14, periodType42, chronology47);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.years();
        boolean boolean57 = period55.isSupported(durationFieldType56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight50.plus((org.joda.time.ReadablePeriod) period55);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withZoneRetainFields(dateTimeZone60);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) chronology47, dateTimeZone60);
        org.joda.time.LocalTime localTime64 = localTime62.minusMinutes(0);
        org.joda.time.LocalTime localTime66 = localTime62.minusHours((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        boolean boolean71 = dateTimeField69.isLeap((long) 1439);
        long long73 = dateTimeField69.roundFloor(0L);
        boolean boolean75 = dateTimeField69.isLeap((long) 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField69.getType();
        boolean boolean77 = localTime62.equals((java.lang.Object) dateTimeFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = localTime31.get(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-52500000L) + "'", long73 == (-52500000L));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test15571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15571");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-1));
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.secondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 999 + "'", int2 == 999);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test15572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15572");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime19 = property16.addWrapField(365);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1439, 3, (int) (short) -1, 366, 245, 3, 26266117, (int) '#');
        mutablePeriod29.addHours(26347715);
        int int32 = mutablePeriod29.getSeconds();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26266117 + "'", int32 == 26266117);
    }

    @Test
    public void test15573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15573");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        mutableDateTime3.setMillisOfSecond((int) 'u');
        int int8 = mutableDateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime3.year();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.era();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration19 = duration17.plus((long) 'u');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.PeriodType periodType34 = periodType32.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime30, periodType32);
        org.joda.time.Period period36 = period35.toPeriod();
        org.joda.time.Weeks weeks37 = period36.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str39 = durationFieldType38.toString();
        boolean boolean40 = weeks37.isSupported(durationFieldType38);
        java.lang.String str41 = durationFieldType38.getName();
        mutableDateTime3.add(durationFieldType38, (int) 'u');
        int int44 = periodType0.indexOf(durationFieldType38);
        org.joda.time.PeriodType periodType45 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType46 = periodType0.withSecondsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "seconds" + "'", str39, "seconds");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "seconds" + "'", str41, "seconds");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
    }

    @Test
    public void test15574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime.Property property35 = dateTime18.year();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight.Property property37 = dateMidnight11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = property37.setCopy("22");
        int int40 = dateMidnight39.getCenturyOfEra();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property45.getFieldType();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime1.property(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        mutableDateTime52.setDayOfYear(1);
        mutableDateTime52.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime52.getZone();
        boolean boolean59 = dateTimeZone57.isStandardOffset((long) (short) 1);
        int int61 = dateTimeZone57.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        long long69 = dateTimeField64.set((long) ' ', "22", locale68);
        boolean boolean70 = dateTimeZone57.equals((java.lang.Object) "22");
        java.lang.String str72 = dateTimeZone57.getShortName((-31536000001L));
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int75 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str16, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52500000 + "'", int61 == 52500000);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-61472908799968L) + "'", long69 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+14:35" + "'", str72, "+14:35");
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test15575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15575");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(26539, 46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26539 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15576");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) duration6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(6);
        org.joda.time.DateTime dateTime20 = dateTime16.minusSeconds(3);
        org.joda.time.Period period21 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight23.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight34 = property33.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight35 = property33.roundFloorCopy();
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int37 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType40);
        mutablePeriod41.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay36.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        mutablePeriod41.clear();
        org.joda.time.PeriodType periodType46 = mutablePeriod41.getPeriodType();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateMidnight35, periodType46);
        boolean boolean48 = dateMidnight35.isAfterNow();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight35.withYear(26357397);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.withMillis(2629746000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str14, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
    }

    @Test
    public void test15577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15577");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Duration duration9 = duration7.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime14.withZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone26);
        int int30 = localDate29.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate29.withEra(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test15578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15578");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        int int11 = property10.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(86399);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.addToCopy(20);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        int int40 = period39.getMillis();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime23.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        int int45 = localDateTime43.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime51 = property48.addToCopy(20);
        int int52 = localDateTime51.getMinuteOfHour();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration66);
        int int68 = period67.getMillis();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime51.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.era();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withWeekyear(802);
        int int75 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.dayOfYear();
        boolean boolean77 = localDateTime17.equals((java.lang.Object) localDateTime74);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test15579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime6 = localTime5.toDateTimeToday();
        org.joda.time.Chronology chronology7 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = localTime5.withSecondOfMinute(52);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test15580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15580");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withChronology(chronology22);
        int int24 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime17.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime17.minusHours(9);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        mutableDateTime30.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime30.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZone(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight9.toMutableDateTime(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight9.withCenturyOfEra(0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        mutableDateTime41.setDayOfYear(1);
        mutableDateTime41.setMillisOfSecond((int) 'u');
        int int46 = mutableDateTime41.getWeekOfWeekyear();
        mutableDateTime41.setDayOfMonth(14);
        org.joda.time.Chronology chronology49 = mutableDateTime41.getChronology();
        mutableDateTime41.addWeekyears(26266117);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) 26357117);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration53, 28);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Instant instant57 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = duration64.plus((long) 'u');
        org.joda.time.Instant instant68 = instant57.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime69 = instant68.toMutableDateTime();
        mutableDateTime69.addWeekyears(26368);
        boolean boolean72 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) mutableDateTime69);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test15581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15581");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime2.get(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime0.property(dateTimeFieldType6);
        int int10 = property9.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = property9.setCopy("PT44.035S", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT44.035S\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
    }

    @Test
    public void test15582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15582");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.TimeOfDay timeOfDay25 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime26 = timeOfDay25.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay25.withHourOfDay(19);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMillis(83459999);
        int int31 = timeOfDay30.getMillisOfSecond();
        int int32 = timeOfDay30.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
    }

    @Test
    public void test15583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15583");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = localDate0.withYearOfCentury(29);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate6.getFieldType(26472);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26472");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test15584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        int int36 = yearMonthDay35.size();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        int int41 = period40.getWeeks();
        org.joda.time.Period period43 = period40.plusMillis((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay35.withYear(10);
        org.joda.time.Period period48 = org.joda.time.Period.months(366);
        org.joda.time.Period period50 = period48.minusHours(99);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 521);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.plusDays(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay52.withDayOfMonth(51059999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51059999 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
    }

    @Test
    public void test15585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15585");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(32770);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test15586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime9.toTimeOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths(973);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15587");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        int int6 = localTime5.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = localTime5.withSecondOfMinute(3975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3975 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
    }

    @Test
    public void test15588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15588");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(16);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime24.toGregorianCalendar();
        java.time.Instant instant28 = gregorianCalendar27.toInstant();
        gregorianCalendar27.set(66, 66, (int) (byte) 1, 57, 26, 10);
        int int36 = gregorianCalendar27.getMinimalDaysInFirstWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime62.toString(dateTimeFormatter63);
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        gregorianCalendar67.setFirstDayOfWeek((int) '4');
        gregorianCalendar67.set((int) (byte) 100, 1969, (int) 'a');
        int int75 = gregorianCalendar67.getLeastMaximum(3);
        gregorianCalendar67.setLenient(false);
        int int78 = gregorianCalendar27.compareTo((java.util.Calendar) gregorianCalendar67);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str41, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str64, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 999 + "'", int65 == 999);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(gregorianCalendar67);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 51 + "'", int75 == 51);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test15589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15589");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26277594);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test15590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15590");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int8 = dateTime4.get(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology18.minutes();
        org.joda.time.DurationField durationField22 = chronology18.millis();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 5043, (long) 26446485, chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34 + "'", int8 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str13, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test15591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addWrapFieldToCopy(5);
        int int46 = property43.get();
        org.joda.time.YearMonthDay yearMonthDay47 = property43.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusDays(624);
        org.joda.time.DateMidnight dateMidnight50 = yearMonthDay49.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test15592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15592");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField14.getType();
        int int16 = localDateTime11.get(dateTimeFieldType15);
        java.lang.String str17 = dateTimeFieldType15.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1166 + "'", int16 == 1166);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
    }

    @Test
    public void test15593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15593");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundFloor();
        mutableDateTime11.setMillisOfSecond(58);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(2392146000L, chronology18);
        mutablePeriod23.setHours((-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration32.plus((long) 'u');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration34.toPeriod(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        long long61 = duration60.getStandardMinutes();
        org.joda.time.Duration duration62 = duration60.toDuration();
        org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) duration60);
        org.joda.time.Duration duration64 = duration44.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period66 = duration44.toPeriod(periodType65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) -1);
        boolean boolean84 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration85 = duration34.toDuration();
        java.lang.String str86 = duration85.toString();
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration85);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration85);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0.117S" + "'", str86, "PT0.117S");
    }

    @Test
    public void test15594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15594");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight30 = property26.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight31 = property26.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        mutableDateTime33.setMillisOfSecond((int) 'u');
        int int38 = mutableDateTime33.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime33.year();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.era();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfEven();
        mutableDateTime41.setMillisOfSecond(0);
        int int44 = dateMidnight31.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        int int45 = mutableDateTime41.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test15595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15595");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-472953600000L));
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.monthOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime8.dayOfWeek();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getISO3Language();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((int) ' ');
        java.util.Locale locale21 = java.util.Locale.ITALY;
        int int22 = property18.getMaximumShortTextLength(locale21);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("PT0S");
        int int25 = property18.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale13.getDisplayVariant(locale24);
        java.lang.String str27 = property12.getAsText(locale13);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getISO3Language();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((int) ' ');
        java.util.Locale locale37 = java.util.Locale.ITALY;
        int int38 = property34.getMaximumShortTextLength(locale37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("PT0S");
        int int41 = property34.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale29.getDisplayVariant(locale40);
        java.lang.String str44 = locale29.getExtension('u');
        java.lang.String str45 = locale28.getDisplayVariant(locale29);
        java.lang.String str46 = locale13.getDisplayScript(locale28);
        java.lang.String str47 = locale13.getISO3Language();
        boolean boolean48 = locale13.hasExtensions();
        java.lang.String str49 = property2.getAsShortText(locale13);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "deu" + "'", str14, "deu");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Donnerstag" + "'", str27, "Donnerstag");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "deu" + "'", str30, "deu");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "deu" + "'", str47, "deu");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Jan" + "'", str49, "Jan");
    }

    @Test
    public void test15596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15596");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate12 = localDate6.withFields((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate6.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15597");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        mutableDateTime3.setMillisOfSecond((int) 'u');
        int int8 = mutableDateTime3.getWeekOfWeekyear();
        mutableDateTime3.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime3.setZone(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localTime1.toDateTimeToday(dateTimeZone17);
        int int22 = dateTimeZone17.getOffset(69425337600000L);
        long long25 = dateTimeZone17.adjustOffset(69272668800000L, true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52500000 + "'", int22 == 52500000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 69272668800000L + "'", long25 == 69272668800000L);
    }

    @Test
    public void test15598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15598");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        long long10 = dateTimeZone6.convertUTCToLocal((long) 999);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime19.setDayOfYear(1);
        mutableDateTime19.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime17.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        boolean boolean28 = dateTimeZone24.isFixed();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(dateTimeZone24);
        long long31 = dateTimeZone6.getMillisKeepLocal(dateTimeZone24, 260236800000L);
        boolean boolean32 = dateTimeZone24.isFixed();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        boolean boolean36 = dateTimeFormatter35.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withDefaultYear(38);
        boolean boolean41 = dateTimeFormatter37.isPrinter();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        int int51 = dateTime49.getDayOfWeek();
        org.joda.time.DateTime.Property property52 = dateTime49.secondOfDay();
        org.joda.time.Chronology chronology53 = dateTime49.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1970, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(chronology53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter37.withChronology(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((java.lang.Object) boolean32, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52500999L + "'", long10 == 52500999L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str15, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 260236800000L + "'", long31 == 260236800000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str47, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test15599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15599");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(227210054399999999L, dateTimeZone3);
        long long6 = dateTimeZone3.nextTransition((-61472908799968L));
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 16, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMinutes(2070);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minus(1010135478993L);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.centuryOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = duration23.plus((long) 'u');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withZone(dateTimeZone35);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime36, periodType38);
        org.joda.time.Duration duration43 = duration25.plus(227210054399999999L);
        long long44 = duration43.getStandardDays();
        java.lang.String str45 = duration43.toString();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight15.withDurationAdded((org.joda.time.ReadableDuration) duration43, 9);
        boolean boolean48 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTimeZone dateTimeZone49 = dateMidnight15.getZone();
        org.joda.time.Period period51 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period53 = period51.plusSeconds((int) (short) 100);
        java.lang.String str54 = period53.toString();
        org.joda.time.Hours hours55 = period53.toStandardHours();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight15.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.format.PeriodFormatter periodFormatter57 = null;
        java.lang.String str58 = period53.toString(periodFormatter57);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-61472908799968L) + "'", long6 == (-61472908799968L));
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2629746000L + "'", long44 == 2629746000L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT227210054400000.116S" + "'", str45, "PT227210054400000.116S");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT101.969S" + "'", str54, "PT101.969S");
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT101.969S" + "'", str58, "PT101.969S");
    }

    @Test
    public void test15600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15600");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1645518097014L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours(802207);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        mutableDateTime5.setMillisOfSecond((int) 'u');
        int int10 = mutableDateTime5.getWeekOfWeekyear();
        mutableDateTime5.setDayOfMonth(14);
        org.joda.time.Chronology chronology13 = mutableDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        java.util.Date date17 = localDateTime15.toDate();
        org.joda.time.DateTime dateTime18 = localDateTime15.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusMonths((int) (short) 100);
        int[] intArray21 = localDateTime15.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean26 = dateTimeField24.isLeap((long) 1439);
        boolean boolean28 = dateTimeField24.isLeap(0L);
        long long30 = dateTimeField24.roundFloor((long) (byte) 1);
        int int32 = dateTimeField24.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField24.getType();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime15.withField(dateTimeFieldType33, 59);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType33.getDurationType();
        mutableDateTime5.add(durationFieldType36, 502);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay40 = timeOfDay3.withFieldAdded(durationFieldType36, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 52500100]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-52500000L) + "'", long30 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
    }

    @Test
    public void test15601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15601");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withWeekyear(1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears(2053);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test15602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15602");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withChronology(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) "months");
        int int12 = dateTimeZone8.getOffsetFromLocal((-31536000001L));
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645514252213L, dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDateTime13.toString("1 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52500000 + "'", int12 == 52500000);
    }

    @Test
    public void test15603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15603");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.setDayOfMonth(6);
        mutableDateTime0.addDays(32770);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setHourOfDay(127);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 127 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test15604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15604");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.TimeOfDay timeOfDay25 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean31 = dateTimeField29.isLeap((long) 1439);
        boolean boolean33 = dateTimeField29.isLeap(0L);
        long long35 = dateTimeField29.roundFloor((long) (byte) 1);
        int int37 = dateTimeField29.get((long) 5);
        long long40 = dateTimeField29.add((long) 4, (int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getISO3Language();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = property47.addToCopy((int) ' ');
        java.util.Locale locale50 = java.util.Locale.ITALY;
        int int51 = property47.getMaximumShortTextLength(locale50);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("PT0S");
        int int54 = property47.getMaximumShortTextLength(locale53);
        java.lang.String str55 = locale42.getDisplayVariant(locale53);
        java.lang.String str57 = locale42.getExtension('u');
        java.lang.String str58 = dateTimeField29.getAsText(10L, locale42);
        java.lang.String str59 = locale42.getCountry();
        org.joda.time.TimeOfDay timeOfDay60 = property2.setCopy("55", locale42);
        java.lang.String str61 = property2.getAsShortText();
        org.joda.time.DurationField durationField62 = property2.getDurationField();
        int int63 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-52500000L) + "'", long35 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 315532800004L + "'", long40 == 315532800004L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970" + "'", str58, "1970");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test15605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15605");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean8 = strSet6.isEmpty();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.PeriodType periodType32 = periodType30.withWeeksRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime28, periodType30);
        boolean boolean34 = strSet6.equals((java.lang.Object) period33);
        java.lang.String[] strArray37 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.monthOfYear();
        java.util.Date date44 = localDateTime42.toDate();
        org.joda.time.DateTime dateTime45 = localDateTime42.toDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusMonths((int) (short) 100);
        boolean boolean48 = strSet38.remove((java.lang.Object) localDateTime47);
        boolean boolean49 = strSet6.equals((java.lang.Object) strSet38);
        org.joda.time.tz.Provider provider50 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet51 = provider50.getAvailableIDs();
        boolean boolean52 = strSet6.addAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Iterator<java.lang.String> strItor53 = strSet6.iterator();
        java.util.Iterator<java.lang.String> strItor54 = strSet6.iterator();
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.stream.Stream<java.lang.String> strStream56 = strSet6.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strStream56);
    }

    @Test
    public void test15606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15606");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime32 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime5.secondOfMinute();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate36 = localDate34.plusYears(10);
        boolean boolean38 = localDate34.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property39 = localDate34.weekOfWeekyear();
        long long40 = property39.remainder();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        long long44 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) long40, dateTimeZone42);
        int int47 = mutableDateTime46.getSecondOfDay();
        mutableDateTime46.setTime((long) 38);
        boolean boolean50 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime46);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86400000L + "'", long40 == 86400000L);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52500010L + "'", long44 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52500 + "'", int47 == 52500);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15607");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        int int22 = period21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.era();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekyear(802);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes(36);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.secondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test15608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15608");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) ' ');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration28, (-1));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths(999);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) dateTime39, periodType41);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval59 = interval52.gap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Interval interval60 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        boolean boolean61 = localDate2.equals((java.lang.Object) interval60);
        org.joda.time.LocalDate localDate63 = localDate2.withYearOfEra(38);
        int int64 = localDate2.getMonthOfYear();
        org.joda.time.LocalDate localDate66 = localDate2.withWeekyear(365);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property68 = localDate67.yearOfCentury();
        int int69 = localDate67.getDayOfWeek();
        int int70 = localDate67.getYear();
        int int71 = localDate67.getCenturyOfEra();
        org.joda.time.LocalDate localDate73 = localDate67.withWeekyear((int) 'a');
        org.joda.time.LocalDate localDate75 = localDate67.minusDays(32772);
        org.joda.time.Chronology chronology76 = localDate67.getChronology();
        boolean boolean77 = localDate66.equals((java.lang.Object) localDate67);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 20 + "'", int71 == 20);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test15609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15609");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology4.add(readablePeriod7, (long) 83459999, 99);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(15L, chronology4);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        boolean boolean17 = dateTimeFormatter16.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(86400000L, chronology22);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj20, chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter18.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        mutableDateTime29.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime29.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) (short) 1);
        long long38 = dateTimeZone34.nextTransition((long) 14);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFieldAdded(durationFieldType40, 52);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withMillisOfSecond(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        boolean boolean50 = dateTimeField48.isLeap((long) 1439);
        boolean boolean52 = dateTimeField48.isLeap(0L);
        long long54 = dateTimeField48.roundFloor((long) (byte) 1);
        int int56 = dateTimeField48.get((long) 5);
        long long59 = dateTimeField48.add((long) 4, (int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getISO3Language();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.DateTime dateTime68 = property66.addToCopy((int) ' ');
        java.util.Locale locale69 = java.util.Locale.ITALY;
        int int70 = property66.getMaximumShortTextLength(locale69);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("PT0S");
        int int73 = property66.getMaximumShortTextLength(locale72);
        java.lang.String str74 = locale61.getDisplayVariant(locale72);
        java.lang.String str76 = locale61.getExtension('u');
        java.lang.String str77 = dateTimeField48.getAsText(10L, locale61);
        java.lang.String str78 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 27425238, locale61);
        java.lang.String str79 = dateTimeField12.getAsText(86399L, locale61);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 83459999L + "'", long10 == 83459999L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 14L + "'", long38 == 14L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-52500000L) + "'", long54 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 315532800004L + "'", long59 == 315532800004L);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "deu" + "'", str62, "deu");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970" + "'", str77, "1970");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "27425238" + "'", str78, "27425238");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "70" + "'", str79, "70");
    }

    @Test
    public void test15610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15610");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        boolean boolean6 = dateTimeField2.isLeap(0L);
        long long8 = dateTimeField2.roundFloor((long) (byte) 1);
        int int10 = dateTimeField2.get((long) 5);
        org.joda.time.DurationField durationField11 = dateTimeField2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str37 = locale22.getExtension('u');
        java.lang.String str38 = locale21.getDisplayVariant(locale22);
        java.lang.String str39 = locale21.getScript();
        java.util.Locale locale40 = locale21.stripExtensions();
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 20, locale41);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-52500000L) + "'", long8 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "20" + "'", str42, "20");
    }

    @Test
    public void test15611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15611");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(14);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds(33);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.minusWeeks(366);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test15612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime6.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(26551246);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test15613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15613");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(0);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate6 = localDate0.withCenturyOfEra(25);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test15614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean29 = dateTime25.isAfterNow();
        org.joda.time.DateTime dateTime31 = dateTime25.withCenturyOfEra(100);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime31.minusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        mutableDateTime36.setDayOfYear(1);
        mutableDateTime36.setMillisOfSecond((int) 'u');
        int int41 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime36.year();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setDayOfYear(1);
        mutableDateTime45.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime45.getZone();
        mutableDateTime43.setZone(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime31.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTime.Property property53 = dateTime31.centuryOfEra();
        org.joda.time.DateTime dateTime55 = dateTime31.plus(1961020799910L);
        int int56 = dateTime31.getMonthOfYear();
        org.joda.time.DateTime dateTime58 = dateTime31.plusDays(2012);
        int int59 = dateTime31.getHourOfDay();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 14 + "'", int59 == 14);
    }

    @Test
    public void test15615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15615");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        gregorianCalendar34.setTimeInMillis((long) 6);
        gregorianCalendar34.clear();
        long long40 = gregorianCalendar34.getTimeInMillis();
        gregorianCalendar34.set((-292277), 26425, 53, 11, (-12), 32796);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str8, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 GMT+14:35 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-52500000L) + "'", long40 == (-52500000L));
    }

    @Test
    public void test15616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15616");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration12, (-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime17.plusMonths(999);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime23, periodType25);
        org.joda.time.Period period29 = period27.minusDays(12);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = period27.normalizedStandard(periodType30);
        int int32 = period31.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 26505100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 42991272200 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 612 + "'", int32 == 612);
    }

    @Test
    public void test15617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15617");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(2);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime.Property property39 = dateTime22.year();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight.Property property41 = dateMidnight15.yearOfCentury();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        long long49 = duration48.getStandardMinutes();
        org.joda.time.Duration duration50 = duration48.toDuration();
        org.joda.time.Period period51 = new org.joda.time.Period((java.lang.Object) duration48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = duration61.plus((long) 'u');
        mutableDateTime54.add((org.joda.time.ReadableDuration) duration63, (-1));
        org.joda.time.Duration duration66 = duration48.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) 31, 52);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean71 = duration66.equals((java.lang.Object) localTime70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration66, 2922789);
        int int74 = dateMidnight14.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str20, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
    }

    @Test
    public void test15618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15618");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withCenturyOfEra(8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration22.toPeriod(chronology24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateMidnight.Property property27 = dateMidnight9.dayOfMonth();
        org.joda.time.Interval interval28 = dateMidnight9.toInterval();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.Period period34 = period32.plusDays(9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = period32.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant36, readableInstant37, periodType38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = period39.normalizedStandard(periodType40);
        org.joda.time.Period period43 = period41.minusDays(0);
        java.lang.String str44 = period43.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        org.joda.time.Duration duration54 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = dateTime53.isBefore((long) 1439);
        org.joda.time.Duration duration57 = period32.toDurationTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period59 = period32.withWeeks(5);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 26209701, (long) (-1));
        mutablePeriod62.addHours(365);
        org.joda.time.Period period65 = period59.withFields((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.years();
        boolean boolean67 = mutablePeriod62.isSupported(durationFieldType66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight9.withFieldAdded(durationFieldType66, 40);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight9.plus(readablePeriod70);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test15619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15619");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 2191769, 1672531200000L);
    }

    @Test
    public void test15620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15620");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) "France");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"France\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15621");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears(2023);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (short) 0, chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        java.lang.String str15 = dateTimeFieldType14.toString();
        java.lang.String str16 = dateTimeFieldType14.toString();
        int int17 = localDateTime5.indexOf(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hourOfDay" + "'", str15, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hourOfDay" + "'", str16, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test15622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15622");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears(83459999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDate(0, 844, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 844 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test15623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15623");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withChronology(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1032116013939977L, dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1167, 765, 47, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 765 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test15624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15624");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTime dateTime13 = dateTime11.withSecondOfMinute((int) (short) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(chronology14);
        int int16 = dateTime11.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test15625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15625");
        java.util.Date date6 = new java.util.Date(1966, 2022, (int) (byte) 0, 999, 624, 2052);
        int int7 = date6.getSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.LocalTime localTime11 = localTime9.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property12.withMaximumValue();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.minutes();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) date6, chronology14);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Aug 11 01:58:12 GMT+14:35 4034");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test15626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15626");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getISO3Language();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property8.addToCopy((int) ' ');
        java.util.Locale locale11 = java.util.Locale.ITALY;
        int int12 = property8.getMaximumShortTextLength(locale11);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("PT0S");
        int int15 = property8.getMaximumShortTextLength(locale14);
        java.lang.String str16 = locale3.getDisplayVariant(locale14);
        java.lang.String str19 = nameProvider2.getShortName(locale3, "yearOfCentury", "PT1.969S");
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str23 = nameProvider2.getName(locale20, "PT0S", "hi!");
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str27 = nameProvider2.getShortName(locale24, "hi!", "years");
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str32 = nameProvider2.getName(locale28, "2052-03-31", "1970");
        java.lang.String str35 = nameProvider0.getName(locale28, "2060-11-30", "DurationField[millis]");
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("31-dic-1968 23.59.59");
        java.lang.String str40 = nameProvider0.getShortName(locale37, "PT0.099S", "2022-02-22");
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean46 = dateTimeField44.isLeap((long) 1439);
        boolean boolean48 = dateTimeField44.isLeap(0L);
        long long50 = dateTimeField44.roundFloor((long) (byte) 1);
        int int52 = dateTimeField44.get((long) 5);
        long long55 = dateTimeField44.add((long) 4, (int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale57.getISO3Language();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime64 = property62.addToCopy((int) ' ');
        java.util.Locale locale65 = java.util.Locale.ITALY;
        int int66 = property62.getMaximumShortTextLength(locale65);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("PT0S");
        int int69 = property62.getMaximumShortTextLength(locale68);
        java.lang.String str70 = locale57.getDisplayVariant(locale68);
        java.lang.String str72 = locale57.getExtension('u');
        java.lang.String str73 = dateTimeField44.getAsText(10L, locale57);
        java.lang.String str74 = locale41.getDisplayLanguage(locale57);
        java.lang.String str77 = nameProvider0.getName(locale41, "PeriodType[YearWeekDayTimeNoMillis]", "P89Y9M3DT21H59M46.117S");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-52500000L) + "'", long50 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 315532800004L + "'", long55 == 315532800004L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinesisch" + "'", str74, "Chinesisch");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test15627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15627");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        java.lang.String str7 = period4.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.Period period14 = period4.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) period11);
        org.joda.time.Period period17 = period11.minusSeconds(11);
        org.joda.time.Period period19 = period17.plusMillis(28);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 1, periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.years();
        boolean boolean31 = periodType28.isSupported(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration26, periodType28);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        org.joda.time.Period period49 = duration48.toPeriod();
        boolean boolean50 = duration39.isEqual((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        boolean boolean53 = periodType51.isSupported(durationFieldType52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration39, periodType51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(86400000L, chronology56);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((java.lang.Object) period74, chronology75);
        int[] intArray78 = chronology58.get((org.joda.time.ReadablePeriod) period74, (-1L));
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((java.lang.Object) period19, periodType51, chronology58);
        org.joda.time.PeriodType periodType81 = periodType51.withWeeksRemoved();
        org.joda.time.PeriodType periodType82 = periodType81.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 2132, periodType82);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
    }

    @Test
    public void test15628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        mutableDateTime1.addYears((int) 'a');
        mutableDateTime1.addMinutes(12);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 56 + "'", int4 == 56);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test15629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15629");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        java.lang.Integer int7 = dateTimeFormatter5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(86400000L, chronology15);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        boolean boolean20 = durationFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfMonth();
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 0, chronology17);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test15630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15630");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.plusYears(0);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay39.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 32769);
        org.joda.time.Period period44 = period40.minusMinutes(26252);
        org.joda.time.LocalDate localDate45 = localDate0.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str8, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test15631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15631");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        java.lang.String str6 = localDate2.toString();
        int int7 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate9 = localDate2.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate9.withMonthOfYear(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2032-02-22" + "'", str6, "2032-02-22");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        mutableDateTime37.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime37.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 1);
        int int46 = dateTimeZone42.getOffsetFromLocal((long) 83459999);
        org.joda.time.Interval interval47 = yearMonthDay33.toInterval(dateTimeZone42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 1, periodType56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.years();
        boolean boolean59 = periodType56.isSupported(durationFieldType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration54, periodType56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = duration74.plus((long) 'u');
        org.joda.time.Period period77 = duration76.toPeriod();
        boolean boolean78 = duration67.isEqual((org.joda.time.ReadableDuration) duration76);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.years();
        boolean boolean81 = periodType79.isSupported(durationFieldType80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration67, periodType79);
        int int83 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime50);
        long long86 = dateTimeZone42.convertLocalToUTC((long) 'a', false);
        long long88 = dateTimeZone42.nextTransition(72581011202023L);
        java.lang.String str90 = dateTimeZone42.getShortName((long) (-1645517977));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52500000 + "'", int46 == 52500000);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52500000 + "'", int83 == 52500000);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-52499903L) + "'", long86 == (-52499903L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 72581011202023L + "'", long88 == 72581011202023L);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+14:35" + "'", str90, "+14:35");
    }

    @Test
    public void test15633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15633");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(14);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMillis(2152);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZone(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = period25.normalizedStandard(periodType26);
        java.lang.String str28 = period25.toString();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = period32.normalizedStandard(periodType33);
        org.joda.time.Period period35 = period25.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object) period32);
        org.joda.time.Period period38 = period32.minusSeconds(11);
        org.joda.time.Period period40 = period38.plusMillis(28);
        org.joda.time.DateTime dateTime41 = dateTime21.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period40.minusHours(32769);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime11.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDateTime.Property property45 = localDateTime11.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test15634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15634");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(16);
        org.joda.time.MutableDateTime mutableDateTime23 = property20.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = property20.set("eng");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"eng\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-52500000L) + "'", long16 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test15635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = localDateTime2.getFields();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(55);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(802207);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withField(dateTimeFieldType10, 242);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test15636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15636");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration8, periodType10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, periodType10, chronology15);
        int int17 = periodType10.size();
        int int18 = periodType10.size();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfDay(999);
        org.joda.time.DateTime dateTime23 = localTime22.toDateTimeToday();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        int int32 = mutableDateTime27.getWeekOfWeekyear();
        mutableDateTime27.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        mutableDateTime36.setDayOfYear(1);
        mutableDateTime36.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime27.setZone(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localTime25.toDateTimeToday(dateTimeZone41);
        org.joda.time.LocalTime localTime46 = localTime25.minusMinutes(39);
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int48 = timeOfDay47.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay47.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType51);
        mutablePeriod52.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay47.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        mutablePeriod52.clear();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant57, readableInstant58, periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        java.lang.String str63 = durationFieldType61.getName();
        int int64 = mutablePeriod52.indexOf(durationFieldType61);
        boolean boolean65 = localTime25.isSupported(durationFieldType61);
        boolean boolean66 = localTime22.isSupported(durationFieldType61);
        int int67 = periodType10.indexOf(durationFieldType61);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 837 + "'", int20 == 837);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "years" + "'", str63, "years");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test15637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        int int35 = mutableDateTime34.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.secondOfMinute();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test15638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15638");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.TimeOfDay timeOfDay21 = property2.withMinimumValue();
        java.lang.String str22 = property2.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay24 = property2.addNoWrapToCopy(0);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test15639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15639");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) period19, chronology20);
        int[] intArray23 = chronology3.get((org.joda.time.ReadablePeriod) period19, (-1L));
        org.joda.time.DateTimeField dateTimeField24 = chronology3.monthOfYear();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 53);
        long long28 = dateTimeField24.roundCeiling((long) 59);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis(25);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusYears(7);
        int int39 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "janv." + "'", str26, "janv.");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2678400000L + "'", long28 == 2678400000L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test15640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15640");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration14.plus((long) 'u');
        org.joda.time.Period period17 = duration16.toPeriod();
        boolean boolean18 = duration7.isEqual((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType27.isSupported(durationFieldType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration25, periodType27);
        org.joda.time.Duration duration32 = duration7.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withHoursRemoved();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime(dateTimeZone40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        int int43 = dateTime41.getDayOfWeek();
        org.joda.time.DateTime.Property property44 = dateTime41.secondOfDay();
        org.joda.time.Chronology chronology45 = dateTime41.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.hours();
        org.joda.time.Period period47 = duration7.toPeriod(periodType33, chronology45);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(15L, chronology45);
        long long52 = chronology45.add(999L, (long) 12, 38);
        org.joda.time.DateTimeField dateTimeField53 = chronology45.yearOfCentury();
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str39, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1455L + "'", long52 == 1455L);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test15641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(57);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime18.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23);
        int int25 = mutableDateTime18.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime18.add(readablePeriod26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration36);
        java.lang.String str38 = duration36.toString();
        org.joda.time.DateTime dateTime40 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration36, 26432314);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTime dateTime47 = dateTime43.withDayOfWeek(4);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale58.getISO3Language();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((int) ' ');
        java.util.Locale locale66 = java.util.Locale.ITALY;
        int int67 = property63.getMaximumShortTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("PT0S");
        int int70 = property63.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale58.getDisplayVariant(locale69);
        java.lang.String str72 = property57.getAsText(locale58);
        java.util.Calendar calendar73 = dateTime47.toCalendar(locale58);
        org.joda.time.DateTime dateTime74 = dateTime47.withLaterOffsetAtOverlap();
        int int75 = dateTime47.getYearOfCentury();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = duration82.plus((long) 'u');
        org.joda.time.Period period85 = duration84.toPeriod();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration84.toPeriod(chronology86);
        org.joda.time.PeriodType periodType88 = period87.getPeriodType();
        org.joda.time.Period period89 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime47, periodType88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = dateTime47.toString("Greenwich Zeit");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str45, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "deu" + "'", str59, "deu");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Donnerstag" + "'", str72, "Donnerstag");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=52500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=34,SECOND=59,MILLISECOND=999,ZONE_OFFSET=52500000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 70 + "'", int75 == 70);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test15642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15642");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        int int36 = yearMonthDay35.size();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        int int41 = period40.getWeeks();
        org.joda.time.Period period43 = period40.plusMillis((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withYear((int) 'u');
        org.joda.time.DateTime dateTime47 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTime();
        org.joda.time.DateTime.Property property49 = dateTime48.weekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test15643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15643");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder4.setLanguage("hours");
        java.util.Locale.Builder builder7 = builder6.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test15644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15644");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(86400000L, chronology6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean11 = durationFieldType3.isSupported(chronology8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        java.lang.String str18 = durationFieldType17.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = new org.joda.time.DurationFieldType[] { durationFieldType3, durationFieldType17 };
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.forFields(durationFieldTypeArray19);
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hours" + "'", str18, "hours");
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test15645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15645");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime1.toGregorianCalendar();
        gregorianCalendar16.setFirstDayOfWeek((int) (byte) 10);
        int int19 = gregorianCalendar16.getFirstDayOfWeek();
        gregorianCalendar16.setMinimalDaysInFirstWeek(83459999);
        int int22 = gregorianCalendar16.getWeekYear();
        gregorianCalendar16.set(26615142, 765, 26432117);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2030 + "'", int22 == 2030);
    }

    @Test
    public void test15646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15646");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(442L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test15647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15647");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 26600491, periodType1);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test15648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15648");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        int int22 = period21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.minus((org.joda.time.ReadablePeriod) period21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime5.withDayOfYear(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test15649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15649");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(1961, 38, 32768);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1961 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = period47.isSupported(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plus(10L);
        org.joda.time.DateTime dateTime53 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay9.withYear(100);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.plusYears(86399);
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay55.toDateMidnight();
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay61 = property59.addWrapFieldToCopy(32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay63 = property59.setCopy("59");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"59\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test15651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15651");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        mutableDateTime14.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime20.copy();
        java.lang.String str23 = mutableDateTime22.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDateTime(88, 0, (-1), 0, 21, 0, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T22:00:57.044+14:35" + "'", str23, "2022-02-22T22:00:57.044+14:35");
    }

    @Test
    public void test15652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15652");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean15 = dateTimeField13.isLeap((long) 1439);
        long long17 = dateTimeField13.roundFloor(0L);
        boolean boolean19 = dateTimeField13.isLeap((long) 7);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str38 = nameProvider21.getShortName(locale22, "yearOfCentury", "PT1.969S");
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str42 = nameProvider21.getName(locale39, "PT0S", "hi!");
        java.lang.String str43 = dateTimeField13.getAsText((long) 83459999, locale39);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = locale39.getDisplayName(locale44);
        int int46 = property8.getMaximumShortTextLength(locale39);
        org.joda.time.LocalTime localTime48 = property8.addNoWrapToCopy(206);
        org.joda.time.LocalTime localTime49 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime50 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-52500000L) + "'", long17 == (-52500000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test15653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15653");
        java.util.Date date6 = new java.util.Date((int) '#', 100, 0, 31, 26209701, 28);
        date6.setSeconds(100611);
        java.lang.String str9 = date6.toLocaleString();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Mar 01 15:17:51 GMT+14:35 1993");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1-mar-1993 15.17.51" + "'", str9, "1-mar-1993 15.17.51");
    }

    @Test
    public void test15654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15654");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDurationAdded((-61472908799968L), (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean20 = dateTime18.isSupported(dateTimeFieldType19);
        java.lang.String str21 = dateTimeFieldType19.getName();
        org.joda.time.DateTime dateTime23 = dateTime15.withField(dateTimeFieldType19, (int) (byte) 10);
        int int24 = dateTime23.getMillisOfDay();
        boolean boolean25 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration(28857600000L);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        int int29 = dateTime23.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        boolean boolean32 = dateTime23.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfHour" + "'", str21, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51059999 + "'", int24 == 51059999);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "clockhourOfDay" + "'", str31, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test15655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15655");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        int int22 = period21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = property24.setCopy(14);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusYears(1969);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.joda.time.Period period35 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime26.weekOfWeekyear();
        int int37 = property36.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
    }

    @Test
    public void test15656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15656");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField25 = property2.getDurationField();
        java.lang.String str26 = property2.toString();
        java.lang.String str27 = property2.getName();
        org.joda.time.TimeOfDay timeOfDay29 = property2.addNoWrapToCopy(66);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getISO3Language();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.DateTime dateTime38 = property36.addToCopy((int) ' ');
        java.util.Locale locale39 = java.util.Locale.ITALY;
        int int40 = property36.getMaximumShortTextLength(locale39);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("PT0S");
        int int43 = property36.getMaximumShortTextLength(locale42);
        java.lang.String str44 = locale31.getDisplayVariant(locale42);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale42.getDisplayLanguage(locale45);
        org.joda.time.TimeOfDay timeOfDay47 = property2.setCopy("37", locale42);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.minusHours(292278993);
        org.joda.time.LocalTime localTime50 = timeOfDay47.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[minuteOfHour]" + "'", str26, "Property[minuteOfHour]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deu" + "'", str32, "deu");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test15657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15657");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setDayOfYear(1);
        mutableDateTime2.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime2.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(227228371200100L);
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test15658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15658");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(10);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration19 = duration17.plus((long) 'u');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration19.toPeriod(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 19);
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDayOfWeek((-2032));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2032 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1070 + "'", int25 == 1070);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test15659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15659");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(4);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withChronology(chronology19);
        int int21 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime23 = dateTime14.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean25 = dateTime14.isSupported(dateTimeFieldType24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight8.withField(dateTimeFieldType24, 7);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus(0L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis(2392146000L);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.Duration duration46 = duration43.toDuration();
        org.joda.time.Duration duration47 = duration43.toDuration();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period49 = duration43.toPeriod(periodType48);
        java.lang.String str50 = duration43.toString();
        boolean boolean51 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration43);
        java.lang.String str52 = duration43.toString();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant53, readableInstant54, periodType55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = period56.normalizedStandard(periodType57);
        org.joda.time.Period period60 = period58.minusDays(0);
        org.joda.time.Duration duration61 = period58.toStandardDuration();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.Duration duration64 = duration61.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration65 = duration43.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration67 = duration63.plus((long) 999);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.117S" + "'", str50, "PT0.117S");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.117S" + "'", str52, "PT0.117S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
    }

    @Test
    public void test15660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15660");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 26266117);
        long long8 = interval7.getStartMillis();
        org.joda.time.Interval interval9 = interval7.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-52500000L) + "'", long8 == (-52500000L));
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test15661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15661");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        org.joda.time.LocalDate.Property property12 = localDate11.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) chronology15, dateTimeZone17);
        boolean boolean19 = localDate13.equals((java.lang.Object) localDate18);
        org.joda.time.LocalDate.Property property20 = localDate13.centuryOfEra();
        int int21 = localDate13.getDayOfMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = dateTime24.toString(dateTimeFormatter25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        mutableDateTime30.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime30.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime28.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        long long40 = dateTimeZone35.nextTransition((long) 1970);
        org.joda.time.DateTime dateTime41 = localDate13.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight42 = localDate11.toDateMidnight(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str26, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1970L + "'", long40 == 1970L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test15662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15662");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 1, periodType50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, periodType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        int int61 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime.Property property62 = dateTime59.secondOfDay();
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType50, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime24.withChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.secondOfDay();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(chronology63);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(chronology63);
        mutableDateTime69.setDate((long) (short) -1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str30, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType50);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str57, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
    }

    @Test
    public void test15663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15663");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int6 = dateTime2.get(dateTimeFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfYear();
        org.joda.time.DurationField durationField19 = chronology16.eras();
        java.lang.String str20 = durationField19.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 34 + "'", int6 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str11, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UnsupportedDurationField[eras]" + "'", str20, "UnsupportedDurationField[eras]");
    }

    @Test
    public void test15664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15664");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withChronology(chronology12);
        int int14 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) period30, chronology31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) period30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime61.plusMonths(999);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = interval72.withChronology(chronology73);
        org.joda.time.Interval interval75 = interval33.overlap((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Chronology chronology76 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(100L, (long) 6, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.yearOfEra();
        org.joda.time.DurationField durationField79 = chronology76.centuries();
        org.joda.time.DurationField durationField80 = chronology76.seconds();
        org.joda.time.DurationFieldType durationFieldType81 = durationField80.getType();
        long long84 = durationField80.subtract(0L, 223);
        long long87 = durationField80.add(0L, 0L);
        int int89 = durationField80.getValue((long) 1320);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-223000L) + "'", long84 == (-223000L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test15665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTime.Property property6 = dateTime3.secondOfDay();
        org.joda.time.DateTime.Property property7 = dateTime3.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        long long16 = duration15.getStandardMinutes();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int23 = dateTime19.get(dateTimeFieldType22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime26.toString(dateTimeFormatter27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime(dateTimeZone29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        int int32 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Period period35 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getMinuteOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime41.toString(dateTimeFormatter42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime(dateTimeZone44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        int int47 = dateTime45.getDayOfWeek();
        org.joda.time.DateTime.Property property48 = dateTime45.secondOfDay();
        org.joda.time.Chronology chronology49 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.millisOfDay();
        org.joda.time.DateTime dateTime51 = dateTime38.toDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.era();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.year();
        org.joda.time.DateTime dateTime55 = dateTime3.toDateTime(chronology49);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 1980, chronology49);
        org.joda.time.DateTimeField dateTimeField57 = chronology49.era();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 34 + "'", int23 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str28, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 874 + "'", int36 == 874);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str43, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test15666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15666");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.removeUnicodeLocaleAttribute("100");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("1970-12-31T23:59:56.099");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1970-12-31T23:59:56.099 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test15667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15667");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period4 = new org.joda.time.Period((-86400000L), (long) 2152, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(946684800000L, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration28, (-1));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths(999);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 1, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) dateTime39, periodType41);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime48.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime54.toYearMonthDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = duration66.plus((long) 'u');
        mutableDateTime59.add((org.joda.time.ReadableDuration) duration68, (-1));
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = dateTime73.plusMonths(999);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 1, periodType81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime59, (org.joda.time.ReadableInstant) dateTime79, periodType81);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Interval interval85 = interval84.toInterval();
        boolean boolean86 = interval44.overlaps((org.joda.time.ReadableInterval) interval84);
        org.joda.time.MutableInterval mutableInterval87 = interval44.toMutableInterval();
        boolean boolean89 = interval44.isBefore((long) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Interval interval91 = interval44.toInterval();
        org.joda.time.Chronology chronology92 = interval91.getChronology();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test15668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15668");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate6 = localDate2.withField(dateTimeFieldType4, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus(9651094761000L);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withCenturyOfEra(97);
        int int12 = dateMidnight11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(26429889);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test15669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15669");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight.Property property27 = dateMidnight1.yearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration34);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight1.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration49, (-1));
        org.joda.time.Duration duration52 = duration34.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withDaysRemoved();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(86400000L, chronology58);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        long long65 = chronology60.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period66 = duration52.toPeriod(periodType54, chronology60);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 69, chronology60);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField69 = chronology60.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str6, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test15670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15670");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfDay();
        int int12 = property11.get();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52500010L + "'", long5 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test15671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        int int5 = dateTime2.getYear();
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfHour();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        org.joda.time.LocalDate.Property property10 = localDate9.year();
        org.joda.time.DateMidnight dateMidnight11 = localDate9.toDateMidnight();
        org.joda.time.LocalDate.Property property12 = localDate9.year();
        int int13 = localDate9.getYearOfEra();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.getID();
        int int18 = dateTimeZone15.getOffsetFromLocal(86400000L);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone15);
        java.lang.String str21 = dateTimeZone15.getShortName((long) 577);
        org.joda.time.DateMidnight dateMidnight22 = localDate9.toDateMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime23 = dateTime2.toDateTime(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2032 + "'", int13 == 2032);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+14:35" + "'", str16, "+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52500000 + "'", int18 == 52500000);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+14:35" + "'", str21, "+14:35");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test15672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15672");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        int int8 = property7.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test15673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        boolean boolean30 = duration19.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration19, periodType31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays(0);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTime dateTime51 = dateMidnight49.toDateTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime54.toString(dateTimeFormatter55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.toDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 1, periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) duration72, periodType76);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.time();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableDuration) duration72, periodType79);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        int int84 = duration72.compareTo((org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration72);
        long long86 = duration19.getStandardMinutes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str56, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test15674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15674");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.DateTime dateTime32 = dateTime25.minusMonths(6);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test15675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15675");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth(83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test15676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        mutableDateTime8.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime6.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTimeISO();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime6.property(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = dateTime6.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime6.toMutableDateTime();
        org.joda.time.DateTime dateTime26 = dateTime6.minusMinutes(2224);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test15677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15677");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder7 = builder0.setDate(35, 0, 83460007);
        java.util.Calendar.Builder builder11 = builder7.setTimeOfDay(1970, 2000, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder11.set(116, 672);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test15678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15678");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusMonths(0);
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = period40.normalizedStandard(periodType41);
        java.lang.String str43 = period40.toString();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = period47.normalizedStandard(periodType48);
        org.joda.time.Period period50 = period40.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) period47);
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTime.Property property76 = dateTime59.year();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateMidnight.Property property78 = dateMidnight52.yearOfCentury();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (-1), chronology83);
        org.joda.time.Duration duration85 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime84);
        long long86 = duration85.getStandardMinutes();
        org.joda.time.Duration duration87 = duration85.toDuration();
        org.joda.time.Period period88 = new org.joda.time.Period((java.lang.Object) duration85);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration90 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period91 = period47.normalizedStandard();
        org.joda.time.Period period93 = period91.minusWeeks((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay33.plus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.YearMonthDay.Property property95 = yearMonthDay94.year();
        int int96 = property95.get();
        java.lang.String str97 = property95.getName();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0S" + "'", str43, "PT0S");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateMidnight52);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str57, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertNotNull(property95);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1970 + "'", int96 == 1970);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "year" + "'", str97, "year");
    }

    @Test
    public void test15679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15679");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(40);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test15680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15680");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTimeFormatter2.parseDateTime("97");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test15681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property4.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test15682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15682");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.roundHalfFloorCopy();
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate localDate5 = localDate2.plusYears((-70014));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 01 00:00:00 GMT+14:35 2022");
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test15683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15683");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = property16.getAsText(locale17);
        java.util.Calendar calendar32 = dateTime6.toCalendar(locale17);
        int int33 = dateTime6.getMonthOfYear();
        int int34 = dateTime6.getMinuteOfHour();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 32769);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        java.lang.String str46 = dateTimeFieldType44.getName();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.withField(dateTimeFieldType44, (int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(86400000L, chronology50);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.minuteOfHour();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean58 = dateTime56.isSupported(dateTimeFieldType57);
        java.lang.String str59 = dateTimeFieldType57.getName();
        boolean boolean60 = localDateTime51.isSupported(dateTimeFieldType57);
        int int61 = localDateTime48.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime48.minusDays(1439);
        org.joda.time.DateTime dateTime64 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime48);
        int int65 = dateTime6.getEra();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Donnerstag" + "'", str31, "Donnerstag");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=52500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=34,SECOND=59,MILLISECOND=999,ZONE_OFFSET=52500000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 34 + "'", int34 == 34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfHour" + "'", str46, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "minuteOfHour" + "'", str59, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test15684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15684");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(450, 51061100, 26573052, 26505100, 2079, 5019, 5, 0);
    }

    @Test
    public void test15685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15685");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, periodType1, chronology2);
        mutablePeriod3.addYears((int) (short) -1);
        mutablePeriod3.addSeconds(4);
        int int8 = mutablePeriod3.getMonths();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays(0);
        org.joda.time.Interval interval20 = dateMidnight19.toInterval();
        org.joda.time.Interval interval21 = interval14.gap((org.joda.time.ReadableInterval) interval20);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod24.addMillis((int) (short) 1);
        mutablePeriod24.setWeeks(11);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod24.toMutablePeriod();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.addMillis(245);
        int int33 = mutablePeriod24.getWeeks();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
    }

    @Test
    public void test15686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime1.toGregorianCalendar();
        gregorianCalendar16.setFirstDayOfWeek((int) (byte) 10);
        int int19 = gregorianCalendar16.getFirstDayOfWeek();
        gregorianCalendar16.setMinimalDaysInFirstWeek(83459999);
        gregorianCalendar16.clear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setDayOfYear(1);
        mutableDateTime24.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime24.getZone();
        int int31 = dateTimeZone29.getOffsetFromLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property34.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime38 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundCeilingCopy();
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.era();
        boolean boolean42 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.yearOfEra();
        boolean boolean45 = gregorianCalendar16.after((java.lang.Object) localDateTime39);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.minusSeconds((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52500000 + "'", int31 == 52500000);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test15687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15687");
        java.util.Date date6 = new java.util.Date(52500, 18940, 93, 1166, 32770, 1069);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 11 08:27:49 GMT+14:35 55978");
    }

    @Test
    public void test15688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15688");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        mutablePeriod14.setMillis(14);
        mutablePeriod14.addMonths(23);
        mutablePeriod14.setMillis(26291448);
        mutablePeriod14.addYears(56);
        int int23 = mutablePeriod14.getHours();
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod14.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        mutablePeriod25.add(1166, (-4), 1974, 0, 52499999, 26520467, 728, 18000000);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
    }

    @Test
    public void test15689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        mutableDateTime1.addMillis((-12));
        mutableDateTime1.addMinutes(52);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        long long19 = duration18.getStandardMinutes();
        org.joda.time.Duration duration20 = duration18.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime28.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setDayOfYear(1);
        mutableDateTime32.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime25.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        int int41 = dateTime40.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime43 = dateTime40.withWeekyear(2070);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMonths(2);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean50 = dateTime48.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int52 = dateTime48.get(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = duration62.plus((long) 'u');
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration64, (-1));
        org.joda.time.Duration duration67 = duration64.toDuration();
        org.joda.time.Duration duration69 = duration64.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        mutableDateTime71.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        mutableDateTime71.setRounding(dateTimeField76);
        int int78 = mutableDateTime71.getYearOfEra();
        org.joda.time.Interval interval79 = duration64.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(86400000L, chronology81);
        org.joda.time.Chronology chronology83 = localDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.yearOfCentury();
        mutableDateTime71.setChronology(chronology83);
        org.joda.time.DurationField durationField87 = durationFieldType53.getField(chronology83);
        org.joda.time.DateTime dateTime88 = dateTime43.withChronology(chronology83);
        org.joda.time.Duration duration89 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 34 + "'", int52 == 34);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1969 + "'", int78 == 1969);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test15690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15690");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder3.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder12 = builder3.setDate(51, 14, 973);
        java.util.Calendar.Builder builder16 = builder3.setWeekDate(2922789, 124, 26357397);
        java.util.Calendar.Builder builder20 = builder3.setDate(26291448, 40, 9);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        mutableDateTime22.setRounding(dateTimeField27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime35 = property31.roundHalfEvenCopy();
        int int36 = localDateTime35.size();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusWeeks((-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((int) ' ');
        java.util.Locale locale46 = java.util.Locale.ITALY;
        int int47 = property43.getMaximumShortTextLength(locale46);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("PT0S");
        int int50 = property43.getMaximumShortTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime35, 0, locale49);
        java.util.Calendar.Builder builder52 = builder3.setLocale(locale49);
        java.lang.String str53 = locale49.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        mutableDateTime55.setRounding(dateTimeField60);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime67 = property64.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime68 = property64.roundHalfEvenCopy();
        int int69 = localDateTime68.size();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minusWeeks((-1));
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.DateTime.Property property76 = dateTime75.yearOfEra();
        org.joda.time.DateTime dateTime78 = property76.addToCopy((int) ' ');
        java.util.Locale locale79 = java.util.Locale.ITALY;
        int int80 = property76.getMaximumShortTextLength(locale79);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("PT0S");
        int int83 = property76.getMaximumShortTextLength(locale82);
        java.lang.String str84 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime68, 0, locale82);
        java.lang.String str85 = locale82.getISO3Country();
        java.lang.String str86 = locale49.getDisplayName(locale82);
        java.lang.String str87 = locale82.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test15691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15691");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("gen", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        int int9 = mutableDateTime8.getDayOfMonth();
        int int10 = mutableDateTime8.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        int int19 = mutableDateTime18.getDayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime23.toString(dateTimeFormatter24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        int int49 = dateTime46.getMillisOfSecond();
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        java.util.GregorianCalendar gregorianCalendar51 = dateTime46.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay52 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.plusYears(0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime59.toString(dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 1, periodType81);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration77, periodType81);
        mutablePeriod83.setDays((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay56.minus((org.joda.time.ReadablePeriod) mutablePeriod83);
        java.lang.Object obj87 = mutablePeriod83.clone();
        org.joda.time.PeriodType periodType88 = mutablePeriod83.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 27, periodType88);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) mutableDateTime18, periodType88);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone92 = null;
        org.joda.time.DateTime dateTime93 = mutableDateTime8.toDateTime(dateTimeZone92);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setWeekOfWeekyear(83460007);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83460007 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str25, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str48, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 999 + "'", int49 == 999);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str61, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "P117D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "P117D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "P117D");
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test15693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15693");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Mittwoch");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.lang.String[] strArray6 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean9 = strSet7.isEmpty();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration18 = duration16.plus((long) 'u');
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZone(dateTimeZone28);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 1, periodType31);
        org.joda.time.PeriodType periodType33 = periodType31.withWeeksRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime29, periodType31);
        boolean boolean35 = strSet7.equals((java.lang.Object) period34);
        java.lang.String[] strArray38 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean41 = strSet39.isEmpty();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.monthOfYear();
        java.util.Date date45 = localDateTime43.toDate();
        org.joda.time.DateTime dateTime46 = localDateTime43.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minusMonths((int) (short) 100);
        boolean boolean49 = strSet39.remove((java.lang.Object) localDateTime48);
        boolean boolean50 = strSet7.equals((java.lang.Object) strSet39);
        org.joda.time.tz.Provider provider51 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet52 = provider51.getAvailableIDs();
        boolean boolean53 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Iterator<java.lang.String> strItor54 = strSet7.iterator();
        boolean boolean56 = strSet7.add("Sun Feb 22 00:00:00 UTC 2032");
        java.lang.String str57 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet7);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(provider51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test15694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime1.toGregorianCalendar();
        gregorianCalendar16.setFirstDayOfWeek((int) (byte) 10);
        int int19 = gregorianCalendar16.getFirstDayOfWeek();
        gregorianCalendar16.setMinimalDaysInFirstWeek(83459999);
        gregorianCalendar16.clear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setDayOfYear(1);
        mutableDateTime24.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime24.getZone();
        int int31 = dateTimeZone29.getOffsetFromLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property34.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime38 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundCeilingCopy();
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.era();
        boolean boolean42 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.yearOfEra();
        boolean boolean45 = gregorianCalendar16.after((java.lang.Object) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = gregorianCalendar16.getActualMinimum(50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52500000 + "'", int31 == 52500000);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15695");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        java.util.Date date11 = localDateTime9.toDate();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = period16.normalizedStandard(periodType17);
        org.joda.time.Period period20 = period18.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = period20.getFieldTypes();
        org.joda.time.Period period23 = period20.plusMillis(1970);
        org.joda.time.Period period25 = period23.withHours(10);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType26.isSupported(durationFieldType27);
        boolean boolean29 = period23.isSupported(durationFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime9.withFieldAdded(durationFieldType27, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration42, (-1));
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime47.plusMonths(999);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 1, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime53, periodType55);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime7, (org.joda.time.ReadablePartial) localDateTime31, periodType55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime7.minusSeconds(1439);
        org.joda.time.ReadablePartial readablePartial61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withFields(readablePartial61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusDays(450);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusHours(802);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test15696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15696");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(16);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime24.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        gregorianCalendar27.setTimeInMillis((long) 27425238);
        gregorianCalendar27.setLenient(true);
        gregorianCalendar27.set(54, 577, 227, 1966, 26600491);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test15697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15697");
        java.util.Date date6 = new java.util.Date((int) '#', 100, 0, 31, 26209701, 28);
        date6.setHours((int) (byte) -1);
        int int9 = date6.getYear();
        int int10 = date6.getMinutes();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Feb 27 23:21:28 GMT+14:35 1993");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 93 + "'", int9 == 93);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
    }

    @Test
    public void test15698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15698");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(32770);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.minuteOfHour();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        int int13 = property10.getMaximumTextLength(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getISO3Language();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((int) ' ');
        java.util.Locale locale23 = java.util.Locale.ITALY;
        int int24 = property20.getMaximumShortTextLength(locale23);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("PT0S");
        int int27 = property20.getMaximumShortTextLength(locale26);
        java.lang.String str28 = locale15.getDisplayVariant(locale26);
        java.lang.String str30 = locale15.getExtension('u');
        java.lang.String str31 = locale14.getDisplayVariant(locale15);
        int int32 = property10.getMaximumShortTextLength(locale15);
        java.lang.String str33 = locale15.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter7.withLocale(locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter7.withDefaultYear(2021);
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter7.withOffsetParsed();
        boolean boolean41 = dateTimeFormatter40.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.parse("70", dateTimeFormatter40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "deu" + "'", str16, "deu");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "deu" + "'", str33, "deu");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimeParser39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15699");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate5 = property1.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate6 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property1.withMaximumValue();
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearOfCentury" + "'", str2, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test15700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15700");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int6 = date5.getYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Mar 24 03:59:00 GMT+14:35 1960");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 60 + "'", int6 == 60);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test15701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15701");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate0.plusWeeks(0);
        org.joda.time.LocalDate.Property property8 = localDate0.monthOfYear();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("1968-12-31");
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property8.setCopy("22 f\351vr. 2022 07:23:16", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22 fe?vr. 2022 07:23:16\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(charSet12);
    }

    @Test
    public void test15702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15702");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale70.getISO3Language();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfEra();
        org.joda.time.DateTime dateTime77 = property75.addToCopy((int) ' ');
        java.util.Locale locale78 = java.util.Locale.ITALY;
        int int79 = property75.getMaximumShortTextLength(locale78);
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("PT0S");
        int int82 = property75.getMaximumShortTextLength(locale81);
        java.lang.String str83 = locale70.getDisplayVariant(locale81);
        java.lang.String str85 = locale70.getExtension('u');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter2.withLocale(locale70);
        boolean boolean87 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter88 = dateTimeFormatter2.getPrinter();
        boolean boolean89 = dateTimeFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate91 = dateTimeFormatter2.parseLocalDate("mardi");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514758030,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=25,SECOND=57,MILLISECOND=155,ZONE_OFFSET=-875,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "deu" + "'", str71, "deu");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(dateTimePrinter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15703");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        long long26 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight28 = property2.addToCopy((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight30 = property2.addToCopy(0);
        int int31 = dateMidnight30.getHourOfDay();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateMidnight30.toString("2022", locale33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight30.withYearOfCentury(13);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths(58);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight38);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str7, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test15704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15704");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime.Property property32 = dateTime15.year();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateMidnight.Property property34 = dateMidnight8.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight36 = property34.setCopy("22");
        org.joda.time.DateMidnight dateMidnight37 = property34.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight39 = property34.setCopy(4);
        int int40 = property34.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight41 = property34.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = dateTimeFormatter7.print((org.joda.time.ReadableInstant) dateMidnight41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str13, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(dateMidnight41);
    }

    @Test
    public void test15705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15705");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime8 = property4.setCopy(3);
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.LocalTime localTime10 = property4.withMaximumValue();
        java.lang.String str11 = localTime10.toString();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(10);
        boolean boolean16 = localDate12.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property17 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(10);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.withMaximumValue();
        org.joda.time.LocalDate localDate24 = localDate18.withFields((org.joda.time.ReadablePartial) localDate23);
        int int25 = localDate18.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localTime10.compareTo((org.joda.time.ReadablePartial) localDate18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22:10:59.110" + "'", str11, "22:10:59.110");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test15706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15706");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate5 = property1.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate7 = localDate5.plusYears(81);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearOfCentury" + "'", str2, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test15707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15707");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 70);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test15708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15708");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.minusDays(26209701);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = localDate6.minusDays(81);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(44);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime.Property property41 = dateTime24.year();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight.Property property43 = dateMidnight17.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight44 = property43.withMinimumValue();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime47.toString(dateTimeFormatter48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = dateTime70.toString(dateTimeFormatter71);
        int int73 = dateTime70.getMillisOfSecond();
        org.joda.time.Period period74 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight44.withDurationAdded((org.joda.time.ReadableDuration) duration65, 1439);
        org.joda.time.Interval interval77 = interval16.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval78 = interval16.toMutableInterval();
        boolean boolean79 = interval16.isBeforeNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str22, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str49, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str72, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 999 + "'", int73 == 999);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(mutableInterval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test15709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15709");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long13 = dateTimeField10.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField14 = dateTimeField10.getRangeDurationField();
        int int17 = dateTimeField10.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime19, (int) 'a', locale22);
        java.util.Locale.setDefault(locale22);
        java.util.Calendar calendar25 = mutableDateTime1.toCalendar(locale22);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        int int27 = mutableDateTime1.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000001L) + "'", long13 == (-31536000001L));
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-31588500000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=52500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=52500000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test15710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime25 = dateTime6.withEra(0);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime6.toYearMonthDay();
        org.joda.time.DateTime.Property property27 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test15711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Duration duration10 = duration6.minus(0L);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.Period period13 = duration6.toPeriod(periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withYearsRemoved();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant19, readableInstant20, periodType21);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundFloor();
        mutableDateTime26.setMillisOfSecond(58);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.withZone(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusDays(0);
        int int44 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTime dateTime45 = dateMidnight43.toDateTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean50 = dateTime48.isSupported(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight43.withFieldAdded(durationFieldType51, 8);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod55.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight53.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, 0);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 1, periodType61);
        org.joda.time.Period period64 = period62.plusDays(1970);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 1, periodType66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = periodType66.isSupported(durationFieldType68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(86400000L, chronology71);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.millisOfSecond();
        boolean boolean76 = durationFieldType68.isSupported(chronology73);
        boolean boolean77 = period64.isSupported(durationFieldType68);
        mutablePeriod55.set(durationFieldType68, 43);
        mutableDateTime26.add(durationFieldType68, (int) (byte) 0);
        int int82 = periodType12.indexOf(durationFieldType68);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test15712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15712");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        java.util.Date date11 = localDateTime9.toDate();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = period16.normalizedStandard(periodType17);
        org.joda.time.Period period20 = period18.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = period20.getFieldTypes();
        org.joda.time.Period period23 = period20.plusMillis(1970);
        org.joda.time.Period period25 = period23.withHours(10);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType26.isSupported(durationFieldType27);
        boolean boolean29 = period23.isSupported(durationFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime9.withFieldAdded(durationFieldType27, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration42, (-1));
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime47.plusMonths(999);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 1, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime53, periodType55);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime7, (org.joda.time.ReadablePartial) localDateTime31, periodType55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(86400000L, chronology60);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.yearOfCentury();
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfCeilingCopy();
        boolean boolean66 = localDateTime31.equals((java.lang.Object) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusDays(2000);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.millisOfDay();
        int int70 = localDateTime65.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test15713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15713");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        java.lang.String str8 = localDate0.toString("\u53f0\u6e7e");
        java.lang.String str10 = localDate0.toString("38");
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean40 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime42 = dateTime36.withCenturyOfEra(100);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.minusYears((int) '4');
        java.lang.String str46 = dateTime42.toString();
        int int47 = dateTime42.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        mutableDateTime49.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant52, readableInstant53, periodType54);
        mutableDateTime49.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime49.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime60 = property57.addWrapField(69);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime60.copy();
        int int62 = mutableDateTime60.getDayOfMonth();
        mutableDateTime60.add((long) 69);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        boolean boolean69 = dateTimeField67.isLeap((long) 1439);
        boolean boolean71 = dateTimeField67.isLeap(0L);
        long long73 = dateTimeField67.roundFloor((long) (byte) 1);
        int int75 = dateTimeField67.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField67.getType();
        java.lang.String str77 = dateTimeFieldType76.getName();
        int int78 = mutableDateTime60.get(dateTimeFieldType76);
        org.joda.time.DateTime.Property property79 = dateTime42.property(dateTimeFieldType76);
        org.joda.time.LocalDate.Property property80 = localDate0.property(dateTimeFieldType76);
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType76.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u53f0\u6e7e" + "'", str8, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "38" + "'", str10, "38");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10070-01-01T14:34:59.999+14:35" + "'", str46, "10070-01-01T14:34:59.999+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52499999 + "'", int47 == 52499999);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-52500000L) + "'", long73 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "year" + "'", str77, "year");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9000 + "'", int78 == 9000);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNull(durationFieldType81);
    }

    @Test
    public void test15714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15714");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = property4.addNoWrapToCopy(3);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean11 = localTime7.isSupported(dateTimeFieldType10);
        org.joda.time.LocalTime.Property property12 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test15715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15715");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getISO3Language();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((int) ' ');
        java.util.Locale locale9 = java.util.Locale.ITALY;
        int int10 = property6.getMaximumShortTextLength(locale9);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("PT0S");
        int int13 = property6.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale1.getDisplayVariant(locale12);
        java.lang.String str17 = nameProvider0.getShortName(locale1, "yearOfCentury", "PT1.969S");
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str21 = nameProvider0.getName(locale18, "PT0S", "hi!");
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str25 = nameProvider0.getShortName(locale22, "hi!", "years");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        int int34 = dateTime32.getDayOfWeek();
        org.joda.time.DateTime.Property property35 = dateTime32.secondOfDay();
        org.joda.time.Chronology chronology36 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean44 = dateTimeField42.isLeap((long) 1439);
        boolean boolean46 = dateTimeField42.isLeap(0L);
        long long48 = dateTimeField42.roundFloor((long) (byte) 1);
        int int50 = dateTimeField42.get((long) 5);
        long long53 = dateTimeField42.add((long) 4, (int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) ' ');
        java.util.Locale locale63 = java.util.Locale.ITALY;
        int int64 = property60.getMaximumShortTextLength(locale63);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT0S");
        int int67 = property60.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale55.getDisplayVariant(locale66);
        java.lang.String str70 = locale55.getExtension('u');
        java.lang.String str71 = dateTimeField42.getAsText(10L, locale55);
        long long72 = dateTimeField37.set(0L, "23", locale55);
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = locale74.getDisplayScript();
        java.lang.String str76 = dateTimeField37.getAsShortText(32772, locale74);
        java.lang.String str79 = nameProvider0.getName(locale74, "2022", "2022-02-22T00:01:40.996Z");
        java.util.Locale locale80 = null;
        java.lang.String str83 = nameProvider0.getShortName(locale80, "2053-07-31", "japonais");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale87 = new java.util.Locale("", "07:19:35.506");
        java.lang.String str90 = nameProvider0.getShortName(locale87, "2052-01-01", "France");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNull(str25);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str30, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-52500000L) + "'", long48 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 315532800004L + "'", long53 == 315532800004L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "deu" + "'", str56, "deu");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970" + "'", str71, "1970");
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-52499977L) + "'", long72 == (-52499977L));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "32772" + "'", str76, "32772");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals(locale87.toString(), "_07:19:35.506");
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test15716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(86400000L, chronology10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        boolean boolean19 = dateTimeFormatter18.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withDefaultYear(32770);
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.minuteOfHour();
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        int int28 = property25.getMaximumTextLength(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getISO3Language();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime37 = property35.addToCopy((int) ' ');
        java.util.Locale locale38 = java.util.Locale.ITALY;
        int int39 = property35.getMaximumShortTextLength(locale38);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("PT0S");
        int int42 = property35.getMaximumShortTextLength(locale41);
        java.lang.String str43 = locale30.getDisplayVariant(locale41);
        java.lang.String str45 = locale30.getExtension('u');
        java.lang.String str46 = locale29.getDisplayVariant(locale30);
        int int47 = property25.getMaximumShortTextLength(locale30);
        java.lang.String str48 = locale30.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withLocale(locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter22.withPivotYear(216);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter53.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTime15.toString(dateTimeFormatter53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "deu" + "'", str31, "deu");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "deu" + "'", str48, "deu");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test15717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15717");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        mutableDateTime5.setMillisOfSecond((int) 'u');
        int int10 = mutableDateTime5.getWeekOfWeekyear();
        mutableDateTime5.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        mutableDateTime14.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime5.setZone(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localTime3.toDateTimeToday(dateTimeZone19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(0L, 13148730000L, dateTimeZone19);
        long long27 = dateTimeZone19.convertLocalToUTC(41904000043L, false, (long) 49);
        int int29 = dateTimeZone19.getOffset((-3600000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 41851500043L + "'", long27 == 41851500043L);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52500000 + "'", int29 == 52500000);
    }

    @Test
    public void test15718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15718");
        org.joda.time.Period period8 = new org.joda.time.Period(2053, 2022, 32770, 7, 26277594, 577, 10, 59);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(999);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test15719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15719");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        boolean boolean4 = durationField3.isPrecise();
        long long6 = durationField3.getMillis(5);
        long long9 = durationField3.getDifferenceAsLong(315532800004L, (long) 60);
        boolean boolean10 = durationField3.isPrecise();
        long long13 = durationField3.add(63040L, 12178291L);
        long long16 = durationField3.getMillis(463, 1961020799910L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 13148730000L + "'", long6 == 13148730000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 119L + "'", long9 == 119L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32025811968063040L + "'", long13 == 32025811968063040L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1217548800000L + "'", long16 == 1217548800000L);
    }

    @Test
    public void test15720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15720");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        java.util.Date date10 = localDate9.toDate();
        boolean boolean11 = localDate6.equals((java.lang.Object) localDate9);
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate6.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDate6.toString("Feb 22, 2022 7:22:17 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 22 00:00:00 GMT+14:35 2032");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime14 = property10.addWrapField(32);
        org.joda.time.MutableDateTime mutableDateTime16 = property10.set(26446485);
        int int17 = mutableDateTime16.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setMinuteOfDay(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 85 + "'", int17 == 85);
    }

    @Test
    public void test15722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15722");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
    }

    @Test
    public void test15723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15723");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period3 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period5 = period3.plusSeconds((int) (short) 100);
        org.joda.time.Period period6 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period10 = new org.joda.time.Period((-86400000L), (long) 2152, periodType9);
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) period3, periodType9);
        org.joda.time.Period period13 = period3.plusMillis(48);
        org.joda.time.Period period15 = period3.plusYears(61);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test15724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15724");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology5 = timeOfDay1.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DurationField durationField7 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = chronology5.withUTC();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((-1645488660L), chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfHalfday();
        java.lang.String str12 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "clockhourOfHalfday" + "'", str12, "clockhourOfHalfday");
    }

    @Test
    public void test15725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15725");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        org.joda.time.LocalDate.Property property4 = localDate3.year();
        org.joda.time.LocalDate localDate6 = localDate3.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        int int36 = dateTime33.getMillisOfSecond();
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime33.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay39 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setDayOfYear(1);
        mutableDateTime45.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime45.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) (short) 1);
        int int54 = dateTimeZone50.getOffsetFromLocal((long) 83459999);
        org.joda.time.Interval interval55 = yearMonthDay41.toInterval(dateTimeZone50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 1, periodType64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.years();
        boolean boolean67 = periodType64.isSupported(durationFieldType66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration62, periodType64);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = duration82.plus((long) 'u');
        org.joda.time.Period period85 = duration84.toPeriod();
        boolean boolean86 = duration75.isEqual((org.joda.time.ReadableDuration) duration84);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType88 = org.joda.time.DurationFieldType.years();
        boolean boolean89 = periodType87.isSupported(durationFieldType88);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration75, periodType87);
        int int91 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime58);
        int int93 = dateTimeZone50.getOffset((long) 2152);
        org.joda.time.Interval interval94 = localDate6.toInterval(dateTimeZone50);
        java.lang.String str95 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(0L, dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str12, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str35, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(gregorianCalendar38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52500000 + "'", int54 == 52500000);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 52500000 + "'", int91 == 52500000);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52500000 + "'", int93 == 52500000);
        org.junit.Assert.assertNotNull(interval94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+14:35" + "'", str95, "+14:35");
    }

    @Test
    public void test15726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15726");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        java.lang.Integer int6 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(86400000L, chronology8);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        long long15 = chronology10.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology10.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withZoneUTC();
        java.lang.Appendable appendable20 = null;
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        int int23 = localDate21.getDayOfWeek();
        int int24 = localDate21.getYear();
        int int25 = localDate21.getCenturyOfEra();
        org.joda.time.LocalDate localDate27 = localDate21.withWeekyear((int) 'a');
        org.joda.time.Interval interval28 = localDate21.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(appendable20, (org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test15727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15727");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant16 = instant13.withDurationAdded((long) '4', 292278993);
        org.joda.time.Chronology chronology17 = instant13.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(22, 0, 2224, 66, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2224 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test15728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15728");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        gregorianCalendar30.set((int) (byte) 100, 1969, (int) 'a');
        int int38 = gregorianCalendar30.getLeastMaximum(3);
        gregorianCalendar30.add(1, 4);
        gregorianCalendar30.clear();
        java.util.Date date44 = new java.util.Date((long) 32770);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.lang.String str46 = date44.toLocaleString();
        gregorianCalendar30.setTime(date44);
        boolean boolean48 = gregorianCalendar30.isWeekDateSupported();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51 + "'", int38 == 51);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:31 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1 janv. 1970 00:00:31" + "'", str46, "1 janv. 1970 00:00:31");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test15729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15729");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26539);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer9, (long) 52552032);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test15730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15730");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) 999);
        boolean boolean13 = mutableDateTime11.isEqual(1645514411591L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15731");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Instant instant19 = instant16.withMillis((long) 7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant16.withDurationAdded(readableDuration20, 86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant25 = instant16.withDurationAdded(2623795200000L, 52499999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 2623795200000 * 52499999");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test15732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.Period period14 = period12.plusHours(10);
        org.joda.time.Period period15 = period12.toPeriod();
        org.joda.time.Period period16 = period12.normalizedStandard();
        org.joda.time.Period period18 = period16.plusMinutes(475);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test15733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15733");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll(3, (int) 'a');
        calendar0.clear();
        java.util.Date date10 = new java.util.Date(2005, 624, 56, 15, 227);
        date10.setDate(34);
        calendar0.setTime(date10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean18 = dateTimeField16.isLeap((long) 1439);
        boolean boolean20 = dateTimeField16.isLeap(0L);
        long long22 = dateTimeField16.roundFloor((long) (byte) 1);
        int int24 = dateTimeField16.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField16.getType();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withZone(dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfWeek();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getISO3Language();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale39.getDisplayVariant(locale50);
        java.lang.String str53 = property38.getAsText(locale39);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime59 = property57.addToCopy((int) ' ');
        java.util.Locale locale60 = java.util.Locale.ITALY;
        int int61 = property57.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale62.getISO3Language();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.DateTime.Property property67 = dateTime66.yearOfEra();
        org.joda.time.DateTime dateTime69 = property67.addToCopy((int) ' ');
        java.util.Locale locale70 = java.util.Locale.ITALY;
        int int71 = property67.getMaximumShortTextLength(locale70);
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("PT0S");
        int int74 = property67.getMaximumShortTextLength(locale73);
        java.lang.String str75 = locale62.getDisplayVariant(locale73);
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale76.getISO3Language();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.DateTime.Property property81 = dateTime80.yearOfEra();
        org.joda.time.DateTime dateTime83 = property81.addToCopy((int) ' ');
        java.util.Locale locale84 = java.util.Locale.ITALY;
        int int85 = property81.getMaximumShortTextLength(locale84);
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("PT0S");
        int int88 = property81.getMaximumShortTextLength(locale87);
        java.lang.String str89 = locale76.getDisplayVariant(locale87);
        java.lang.String str90 = locale73.getDisplayLanguage(locale76);
        java.lang.String str91 = locale60.getDisplayLanguage(locale73);
        java.lang.String str92 = locale39.getDisplayVariant(locale60);
        java.lang.String str93 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localTime27, 23, locale60);
        java.util.Locale locale94 = java.util.Locale.CHINA;
        java.lang.String str95 = locale60.getDisplayLanguage(locale94);
        boolean boolean96 = date10.equals((java.lang.Object) locale60);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=62709274020875,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3957,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=47,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-875,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Mar 06 18:47:00 GMT+14:35 3957");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-52500000L) + "'", long22 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Donnerstag" + "'", str53, "Donnerstag");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "deu" + "'", str63, "deu");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "deu" + "'", str77, "deu");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Italian" + "'", str91, "Italian");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "23" + "'", str93, "23");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str95, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test15734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15734");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(227210054400000116L);
    }

    @Test
    public void test15735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15735");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime24 = dateTime6.withCenturyOfEra(7);
        org.joda.time.DateTime dateTime26 = dateTime6.withWeekyear(45);
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(durationField28);
    }

    @Test
    public void test15736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15736");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.getLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = localTime7.withMillisOfDay(99);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(1069);
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.LocalTime localTime16 = property11.setCopy("54");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test15737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15737");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2032-02-22");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("31 d\351c. 1968 23:59:59");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test15738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15738");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.Period period5 = period3.plusDays(9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period3.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.minusDays(0);
        java.lang.String str15 = period14.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withZone(dateTimeZone23);
        org.joda.time.Duration duration25 = period14.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = dateTime24.isBefore((long) 1439);
        org.joda.time.Duration duration28 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration30 = duration28.withMillis((-62135596799903L));
        org.joda.time.Duration duration32 = duration30.plus((long) 3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
    }

    @Test
    public void test15739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15739");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 3, 69425337600000L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Interval interval4 = interval2.withStart(readableInstant3);
        boolean boolean6 = interval4.isBefore((-262661L));
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime9.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration27.plus((long) 'u');
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration29, (-1));
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime34.plusMonths(999);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 1, periodType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) dateTime40, periodType42);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = interval45.withChronology(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.minusDays(0);
        org.joda.time.Interval interval53 = dateMidnight52.toInterval();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfYear();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.minusDays(0);
        org.joda.time.Interval interval59 = dateMidnight58.toInterval();
        org.joda.time.Interval interval60 = interval53.gap((org.joda.time.ReadableInterval) interval59);
        boolean boolean61 = interval45.abuts((org.joda.time.ReadableInterval) interval59);
        boolean boolean62 = interval4.contains((org.joda.time.ReadableInterval) interval45);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test15740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15740");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-60967987200000L));
        org.joda.time.Instant instant3 = instant1.minus(39L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test15741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfCeiling();
        int int14 = mutableDateTime13.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test15742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15742");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusWeeks(11);
        int int9 = localDateTime8.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusDays(37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate((-292277), 85, 954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test15743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfCeiling();
        java.util.Date date11 = mutableDateTime10.toDate();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(315532800004L);
        mutableDateTime13.setYear(43);
        mutableDateTime13.setMillis(0L);
        mutableDateTime13.setMillisOfDay(32770);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration29.plus((long) 'u');
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.Duration duration34 = duration31.toDuration();
        org.joda.time.Duration duration36 = duration31.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime38.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        mutableDateTime38.setRounding(dateTimeField43);
        int int45 = mutableDateTime38.getYearOfEra();
        org.joda.time.Interval interval46 = duration31.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        org.joda.time.Instant instant58 = instant47.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) 'x');
        boolean boolean59 = mutableDateTime38.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant61 = instant47.withMillis(90L);
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) instant61);
        int int63 = mutableDateTime13.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 16 16:37:54 GMT+14:35 292278994");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1969 + "'", int45 == 1969);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test15744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15744");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(2000, (int) '#', (int) (byte) 100);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime14.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime23 = dateTime21.minusYears(32769);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getISO3Language();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((int) ' ');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        int int35 = property31.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0S");
        int int38 = property31.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale26.getDisplayVariant(locale37);
        java.lang.String str41 = locale26.getExtension('u');
        java.lang.String str42 = locale25.getDisplayVariant(locale26);
        java.lang.String str43 = dateTime23.toString("22", locale26);
        java.lang.String str44 = locale7.getDisplayLanguage(locale26);
        java.util.Calendar.Builder builder45 = builder0.setLocale(locale26);
        java.util.Calendar.Builder builder47 = builder45.setLenient(false);
        java.util.Calendar.Builder builder51 = builder45.setWeekDate(19, 42, 11);
        java.util.Calendar.Builder builder53 = builder45.setLenient(true);
        java.util.Calendar.Builder builder58 = builder45.setTimeOfDay(86399999, 10, 26446485, 52);
        java.util.Calendar.Builder builder62 = builder58.setWeekDate(1069, 93, 2073);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar63 = builder58.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 2073");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deu" + "'", str27, "deu");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22" + "'", str43, "22");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Deutsch" + "'", str44, "Deutsch");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test15745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) period19, chronology20);
        int[] intArray23 = chronology3.get((org.joda.time.ReadablePeriod) period19, (-1L));
        org.joda.time.DateTimeField dateTimeField24 = chronology3.monthOfYear();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 53);
        org.joda.time.DurationField durationField27 = dateTimeField24.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "janv." + "'", str26, "janv.");
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test15746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15746");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(118281600039L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = hours2.getFieldType(58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test15747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        gregorianCalendar30.add(3, (int) (byte) 0);
        int int38 = gregorianCalendar30.getWeekYear();
        int int39 = gregorianCalendar30.getFirstDayOfWeek();
        java.time.Instant instant40 = gregorianCalendar30.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = gregorianCalendar30.getLeastMaximum(26458);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26458");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(instant40);
    }

    @Test
    public void test15748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15748");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(11);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy(20);
        int int13 = localDateTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration27);
        int int29 = period28.getMillis();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime12.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) (short) 1);
        java.lang.String str34 = localDateTime32.toString("1969");
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime40.toString(dateTimeFormatter41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime.Property property61 = dateTime44.year();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight.Property property63 = dateMidnight37.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight65 = property63.setCopy("22");
        org.joda.time.DateMidnight dateMidnight67 = property63.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight68 = property63.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight70 = property63.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        boolean boolean75 = dateTimeField73.isLeap((long) 1439);
        boolean boolean77 = dateTimeField73.isLeap(0L);
        long long79 = dateTimeField73.roundFloor((long) (byte) 1);
        int int81 = dateTimeField73.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField73.getType();
        java.lang.String str83 = dateTimeFieldType82.getName();
        int int84 = dateMidnight70.get(dateTimeFieldType82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime32.withField(dateTimeFieldType82, 124);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime6, (org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime6.minusYears(43);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1969" + "'", str34, "1969");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight37);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str42, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52500000L) + "'", long79 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "year" + "'", str83, "year");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2022 + "'", int84 == 2022);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test15749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15749");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay0.minusSeconds((int) '4');
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test15750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15750");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.setDayOfYear(1);
        mutableDateTime3.setMillisOfSecond((int) 'u');
        int int8 = mutableDateTime3.getWeekOfWeekyear();
        mutableDateTime3.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime3.setZone(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localTime1.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime22 = localTime1.minusMinutes(39);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int24 = timeOfDay23.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.withMillisOfSecond((int) (short) 1);
        int int28 = timeOfDay23.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period39 = period36.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay23.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period42 = period36.minusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = period36.plusMinutes(31);
        org.joda.time.LocalTime localTime45 = localTime1.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalTime localTime47 = localTime1.plusSeconds(38);
        java.lang.String str48 = localTime47.toString();
        org.joda.time.LocalTime localTime50 = localTime47.minusMinutes(19045);
        java.util.Locale locale52 = java.util.Locale.UK;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = localTime50.toString("Dec", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22:01:36.770" + "'", str48, "22:01:36.770");
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
    }

    @Test
    public void test15751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15751");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.minusDays(26209701);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        int int40 = dateTimeZone36.getOffsetFromLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = localDate10.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime44 = dateTime42.plusWeeks(8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime60.plusMonths(999);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 1, periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime46, (org.joda.time.ReadableInstant) dateTime66, periodType68);
        org.joda.time.Period period72 = period70.minusDays(12);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 1, periodType74);
        org.joda.time.Period period76 = period72.normalizedStandard(periodType74);
        org.joda.time.Period period78 = period76.withSeconds((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(90, 20, 19, 9);
        mutablePeriod83.setHours(99);
        org.joda.time.Period period86 = period78.withFields((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.Period period88 = period78.withSeconds(71);
        org.joda.time.DateTime dateTime89 = dateTime44.plus((org.joda.time.ReadablePeriod) period78);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52500000 + "'", int40 == 52500000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test15752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15752");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury(66);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setDayOfYear(1);
        mutableDateTime12.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 1);
        int int21 = dateTimeZone17.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        long long29 = dateTimeField24.set((long) ' ', "22", locale28);
        boolean boolean30 = dateTimeZone17.equals((java.lang.Object) "22");
        java.lang.String str32 = dateTimeZone17.getShortName((-31536000001L));
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone17);
        java.lang.String str35 = dateTimeZone17.getShortName(0L);
        org.joda.time.DateTime dateTime36 = localDate10.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra(26266117);
        org.joda.time.DateTime dateTime40 = dateTime36.minusHours(19);
        java.util.Date date41 = dateTime36.toDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52500000 + "'", int21 == 52500000);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61472908799968L) + "'", long29 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+14:35" + "'", str32, "+14:35");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+14:35" + "'", str35, "+14:35");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Thu Feb 21 09:24:59 GMT+14:35 166");
    }

    @Test
    public void test15753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15753");
        java.util.Locale locale0 = java.util.Locale.PRC;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getISO3Language();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property7.addToCopy((int) ' ');
        java.util.Locale locale10 = java.util.Locale.ITALY;
        int int11 = property7.getMaximumShortTextLength(locale10);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("PT0S");
        int int14 = property7.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale2.getDisplayVariant(locale13);
        java.lang.String str18 = nameProvider1.getShortName(locale2, "yearOfCentury", "PT1.969S");
        java.lang.String str19 = locale0.getDisplayName(locale2);
        java.lang.String str20 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "deu" + "'", str3, "deu");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinesisch (China)" + "'", str19, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test15754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(16);
        org.joda.time.MutableDateTime mutableDateTime24 = property20.add((int) (short) 0);
        int int25 = property20.get();
        java.lang.String str26 = property20.getAsString();
        java.lang.String str27 = property20.getAsText();
        org.joda.time.DateTimeField dateTimeField28 = property20.getField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-52500000L) + "'", long16 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2038 + "'", int25 == 2038);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2038" + "'", str26, "2038");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2038" + "'", str27, "2038");
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test15755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15755");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder3.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder12 = builder3.setDate(51, 14, 973);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.lang.String str14 = timeZone13.getID();
        int int16 = timeZone13.getOffset((long) ' ');
        int int17 = timeZone13.getRawOffset();
        java.util.Calendar.Builder builder18 = builder3.setTimeZone(timeZone13);
        java.util.Calendar calendar19 = builder18.build();
        int int20 = calendar19.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+14:35");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT+14:35" + "'", str14, "GMT+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-875) + "'", int16 == (-875));
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-875) + "'", int17 == (-875));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-60436977490298,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=54,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=41,SECOND=49,MILLISECOND=701,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test15756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15756");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime30 = property29.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test15757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15757");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(315532800004L, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = period11.isSupported(durationFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight6.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus(10L);
        boolean boolean17 = instant1.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withWeekyear(0);
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test15758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15758");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(59);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withChronology(chronology22);
        int int24 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) period40, chronology41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = duration64.plus((long) 'u');
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration66, (-1));
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = dateTime71.plusMonths(999);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 1, periodType79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateTime77, periodType79);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = interval82.withChronology(chronology83);
        org.joda.time.Interval interval85 = interval43.overlap((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Chronology chronology86 = interval82.getChronology();
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(chronology86);
        org.joda.time.MutableDateTime mutableDateTime88 = mutableDateTime11.toMutableDateTime(chronology86);
        org.joda.time.DurationField durationField89 = chronology86.years();
        org.joda.time.DateTimeField dateTimeField90 = chronology86.monthOfYear();
        org.joda.time.DurationField durationField91 = chronology86.weeks();
        org.joda.time.YearMonthDay yearMonthDay92 = new org.joda.time.YearMonthDay(chronology86);
        org.joda.time.DateMidnight dateMidnight93 = yearMonthDay92.toDateMidnight();
        org.joda.time.YearMonthDay.Property property94 = yearMonthDay92.year();
        int int95 = property94.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNull(interval85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-292275054) + "'", int95 == (-292275054));
    }

    @Test
    public void test15759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15759");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMinimumValue();
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder28.clearExtensions();
        java.util.Locale locale31 = builder30.build();
        java.util.Locale.Builder builder33 = builder30.removeUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder35 = builder33.setLanguageTag("cinese");
        java.util.Locale locale36 = builder35.build();
        int int37 = property26.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "cinese");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test15760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15760");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = period14.toPeriod();
        org.joda.time.Weeks weeks16 = period14.toStandardWeeks();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = period20.normalizedStandard(periodType21);
        org.joda.time.Period period24 = period22.minusDays(0);
        org.joda.time.Period period25 = period22.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.Period period27 = period14.withFields((org.joda.time.ReadablePeriod) period25);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test15761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15761");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(1);
        int int13 = yearMonthDay12.getDayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period14, (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone43);
        mutableDateTime44.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        mutableDateTime48.setDayOfYear(1);
        mutableDateTime48.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime48.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateTime41.withZoneRetainFields(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone53);
        org.joda.time.Interval interval57 = yearMonthDay26.toInterval(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay12.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) ' ', dateTimeZone53);
        int int60 = localDate59.getDayOfYear();
        org.joda.time.LocalDate localDate62 = localDate59.withWeekyear(50);
        org.joda.time.Chronology chronology63 = localDate59.getChronology();
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test15762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15762");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        java.lang.Integer int7 = dateTimeFormatter5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(86400000L, chronology15);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        boolean boolean20 = durationFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant27 = org.joda.time.Instant.parse("Chinesisch (Taiwan)", dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test15763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15763");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(10);
        java.util.Date date10 = localDate9.toDate();
        boolean boolean11 = localDate6.equals((java.lang.Object) localDate9);
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfEra();
        int int13 = localDate6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (short) 1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 51, dateTimeZone21);
        boolean boolean26 = dateTimeZone21.isStandardOffset((long) (short) 100);
        org.joda.time.DateTime dateTime27 = localDate6.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setDayOfYear(1);
        int int32 = mutableDateTime29.getSecondOfMinute();
        mutableDateTime29.addYears((int) 'a');
        mutableDateTime29.addMinutes(12);
        mutableDateTime29.setMillis(951177600000L);
        mutableDateTime29.setMinuteOfDay(25);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime29.getZone();
        boolean boolean43 = dateTimeZone41.isStandardOffset(227228371200100L);
        long long45 = dateTimeZone21.getMillisKeepLocal(dateTimeZone41, 1645514676997L);
        int int47 = dateTimeZone41.getOffsetFromLocal((long) (short) 1);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 22 00:00:00 GMT+14:35 2032");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514676997L + "'", long45 == 1645514676997L);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52500000 + "'", int47 == 52500000);
    }

    @Test
    public void test15764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15764");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.DateTime dateTime4 = localDateTime1.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusSeconds(973);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.year();
        int int9 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 14:51:13 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test15765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15765");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter66.withPivotYear(99);
        java.io.Writer writer69 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter66.printTo(writer69, (-2012L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514759048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=25,SECOND=58,MILLISECOND=173,ZONE_OFFSET=-875,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
    }

    @Test
    public void test15766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15766");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        boolean boolean6 = dateMidnight4.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setDayOfYear(1);
        int int11 = mutableDateTime8.getSecondOfMinute();
        mutableDateTime8.addYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        mutableDateTime15.setDayOfYear(1);
        mutableDateTime15.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime15.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean26 = dateTimeField24.isLeap((long) 1439);
        boolean boolean28 = dateTimeField24.isLeap(0L);
        long long30 = dateTimeField24.roundFloor((long) (byte) 1);
        int int32 = dateTimeField24.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField24.getType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime21.property(dateTimeFieldType33);
        mutableDateTime8.set(dateTimeFieldType33, 99);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        long long44 = duration43.getStandardMinutes();
        org.joda.time.Duration duration45 = duration43.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period53 = period51.withYears(0);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Days days55 = period53.toStandardDays();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight4.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 2000);
        int int58 = period53.getHours();
        int int59 = period53.getYears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType61 = period53.getFieldType(25847000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-52500000L) + "'", long30 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test15767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15767");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration13 = duration10.toDuration();
        org.joda.time.Duration duration15 = duration10.plus((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        int int24 = mutableDateTime17.getYearOfEra();
        org.joda.time.Interval interval25 = duration10.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration33.plus((long) 'u');
        org.joda.time.Instant instant37 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) 'x');
        boolean boolean38 = mutableDateTime17.isEqual((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant40 = instant26.minus(69509754028800000L);
        org.joda.time.MutableDateTime mutableDateTime41 = instant40.toMutableDateTime();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test15768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15768");
        java.util.Date date3 = new java.util.Date(56, 54, 2000);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Dec 21 00:00:00 GMT+14:35 1965");
    }

    @Test
    public void test15769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15769");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.plus(0L);
        int int17 = dateTime16.getMinuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withChronology(chronology28);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime23.toMutableDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.minuteOfDay();
        mutableDateTime32.setDate(83459999L);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        long long38 = mutableDateTime37.getMillis();
        boolean boolean39 = dateTime16.equals((java.lang.Object) mutableDateTime37);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 874 + "'", int17 == 874);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86399999L + "'", long38 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15770");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight0.minusDays(51);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight30 = property28.setCopy(3);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test15771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15771");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(315532800004L);
        mutableDateTime11.setYear(43);
        mutableDateTime11.setMillis(0L);
        mutableDateTime11.setMillisOfDay(32770);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        int int20 = mutableDateTime19.getHourOfDay();
        long long21 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 60 + "'", int7 == 60);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-9L) + "'", long21 == (-9L));
    }

    @Test
    public void test15772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15772");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setDayOfYear(1);
        mutableDateTime2.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime2.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) (short) 1);
        int int11 = dateTimeZone7.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        long long19 = dateTimeField14.set((long) ' ', "22", locale18);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) "22");
        java.lang.String str22 = dateTimeZone7.getShortName((-31536000001L));
        long long26 = dateTimeZone7.convertLocalToUTC(100L, true, (long) 22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 2000, dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay29 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.minuteOfHour();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        int int33 = property30.getMaximumTextLength(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getISO3Language();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((int) ' ');
        java.util.Locale locale43 = java.util.Locale.ITALY;
        int int44 = property40.getMaximumShortTextLength(locale43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT0S");
        int int47 = property40.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        java.lang.String str50 = locale35.getExtension('u');
        java.lang.String str51 = locale34.getDisplayVariant(locale35);
        int int52 = property30.getMaximumShortTextLength(locale35);
        java.lang.String str53 = locale35.getVariant();
        java.util.Calendar calendar54 = dateTime27.toCalendar(locale35);
        org.joda.time.DateTime dateTime56 = dateTime27.plusSeconds(26458);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52500000 + "'", int11 == 52500000);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61472908799968L) + "'", long19 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+14:35" + "'", str22, "+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-52499900L) + "'", long26 == (-52499900L));
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=2000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=52500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=2,MILLISECOND=0,ZONE_OFFSET=52500000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test15773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15773");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        long long26 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight28 = property2.addToCopy((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight30 = property2.addToCopy(0);
        int int31 = dateMidnight30.getHourOfDay();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateMidnight30.toString("2022", locale33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight30.withYearOfCentury(13);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withYear(4218);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str7, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test15774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15774");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 11, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtCurrentTime();
        int[] intArray19 = yearMonthDay17.getValues();
        int int20 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate7, intArray19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime35.setDayOfYear(1);
        mutableDateTime35.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime35.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getShortName((long) ' ');
        mutableDateTime22.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localDate7.toDateTimeAtStartOfDay(dateTimeZone40);
        int int46 = localDate7.getYear();
        org.joda.time.LocalDate localDate48 = localDate7.withCenturyOfEra(72);
        org.joda.time.LocalDate localDate50 = localDate7.withWeekyear(2027);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2053, 4, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+14:35" + "'", str43, "+14:35");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test15775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withChronology(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((long) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        org.joda.time.DateTime dateTime22 = property14.roundFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withChronology(chronology33);
        int int35 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime37 = dateTime28.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean39 = dateTime28.isSupported(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType38.getRangeDurationType();
        boolean boolean41 = dateTime22.isSupported(dateTimeFieldType38);
        java.lang.String str42 = dateTimeFieldType38.getName();
        int int43 = dateTime10.get(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        mutableDateTime45.setRounding(dateTimeField50);
        int int53 = dateTimeField50.getLeapAmount(2678400000L);
        int int54 = dateTime10.get(dateTimeField50);
        org.joda.time.DurationField durationField55 = dateTimeField50.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "dayOfYear" + "'", str42, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1971 + "'", int54 == 1971);
        org.junit.Assert.assertNull(durationField55);
    }

    @Test
    public void test15776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15776");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test15777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15777");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-60967987200000L));
        org.joda.time.Instant instant3 = instant1.minus(39L);
        long long4 = instant1.getMillis();
        org.joda.time.Chronology chronology5 = instant1.getChronology();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60967987200000L) + "'", long4 == (-60967987200000L));
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test15778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15778");
        org.joda.time.Period period1 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period1.minusMillis(15);
        org.joda.time.Period period6 = period1.minusHours(0);
        org.joda.time.Period period8 = period1.minusMonths(26429889);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test15779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15779");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1972);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours((int) (byte) -1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test15780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15780");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate.Property property6 = localDate3.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = property6.setCopy(985);
        org.joda.time.LocalDate localDate10 = property6.withMinimumValue();
        java.util.Locale locale14 = new java.util.Locale("1970-02-01T00:00:00.100", "DurationField[weekyears]");
        java.lang.String str15 = localDate10.toString("+00:00:00.011", locale14);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals(locale14.toString(), "1970-02-01t00:00:00.100_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.011" + "'", str15, "+00:00:00.011");
    }

    @Test
    public void test15781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        gregorianCalendar30.add(3, (int) (byte) 0);
        int int38 = gregorianCalendar30.getWeekYear();
        gregorianCalendar30.roll(11, false);
        int int43 = gregorianCalendar30.getGreatestMinimum(0);
        boolean boolean44 = gregorianCalendar30.isLenient();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test15782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addWrapFieldToCopy(5);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.addWrapFieldToCopy((int) '4');
        java.lang.String str48 = yearMonthDay47.toString();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay47.plusDays(116);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay50.withPeriodAdded(readablePeriod51, 672);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(86400000L, chronology55);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = property58.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra(41);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean63 = localDateTime59.isSupported(dateTimeFieldType62);
        java.lang.String str64 = dateTimeFieldType62.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay53.withField(dateTimeFieldType62, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2053-08-01" + "'", str48, "2053-08-01");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "clockhourOfHalfday" + "'", str64, "clockhourOfHalfday");
    }

    @Test
    public void test15783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        int int36 = yearMonthDay35.size();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        int int41 = period40.getWeeks();
        org.joda.time.Period period43 = period40.plusMillis((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = duration53.plus((long) 'u');
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration55, (-1));
        org.joda.time.Duration duration59 = duration55.withMillis((-28857600001L));
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone60);
        mutableDateTime61.setDayOfYear(1);
        mutableDateTime61.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime61.getZone();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        int int68 = mutableDateTime67.getDayOfYear();
        mutableDateTime67.setTime((long) 32);
        org.joda.time.Period period71 = duration59.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.Hours hours72 = duration59.toStandardHours();
        boolean boolean73 = yearMonthDay44.equals((java.lang.Object) hours72);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay44.minusYears(439);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay44.dayOfMonth();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53 + "'", int68 == 53);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(hours72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test15784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration14.plus((long) 'u');
        org.joda.time.Period period17 = duration16.toPeriod();
        boolean boolean18 = duration7.isEqual((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType27.isSupported(durationFieldType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration25, periodType27);
        org.joda.time.Duration duration32 = duration7.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withHoursRemoved();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime(dateTimeZone40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        int int43 = dateTime41.getDayOfWeek();
        org.joda.time.DateTime.Property property44 = dateTime41.secondOfDay();
        org.joda.time.Chronology chronology45 = dateTime41.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.hours();
        org.joda.time.Period period47 = duration7.toPeriod(periodType33, chronology45);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.TimeOfDay timeOfDay49 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, chronology45);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.DurationField durationField51 = chronology45.years();
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str39, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test15785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration31.plus((long) 'u');
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration33, (-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime38.plusMonths(999);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 1, periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) dateTime44, periodType46);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = interval49.withChronology(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.dayOfYear();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.minusDays(0);
        org.joda.time.Interval interval57 = dateMidnight56.toInterval();
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.dayOfYear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.minusDays(0);
        org.joda.time.Interval interval63 = dateMidnight62.toInterval();
        org.joda.time.Interval interval64 = interval57.gap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Interval interval65 = interval51.gap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = dateTime68.toString(dateTimeFormatter69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.toDateTime(dateTimeZone71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTime.Property property89 = dateTime72.year();
        org.joda.time.Interval interval90 = interval57.withStart((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime91 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean93 = dateTime72.isBefore((long) (short) -1);
        org.joda.time.DateTime dateTime95 = dateTime72.withMillis(26432117L);
        org.joda.time.DateTime dateTime97 = dateTime95.minusMillis(0);
        org.joda.time.YearMonthDay yearMonthDay98 = dateTime95.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNull(interval64);
        org.junit.Assert.assertNull(interval65);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str70, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(yearMonthDay98);
    }

    @Test
    public void test15786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15786");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.plusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = yearMonthDay11.getFieldType(441952);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 441952");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test15787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.era();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.PeriodType periodType32 = periodType30.withWeeksRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.Period period34 = period33.toPeriod();
        org.joda.time.Weeks weeks35 = period34.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str37 = durationFieldType36.toString();
        boolean boolean38 = weeks35.isSupported(durationFieldType36);
        java.lang.String str39 = durationFieldType36.getName();
        mutableDateTime1.add(durationFieldType36, (int) 'u');
        mutableDateTime1.setDayOfMonth(12);
        java.util.Date date49 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int50 = date49.getYear();
        org.joda.time.YearMonthDay yearMonthDay51 = org.joda.time.YearMonthDay.fromDateFields(date49);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTime dateTime55 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone54);
        mutableDateTime1.setZone(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "seconds" + "'", str37, "seconds");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "seconds" + "'", str39, "seconds");
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Thu Mar 24 03:59:00 GMT+14:35 1960");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 60 + "'", int50 == 60);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test15788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15788");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        java.lang.String str6 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "French" + "'", str5, "French");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FR" + "'", str6, "FR");
    }

    @Test
    public void test15789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15789");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        java.lang.String str29 = dateTimeField28.getName();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfDay" + "'", str29, "millisOfDay");
    }

    @Test
    public void test15790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15790");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology5 = timeOfDay1.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1966, chronology5);
        java.lang.Object obj9 = null;
        boolean boolean10 = localTime8.equals(obj9);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15791");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        mutableDateTime6.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        mutableDateTime6.setRounding(dateTimeField11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfEvenCopy();
        int int20 = localDateTime19.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusWeeks((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime19, 0, locale33);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addToCopy((int) ' ');
        java.util.Locale locale45 = java.util.Locale.ITALY;
        int int46 = property42.getMaximumShortTextLength(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT0S");
        int int49 = property42.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getISO3Language();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((int) ' ');
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = property56.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("PT0S");
        int int63 = property56.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale51.getDisplayVariant(locale62);
        java.lang.String str65 = locale48.getDisplayLanguage(locale51);
        java.lang.String str66 = locale33.getDisplayLanguage(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter3.withLocale(locale51);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = locale68.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter3.withLocale(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26367315);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter73.withPivotYear((java.lang.Integer) 439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.parse("year", dateTimeFormatter75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514759509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=25,SECOND=58,MILLISECOND=634,ZONE_OFFSET=-875,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deu" + "'", str52, "deu");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test15792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15792");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        mutableDateTime17.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        int int26 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(86400000L, chronology28);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        org.joda.time.DateTime dateTime33 = mutableDateTime25.toDateTime(chronology30);
        mutableDateTime25.add((-61472908799968L));
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant39, readableInstant40, periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        boolean boolean44 = period42.isSupported(durationFieldType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight37.plus((org.joda.time.ReadablePeriod) period42);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.year();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight51 = property50.withMaximumValue();
        boolean boolean52 = mutableDateTime25.isAfter((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime25.add(readableDuration53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap((long) 1439);
        boolean boolean14 = dateTimeField10.isLeap(0L);
        long long16 = dateTimeField10.roundFloor((long) (byte) 1);
        int int18 = dateTimeField10.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime22 = property20.set(28);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-52500000L) + "'", long16 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test15794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15794");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(0);
        int int11 = localDateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test15795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15795");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) duration6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(6);
        org.joda.time.DateTime dateTime20 = dateTime16.minusSeconds(3);
        org.joda.time.Period period21 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight23.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight34 = property33.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight35 = property33.roundFloorCopy();
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int37 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType40);
        mutablePeriod41.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay36.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        mutablePeriod41.clear();
        org.joda.time.PeriodType periodType46 = mutablePeriod41.getPeriodType();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateMidnight35, periodType46);
        boolean boolean48 = dateMidnight35.isAfterNow();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight35.withYear(26357397);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(13148730000L);
        mutablePeriod52.addSeconds(86399);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight50, (org.joda.time.ReadablePeriod) mutablePeriod52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str14, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test15796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15796");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(26661213, 32, 967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15797");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths(999);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        long long33 = duration32.getStandardMinutes();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.addYears(6);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime40 = property37.set(52499999);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test15798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15798");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        gregorianCalendar30.add(3, (int) (byte) 0);
        int int38 = gregorianCalendar30.getWeekYear();
        int int39 = gregorianCalendar30.getFirstDayOfWeek();
        gregorianCalendar30.set(2030, 26357397, 17, 122, 625);
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period49 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period51 = period49.plusSeconds((int) (short) 100);
        org.joda.time.Period period52 = period47.withFields((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period54 = period47.minusHours(999);
        boolean boolean55 = gregorianCalendar30.after((java.lang.Object) period54);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = gregorianCalendar30.get(973100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 973100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15799");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfDay(2152);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withYear(227);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15800");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("cinese");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguage("millisOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "cinese");
    }

    @Test
    public void test15801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15801");
        java.util.Locale locale1 = new java.util.Locale("22 f\351vr. 2022 00:00:00");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusYears(1);
        int int15 = yearMonthDay14.getDayOfMonth();
        java.lang.String str16 = yearMonthDay14.toString();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay14.monthOfYear();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        int int19 = property17.getMaximumTextLength(locale18);
        org.joda.time.YearMonthDay yearMonthDay20 = property17.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        boolean boolean25 = dateTimeField23.isLeap((long) 1439);
        boolean boolean27 = dateTimeField23.isLeap(0L);
        long long29 = dateTimeField23.roundFloor((long) (byte) 1);
        int int31 = dateTimeField23.get((long) 5);
        long long34 = dateTimeField23.add((long) 4, (int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.lang.String str51 = locale36.getExtension('u');
        java.lang.String str52 = dateTimeField23.getAsText(10L, locale36);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getISO3Language();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((int) ' ');
        java.util.Locale locale62 = java.util.Locale.ITALY;
        int int63 = property59.getMaximumShortTextLength(locale62);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("PT0S");
        int int66 = property59.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale54.getDisplayVariant(locale65);
        java.lang.String str68 = locale65.getVariant();
        java.lang.String str70 = locale65.getExtension('a');
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale65.getDisplayName(locale71);
        java.lang.String str73 = dateTimeField23.getAsText(14, locale71);
        java.lang.String str74 = property17.getAsShortText(locale71);
        java.lang.String str75 = locale71.toLanguageTag();
        java.lang.String str76 = locale71.getDisplayCountry();
        java.lang.String str77 = locale1.getDisplayScript(locale71);
        org.junit.Assert.assertEquals(locale1.toString(), "22 f\351vr. 2022 00:00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "22 f\351vr. 2022 00:00:00" + "'", str2, "22 f\351vr. 2022 00:00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2052-04-01" + "'", str16, "2052-04-01");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-52500000L) + "'", long29 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 315532800004L + "'", long34 == 315532800004L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970" + "'", str52, "1970");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "14" + "'", str73, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Apr" + "'", str74, "Apr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "en-CA" + "'", str75, "en-CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Canada" + "'", str76, "Canada");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test15802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15802");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((-18L), dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test15803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15803");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime7 = localTime5.withMinuteOfHour((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, periodType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, periodType32);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withZone(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        int int51 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateTime dateTime52 = dateMidnight50.toDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean57 = dateTime55.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight50.withFieldAdded(durationFieldType58, 8);
        int int61 = periodType32.indexOf(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean63 = periodType32.isSupported(durationFieldType62);
        boolean boolean64 = localTime7.isSupported(durationFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        long long70 = dateTimeField67.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField71 = dateTimeField67.getRangeDurationField();
        int int74 = dateTimeField67.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.Locale locale79 = locale78.stripExtensions();
        java.lang.String str80 = dateTimeField67.getAsShortText((org.joda.time.ReadablePartial) localTime76, (int) 'a', locale79);
        org.joda.time.LocalTime localTime81 = localTime7.withFields((org.joda.time.ReadablePartial) localTime76);
        org.joda.time.LocalTime localTime83 = localTime81.withMillisOfSecond(72);
        int int84 = localTime83.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str12, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-31536000001L) + "'", long70 == (-31536000001L));
        org.junit.Assert.assertNull(durationField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "97" + "'", str80, "97");
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 86399072 + "'", int84 == 86399072);
    }

    @Test
    public void test15804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15804");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight3 = property2.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime.Property property28 = dateTime11.year();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight.Property property30 = dateMidnight4.yearOfCentury();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        long long38 = duration37.getStandardMinutes();
        org.joda.time.Duration duration39 = duration37.toDuration();
        org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) duration37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight3.withDurationAdded((org.joda.time.ReadableDuration) duration37, 292278993);
        int int44 = dateMidnight43.getSecondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str9, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test15805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15805");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        org.joda.time.Period period9 = period7.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.forFields(durationFieldTypeArray10);
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        java.lang.String str13 = periodType11.toString();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 25729000, 227228371200100L, periodType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = periodType11.getFieldType(262097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 262097");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Standard]" + "'", str13, "PeriodType[Standard]");
    }

    @Test
    public void test15806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        mutableDateTime1.add(durationFieldType12, 8);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        java.lang.String str22 = period19.toString();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant23, readableInstant24, periodType25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = period26.normalizedStandard(periodType27);
        org.joda.time.Period period29 = period19.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) period26);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime.Property property55 = dateTime38.year();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateMidnight.Property property57 = dateMidnight31.yearOfCentury();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        long long65 = duration64.getStandardMinutes();
        org.joda.time.Duration duration66 = duration64.toDuration();
        org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) duration64);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration69 = period26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period71 = period26.plusMonths(1);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period71);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime74 = property73.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime75 = property73.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime76 = property73.roundHalfEven();
        int int77 = mutableDateTime76.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateMidnight31);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str36, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2030 + "'", int77 == 2030);
    }

    @Test
    public void test15807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15807");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1645514551904L);
    }

    @Test
    public void test15808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property39 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period44 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period46 = period44.plusSeconds((int) (short) 100);
        org.joda.time.Period period47 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Days days48 = period42.toStandardDays();
        org.joda.time.Period period50 = period42.plusMillis(86399);
        org.joda.time.DateTime dateTime52 = dateTime40.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test15809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15809");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period3 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period5 = period3.plusSeconds((int) (short) 100);
        org.joda.time.Period period6 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.MutablePeriod mutablePeriod7 = period3.toMutablePeriod();
        mutablePeriod7.addHours(624);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval16 = interval15.toInterval();
        long long17 = interval15.getEndMillis();
        org.joda.time.Interval interval19 = interval15.withStartMillis((long) 45);
        org.joda.time.Period period20 = interval15.toPeriod();
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval15);
        boolean boolean23 = interval15.isAfter(213018065900L);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 33900000L + "'", long17 == 33900000L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test15810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 1, periodType60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration56, periodType60);
        mutablePeriod62.setDays((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay35.minus((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay65.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay68 = property66.addToCopy(2023);
        org.joda.time.DateTimeField dateTimeField69 = property66.getField();
        long long71 = dateTimeField69.remainder(1645514360663L);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str40, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1840760663L + "'", long71 == 1840760663L);
    }

    @Test
    public void test15811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        java.util.TimeZone timeZone34 = gregorianCalendar30.getTimeZone();
        int int35 = gregorianCalendar30.getWeeksInWeekYear();
        java.util.Date date36 = gregorianCalendar30.getTime();
        java.lang.String str37 = date36.toGMTString();
        java.lang.String str38 = date36.toGMTString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 53 + "'", int35 == 53);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 GMT+14:35 1969");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str37, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str38, "31 Dec 1969 23:59:59 GMT");
    }

    @Test
    public void test15812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15812");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        java.lang.Object obj8 = null;
        boolean boolean9 = localTime7.equals(obj8);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = periodType28.isSupported(durationFieldType29);
        org.joda.time.DateTime dateTime32 = dateTime27.withFieldAdded(durationFieldType29, 2);
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.parse("23");
        org.joda.time.DateTimeField dateTimeField36 = mutableDateTime35.getRoundingField();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = period40.normalizedStandard(periodType41);
        org.joda.time.Period period44 = period42.minusDays(0);
        org.joda.time.Duration duration45 = period42.toStandardDuration();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.Duration duration48 = duration45.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period51 = period49.plusMillis((-292275054));
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay33.plus((org.joda.time.ReadablePeriod) period49);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNull(dateTimeField36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
    }

    @Test
    public void test15814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15814");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight29 = property26.roundCeilingCopy();
        int int30 = dateMidnight29.getMinuteOfDay();
        org.joda.time.LocalDate localDate31 = dateMidnight29.toLocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test15815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15815");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.millisOfSecond();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean19 = dateTimeField17.isLeap((long) 1439);
        boolean boolean21 = dateTimeField17.isLeap(0L);
        long long23 = dateTimeField17.roundFloor((long) (byte) 1);
        int int25 = dateTimeField17.get((long) 5);
        long long28 = dateTimeField17.add((long) 4, (int) (byte) 10);
        long long30 = dateTimeField17.roundHalfFloor((long) 99);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = dateTimeField17.getAsText(2022, locale32);
        java.lang.String str36 = property13.getAsShortText(locale32);
        java.lang.String str37 = localDateTime4.toString("1968-12-31", locale32);
        java.util.Locale.setDefault(locale32);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-52500000L) + "'", long23 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 315532800004L + "'", long28 == 315532800004L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-52500000L) + "'", long30 == (-52500000L));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u53f0\u6e7e" + "'", str34, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100" + "'", str36, "100");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1968-12-31" + "'", str37, "1968-12-31");
    }

    @Test
    public void test15816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15816");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = dateMidnight17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.withFieldAdded(durationFieldType25, 8);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        mutableDateTime30.setMillisOfSecond((int) 'u');
        int int35 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.year();
        org.joda.time.Interval interval37 = duration2.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime30);
        long long38 = interval37.getEndMillis();
        boolean boolean39 = interval37.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1641021960117L + "'", long38 == 1641021960117L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test15817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15817");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(245);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = property10.addToCopy(227);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15818");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(100835509000L);
        java.lang.Object obj2 = null;
        boolean boolean3 = localTime1.equals(obj2);
        org.joda.time.Period period5 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period7 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period9 = period7.plusSeconds((int) (short) 100);
        org.joda.time.Period period10 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalTime localTime11 = localTime1.plus((org.joda.time.ReadablePeriod) period10);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test15819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15819");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 1, periodType29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, periodType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime(dateTimeZone37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        int int40 = dateTime38.getDayOfWeek();
        org.joda.time.DateTime.Property property41 = dateTime38.secondOfDay();
        org.joda.time.Chronology chronology42 = dateTime38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType29, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(41, 317, 32796, 26627387, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str9, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType29);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str36, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test15820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15820");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusYears(1);
        int int15 = yearMonthDay14.getDayOfMonth();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        long long37 = duration36.getStandardMinutes();
        org.joda.time.Duration duration38 = duration36.toDuration();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime46.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        mutableDateTime50.setDayOfYear(1);
        mutableDateTime50.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime50.getZone();
        mutableDateTime46.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime43.withZoneRetainFields(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone55);
        org.joda.time.Interval interval59 = yearMonthDay28.toInterval(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay14.toDateMidnight(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(45, 100626, 3975, dateTimeZone55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100626 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test15821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15821");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 1971);
    }

    @Test
    public void test15822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15822");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        int int4 = localTime2.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime7 = localTime2.withPeriodAdded(readablePeriod5, 83459999);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime11.setDayOfYear(1);
        mutableDateTime11.setMillisOfSecond((int) 'u');
        int int16 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.year();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZone(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        boolean boolean38 = period36.isSupported(durationFieldType37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight31.plus((org.joda.time.ReadablePeriod) period36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime25.toDateTime(dateTimeZone41);
        long long46 = dateTimeZone41.convertLocalToUTC((long) 15, false);
        mutableDateTime19.setZoneRetainFields(dateTimeZone41);
        org.joda.time.Chronology chronology48 = chronology8.withZone(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(220898664000L, chronology48);
        int int50 = timeOfDay49.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        java.util.Date date54 = localDateTime52.toDate();
        org.joda.time.DateTime dateTime55 = localDateTime52.toDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.minusMonths((int) (short) 100);
        int[] intArray58 = localDateTime52.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        boolean boolean63 = dateTimeField61.isLeap((long) 1439);
        boolean boolean65 = dateTimeField61.isLeap(0L);
        long long67 = dateTimeField61.roundFloor((long) (byte) 1);
        int int69 = dateTimeField61.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = dateTimeField61.getType();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime52.withField(dateTimeFieldType70, 59);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = timeOfDay49.get(dateTimeFieldType70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-52499985L) + "'", long46 == (-52499985L));
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 52500100]");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-52500000L) + "'", long67 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test15823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        long long3 = dateTimeZone1.convertUTCToLocal((long) 52);
        java.lang.String str5 = dateTimeZone1.getShortName(1645514379483L);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599948L) + "'", long3 == (-3599948L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test15824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime10.setRounding(dateTimeField15);
        int int17 = mutableDateTime10.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime10.add(readablePeriod18);
        mutableDateTime10.setDayOfWeek(4);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime10.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusYears(1);
        int int35 = yearMonthDay34.getMonthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar66 = dateTime61.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone72);
        mutableDateTime73.setDayOfYear(1);
        mutableDateTime73.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone78 = mutableDateTime73.getZone();
        boolean boolean80 = dateTimeZone78.isStandardOffset((long) (short) 1);
        int int82 = dateTimeZone78.getOffsetFromLocal((long) 83459999);
        org.joda.time.Interval interval83 = yearMonthDay69.toInterval(dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight84 = yearMonthDay34.toDateMidnight(dateTimeZone78);
        mutableDateTime10.setZone(dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime86 = mutableDateTime1.toMutableDateTime(dateTimeZone78);
        int int87 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str40, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str63, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(gregorianCalendar66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52500000 + "'", int82 == 52500000);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(mutableDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 22 + "'", int87 == 22);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test15825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15825");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        int int35 = mutableDateTime34.getCenturyOfEra();
        boolean boolean36 = mutableDateTime34.isBeforeNow();
        mutableDateTime34.addMinutes((-52));
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.weekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test15826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15826");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        java.lang.String str44 = property43.toString();
        org.joda.time.YearMonthDay yearMonthDay46 = property43.addToCopy(2152);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay49 = property43.setCopy("1969-12-31");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-31\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[monthOfYear]" + "'", str44, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test15827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15827");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long13 = dateTimeField10.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField14 = dateTimeField10.getRangeDurationField();
        int int17 = dateTimeField10.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime19, (int) 'a', locale22);
        org.joda.time.LocalTime localTime24 = property4.setCopy("39", locale22);
        org.joda.time.LocalTime localTime26 = localTime24.withMinuteOfHour(40);
        org.joda.time.LocalTime localTime28 = localTime26.withMillisOfDay(75);
        int int29 = localTime26.getSecondOfMinute();
        org.joda.time.LocalTime localTime31 = localTime26.plusSeconds(5043);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000001L) + "'", long13 == (-31536000001L));
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 39 + "'", int29 == 39);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test15828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15828");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(32770);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.minuteOfHour();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        int int12 = property9.getMaximumTextLength(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getISO3Language();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((int) ' ');
        java.util.Locale locale22 = java.util.Locale.ITALY;
        int int23 = property19.getMaximumShortTextLength(locale22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("PT0S");
        int int26 = property19.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale14.getDisplayVariant(locale25);
        java.lang.String str29 = locale14.getExtension('u');
        java.lang.String str30 = locale13.getDisplayVariant(locale14);
        int int31 = property9.getMaximumShortTextLength(locale14);
        java.lang.String str32 = locale14.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter6.withLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter6.withDefaultYear(2021);
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withPivotYear((-12));
        java.lang.Appendable appendable41 = null;
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime.Property property66 = dateTime49.year();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight.Property property68 = dateMidnight42.yearOfCentury();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        long long76 = duration75.getStandardMinutes();
        org.joda.time.Duration duration77 = duration75.toDuration();
        org.joda.time.Period period78 = new org.joda.time.Period((java.lang.Object) duration75);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight42.plus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval80 = dateMidnight79.toInterval();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight79.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight79.minusYears(6);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable41, (org.joda.time.ReadableInstant) dateMidnight79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "deu" + "'", str15, "deu");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deu" + "'", str32, "deu");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str47, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
    }

    @Test
    public void test15829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15829");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj0, chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear(9);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 1, periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        boolean boolean24 = periodType21.isSupported(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, periodType21, chronology26);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        int int29 = localDateTime28.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26760189 + "'", int29 == 26760189);
    }

    @Test
    public void test15830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15830");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        date5.setDate(10);
        date5.setDate(99);
        java.util.Date date13 = new java.util.Date(59, 100, 1969);
        boolean boolean14 = date5.before(date13);
        java.lang.String str15 = date5.toGMTString();
        date5.setDate(61);
        date5.setDate(999);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 24 03:59:00 GMT+14:35 1963");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 19 00:00:00 GMT+14:35 1972");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7 Jun 1960 03:59:00 GMT" + "'", str15, "7 Jun 1960 03:59:00 GMT");
    }

    @Test
    public void test15831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15831");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        mutablePeriod1.setPeriod(2, (int) (byte) 100, 100, 2, 0, 4, 999, (int) (short) 1);
        mutablePeriod1.addMonths((int) (byte) 0);
        int int15 = mutablePeriod1.size();
        mutablePeriod1.setDays(0);
        org.joda.time.PeriodType periodType18 = mutablePeriod1.getPeriodType();
        mutablePeriod1.addMillis(475);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test15832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15832");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology5 = timeOfDay1.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DurationField durationField7 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = chronology5.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(315532800004L, chronology9);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test15833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15833");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(734642L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration18.plus((long) 'u');
        org.joda.time.Period period21 = duration20.toPeriod();
        boolean boolean22 = duration11.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 1, periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        boolean boolean34 = periodType31.isSupported(durationFieldType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration29, periodType31);
        org.joda.time.Duration duration36 = duration11.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withHoursRemoved();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime41.toString(dateTimeFormatter42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime(dateTimeZone44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        int int47 = dateTime45.getDayOfWeek();
        org.joda.time.DateTime.Property property48 = dateTime45.secondOfDay();
        org.joda.time.Chronology chronology49 = dateTime45.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.Period period51 = duration11.toPeriod(periodType37, chronology49);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 31, (long) 99, chronology49);
        mutablePeriod1.setPeriod(1645517917833L, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str43, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test15834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15834");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration11 = duration9.plus((long) 'u');
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration11, (-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime16.plusMonths(999);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, (org.joda.time.ReadableInstant) dateTime22, periodType24);
        org.joda.time.Period period28 = period26.minusDays(12);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.Period period32 = period28.normalizedStandard(periodType30);
        org.joda.time.Period period33 = period32.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 51);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.plusYears(60);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.plusYears(171);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
    }

    @Test
    public void test15835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15835");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withFieldAdded(durationFieldType22, 8);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfMonth();
        int int26 = dateMidnight24.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test15836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15836");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusYears(1969);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = periodType11.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86400000L, chronology16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        boolean boolean21 = durationFieldType13.isSupported(chronology18);
        boolean boolean22 = localDateTime6.isSupported(durationFieldType13);
        boolean boolean23 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        long long25 = dateTimeZone1.convertUTCToLocal((long) 26583579);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52500010L + "'", long3 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 79083579L + "'", long25 == 79083579L);
    }

    @Test
    public void test15837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15837");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(0);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test15838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15838");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(86400000L, chronology3);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period21, chronology22);
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePeriod) period21, (-1L));
        org.joda.time.DateTimeField dateTimeField26 = chronology5.monthOfYear();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 99, (long) (byte) 1, chronology5);
        org.joda.time.DateTimeField dateTimeField28 = chronology5.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeField28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJYearOfEraDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test15839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15839");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(16);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds(1);
        int int29 = dateTime26.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime26.getZone();
        org.joda.time.DateTime.Property property31 = dateTime26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399984 + "'", int29 == 86399984);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test15840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setMillis(536457600119L);
        mutableDateTime1.setSecondOfDay(2152);
        int int13 = mutableDateTime1.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 87 + "'", int13 == 87);
    }

    @Test
    public void test15841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15841");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime.Property property23 = dateTime6.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 1, periodType50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, periodType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        int int61 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime.Property property62 = dateTime59.secondOfDay();
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType50, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime24.withChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.secondOfDay();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(chronology63);
        org.joda.time.DateTimeField dateTimeField69 = chronology63.minuteOfDay();
        long long72 = dateTimeField69.set((-472953555296L), (int) '#');
        int int75 = dateTimeField69.getDifference((-36000000L), (long) 26277594);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str30, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType50);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str57, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-473003955296L) + "'", long72 == (-473003955296L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1037) + "'", int75 == (-1037));
    }

    @Test
    public void test15842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15842");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean15 = dateTimeField13.isLeap((long) 1439);
        long long17 = dateTimeField13.roundFloor(0L);
        boolean boolean19 = dateTimeField13.isLeap((long) 7);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str38 = nameProvider21.getShortName(locale22, "yearOfCentury", "PT1.969S");
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str42 = nameProvider21.getName(locale39, "PT0S", "hi!");
        java.lang.String str43 = dateTimeField13.getAsText((long) 83459999, locale39);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = locale39.getDisplayName(locale44);
        int int46 = property8.getMaximumShortTextLength(locale39);
        org.joda.time.LocalTime localTime48 = property8.addNoWrapToCopy(206);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfDay();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-52500000L) + "'", long17 == (-52500000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test15843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15843");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        long long12 = duration11.getStandardMinutes();
        org.joda.time.Duration duration13 = duration11.toDuration();
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime17.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        long long33 = duration32.getStandardMinutes();
        org.joda.time.Duration duration34 = duration32.toDuration();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        mutableDateTime42.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime46.setDayOfYear(1);
        mutableDateTime46.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime46.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime39.withZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone51);
        org.joda.time.Interval interval55 = yearMonthDay24.toInterval(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay24.withDayOfMonth((int) (short) 10);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.lang.String str60 = dateTimeZone59.getID();
        int int62 = dateTimeZone59.getOffsetFromLocal(86400000L);
        org.joda.time.Interval interval63 = yearMonthDay57.toInterval(dateTimeZone59);
        boolean boolean64 = duration11.equals((java.lang.Object) dateTimeZone59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone59);
        boolean boolean66 = dateTimeFormatter2.isParser();
        boolean boolean67 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+14:35" + "'", str60, "+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52500000 + "'", int62 == 52500000);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15844");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.Duration duration51 = duration33.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withDaysRemoved();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(86400000L, chronology57);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        long long64 = chronology59.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period65 = duration51.toPeriod(periodType53, chronology59);
        org.joda.time.PeriodType periodType66 = period65.getPeriodType();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test15845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15845");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.minusYears(22);
        org.joda.time.DateMidnight.Property property12 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test15846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15846");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration14, (-1));
        long long17 = mutableDateTime5.getMillis();
        int int18 = mutableDateTime5.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime5.getZone();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime5.dayOfWeek();
        int int21 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setSecondOfMinute(35);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime5.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 1980);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514760336L + "'", long17 == 1645514760336L);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 79260336 + "'", int18 == 79260336);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test15847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15847");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        mutableDateTime5.setRounding(dateTimeField10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((int) ' ');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = property26.getMaximumShortTextLength(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        int int33 = property26.getMaximumShortTextLength(locale32);
        java.lang.String str34 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, 0, locale32);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getISO3Language();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property41.getMaximumShortTextLength(locale44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT0S");
        int int48 = property41.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str64 = locale47.getDisplayLanguage(locale50);
        java.lang.String str65 = locale32.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale50);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = locale67.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter70.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter70.withPivotYear((java.lang.Integer) 26209701);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter73.withOffsetParsed();
        java.io.Writer writer75 = null;
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) chronology78, dateTimeZone80);
        boolean boolean82 = localDate76.equals((java.lang.Object) localDate81);
        int int83 = localDate81.getYearOfEra();
        org.joda.time.LocalDate.Property property84 = localDate81.year();
        org.joda.time.LocalDate localDate85 = property84.roundFloorCopy();
        org.joda.time.LocalDate localDate86 = property84.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter73.printTo(writer75, (org.joda.time.ReadablePartial) localDate86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514760475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=-875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=25,SECOND=59,MILLISECOND=600,ZONE_OFFSET=-875,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate86);
    }

    @Test
    public void test15848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15848");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(22L, 1641021432802L);
    }

    @Test
    public void test15849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15849");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withZone(dateTimeZone58);
        org.joda.time.DateTime.Property property60 = dateTime56.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property62 = dateTime56.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = property62.withMaximumValue();
        org.joda.time.DateTime dateTime65 = property62.addToCopy(9);
        mutableDateTime50.setMillis((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property67 = dateTime65.minuteOfHour();
        int int68 = dateTime65.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test15850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15850");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test15851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15851");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(4);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay3.plusSeconds(32772);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay3.millisOfSecond();
        int int13 = property12.get();
        org.joda.time.TimeOfDay timeOfDay15 = property12.setCopy((int) (byte) 1);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test15852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean38 = dateTimeField36.isLeap((long) 1439);
        boolean boolean40 = dateTimeField36.isLeap(0L);
        long long42 = dateTimeField36.roundFloor((long) (byte) 1);
        int int44 = dateTimeField36.get((long) 5);
        org.joda.time.DurationField durationField45 = dateTimeField36.getRangeDurationField();
        java.lang.String str47 = dateTimeField36.getAsShortText((long) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField36.getType();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay31.withField(dateTimeFieldType48, 366);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay31.minusYears(2);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.year();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-52500000L) + "'", long42 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNull(durationField45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test15853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15853");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long13 = dateTimeField10.add((long) (-1), (int) (byte) -1);
        org.joda.time.DurationField durationField14 = dateTimeField10.getRangeDurationField();
        int int17 = dateTimeField10.getDifference((long) 10, (long) 2152);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime19, (int) 'a', locale22);
        java.util.Locale.setDefault(locale22);
        java.util.Calendar calendar25 = mutableDateTime1.toCalendar(locale22);
        calendar25.setFirstDayOfWeek(10);
        boolean boolean28 = calendar25.isWeekDateSupported();
        int int30 = calendar25.getGreatestMinimum(4);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder34 = builder31.set(15, (int) (byte) -1);
        java.util.Calendar.Builder builder39 = builder34.setTimeOfDay(53, 625, 0, 26209701);
        java.util.Calendar.Builder builder43 = builder34.setDate(51, 14, 973);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.lang.String str45 = timeZone44.getID();
        int int47 = timeZone44.getOffset((long) ' ');
        int int48 = timeZone44.getRawOffset();
        java.util.Calendar.Builder builder49 = builder34.setTimeZone(timeZone44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone44);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone44);
        int int52 = timeZone44.getRawOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        boolean boolean57 = dateTimeField55.isLeap((long) 1439);
        long long59 = dateTimeField55.roundFloor(0L);
        boolean boolean61 = dateTimeField55.isLeap((long) 7);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone63);
        mutableDateTime64.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        mutableDateTime64.setRounding(dateTimeField69);
        int int72 = dateTimeField69.getLeapAmount((long) (byte) 10);
        java.lang.String str74 = dateTimeField69.getAsText(0L);
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        java.lang.String str77 = dateTimeField69.getAsShortText(1969, locale76);
        java.lang.String str78 = dateTimeField55.getAsText((int) (byte) 100, locale76);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone44, locale76);
        int int80 = calendar25.compareTo(calendar79);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000001L) + "'", long13 == (-31536000001L));
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-31588500000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:35\",offset=52500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=52500000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GMT" + "'", str45, "GMT");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645514760574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=26,SECOND=0,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514760574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=26,SECOND=0,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-52500000L) + "'", long59 == (-52500000L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970" + "'", str74, "1970");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1969" + "'", str77, "1969");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645514760574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=26,SECOND=0,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test15854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15854");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfEvenCopy();
        int int10 = localDate9.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test15855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15855");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks((int) (short) -1);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (-23), chronology9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        boolean boolean20 = period18.isSupported(durationFieldType19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight13.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.withCenturyOfEra(8);
        org.joda.time.DateMidnight.Property property26 = dateMidnight21.era();
        org.joda.time.DateMidnight dateMidnight27 = property26.withMaximumValue();
        java.lang.Object obj28 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(86400000L, chronology30);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj28, chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant34, readableInstant35, periodType36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = period37.normalizedStandard(periodType38);
        org.joda.time.Period period41 = period39.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = period41.getFieldTypes();
        org.joda.time.Period period44 = period41.plusMillis(1970);
        org.joda.time.Seconds seconds45 = period44.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        mutableDateTime47.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        mutableDateTime51.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime51.getZone();
        mutableDateTime47.setZoneRetainFields(dateTimeZone56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds45, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Interval interval59 = interval33.withPeriodAfterStart((org.joda.time.ReadablePeriod) seconds45);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withZone(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.minusDays(0);
        int int75 = dateTime69.compareTo((org.joda.time.ReadableInstant) dateMidnight74);
        boolean boolean76 = interval59.contains((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardDays((long) 7);
        org.joda.time.Interval interval79 = interval59.withDurationAfterStart((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight27.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration78);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateMidnight74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test15856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15856");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        int int2 = localTime1.getMillisOfSecond();
        int int3 = localTime1.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test15857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15857");
        java.util.Date date5 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        date5.setDate(10);
        date5.setDate(99);
        java.util.Date date13 = new java.util.Date(59, 100, 1969);
        boolean boolean14 = date5.before(date13);
        java.util.Date date20 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int21 = date20.getYear();
        java.time.Instant instant22 = date20.toInstant();
        boolean boolean23 = date13.before(date20);
        int int24 = date13.getYear();
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromDateFields(date13);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        int[] intArray27 = yearMonthDay25.getValues();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Jun 07 03:59:00 GMT 1960");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 19 00:00:00 GMT 1972");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Mar 24 03:59:00 GMT 1960");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 60 + "'", int21 == 60);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 72 + "'", int24 == 72);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1972, 9, 19]");
    }

    @Test
    public void test15858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15858");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime.Property property39 = dateTime22.year();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight.Property property41 = dateMidnight15.yearOfCentury();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        long long49 = duration48.getStandardMinutes();
        org.joda.time.Duration duration50 = duration48.toDuration();
        org.joda.time.Period period51 = new org.joda.time.Period((java.lang.Object) duration48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration53 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Period period54 = period10.normalizedStandard();
        org.joda.time.Period period56 = period54.minusDays((int) (byte) -1);
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateMidnight15);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str20, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test15859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15859");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2222, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15860");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        boolean boolean5 = periodType2.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(86400000L, chronology7);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        boolean boolean12 = durationFieldType4.isSupported(chronology9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean17 = dateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getRangeDurationType();
        java.lang.String str19 = durationFieldType18.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = new org.joda.time.DurationFieldType[] { durationFieldType4, durationFieldType18 };
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.forFields(durationFieldTypeArray20);
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(86400000L, chronology24);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        java.lang.String str28 = chronology26.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.minuteOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((-60967987199015L), periodType22, chronology26);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hours" + "'", str19, "hours");
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test15861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15861");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(33, 2, 25729000, 52499999, 645, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52499999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0, 32769, 0, 4);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 450);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay16.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.withMonthOfYear((-15));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -15 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test15863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15863");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Duration duration8 = period5.toStandardDuration();
        org.joda.time.Duration duration9 = period5.toStandardDuration();
        int int10 = period5.getWeeks();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        boolean boolean27 = period5.equals((java.lang.Object) chronology26);
        int int28 = period5.getMillis();
        org.joda.time.Period period29 = period5.toPeriod();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test15864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15864");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        mutablePeriod1.setPeriod(2, (int) (byte) 100, 100, 2, 0, 4, 999, (int) (short) 1);
        int int13 = mutablePeriod1.getYears();
        mutablePeriod1.addMonths(43);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(999);
        java.lang.String str25 = dateTime18.toString();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate28 = localDate26.plusYears(10);
        boolean boolean30 = localDate26.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property31 = localDate26.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtMidnight();
        int int33 = dateTime32.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime32.toMutableDateTimeISO();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.withMillis((long) 1966);
        int int38 = dateTime37.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str25, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test15865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15865");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 1);
        mutablePeriod1.setMonths(292278993);
        mutablePeriod1.addMinutes(0);
        int int8 = mutablePeriod1.getSeconds();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test15866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15866");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) chronology2, dateTimeZone4);
        boolean boolean6 = localDate0.equals((java.lang.Object) localDate5);
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate localDate14 = property12.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDate14.getField(26291448);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26291448");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test15867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15867");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        gregorianCalendar30.set((int) (byte) 100, 1969, (int) 'a');
        int int38 = gregorianCalendar30.getLeastMaximum(3);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = gregorianCalendar30.getActualMaximum(26432314);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 26432314");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51 + "'", int38 == 51);
    }

    @Test
    public void test15868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths(999);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        org.joda.time.DateTime.Property property26 = dateTime21.year();
        org.joda.time.TimeOfDay timeOfDay29 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 1);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.minuteOfHour();
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.getDefault(category35);
        int int37 = property34.getMaximumTextLength(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getISO3Language();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale39.getDisplayVariant(locale50);
        java.lang.String str54 = locale39.getExtension('u');
        java.lang.String str55 = locale38.getDisplayVariant(locale39);
        int int56 = property34.getMaximumShortTextLength(locale39);
        org.joda.time.DurationField durationField57 = property34.getDurationField();
        int int58 = property34.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField59 = property34.getField();
        java.lang.String str60 = property34.getAsText();
        int int61 = property34.get();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str64 = property34.getAsShortText(locale63);
        org.joda.time.tz.NameProvider nameProvider65 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str67 = locale66.getISO3Language();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = property71.addToCopy((int) ' ');
        java.util.Locale locale74 = java.util.Locale.ITALY;
        int int75 = property71.getMaximumShortTextLength(locale74);
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("PT0S");
        int int78 = property71.getMaximumShortTextLength(locale77);
        java.lang.String str79 = locale66.getDisplayVariant(locale77);
        java.lang.String str82 = nameProvider65.getShortName(locale66, "yearOfCentury", "PT1.969S");
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.lang.String str86 = nameProvider65.getName(locale83, "PT0S", "hi!");
        java.lang.String str87 = locale63.getDisplayName(locale83);
        java.lang.String str88 = property30.getAsText(locale63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = dateTime21.toString("22 Feb 2022 07:22:56 GMT", locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(nameProvider65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "deu" + "'", str67, "deu");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
    }

    @Test
    public void test15869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15869");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField25 = property2.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        mutableDateTime27.setRounding(dateTimeField32);
        int int34 = mutableDateTime27.getYearOfEra();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime27.secondOfMinute();
        int int36 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.TimeOfDay timeOfDay37 = property2.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField38 = property2.getField();
        int int39 = property2.get();
        org.joda.time.TimeOfDay timeOfDay40 = property2.getTimeOfDay();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((-472953600000L));
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay40.withChronologyRetainFields(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1969 + "'", int34 == 1969);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay44);
    }

    @Test
    public void test15870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15870");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1969-12-31T23:59:59.999Z");
        mutableDateTime1.add((long) 38);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZone(dateTimeZone22);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withWeeksRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime23, periodType25);
        org.joda.time.Duration duration30 = duration12.plus(227210054399999999L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant31, readableInstant32, periodType33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = period34.normalizedStandard(periodType35);
        org.joda.time.Period period38 = period36.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray39 = period38.getFieldTypes();
        org.joda.time.Period period41 = period38.plusMillis(1970);
        org.joda.time.PeriodType periodType42 = period41.getPeriodType();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration12, periodType42);
        org.joda.time.Days days44 = period43.toStandardDays();
        org.joda.time.Period period46 = period43.plusYears(245);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test15871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15871");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = dateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType13.getRangeDurationType();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.withFieldAdded(durationFieldType15, 1439);
        org.joda.time.LocalTime localTime19 = timeOfDay18.toLocalTime();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay18.secondOfMinute();
        int int21 = property20.getMinimumValue();
        int int22 = property20.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test15872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15872");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now(dateTimeZone1);
        java.lang.String str5 = localTime4.toString();
        org.joda.time.LocalTime localTime7 = localTime4.minusMillis(60);
        org.joda.time.LocalTime localTime9 = localTime4.minusMinutes(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        int int15 = dateTime12.getMillisOfSecond();
        org.joda.time.DateTime.Property property16 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime17 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfEvenCopy();
        int int25 = localDateTime24.size();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime27.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int30 = localDateTime27.get(dateTimeFieldType29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.era();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localTime4.compareTo((org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "07:26:00.887" + "'", str5, "07:26:00.887");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str14, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 999 + "'", int15 == 999);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test15873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15873");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period3 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period5 = period3.plusSeconds((int) (short) 100);
        org.joda.time.Period period6 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.MutablePeriod mutablePeriod7 = period3.toMutablePeriod();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.plusYears(10);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.Period period13 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period15 = period13.plusSeconds((int) (short) 100);
        org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (-1));
        org.joda.time.Period period18 = period3.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period20 = period3.withMillis(2028);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration29.plus((long) 'u');
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime42, periodType44);
        org.joda.time.Period period47 = period20.normalizedStandard(periodType44);
        org.joda.time.Period period48 = period47.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period50 = period47.withWeeks(2622239);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test15874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15874");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZone(dateTimeZone43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfCentury();
        org.joda.time.DateTime dateTime47 = dateTime44.minusMonths(9);
        mutableDateTime34.setTime((org.joda.time.ReadableInstant) dateTime47);
        mutableDateTime34.setSecondOfDay(100);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime34.dayOfMonth();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime34.secondOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test15875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15875");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(887, 79260336, 26661213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79260336 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15876");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        int int22 = period21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((int) (short) 1);
        java.lang.String str27 = localDateTime25.toString("1969");
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusDays(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.minusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        boolean boolean33 = property32.isLeap();
        org.joda.time.LocalDateTime localDateTime34 = property32.roundFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969" + "'", str27, "1969");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test15877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15877");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(86400000L, chronology13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withChronology(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str20 = dateTimeFieldType19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withField(dateTimeFieldType19, 973100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 973100 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfSecond" + "'", str20, "millisOfSecond");
    }

    @Test
    public void test15878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15878");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy(235);
        org.joda.time.LocalDateTime localDateTime9 = property4.withMinimumValue();
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test15879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add(1970);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 26425526);
        int int13 = mutableDateTime12.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1106 + "'", int13 == 1106);
    }

    @Test
    public void test15880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15880");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        java.util.Date date11 = localDateTime9.toDate();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = period16.normalizedStandard(periodType17);
        org.joda.time.Period period20 = period18.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = period20.getFieldTypes();
        org.joda.time.Period period23 = period20.plusMillis(1970);
        org.joda.time.Period period25 = period23.withHours(10);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        boolean boolean28 = periodType26.isSupported(durationFieldType27);
        boolean boolean29 = period23.isSupported(durationFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime9.withFieldAdded(durationFieldType27, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration42, (-1));
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime47.plusMonths(999);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 1, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime53, periodType55);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime7, (org.joda.time.ReadablePartial) localDateTime31, periodType55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime7.minusSeconds(1439);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        int int65 = property64.get();
        org.joda.time.DateTime dateTime67 = property64.addToCopy((long) 71);
        org.joda.time.DateTime.Property property68 = dateTime67.year();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays(10L);
        java.lang.String str71 = duration70.toString();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration70, (-7));
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 14:35:00 GMT 1970");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT864000S" + "'", str71, "PT864000S");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test15881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15881");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(227210054399999999L, dateTimeZone11);
        boolean boolean13 = dateTimeZone6.isLocalDateTimeGap(localDateTime12);
        java.lang.String str14 = localDateTime12.toString();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7201970-01-01T04:59:59.999" + "'", str14, "7201970-01-01T04:59:59.999");
    }

    @Test
    public void test15882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        gregorianCalendar30.setFirstDayOfWeek((int) '4');
        gregorianCalendar30.set((int) (byte) 100, 1969, (int) 'a');
        boolean boolean38 = gregorianCalendar30.equals((java.lang.Object) "22:00:18.998");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test15883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15883");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        int int32 = gregorianCalendar30.getActualMaximum(2);
        int int33 = gregorianCalendar30.getWeeksInWeekYear();
        int int34 = gregorianCalendar30.getWeeksInWeekYear();
        gregorianCalendar30.setFirstDayOfWeek(6);
        gregorianCalendar30.setLenient(false);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.LocalDate.Property property40 = localDate39.centuryOfEra();
        int int41 = localDate39.getDayOfMonth();
        java.util.Date date42 = localDate39.toDate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localDate39.toString("Standard");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test15884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15884");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(71L, periodType2);
        int int4 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test15885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15885");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        gregorianCalendar34.setTimeInMillis((long) 6);
        java.util.Date date42 = new java.util.Date(47, 999, 70);
        gregorianCalendar34.setTime(date42);
        int int44 = date42.getSeconds();
        java.lang.String str45 = date42.toLocaleString();
        date42.setMinutes((-70014));
        java.lang.String str48 = date42.toGMTString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str8, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Sun Apr 21 09:06:00 GMT 2030");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9 juin 2030 00:00:00" + "'", str45, "9 juin 2030 00:00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "21 Apr 2030 09:06:00 GMT" + "'", str48, "21 Apr 2030 09:06:00 GMT");
    }

    @Test
    public void test15886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15886");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 1);
        mutablePeriod1.setWeeks(11);
        int int6 = mutablePeriod1.getSeconds();
        int int7 = mutablePeriod1.getDays();
        org.joda.time.Period period9 = org.joda.time.Period.hours((int) (short) 100);
        org.joda.time.Period period11 = period9.plusHours((int) (short) 1);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period11);
        org.joda.time.format.PeriodFormatter periodFormatter13 = null;
        java.lang.String str14 = period11.toString(periodFormatter13);
        org.joda.time.Period period16 = period11.minusMillis(56);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT101H" + "'", str14, "PT101H");
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test15887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15887");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.LocalTime localTime7 = localTime0.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) period11, periodType14);
        org.joda.time.LocalTime localTime17 = localTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 4);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = dateTime20.isSupported(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        boolean boolean24 = localTime17.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        int int31 = mutableDateTime26.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime26.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundHalfFloor();
        mutableDateTime34.setDayOfWeek(7);
        org.joda.time.DateTime dateTime37 = localTime17.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        mutableDateTime39.setDayOfYear(1);
        org.joda.time.Instant instant42 = mutableDateTime39.toInstant();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime45.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = dateTime68.toString(dateTimeFormatter69);
        int int71 = dateTime68.getMillisOfSecond();
        org.joda.time.Period period72 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        java.util.GregorianCalendar gregorianCalendar73 = dateTime68.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay74 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.plusYears(0);
        org.joda.time.Chronology chronology79 = yearMonthDay78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.dayOfMonth();
        org.joda.time.DurationField durationField82 = chronology79.years();
        org.joda.time.DateTimeField dateTimeField83 = chronology79.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField84 = chronology79.minuteOfDay();
        long long86 = dateTimeField84.roundFloor(100L);
        mutableDateTime39.setRounding(dateTimeField84, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime34.setRounding(dateTimeField84, 4218);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 4218");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minuteOfHour" + "'", str23, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant42);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str47, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str70, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(gregorianCalendar73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test15888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15888");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra(26209701);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.LocalDate.Property property35 = localDate33.dayOfMonth();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test15889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.Hours hours27 = duration20.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod29.addMillis((int) (short) 1);
        mutablePeriod29.setMonths(292278993);
        mutablePeriod29.addMinutes(0);
        boolean boolean36 = duration20.equals((java.lang.Object) mutablePeriod29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime39.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration61 = duration57.minus((-31536000001L));
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology66 = localTime65.getChronology();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 19, chronology66);
        org.joda.time.Period period68 = duration61.toPeriod(periodType62, chronology66);
        org.joda.time.Period period70 = period68.withDays(66);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) period70);
        int int72 = mutablePeriod29.getMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str41, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test15890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15890");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        java.util.Date date31 = gregorianCalendar30.getTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        mutableDateTime33.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime33.getZone();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        gregorianCalendar30.setTimeZone(timeZone40);
        java.util.TimeZone.setDefault(timeZone40);
        java.time.ZoneId zoneId43 = timeZone40.toZoneId();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 14:34:59 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(zoneId43);
    }

    @Test
    public void test15891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        int int8 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekyear(1070);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant13, readableInstant14, periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = period16.isSupported(durationFieldType17);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 1, periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        boolean boolean23 = periodType20.isSupported(durationFieldType22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(86400000L, chronology25);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.millisOfSecond();
        boolean boolean30 = durationFieldType22.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.DurationField durationField33 = durationFieldType17.getField(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.minutes();
        mutableDateTime1.setChronology(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test15892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15892");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.centuryOfEra();
        int int10 = property7.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property7.addWrapFieldToCopy(26209701);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfMonth(12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test15893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15893");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology4 = timeOfDay0.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.halfdays();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test15894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15894");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6, periodType8);
        org.joda.time.DateTime dateTime14 = dateTime2.minusWeeks((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime2.plusYears(953);
        org.joda.time.Period period26 = new org.joda.time.Period(450, (int) (byte) 10, 54, 52, 2022, 41, 11, 49);
        org.joda.time.Period period28 = period26.plusMillis(99);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test15895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.addWrapField(2222);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = property8.set("07:18:46.817 (1970-01-01T00:00:00.100,22)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"07:18:46.817 (1970-01-01T00:00:00.100,22)\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test15896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15896");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setDayOfYear(1);
        mutableDateTime10.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime10.getZone();
        mutableDateTime8.setZone(dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime8.year();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        int int20 = dateTimeField18.getMinimumValue((long) (-292278));
        java.lang.String str22 = dateTimeField18.getAsText((-61165324799961L));
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("1969-12-31T23:59:59.999Z");
        java.lang.String str26 = dateTimeField18.getAsShortText(19045, locale25);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292275054) + "'", int20 == (-292275054));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31" + "'", str22, "31");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19045" + "'", str26, "19045");
    }

    @Test
    public void test15897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(100);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay15.toDateMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay15.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-04-01" + "'", str13, "2052-04-01");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test15898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15898");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Duration duration9 = duration7.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        mutableDateTime21.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime21.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime14.withZoneRetainFields(dateTimeZone26);
        int int30 = dateTimeZone26.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 292278993, dateTimeZone26);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52500000 + "'", int30 == 52500000);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test15899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.addCopy(2032);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.joda.time.LocalTime localTime11 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property4.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTimeField dateTimeField15 = property4.getField();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test15900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15900");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("T23:59:59.999");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addWeekyears(625);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 1);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        java.lang.String str9 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = property7.setCopy(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        int int13 = mutableDateTime1.get(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
    }

    @Test
    public void test15901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15901");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add(1970);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test15902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15902");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        int int43 = yearMonthDay42.size();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay42.plusMonths(12);
        org.joda.time.LocalDate localDate46 = yearMonthDay42.toLocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate.Property property48 = localDate46.yearOfEra();
        org.joda.time.LocalDate localDate50 = property48.setCopy((int) ' ');
        java.util.Date date51 = localDate50.toDate();
        int[] intArray52 = localDate50.getValues();
        org.joda.time.LocalDate localDate54 = localDate50.plusWeeks(26388899);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Apr 10 00:00:00 GMT+14:35 32");
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 4, 10]");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test15903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15903");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withTime(8, 53, 19, 16);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test15904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15904");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime.Property property30 = dateTime13.year();
        org.joda.time.DateTime dateTime32 = dateTime13.withEra(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear(42);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = dateTime66.toString(dateTimeFormatter67);
        int int69 = dateTime66.getMillisOfSecond();
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        java.util.GregorianCalendar gregorianCalendar71 = dateTime66.toGregorianCalendar();
        java.util.Date date72 = gregorianCalendar71.getTime();
        boolean boolean73 = periodType40.equals((java.lang.Object) gregorianCalendar71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = dateTime76.toString(dateTimeFormatter77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = dateTime76.toDateTime(dateTimeZone79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        int int82 = dateTime80.getDayOfWeek();
        org.joda.time.DateTime.Property property83 = dateTime80.secondOfDay();
        org.joda.time.Chronology chronology84 = dateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.millisOfDay();
        org.joda.time.DurationField durationField86 = chronology84.minutes();
        org.joda.time.Period period87 = new org.joda.time.Period((long) 26388899, (long) 31, periodType40, chronology84);
        org.joda.time.DateTime dateTime88 = dateTime32.withChronology(chronology84);
        org.joda.time.DateTimeField dateTimeField89 = chronology84.halfdayOfDay();
        org.joda.time.DurationField durationField90 = chronology84.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime91 = new org.joda.time.MutableDateTime(0, (-59), (int) 'u', 79202, 264, 3, (-44), chronology84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79202 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str11, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str45, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str68, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 999 + "'", int69 == 999);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(gregorianCalendar71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 14:34:59 GMT+14:35 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str78, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test15905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15905");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.TimeOfDay timeOfDay25 = property2.withMinimumValue();
        java.lang.String str26 = property2.getAsString();
        org.joda.time.TimeOfDay timeOfDay27 = property2.withMinimumValue();
        int[] intArray28 = timeOfDay27.getValues();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay27.secondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 6]");
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test15906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(365);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property9.add(23L);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test15907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15907");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("22");
        org.joda.time.DateMidnight dateMidnight30 = property26.addToCopy(31);
        org.joda.time.DateMidnight dateMidnight31 = property26.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight32 = property26.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight33 = property26.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight35 = property26.addWrapFieldToCopy((int) 'x');
        int int36 = dateMidnight35.getYear();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2042 + "'", int36 == 2042);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test15908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15908");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(86400000L, chronology2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((java.lang.Object) period20, chronology21);
        int[] intArray24 = chronology4.get((org.joda.time.ReadablePeriod) period20, (-1L));
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology4);
        int int26 = mutableDateTime25.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime.Property property50 = dateTime33.year();
        org.joda.time.DateTime.Property property51 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime53 = dateTime33.minusMinutes(2152);
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = dateTime57.toString(dateTimeFormatter58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableDuration) duration75);
        mutableDateTime25.addSeconds(6);
        java.lang.String str81 = mutableDateTime25.toString();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, -1]");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str59, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01T07:26:07.428Z" + "'", str81, "1970-01-01T07:26:07.428Z");
    }

    @Test
    public void test15909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15909");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        long long27 = duration26.getStandardMinutes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        org.joda.time.Period period44 = duration43.toPeriod();
        boolean boolean45 = duration34.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.years();
        boolean boolean57 = periodType54.isSupported(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration52, periodType54);
        org.joda.time.Duration duration59 = duration34.minus((org.joda.time.ReadableDuration) duration52);
        boolean boolean60 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTime dateTime63 = dateTime19.withMillisOfDay(2232);
        org.joda.time.DateTime dateTime65 = dateTime19.withMillis((long) (-7));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test15910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration14 = duration10.withMillis((-28857600001L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        mutableDateTime16.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        int int23 = mutableDateTime22.getDayOfYear();
        mutableDateTime22.setTime((long) 32);
        org.joda.time.Period period26 = duration14.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Hours hours27 = duration14.toStandardHours();
        org.joda.time.Duration duration28 = duration14.toDuration();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(duration28);
    }

    @Test
    public void test15911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15911");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusYears(52);
        int int18 = yearMonthDay15.getMonthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        long long26 = duration25.getStandardMinutes();
        org.joda.time.Duration duration27 = duration25.toDuration();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime35.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        mutableDateTime39.setDayOfYear(1);
        mutableDateTime39.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime39.getZone();
        mutableDateTime35.setZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime32.withZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeZone44.getOffsetFromLocal((long) 0);
        long long50 = dateTimeZone44.previousTransition((long) 366);
        org.joda.time.DateMidnight dateMidnight51 = yearMonthDay15.toDateMidnight(dateTimeZone44);
        long long54 = dateTimeZone44.adjustOffset(189302400010L, true);
        long long56 = dateTimeZone44.convertUTCToLocal(36000034L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52500000 + "'", int48 == 52500000);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 366L + "'", long50 == 366L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 189302400010L + "'", long54 == 189302400010L);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 88500034L + "'", long56 == 88500034L);
    }

    @Test
    public void test15912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15912");
        java.lang.String[] strArray2 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime25, periodType27);
        boolean boolean31 = strSet3.equals((java.lang.Object) period30);
        java.lang.String[] strArray34 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        boolean boolean37 = strSet35.isEmpty();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        java.util.Date date41 = localDateTime39.toDate();
        org.joda.time.DateTime dateTime42 = localDateTime39.toDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusMonths((int) (short) 100);
        boolean boolean45 = strSet35.remove((java.lang.Object) localDateTime44);
        boolean boolean46 = strSet3.equals((java.lang.Object) strSet35);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean55 = strSet53.isEmpty();
        java.lang.String str56 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet53);
        boolean boolean57 = strSet35.removeAll((java.util.Collection<java.lang.String>) strSet53);
        java.lang.Object[] objArray58 = strSet53.toArray();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[Coordinated Universal Time, PT0.035S]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[Coordinated Universal Time, PT0.035S]");
    }

    @Test
    public void test15913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15913");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(985);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test15914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15914");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        boolean boolean49 = period47.isSupported(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plus(10L);
        org.joda.time.DateTime dateTime53 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        int int60 = mutableDateTime55.getWeekOfWeekyear();
        mutableDateTime55.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime55.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.dayOfMonth();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateMidnight.Property property67 = dateMidnight52.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight69 = property67.setCopy("P83Y2M4W2DT23H59M59.998S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P83Y2M4W2DT23H59M59.998S\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test15915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15915");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime42.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = duration60.plus((long) 'u');
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration62, (-1));
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = dateTime67.plusMonths(999);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 1, periodType75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) dateTime73, periodType75);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Interval interval79 = interval78.toInterval();
        boolean boolean80 = interval38.overlaps((org.joda.time.ReadableInterval) interval78);
        boolean boolean82 = interval78.isAfter(9651094761000L);
        org.joda.time.Period period83 = interval78.toPeriod();
        org.joda.time.tz.Provider provider84 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet85 = provider84.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone87 = provider84.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider84);
        org.joda.time.DateTimeZone.setProvider(provider84);
        boolean boolean90 = period83.equals((java.lang.Object) provider84);
        org.joda.time.DateTimeZone.setProvider(provider84);
        java.util.Set<java.lang.String> strSet92 = provider84.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone94 = provider84.getZone("2022-02-22T00:01:40.426Z");
        org.joda.time.DateTimeZone dateTimeZone96 = provider84.getZone("00:00:00.000");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNull(dateTimeZone94);
        org.junit.Assert.assertNull(dateTimeZone96);
    }

    @Test
    public void test15916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15916");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusMonths((int) (short) 0);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.minusDays(26446485);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test15917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15917");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        java.util.Date date3 = localDateTime1.toDate();
        org.joda.time.DateTime dateTime4 = localDateTime1.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekOfWeekyear(16);
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMinutes(40);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusHours((int) '#');
        int int18 = localDateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime21.toString(dateTimeFormatter22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        mutableDateTime27.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime27.getZone();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime25.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTimeISO();
        int int36 = dateTime25.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.minusDays(0);
        org.joda.time.Interval interval42 = dateMidnight41.toInterval();
        boolean boolean43 = dateMidnight41.isEqualNow();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withWeekyear(4);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.withChronology(chronology56);
        int int58 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTime dateTime60 = dateTime51.minus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean62 = dateTime51.isSupported(dateTimeFieldType61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight45.withField(dateTimeFieldType61, 7);
        int int65 = dateTime25.get(dateTimeFieldType61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime13.withField(dateTimeFieldType61, (int) 'x');
        boolean boolean68 = localDateTime8.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 61 + "'", int9 == 61);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52500100 + "'", int18 == 52500100);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str23, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test15918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15918");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(441952, 491, 3, 955, 2005, 2079, 985);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15919");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        boolean boolean8 = interval5.isAfter((long) 100);
        org.joda.time.Interval interval9 = interval5.toInterval();
        org.joda.time.Interval interval10 = interval5.toInterval();
        boolean boolean12 = interval5.isAfter(6311390400000010L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15920");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(0);
        org.joda.time.Interval interval46 = dateMidnight45.toInterval();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(0);
        org.joda.time.Interval interval52 = dateMidnight51.toInterval();
        org.joda.time.Interval interval53 = interval46.gap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval54 = interval40.gap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        org.joda.time.DateTime dateTime63 = property58.roundHalfFloorCopy();
        boolean boolean64 = interval40.equals((java.lang.Object) property58);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.withWeekyear(11);
        org.joda.time.Interval interval70 = interval40.withStart((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) 3, 69425337600000L);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = interval73.withStart(readableInstant74);
        org.joda.time.Interval interval76 = interval70.overlap((org.joda.time.ReadableInterval) interval75);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNull(interval53);
        org.junit.Assert.assertNull(interval54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test15921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15921");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        mutablePeriod5.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.clear();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        boolean boolean15 = period13.isSupported(durationFieldType14);
        java.lang.String str16 = durationFieldType14.getName();
        int int17 = mutablePeriod5.indexOf(durationFieldType14);
        org.joda.time.ReadableInterval readableInterval18 = null;
        mutablePeriod5.setPeriod(readableInterval18);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "years" + "'", str16, "years");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test15922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15922");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withChronology(chronology13);
        int int15 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) period31, chronology32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime37.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = duration55.plus((long) 'u');
        mutableDateTime48.add((org.joda.time.ReadableDuration) duration57, (-1));
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime62.plusMonths(999);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 1, periodType70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime48, (org.joda.time.ReadableInstant) dateTime68, periodType70);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = interval73.withChronology(chronology74);
        org.joda.time.Interval interval76 = interval34.overlap((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Chronology chronology77 = interval73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(chronology77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(7, 11, 645, chronology77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 645 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test15923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15923");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight0.minusDays(51);
        org.joda.time.DateMidnight.Property property28 = dateMidnight0.monthOfYear();
        int int29 = property28.get();
        org.joda.time.DateMidnight dateMidnight30 = property28.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test15924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfDay();
        mutableDateTime1.add(28145420447000L);
        boolean boolean11 = mutableDateTime1.isAfterNow();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusWeeks((int) '#');
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus(220898664000L);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis((long) 23);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType21);
        mutablePeriod22.setYears((int) (short) 1);
        mutablePeriod22.addMillis(39);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 1, periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration47, periodType51);
        org.joda.time.PeriodType periodType54 = periodType51.withWeeksRemoved();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.minusDays(0);
        int int70 = dateTime64.compareTo((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateTime dateTime71 = dateMidnight69.toDateTime();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean76 = dateTime74.isSupported(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType75.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight69.withFieldAdded(durationFieldType77, 8);
        int int80 = periodType51.indexOf(durationFieldType77);
        mutablePeriod22.add(durationFieldType77, 1439);
        mutableDateTime1.add(durationFieldType77, 262097);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test15925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15925");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(83);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test15926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfDay();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant13 = instant9.plus(60000L);
        org.joda.time.Instant instant15 = instant9.withMillis(86399L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays(0);
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTime dateTime32 = dateMidnight30.toDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateTime35.toString(dateTimeFormatter36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 1, periodType57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((java.lang.Object) duration53, periodType57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration53, periodType60);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) (byte) 0, (long) 7);
        int int65 = duration53.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean70 = dateTime68.isSupported(dateTimeFieldType69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int72 = dateTime68.get(dateTimeFieldType71);
        org.joda.time.Period period73 = duration64.toPeriodTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) (-1), chronology82);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (-1), chronology85);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = dateTime86.toDateTime();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalDate localDate90 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate92 = localDate90.plusYears(10);
        org.joda.time.LocalDate.Property property93 = localDate92.monthOfYear();
        boolean boolean94 = duration80.equals((java.lang.Object) property93);
        int int95 = duration64.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant96 = instant15.minus((org.joda.time.ReadableDuration) duration64);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration64, (-44));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str37, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 34 + "'", int72 == 34);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(instant96);
    }

    @Test
    public void test15927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        boolean boolean30 = duration19.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 1, periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        boolean boolean42 = periodType39.isSupported(durationFieldType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37, periodType39);
        org.joda.time.Duration duration44 = duration19.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime10.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = duration44.toPeriod();
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration44);
        int int48 = mutableDateTime7.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(period46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test15928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15928");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italian", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Italian", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean14 = strSet12.isEmpty();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet12);
        boolean boolean17 = strSet12.add("T00:00:00.000");
        java.lang.String str18 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet12);
        java.util.stream.Stream<java.lang.String> strStream19 = strSet12.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream20 = strSet12.parallelStream();
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12, filteringMode21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap23);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor28 = strSet27.iterator();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = localDate29.plusYears(10);
        org.joda.time.LocalDate.Property property32 = localDate29.centuryOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.minusYears(1);
        int int46 = yearMonthDay45.getDayOfMonth();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.withPeriodAdded((org.joda.time.ReadablePeriod) period47, (int) (short) 0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime52.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime58.toYearMonthDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        long long68 = duration67.getStandardMinutes();
        org.joda.time.Duration duration69 = duration67.toDuration();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfEra();
        org.joda.time.DateTime dateTime74 = dateTime72.toDateTime();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(dateTimeZone76);
        mutableDateTime77.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(dateTimeZone80);
        mutableDateTime81.setDayOfYear(1);
        mutableDateTime81.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone86 = mutableDateTime81.getZone();
        mutableDateTime77.setZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime dateTime88 = dateTime74.withZoneRetainFields(dateTimeZone86);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone86);
        org.joda.time.Interval interval90 = yearMonthDay59.toInterval(dateTimeZone86);
        org.joda.time.DateMidnight dateMidnight91 = yearMonthDay45.toDateMidnight(dateTimeZone86);
        org.joda.time.LocalDate localDate92 = new org.joda.time.LocalDate((long) ' ', dateTimeZone86);
        org.joda.time.DateTime dateTime93 = localDate29.toDateTimeAtStartOfDay(dateTimeZone86);
        java.lang.String str94 = localDate29.toString();
        boolean boolean95 = strSet27.contains((java.lang.Object) localDate29);
        java.util.Spliterator<java.lang.String> strSpliterator96 = strSet27.spliterator();
        java.lang.String str97 = java.util.Locale.lookupTag(languageRangeList24, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Collection<java.util.Locale> localeCollection98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale99 = java.util.Locale.lookup(languageRangeList24, localeCollection98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-22" + "'", str94, "2022-02-22");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strSpliterator96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test15929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime16.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        mutableDateTime20.setDayOfYear(1);
        mutableDateTime20.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime13.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis(10L);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = property30.getDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds(2070);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(chronology34);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test15930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15930");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setDayOfYear(1);
        mutableDateTime10.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime8.withZoneRetainFields(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isFixed();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.minuteOfHour();
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        int int25 = property22.getMaximumTextLength(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale27.getISO3Language();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((int) ' ');
        java.util.Locale locale35 = java.util.Locale.ITALY;
        int int36 = property32.getMaximumShortTextLength(locale35);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("PT0S");
        int int39 = property32.getMaximumShortTextLength(locale38);
        java.lang.String str40 = locale27.getDisplayVariant(locale38);
        java.lang.String str42 = locale27.getExtension('u');
        java.lang.String str43 = locale26.getDisplayVariant(locale27);
        int int44 = property22.getMaximumShortTextLength(locale27);
        org.joda.time.DurationField durationField45 = property22.getDurationField();
        java.lang.String str46 = property22.toString();
        java.lang.String str47 = property22.getName();
        org.joda.time.TimeOfDay timeOfDay49 = property22.addNoWrapToCopy(66);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getISO3Language();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((int) ' ');
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = property56.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("PT0S");
        int int63 = property56.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale51.getDisplayVariant(locale62);
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale62.getDisplayLanguage(locale65);
        org.joda.time.TimeOfDay timeOfDay67 = property22.setCopy("37", locale62);
        java.lang.String str68 = dateTimeZone15.getName(1641021487109L, locale62);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((-19045L), 259200002L, dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str6, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[minuteOfHour]" + "'", str46, "Property[minuteOfHour]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfHour" + "'", str47, "minuteOfHour");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deu" + "'", str52, "deu");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(timeOfDay67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+14:35" + "'", str68, "+14:35");
    }

    @Test
    public void test15931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15931");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        java.util.Locale locale16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = property14.setCopy("100", locale16);
        org.joda.time.DurationField durationField18 = property14.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay19 = property14.withMinimumValue();
        java.lang.String str20 = property14.getAsText();
        org.joda.time.YearMonthDay yearMonthDay21 = property14.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-04-01" + "'", str13, "2052-04-01");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2052" + "'", str20, "2052");
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test15932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15932");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight.Property property27 = dateMidnight1.yearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        long long35 = duration34.getStandardMinutes();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration34);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight1.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration49, (-1));
        org.joda.time.Duration duration52 = duration34.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withDaysRemoved();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(86400000L, chronology58);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        long long65 = chronology60.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period66 = duration52.toPeriod(periodType54, chronology60);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 69, chronology60);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMonths(2191769);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str6, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test15933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15933");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime5.setDayOfYear(1);
        mutableDateTime5.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime5.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean16 = dateTimeField14.isLeap((long) 1439);
        boolean boolean18 = dateTimeField14.isLeap(0L);
        long long20 = dateTimeField14.roundFloor((long) (byte) 1);
        int int22 = dateTimeField14.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField14.getType();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime11.property(dateTimeFieldType23);
        boolean boolean25 = localDateTime3.isSupported(dateTimeFieldType23);
        java.lang.String str26 = dateTimeFieldType23.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-52500000L) + "'", long20 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "year" + "'", str26, "year");
    }

    @Test
    public void test15934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15934");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(100964, 953, 26615142, 53, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15935");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(1969);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15936");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 1, periodType2, chronology3);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 1, periodType6);
        org.joda.time.PeriodType periodType8 = periodType6.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        int int37 = dateTime34.getMillisOfSecond();
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime34.toGregorianCalendar();
        java.util.Date date40 = gregorianCalendar39.getTime();
        boolean boolean41 = periodType8.equals((java.lang.Object) gregorianCalendar39);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) chronology3, periodType8);
        org.joda.time.PeriodType periodType43 = periodType8.withSecondsRemoved();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = dateTime69.toString(dateTimeFormatter70);
        int int72 = dateTime69.getMillisOfSecond();
        org.joda.time.Period period73 = duration64.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        java.util.GregorianCalendar gregorianCalendar74 = dateTime69.toGregorianCalendar();
        int int76 = gregorianCalendar74.getActualMaximum(2);
        int int77 = gregorianCalendar74.getWeeksInWeekYear();
        org.joda.time.TimeOfDay timeOfDay78 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar74);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = dateTime81.toString(dateTimeFormatter82);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.toDateTime(dateTimeZone84);
        org.joda.time.LocalTime localTime86 = dateTime85.toLocalTime();
        int int87 = dateTime85.getDayOfWeek();
        org.joda.time.DateTime.Property property88 = dateTime85.secondOfDay();
        org.joda.time.Chronology chronology89 = dateTime85.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.hours();
        org.joda.time.TimeOfDay timeOfDay91 = timeOfDay78.withChronologyRetainFields(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.hourOfHalfday();
        org.joda.time.Period period93 = new org.joda.time.Period((-60967987199015L), periodType8, chronology89);
        org.joda.time.DurationField durationField94 = chronology89.millis();
        long long97 = durationField94.getMillis((-308433560065L), 0L);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str13, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str36, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 14:34:59 GMT+14:35 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType43);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str48, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str71, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 999 + "'", int72 == 999);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(gregorianCalendar74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53 + "'", int77 == 53);
        org.junit.Assert.assertNotNull(timeOfDay78);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str83, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-308433560065L) + "'", long97 == (-308433560065L));
    }

    @Test
    public void test15937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15937");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        java.lang.String str44 = property43.getAsText();
        int int45 = property43.get();
        java.lang.String str46 = property43.getAsString();
        org.joda.time.DateTimeField dateTimeField47 = property43.getField();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "avril" + "'", str44, "avril");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "4" + "'", str46, "4");
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test15938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15938");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = period12.isSupported(durationFieldType13);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        int int20 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.TimeOfDay timeOfDay21 = property2.withMinimumValue();
        java.lang.String str22 = property2.getAsShortText();
        java.lang.String str23 = property2.toString();
        java.lang.String str24 = property2.toString();
        org.joda.time.DateTimeField dateTimeField25 = property2.getField();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[minuteOfHour]" + "'", str23, "Property[minuteOfHour]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[minuteOfHour]" + "'", str24, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test15939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15939");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        int int9 = mutableDateTime8.getDayOfMonth();
        mutableDateTime8.addMinutes(86399);
        mutableDateTime8.setDate((long) 822);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test15940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15940");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(25847000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test15941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15941");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        java.lang.String str44 = property43.toString();
        org.joda.time.YearMonthDay yearMonthDay46 = property43.addToCopy(2053);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay46.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getISO3Language();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((int) ' ');
        java.util.Locale locale58 = java.util.Locale.ITALY;
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("PT0S");
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.lang.String str66 = nameProvider49.getShortName(locale50, "yearOfCentury", "PT1.969S");
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str70 = nameProvider49.getName(locale67, "PT0S", "hi!");
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.lang.String str74 = nameProvider49.getShortName(locale71, "hi!", "years");
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.lang.String str78 = nameProvider49.getShortName(locale75, "", "weekyears");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay79 = property47.setCopy("weekOfWeekyear", locale75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekOfWeekyear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[monthOfYear]" + "'", str44, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test15942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15942");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period28, chronology29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period28);
        int int32 = dateTime5.getYear();
        int int33 = dateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
    }

    @Test
    public void test15943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15943");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property4.setCopy("32");
        org.joda.time.LocalTime localTime12 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = localTime12.plusHours(5);
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str33 = nameProvider16.getShortName(locale17, "yearOfCentury", "PT1.969S");
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str37 = nameProvider16.getName(locale34, "PT0S", "hi!");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        java.lang.String str45 = nameProvider16.getShortName(locale41, "year", "deu");
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale locale47 = builder46.build();
        java.lang.String str50 = nameProvider16.getName(locale47, "2038-02-22T07:18:11.442Z", "07:18:46.817");
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("31-dic-1968 23.59.59");
        java.lang.String str55 = nameProvider16.getShortName(locale52, "days", "Koordinierte Universalzeit");
        java.lang.String str56 = localTime12.toString("2033", locale52);
        java.lang.String str57 = locale52.getLanguage();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2033" + "'", str56, "2033");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test15944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15944");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 1, periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withDaysRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 38, periodType5);
        org.joda.time.PeriodType periodType7 = periodType5.withMinutesRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test15945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15945");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) ' ');
        org.joda.time.LocalTime localTime7 = property4.roundFloorCopy();
        boolean boolean8 = property4.isLeap();
        org.joda.time.LocalTime localTime10 = property4.addNoWrapToCopy(321);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test15946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15946");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        boolean boolean5 = dateTimeField3.isLeap((long) 1439);
        boolean boolean7 = dateTimeField3.isLeap(0L);
        long long9 = dateTimeField3.roundFloor((long) (byte) 1);
        int int11 = dateTimeField3.get((long) 5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime18 = property16.addToCopy((int) ' ');
        java.util.Locale locale19 = java.util.Locale.ITALY;
        int int20 = property16.getMaximumShortTextLength(locale19);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT0S");
        int int23 = property16.getMaximumShortTextLength(locale22);
        java.lang.String str24 = locale22.getDisplayScript();
        java.lang.String str25 = dateTimeField3.getAsText(8, locale22);
        java.lang.String str26 = locale22.getDisplayLanguage();
        java.util.Locale.Builder builder27 = builder0.setLocale(locale22);
        java.util.Locale.Builder builder29 = builder0.setLanguageTag("gen");
        java.util.Locale.Builder builder30 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder0.setUnicodeLocaleKeyword("-01:00", "chinois");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-52500000L) + "'", long9 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8" + "'", str25, "8");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test15947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15947");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-31536000001L));
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean5 = localDate3.isSupported(dateTimeFieldType4);
        boolean boolean6 = yearMonthDay1.isSupported(dateTimeFieldType4);
        java.lang.String str7 = yearMonthDay1.toString();
        int int8 = yearMonthDay1.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-01-01" + "'", str7, "1969-01-01");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test15948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15948");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-292278), 491, 441952, 13, 2524, (-12));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2524 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15949");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (short) -1);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        java.lang.String str19 = dateTimeFieldType17.getName();
        org.joda.time.DateTime dateTime21 = dateTime13.withField(dateTimeFieldType17, (int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime.Property property46 = dateTime29.year();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateMidnight.Property property48 = dateMidnight22.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight49 = property48.withMinimumValue();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime52.toString(dateTimeFormatter53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = dateTime75.toString(dateTimeFormatter76);
        int int78 = dateTime75.getMillisOfSecond();
        org.joda.time.Period period79 = duration70.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight49.withDurationAdded((org.joda.time.ReadableDuration) duration70, 1439);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight49.withYear(52);
        org.joda.time.DateMidnight.Property property84 = dateMidnight49.era();
        java.lang.String str85 = property84.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property84.getFieldType();
        int int87 = dateTime13.get(dateTimeFieldType86);
        int int88 = localDateTime7.get(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "minuteOfHour" + "'", str19, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str27, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight49);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str54, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str77, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 999 + "'", int78 == 999);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "era" + "'", str85, "era");
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test15950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15950");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusDays(81);
        int int5 = dateTime2.getMillisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears(1);
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        org.joda.time.DateTime dateTime20 = dateTime2.withChronology(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26762636 + "'", int5 == 26762636);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test15951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15951");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("T23:59:59.999");
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test15952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15952");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        mutableDateTime31.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime24.withZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone36);
        org.joda.time.Interval interval40 = yearMonthDay9.toInterval(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay9.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addWrapFieldToCopy(5);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeField dateTimeField48 = property43.getField();
        java.lang.String str49 = property43.getAsString();
        org.joda.time.YearMonthDay yearMonthDay50 = property43.withMaximumValue();
        java.lang.String str51 = property43.getName();
        org.joda.time.YearMonthDay yearMonthDay53 = property43.addWrapFieldToCopy(16);
        java.lang.String str54 = property43.getAsString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.withChronology(chronology65);
        int int67 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = dateTime80.toDateTime();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((java.lang.Object) period83, chronology84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadablePeriod) period83);
        org.joda.time.DateTime dateTime87 = dateTime60.toDateTime();
        org.joda.time.DateTime dateTime89 = dateTime60.withCenturyOfEra(8);
        int int90 = property43.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4" + "'", str49, "4");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "monthOfYear" + "'", str51, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonthDay53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "4" + "'", str54, "4");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test15953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15953");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.getDayOfMonth();
        java.lang.String str13 = yearMonthDay11.toString();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay11.toDateMidnight();
        int int15 = yearMonthDay11.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.minusDays(441952);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2052-04-01" + "'", str13, "2052-04-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test15954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15954");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime11.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Period period27 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getMinuteOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        int int39 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime.Property property40 = dateTime37.secondOfDay();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime30.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.era();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology41);
        org.joda.time.DurationField durationField46 = chronology41.halfdays();
        long long48 = durationField46.getValueAsLong((long) 2152);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 34 + "'", int15 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str20, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 874 + "'", int28 == 874);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str35, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test15955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15955");
        org.joda.time.Period period1 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period1.minusMonths(4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        long long12 = duration11.getStandardMinutes();
        org.joda.time.Duration duration13 = duration11.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        mutableDateTime21.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setDayOfYear(1);
        mutableDateTime25.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime25.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime18.withZoneRetainFields(dateTimeZone30);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        boolean boolean35 = periodType33.isSupported(durationFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime32.withFieldAdded(durationFieldType34, 2);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 1, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 53, (long) 32769, periodType44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period48 = new org.joda.time.Period((long) 1, periodType47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.years();
        boolean boolean50 = periodType47.isSupported(durationFieldType49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(86400000L, chronology52);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        boolean boolean57 = durationFieldType49.isSupported(chronology54);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(dateTimeZone59);
        mutableDateTime60.setDayOfYear(1);
        mutableDateTime60.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime60.getZone();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone65);
        org.joda.time.Chronology chronology68 = chronology54.withZone(dateTimeZone65);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 83460007, periodType44, chronology68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.DurationField durationField71 = durationFieldType34.getField(chronology68);
        int int72 = period4.indexOf(durationFieldType34);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test15956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusYears(1);
        int int12 = yearMonthDay11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonthDay11.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        long long21 = duration20.getStandardMinutes();
        org.joda.time.Duration duration22 = duration20.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime34.setDayOfYear(1);
        mutableDateTime34.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime34.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime27.withZoneRetainFields(dateTimeZone39);
        org.joda.time.Interval interval42 = yearMonthDay11.toInterval(dateTimeZone39);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime47.toString(dateTimeFormatter48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime.Property property68 = dateTime51.year();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateMidnight.Property property70 = dateMidnight44.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight72 = property70.setCopy("22");
        int int73 = dateMidnight72.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.minus((-62135596799903L));
        int int76 = dateMidnight75.getDayOfWeek();
        boolean boolean77 = interval42.isAfter((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Period period78 = interval42.toPeriod();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str49, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20 + "'", int73 == 20);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test15957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15957");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        int int8 = localDateTime5.getYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths(999);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 1, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime32, periodType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime39 = dateTime32.withField(dateTimeFieldType37, 99);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime41 = dateTime39.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime10.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1971 + "'", int8 == 1971);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test15958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15958");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMinuteOfHour(2);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(26590258);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusDays(578);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test15959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15959");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        int int5 = property2.getMaximumTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.lang.String str22 = locale7.getExtension('u');
        java.lang.String str23 = locale6.getDisplayVariant(locale7);
        int int24 = property2.getMaximumShortTextLength(locale7);
        int int25 = property2.getMaximumValue();
        int int26 = property2.getMinimumValue();
        org.joda.time.DurationField durationField27 = property2.getDurationField();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test15960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15960");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withWeeksRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType24.withYearsRemoved();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str4, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test15961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15961");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.Date date5 = dateTime4.toDate();
        java.util.Date date11 = new java.util.Date(32, 57, 50, 81, 2000);
        boolean boolean12 = date5.after(date11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        int int41 = dateTime38.getMillisOfSecond();
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime38.toGregorianCalendar();
        java.util.Date date44 = gregorianCalendar43.getTime();
        gregorianCalendar43.clear();
        java.time.Instant instant46 = gregorianCalendar43.toInstant();
        java.util.Date date47 = java.util.Date.from(instant46);
        java.util.Date date48 = java.util.Date.from(instant46);
        boolean boolean49 = date5.before(date48);
        int int50 = date5.getMinutes();
        java.lang.String str51 = date5.toString();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52500010L + "'", long3 == 52500010L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 22:01:02 GMT+14:35 2022");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Nov 23 18:20:00 GMT+14:35 1936");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str17, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str40, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 14:34:59 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 GMT+14:35 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Tue Feb 22 22:01:02 GMT+14:35 2022" + "'", str51, "Tue Feb 22 22:01:02 GMT+14:35 2022");
    }

    @Test
    public void test15962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15962");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setYears(26209701);
        int int3 = mutablePeriod0.getMonths();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test15963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setDayOfYear(1);
        mutableDateTime10.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        mutableDateTime1.setZone(dateTimeZone15);
        mutableDateTime1.setMillisOfDay(8);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int26 = dateTime22.get(dateTimeFieldType25);
        mutableDateTime1.set(dateTimeFieldType25, 11);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 34 + "'", int26 == 34);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test15964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15964");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withChronology(chronology12);
        int int14 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) period30, chronology31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) period30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime61.plusMonths(999);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = interval72.withChronology(chronology73);
        org.joda.time.Interval interval75 = interval33.overlap((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Chronology chronology76 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(100L, (long) 6, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.yearOfEra();
        org.joda.time.DurationField durationField79 = chronology76.centuries();
        long long82 = durationField79.getMillis(97L, 1033859999L);
        java.lang.String str83 = durationField79.getName();
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 306102499200000L + "'", long82 == 306102499200000L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "centuries" + "'", str83, "centuries");
    }

    @Test
    public void test15965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15965");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate5 = property1.setCopy(12);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setDayOfYear(1);
        mutableDateTime7.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime7.getZone();
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) (short) 1);
        int int16 = dateTimeZone12.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateMidnight dateMidnight17 = localDate5.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearOfCentury" + "'", str2, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52500000 + "'", int16 == 52500000);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test15966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15966");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property15.roundCeilingCopy();
        boolean boolean21 = dateTimeZone11.isLocalDateTimeGap(localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime28 = property25.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime29 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfDay(2152);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayLanguage();
        int int37 = property34.getMaximumTextLength(locale35);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.addUnicodeLocaleAttribute("DayTime");
        java.util.Locale.Builder builder41 = builder38.clear();
        java.util.Locale.Builder builder43 = builder41.setLanguageTag("cinese");
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale35.getDisplayName(locale44);
        java.lang.String str46 = dateTimeZone11.getShortName(107819586000L, locale35);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+14:35");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "chinois" + "'", str36, "chinois");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "cinese");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+14:35" + "'", str46, "+14:35");
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test15967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15967");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withCenturyOfEra(8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration22.toPeriod(chronology24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateMidnight.Property property27 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight9.plus(62887196422000L);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withCenturyOfEra(14);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDurationAdded(18748800008L, (int) ' ');
        org.joda.time.DateMidnight.Property property35 = dateMidnight29.yearOfEra();
        java.lang.String str36 = property35.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3962" + "'", str36, "3962");
    }

    @Test
    public void test15968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15968");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean8 = strSet6.isEmpty();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.lang.String[] strArray12 = new java.lang.String[] { "Coordinated Universal Time", "PT0.035S" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean15 = strSet13.isEmpty();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        java.util.Date date19 = localDateTime17.toDate();
        org.joda.time.DateTime dateTime20 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusMonths((int) (short) 100);
        boolean boolean23 = strSet13.remove((java.lang.Object) localDateTime22);
        boolean boolean25 = strSet13.equals((java.lang.Object) 14L);
        int int26 = strSet13.size();
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        boolean boolean29 = strSet13.add("hourOfDay");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test15969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15969");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime2.get(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime0.property(dateTimeFieldType6);
        int int10 = localTime0.size();
        org.joda.time.LocalTime localTime12 = localTime0.plusMinutes(2005);
        org.joda.time.DateTime dateTime13 = localTime12.toDateTimeToday();
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(802);
        boolean boolean17 = dateTime13.isEqual((long) 494);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15970");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 6);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property27 = dateTime10.year();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean29 = timeOfDay1.equals((java.lang.Object) dateTime10);
        java.lang.String str31 = timeOfDay1.toString("2032-02-22");
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay1.plusMillis(16);
        org.joda.time.LocalTime localTime34 = timeOfDay1.toLocalTime();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay1.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay1.minusSeconds(0);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str8, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2032-02-22" + "'", str31, "2032-02-22");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeOfDay37);
    }

    @Test
    public void test15971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15971");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 122);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 122");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15972");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        long long13 = duration12.getStandardMinutes();
        org.joda.time.Duration duration14 = duration12.toDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        mutableDateTime22.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime26.setDayOfYear(1);
        mutableDateTime26.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime26.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime19.withZoneRetainFields(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology35 = dateTimeFormatter34.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = dateTimeFormatter34.parseLocalTime("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(chronology35);
    }

    @Test
    public void test15973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15973");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight3 = property2.getDateMidnight();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = period7.normalizedStandard(periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) period7, periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = period7.get(durationFieldType12);
        org.joda.time.Period period15 = period7.plusMillis(7);
        org.joda.time.Period period17 = period15.plusMonths(12);
        org.joda.time.MutablePeriod mutablePeriod18 = period15.toMutablePeriod();
        org.joda.time.Period period20 = period15.plusYears(1972);
        org.joda.time.Period period25 = new org.joda.time.Period(5, 1439, 53, 99);
        int int26 = period25.getYears();
        org.joda.time.Period period27 = period15.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight3.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight3.minusWeeks((-502));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test15974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15974");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.minusHours(52);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay0, chronology18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay0.minusMinutes(66);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay0.minusMillis(2021);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZone(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusDays(0);
        int int39 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateTime dateTime40 = dateMidnight38.toDateTime();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.withFieldAdded(durationFieldType46, 8);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod50.addMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight48.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, 0);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay0.plusMinutes(7201969);
        int int58 = timeOfDay0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test15975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15975");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) ' ');
        java.lang.String str6 = localDate2.toString();
        java.util.Date date12 = new java.util.Date(52, (int) 'a', 52, 4, 1439);
        int int13 = date12.getYear();
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromDateFields(date12);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate2.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.LocalDate localDate21 = localDate2.minusMonths(58);
        org.joda.time.LocalDate localDate23 = localDate21.withYear(84961100);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2032-02-22" + "'", str6, "2032-02-22");
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Mar 24 03:59:00 GMT+14:35 1960");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60 + "'", int13 == 60);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test15976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15976");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withDefaultYear(498);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant13 = org.joda.time.Instant.parse("1936-11-24", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test15977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15977");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 10, dateTimeZone7);
        boolean boolean9 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime12.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        long long28 = duration27.getStandardMinutes();
        org.joda.time.Duration duration29 = duration27.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        mutableDateTime41.setDayOfYear(1);
        mutableDateTime41.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime41.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime34.withZoneRetainFields(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) "22", dateTimeZone46);
        org.joda.time.Interval interval50 = yearMonthDay19.toInterval(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay19.withDayOfMonth((int) (short) 10);
        int int53 = yearMonthDay52.size();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay52.plusMonths(12);
        org.joda.time.LocalDate localDate56 = yearMonthDay52.toLocalDate();
        org.joda.time.LocalDate localDate57 = localDate0.withFields((org.joda.time.ReadablePartial) yearMonthDay52);
        org.joda.time.Interval interval58 = localDate57.toInterval();
        long long59 = interval58.getStartMillis();
        java.lang.String str60 = interval58.toString();
        boolean boolean62 = interval58.isAfter((long) 50);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2627803500000L + "'", long59 == 2627803500000L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2053-04-10T00:00:00.000+14:35/2053-04-11T00:00:00.000+14:35" + "'", str60, "2053-04-10T00:00:00.000+14:35/2053-04-11T00:00:00.000+14:35");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test15978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15978");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMonthOfYear(7);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withWeekyear(26291448);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withWeekyear((-38090));
        java.util.Date date11 = localDateTime4.toDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Mar 12 14:35:00 GMT+14:35 1970");
    }

    @Test
    public void test15979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15979");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withCenturyOfEra(8);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.era();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plusYears(32769);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withZone(dateTimeZone24);
        int int26 = dateTime25.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, readableInstant27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight16.withDurationAdded((org.joda.time.ReadableDuration) duration28, 69);
        org.joda.time.Minutes minutes31 = duration28.toStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setSecondOfDay((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant36, readableInstant37, periodType38);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Duration duration41 = org.joda.time.Duration.ZERO;
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration41);
        java.lang.String str43 = mutableDateTime33.toString();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime33.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.monthOfYear();
        java.util.Date date48 = localDateTime46.toDate();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.monthOfYear();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        mutableDateTime54.setDayOfYear(1);
        mutableDateTime54.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime54.getZone();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        boolean boolean65 = dateTimeField63.isLeap((long) 1439);
        boolean boolean67 = dateTimeField63.isLeap(0L);
        long long69 = dateTimeField63.roundFloor((long) (byte) 1);
        int int71 = dateTimeField63.get((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = dateTimeField63.getType();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime60.property(dateTimeFieldType72);
        boolean boolean74 = localDateTime52.isSupported(dateTimeFieldType72);
        boolean boolean75 = localDateTime46.isSupported(dateTimeFieldType72);
        mutableDateTime44.set(dateTimeFieldType72, 52);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.PeriodType periodType79 = period78.getPeriodType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T00:01:40.222+14:35" + "'", str43, "2022-02-22T00:01:40.222+14:35");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 14:35:00 GMT+14:35 1970");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-52500000L) + "'", long69 == (-52500000L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test15980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15980");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Period period3 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period5 = period3.plusSeconds((int) (short) 100);
        org.joda.time.Period period6 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period8 = period1.minusHours(999);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        mutableDateTime10.setYear(1969);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration26.plus((long) 'u');
        org.joda.time.Period period29 = duration28.toPeriod();
        boolean boolean30 = duration19.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 1, periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        boolean boolean42 = periodType39.isSupported(durationFieldType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37, periodType39);
        org.joda.time.Duration duration44 = duration19.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableDuration) duration44, periodType45);
        org.joda.time.Period period47 = period8.normalizedStandard(periodType45);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test15981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15981");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.setDayOfYear(1);
        mutableDateTime2.setMillisOfSecond((int) 'u');
        int int7 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.dayOfWeek();
        org.joda.time.Period period16 = new org.joda.time.Period((-15), 2005, 2021, 119);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) period16, 69);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test15982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15982");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str3 = locale1.getExtension('a');
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test15983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15983");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        boolean boolean15 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.plusYears(2000);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        long long25 = duration24.getStandardMinutes();
        org.joda.time.Duration duration26 = duration24.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period34 = period32.plusMonths(11);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.Duration duration43 = duration41.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime51.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setDayOfYear(1);
        mutableDateTime55.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime48.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period66 = period34.plusMinutes(69);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) period66, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight1.withYearOfCentury(81);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay73 = dateMidnight70.toYearMonthDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
    }

    @Test
    public void test15984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15984");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        mutableDateTime8.setYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        mutableDateTime8.setRounding(dateTimeField13);
        int int15 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime8.secondOfMinute();
        long long17 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDate localDate18 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 63L + "'", long17 == 63L);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test15985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15985");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getMillisOfSecond();
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime29.toGregorianCalendar();
        java.util.Date date35 = gregorianCalendar34.getTime();
        boolean boolean36 = periodType3.equals((java.lang.Object) gregorianCalendar34);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar34);
        gregorianCalendar34.setLenient(true);
        gregorianCalendar34.set(25, 2, 0);
        long long44 = gregorianCalendar34.getTimeInMillis();
        java.lang.Object obj45 = null;
        boolean boolean46 = gregorianCalendar34.after(obj45);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = gregorianCalendar34.getLeastMaximum(18000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18000000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str8, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str31, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 14:34:59 GMT+14:35 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61373376000001L) + "'", long44 == (-61373376000001L));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test15986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(86400000L, chronology1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        long long8 = chronology3.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField10 = chronology3.halfdays();
        java.lang.String str11 = durationField10.toString();
        int int13 = durationField10.getValue(1645518037430L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[halfdays]" + "'", str11, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 38090 + "'", int13 == 38090);
    }

    @Test
    public void test15987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15987");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = period6.isSupported(durationFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus(10L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plus((long) 32769);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.withMillis(432001439L);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withYear((int) (short) 1);
        int int19 = dateMidnight18.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test15988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15988");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.setDayOfMonth(6);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setWeekOfWeekyear(26472);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26472 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test15989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) (short) 1);
        int int10 = dateTimeZone6.getOffsetFromLocal((long) 83459999);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        long long18 = dateTimeField13.set((long) ' ', "22", locale17);
        boolean boolean19 = dateTimeZone6.equals((java.lang.Object) "22");
        java.lang.String str21 = dateTimeZone6.getShortName((-31536000001L));
        long long25 = dateTimeZone6.convertLocalToUTC(100L, true, (long) 22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfYear(59);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        org.joda.time.Period period31 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.minusMonths(4);
        org.joda.time.Period period36 = period34.plusMinutes(2053);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.minusYears((-38090));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52500000 + "'", int10 == 52500000);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-61472908799968L) + "'", long18 == (-61472908799968L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+14:35" + "'", str21, "+14:35");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-52499900L) + "'", long25 == (-52499900L));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test15990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15990");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        long long34 = duration33.getStandardMinutes();
        org.joda.time.Duration duration35 = duration33.toDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = duration46.plus((long) 'u');
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.Duration duration51 = duration33.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withDaysRemoved();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(86400000L, chronology57);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        long long64 = chronology59.add((long) 100, 31536000000L, (int) (short) 0);
        org.joda.time.Period period65 = duration51.toPeriod(periodType53, chronology59);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1969, 999, 999, 52, (int) (byte) 100, 1439, 4, (int) '#');
        int[] intArray76 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod74, (long) (-292278));
        int int77 = mutablePeriod74.getWeeks();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T14:34:59.999+14:35" + "'", str5, "1970-01-01T14:34:59.999+14:35");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, -4, -52, -278]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 999 + "'", int77 == 999);
    }

    @Test
    public void test15991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15991");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withChronology(chronology10);
        int int12 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = dateMidnight8.toDateTime();
        org.joda.time.DateMidnight.Property property14 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(60);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 39, dateTimeZone20);
        java.util.Locale locale25 = new java.util.Locale("Jan", "P-100W");
        java.lang.String str26 = dateTimeZone20.getShortName(35L, locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = property14.setCopy("DateTimeField[minuteOfDay]", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[minuteOfDay]\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale25.toString(), "jan_P-100W");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.060" + "'", str26, "+00:00:00.060");
    }

    @Test
    public void test15992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15992");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int1 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        int int5 = timeOfDay0.getValue(3);
        org.joda.time.DateTime dateTime6 = timeOfDay0.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) 39);
        org.joda.time.LocalTime localTime12 = property8.addWrapFieldToCopy(54);
        org.joda.time.LocalTime localTime14 = property8.addCopy((long) 93);
        org.joda.time.LocalTime localTime15 = property8.withMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test15993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15993");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = property3.get();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test15994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15994");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 1439);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 11, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtCurrentTime();
        int[] intArray19 = yearMonthDay17.getValues();
        int int20 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate7, intArray19);
        org.joda.time.Period period22 = org.joda.time.Period.years(8);
        org.joda.time.LocalDate localDate23 = localDate7.plus((org.joda.time.ReadablePeriod) period22);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2053, 4, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test15995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15995");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration1 = period0.toStandardDuration();
        org.joda.time.PeriodType periodType2 = period0.getPeriodType();
        org.joda.time.Period period3 = period0.toPeriod();
        org.joda.time.Minutes minutes4 = period0.toStandardMinutes();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test15996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15996");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = period14.plusMonths(11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        long long24 = duration23.getStandardMinutes();
        org.joda.time.Duration duration25 = duration23.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime33.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        mutableDateTime37.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime37.getZone();
        mutableDateTime33.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime30.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period48 = period16.plusMinutes(69);
        org.joda.time.Period period50 = period16.minusHours(2042);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test15997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15997");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = duration20.plus((long) 'u');
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths(999);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 1, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime33, periodType35);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        boolean boolean41 = interval40.containsNow();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        mutableDateTime43.setDayOfYear(1);
        mutableDateTime43.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime43.getZone();
        org.joda.time.Interval interval49 = interval40.withEnd((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.addWrapField(26553867);
        java.lang.String str54 = mutableDateTime53.toString();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime53.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-01-01T22:01:03.984+14:35" + "'", str54, "2022-01-01T22:01:03.984+14:35");
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test15998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15998");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(0L, (long) 1070);
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = duration2.minus(43156800000L);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT1.070S" + "'", str3, "PT1.070S");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test15999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15999");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-472953600000L));
        int int2 = yearMonthDay1.getYear();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1955 + "'", int2 == 1955);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test16000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test16000");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.plusMillis(1970);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        mutableDateTime13.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime17.setDayOfYear(1);
        mutableDateTime17.setMillisOfSecond((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime17.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds11, (org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addMonths(1966);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime13.weekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfCeiling();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DateTime.Property property17 = dateTime3.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DurationField durationField17 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(chronology8);
        org.joda.time.DurationField durationField13 = chronology8.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        int int12 = dateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.plus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property24 = dateTime16.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(4);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = dateTime26.toDateTime(dateTimeZone31);
        int int36 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(10);
        int int43 = dateTime40.getWeekOfWeekyear();
        org.joda.time.Chronology chronology44 = dateTime40.getChronology();
        org.joda.time.base.BaseDateTime[] baseDateTimeArray45 = new org.joda.time.base.BaseDateTime[] { dateTime10, dateTime35, dateTime40 };
        org.joda.time.base.BaseDateTime[] baseDateTimeArray46 = charSet2.toArray(baseDateTimeArray45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime35", (dateTime4.compareTo(dateTime35) == 0) == dateTime4.equals(dateTime35));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        java.lang.Class<?> wildcardClass12 = property11.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime2", (instant4.compareTo(dateTime2) == 0) == instant4.equals(dateTime2));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = locale31.getDisplayCountry();
        boolean boolean33 = locale31.hasExtensions();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale31);
        java.lang.String str35 = fixedDateTimeZone24.getName((long) 908, locale31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime29", (dateTime18.compareTo(dateTime29) == 0) == dateTime18.equals(dateTime29));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        java.util.TimeZone timeZone30 = fixedDateTimeZone24.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime29", (dateTime18.compareTo(dateTime29) == 0) == dateTime18.equals(dateTime29));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 3);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        int int28 = fixedDateTimeZone25.getOffset((long) 228);
        boolean boolean29 = fixedDateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime30 = dateTime19.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology34 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.year();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, chronology34);
        org.joda.time.DateTime dateTime39 = dateTime30.toDateTime(chronology34);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 8, chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime30", (dateTime19.compareTo(dateTime30) == 0) == dateTime19.equals(dateTime30));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        int int20 = fixedDateTimeZone14.getOffsetFromLocal(4345831579L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime29", (dateTime18.compareTo(dateTime29) == 0) == dateTime18.equals(dateTime29));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        boolean boolean7 = dateTimeFormatter4.isParser();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(10);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime11.plusYears(22);
        org.joda.time.DateTime.Property property17 = dateTime11.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime26 = dateTime11.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime26", (dateTime11.compareTo(dateTime26) == 0) == dateTime11.equals(dateTime26));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime1.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        boolean boolean7 = instant6.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.Instant instant5 = instant1.withMillis((long) 248);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.Instant instant7 = instant1.withMillis(1645513721480L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant1.withDurationAdded(readableDuration7, 910);
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(10);
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.plus(readablePeriod14);
        org.joda.time.DateTime dateTime16 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology20.years();
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime3.toDateTime(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime23", (dateTime3.compareTo(dateTime23) == 0) == dateTime3.equals(dateTime23));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime1.minus(readableDuration12);
        int int14 = dateTime1.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime1", (dateTime10.compareTo(dateTime1) == 0) == dateTime10.equals(dateTime1));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant1.withDurationAdded(readableDuration7, 910);
        org.joda.time.Instant instant11 = instant1.plus(6L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime(chronology13);
        int int16 = dateTime7.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime15", (dateTime7.compareTo(mutableDateTime15) == 0) == dateTime7.equals(mutableDateTime15));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        long long22 = dateTimeZone13.convertLocalToUTC(1169187558080000L, true, (long) 292278993);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(4);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property22 = dateTime12.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime12.minus(readableDuration23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        int int27 = dateTime10.get(dateTimeFieldType25);
        org.joda.time.DateTime.Property property28 = dateTime10.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime21", (dateTime1.compareTo(dateTime21) == 0) == dateTime1.equals(dateTime21));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("25713647");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        int int6 = dateTime3.getEra();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property13 = dateTime3.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField(chronology17);
        int int20 = dateTime3.get(dateTimeFieldType14);
        org.joda.time.DateTime.Property property21 = dateTime1.property(dateTimeFieldType14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DateTime.Property property17 = dateTime3.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.withMillis(252460800035L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime2", (instant5.compareTo(dateTime2) == 0) == instant5.equals(dateTime2));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        int int8 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withCenturyOfEra(913);
        int int11 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.withPeriodAdded(readablePeriod19, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime15);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks(54);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(0);
        org.joda.time.DateTime.Property property33 = dateTime30.monthOfYear();
        int int34 = property33.getMaximumValue();
        org.joda.time.DateTime dateTime35 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) -1);
        java.lang.String str43 = dateTimeZone39.getID();
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = localDateTime7.toDateTime(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime44", (dateTime37.compareTo(dateTime44) == 0) == dateTime37.equals(dateTime44));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, 930);
        org.joda.time.DateTime dateTime21 = dateTime16.withMillis(2461104000100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime16", (dateTime10.compareTo(dateTime16) == 0) == dateTime10.equals(dateTime16));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime16", (dateTime10.compareTo(dateTime16) == 0) == dateTime10.equals(dateTime16));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        java.lang.String str12 = dateTimeZone6.getNameKey((long) 812);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType12.getField(chronology15);
        int int18 = dateTime1.get(dateTimeFieldType12);
        int int19 = dateTime1.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime14", (dateTime10.compareTo(dateTime14) == 0) == dateTime10.equals(dateTime14));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.withMillisOfDay((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology28.years();
        org.joda.time.DateTime dateTime31 = dateTime18.toDateTime(chronology28);
        int int32 = dateTime31.getMillisOfDay();
        boolean boolean33 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.DateTime dateTime37 = dateTime14.withFieldAdded(durationFieldType35, 1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime31", (dateTime5.compareTo(dateTime31) == 0) == dateTime5.equals(dateTime31));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.Chronology chronology17 = dateTime3.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = property27.getAsShortText(locale30);
        java.lang.String str32 = timeZone14.getDisplayName(locale30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfDay();
        org.joda.time.DateTime.Property property25 = dateTime17.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours(4);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = dateTime27.toDateTime(dateTimeZone32);
        int int37 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(10);
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime41.plus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property48 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime50 = property48.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime50.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime36.toMutableDateTime(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getVariant();
        java.lang.String str59 = locale56.getDisplayLanguage(locale57);
        java.lang.String str60 = dateTimeZone53.getShortName((long) 140, locale56);
        org.joda.time.DateTime dateTime61 = dateTime12.toDateTime(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.weekyears();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        int int19 = localDateTime18.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = durationFieldType20.isSupported(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFieldAdded(durationFieldType20, 59);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours(0);
        org.joda.time.DateTime dateTime31 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.minus(readablePeriod32);
        long long35 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) 38);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField37 = chronology14.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime36", (dateTime26.compareTo(dateTime36) == 0) == dateTime26.equals(dateTime36));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime1.minusHours(15);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(4);
        org.joda.time.DateTime dateTime15 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = localDateTime10.toString();
        org.joda.time.Instant instant18 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime20 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        int int21 = property6.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime19", (instant18.compareTo(dateTime19) == 0) == instant18.equals(dateTime19));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(4);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((-1));
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology11 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.halfdayOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 2022, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime6.toDateTime(chronology11);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 49, chronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime14", (dateTime6.compareTo(dateTime14) == 0) == dateTime6.equals(dateTime14));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        int int12 = dateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        int int20 = property19.getMaximumValue();
        org.joda.time.DateTime dateTime21 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) 3);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(4);
        int int28 = dateTime25.getEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property35 = dateTime25.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime25.minus(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean39 = dateTime37.isSupported(dateTimeFieldType38);
        int int40 = dateTime23.get(dateTimeFieldType38);
        int int41 = dateTime3.get(dateTimeFieldType38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant1.withDurationAdded(readableDuration7, 910);
        long long10 = instant9.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime2", (instant9.compareTo(dateTime2) == 0) == instant9.equals(dateTime2));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) -1);
        java.lang.String str27 = dateTimeZone23.getID();
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime28", (dateTime21.compareTo(dateTime28) == 0) == dateTime21.equals(dateTime28));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        java.lang.String str16 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.yearOfCentury();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) dateTime1, chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime12", (dateTime10.compareTo(dateTime12) == 0) == dateTime10.equals(dateTime12));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(184);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime5 = instant1.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(1114);
        org.joda.time.DateTime dateTime6 = dateTime3.withZone(dateTimeZone5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        java.util.Date date26 = new java.util.Date(374, 41, 18, 65321929, 548);
        boolean boolean27 = timeZone14.inDaylightTime(date26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        boolean boolean12 = dateTime1.isAfter((long) 2022);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime1.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime1", (dateTime10.compareTo(dateTime1) == 0) == dateTime10.equals(dateTime1));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds(202);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime1.minusMillis(0);
        int int14 = dateTime13.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime10", (dateTime13.compareTo(dateTime10) == 0) == dateTime13.equals(dateTime10));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        long long28 = dateTimeZone25.adjustOffset((long) 70, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(dateTimeZone25);
        int int33 = dateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(4);
        int int38 = dateTime35.getEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateTime.Property property45 = dateTime35.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType46.getField(chronology49);
        int int52 = dateTime35.get(dateTimeFieldType46);
        int int53 = dateTime3.get(dateTimeFieldType46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime44", (dateTime11.compareTo(dateTime44) == 0) == dateTime11.equals(dateTime44));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime22.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale43.getVariant();
        java.lang.String str45 = locale42.getDisplayLanguage(locale43);
        java.lang.String str46 = dateTimeZone39.getShortName((long) 140, locale42);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = dateTime1.equals((java.lang.Object) durationFieldType5);
        int int7 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime1.withYearOfEra(70);
        org.joda.time.DateTime.Property property10 = dateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 2022, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology14);
        int int19 = dateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) '4');
        int int19 = property8.getDifference((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime21 = dateTime12.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        boolean boolean23 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(73L, 292269054);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusYears(15);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(10);
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.plus(readablePeriod19);
        org.joda.time.DateTime dateTime21 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        boolean boolean24 = dateTime15.isBefore((long) 1870);
        org.joda.time.Instant instant25 = dateTime15.toInstant();
        java.util.Date date26 = instant25.toDate();
        boolean boolean27 = localDateTime11.equals((java.lang.Object) date26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant25", (dateTime15.compareTo(instant25) == 0) == dateTime15.equals(instant25));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2022, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime13", (dateTime5.compareTo(dateTime13) == 0) == dateTime5.equals(dateTime13));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant12.minus(readableDuration19);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime13", (instant20.compareTo(dateTime13) == 0) == instant20.equals(dateTime13));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(4);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        boolean boolean18 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateMidnight17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime1.minus(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = dateTime13.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime10", (dateTime13.compareTo(dateTime10) == 0) == dateTime13.equals(dateTime10));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        boolean boolean20 = dateTimeZone13.isStandardOffset((long) 32772);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.years();
        java.lang.String str33 = chronology30.toString();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology30);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime26.plus(readableDuration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime34", (dateTime36.compareTo(dateTime34) == 0) == dateTime36.equals(dateTime34));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        boolean boolean12 = dateTime1.isAfter((long) 2022);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime1.minus(readableDuration13);
        int int15 = dateTime1.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime1", (dateTime10.compareTo(dateTime1) == 0) == dateTime10.equals(dateTime1));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = dateTimeZone13.getName((long) 203, locale20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime17.toLocalDateTime();
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) 739);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.years();
        java.lang.String str33 = chronology30.toString();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology30);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = dateTimeField39.getAsText((long) (byte) -1, locale41);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone36, locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology48 = chronology30.withZone(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.minus(readableDuration14);
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Instant instant17 = instant15.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime16", (instant17.compareTo(dateTime16) == 0) == instant17.equals(dateTime16));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant12.minus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant12.plus(readableDuration21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant22", (dateTime13.compareTo(instant22) == 0) == dateTime13.equals(instant22));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        java.util.Date date3 = new java.util.Date((int) (short) 100, (int) (short) 100, 913);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        int int12 = property11.getMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) -1);
        java.lang.String str21 = dateTimeZone17.getID();
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(dateTimeZone17);
        org.joda.time.Interval interval23 = localDate4.toInterval(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime22", (dateTime15.compareTo(dateTime22) == 0) == dateTime15.equals(dateTime22));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.Instant instant7 = instant1.plus((long) 848);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withField(dateTimeFieldType19, 69);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((long) '#');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours(0);
        org.joda.time.DateTime.Property property35 = dateTime32.weekyear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime32.withPeriodAdded(readablePeriod36, (int) '4');
        int int39 = property28.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime32.plus(readableDuration40);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.DateTime dateTime44 = dateTime41.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfMonth();
        int int47 = localDateTime45.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime52 = localDateTime51.toDateTime();
        org.joda.time.Chronology chronology53 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType50.getField(chronology53);
        boolean boolean56 = localDateTime45.isSupported(dateTimeFieldType50);
        org.joda.time.DateTime.Property property57 = dateTime44.property(dateTimeFieldType50);
        org.joda.time.LocalDateTime.Property property58 = localDateTime26.property(dateTimeFieldType50);
        int int59 = dateTime21.get(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime61 = localDateTime60.toDateTime();
        org.joda.time.DateTime dateTime63 = dateTime61.plusHours(4);
        org.joda.time.DateMidnight dateMidnight64 = dateTime63.toDateMidnight();
        org.joda.time.DateTime.Property property65 = dateTime63.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime68 = localDateTime67.toDateTime();
        org.joda.time.Chronology chronology69 = localDateTime67.getChronology();
        boolean boolean70 = dateTimeFieldType66.isSupported(chronology69);
        long long74 = chronology69.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField75 = chronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.dayOfYear();
        org.joda.time.DateTimeField dateTimeField77 = chronology69.weekOfWeekyear();
        org.joda.time.DateTime dateTime78 = dateTime63.toDateTime(chronology69);
        boolean boolean79 = dateTimeFieldType50.isSupported(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime63 and dateTime78", (dateTime63.compareTo(dateTime78) == 0) == dateTime63.equals(dateTime78));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.Instant instant19 = instant17.minus((long) 495);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime14", (instant17.compareTo(dateTime14) == 0) == instant17.equals(dateTime14));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 363);
        org.joda.time.Instant instant24 = instant22.minus((long) (short) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant22", (dateTime3.compareTo(instant22) == 0) == dateTime3.equals(instant22));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = dateTime3.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        java.util.Date date14 = instant13.toDate();
        java.lang.String str15 = date14.toGMTString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        int int22 = timeZone14.getOffset((long) 967);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        boolean boolean19 = dateTimeFieldType15.isSupported(chronology18);
        long long23 = chronology18.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField25 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.era();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.MutableDateTime mutableDateTime28 = instant12.toMutableDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField29 = chronology18.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime3.minusYears((int) (byte) 100);
        int int26 = dateTime25.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.years();
        java.lang.String str33 = chronology30.toString();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        int int11 = calendar10.getWeeksInWeekYear();
        calendar10.setFirstDayOfWeek(65441750);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = fixedDateTimeZone18.getName(1009868913348L, locale20);
        java.util.TimeZone timeZone22 = fixedDateTimeZone18.toTimeZone();
        timeZone22.setID("");
        calendar10.setTimeZone(timeZone22);
        calendar3.setTimeZone(timeZone22);
        int int27 = timeZone22.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar10", (calendar3.compareTo(calendar10) == 0) == calendar3.equals(calendar10));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        long long14 = chronology9.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology9);
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, 930);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime20", (dateTime10.compareTo(dateTime20) == 0) == dateTime10.equals(dateTime20));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime18 = instant12.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant12", (dateTime14.compareTo(instant12) == 0) == dateTime14.equals(instant12));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        long long14 = chronology9.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField19 = chronology9.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((-62104060800000L));
        long long9 = dateTime8.getMillis();
        org.joda.time.Instant instant11 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Instant instant13 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.plus(readableDuration14);
        org.joda.time.DateTime dateTime16 = instant13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime16", (instant13.compareTo(dateTime16) == 0) == instant13.equals(dateTime16));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        org.joda.time.DurationField durationField30 = chronology17.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.DurationField durationField23 = chronology16.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime22.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale43.getVariant();
        java.lang.String str45 = locale42.getDisplayLanguage(locale43);
        java.lang.String str46 = dateTimeZone39.getShortName((long) 140, locale42);
        long long50 = dateTimeZone39.convertLocalToUTC((long) ' ', false, (long) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        boolean boolean19 = dateTimeFieldType15.isSupported(chronology18);
        long long23 = chronology18.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField25 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.era();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.MutableDateTime mutableDateTime28 = instant12.toMutableDateTime(chronology18);
        org.joda.time.Instant instant31 = instant12.withDurationAdded(4471839967L, 548);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime28", (dateTime14.compareTo(mutableDateTime28) == 0) == dateTime14.equals(mutableDateTime28));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.Instant instant25 = instant23.withMillis(137L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime5 = instant1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant12.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded(0L, 780);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime14", (instant20.compareTo(dateTime14) == 0) == instant20.equals(dateTime14));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant12.minus(readableDuration16);
        long long18 = instant12.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant12", (dateTime14.compareTo(instant12) == 0) == dateTime14.equals(instant12));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(736);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField(chronology31);
        boolean boolean34 = localDateTime23.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.weekyears();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType43.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFieldAdded(durationFieldType43, 59);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.minus(readablePeriod55);
        long long58 = chronology37.set((org.joda.time.ReadablePartial) localDateTime41, (long) 38);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime20.toMutableDateTime(chronology37);
        org.joda.time.LocalTime localTime60 = dateTime20.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime59", (dateTime20.compareTo(mutableDateTime59) == 0) == dateTime20.equals(mutableDateTime59));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime17.toLocalDateTime();
        java.util.Date date21 = localDateTime20.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(4);
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.joda.time.DateTime.Property property25 = dateTime23.centuryOfEra();
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfYear();
        boolean boolean27 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = dateTimeField4.getAsText((long) (byte) -1, locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale9);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone1);
        java.util.Date date16 = new java.util.Date(10, 13, (int) '#');
        date16.setMinutes((int) (byte) 100);
        int int19 = date16.getMonth();
        java.util.Date date25 = new java.util.Date(8, 54, (int) ' ', (int) (short) 1, 54);
        boolean boolean26 = date16.before(date25);
        boolean boolean27 = timeZone1.inDaylightTime(date25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar12", (calendar11.compareTo(calendar12) == 0) == calendar11.equals(calendar12));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(4);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property22 = dateTime12.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime12.minus(readableDuration23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        boolean boolean27 = dateTime9.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime21", (dateTime12.compareTo(dateTime21) == 0) == dateTime12.equals(dateTime21));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        int int29 = property10.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant27", (dateTime15.compareTo(instant27) == 0) == dateTime15.equals(instant27));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        org.joda.time.DateTime.Property property30 = dateTime11.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime29", (dateTime11.compareTo(dateTime29) == 0) == dateTime11.equals(dateTime29));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(10);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.plus(readablePeriod16);
        org.joda.time.DateTime dateTime18 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfDay();
        org.joda.time.DateTime.Property property20 = dateTime12.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(4);
        int int25 = dateTime22.getEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = dateTime22.toDateTime(dateTimeZone27);
        int int32 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime3.plusDays(22);
        int int12 = dateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears((int) (byte) 1);
        boolean boolean22 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(4);
        org.joda.time.DateTime dateTime29 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int int30 = dateTime26.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime26.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime26.minusHours(60);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (-1));
        boolean boolean36 = dateTime26.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTime dateTime37 = instant35.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.Chronology chronology41 = localDateTime39.getChronology();
        boolean boolean42 = dateTimeFieldType38.isSupported(chronology41);
        long long46 = chronology41.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfWeek();
        org.joda.time.DurationField durationField48 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.era();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.MutableDateTime mutableDateTime51 = instant35.toMutableDateTime(chronology41);
        boolean boolean52 = dateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime37", (instant35.compareTo(dateTime37) == 0) == instant35.equals(dateTime37));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTime.Property property26 = dateTime23.monthOfYear();
        int int27 = property26.getMaximumValue();
        org.joda.time.DateTime dateTime28 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plus((long) 3);
        int int31 = property18.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone37 = fixedDateTimeZone36.toTimeZone();
        int int39 = fixedDateTimeZone36.getOffset((long) 228);
        boolean boolean40 = fixedDateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime41 = dateTime30.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.Chronology chronology45 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.DurationField durationField47 = chronology45.years();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.year();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(0L, chronology45);
        org.joda.time.DateTime dateTime50 = dateTime41.toDateTime(chronology45);
        boolean boolean51 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime50", (dateTime41.compareTo(dateTime50) == 0) == dateTime41.equals(dateTime50));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 803);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime14", (instant20.compareTo(dateTime14) == 0) == instant20.equals(dateTime14));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime22.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale43.getVariant();
        java.lang.String str45 = locale42.getDisplayLanguage(locale43);
        java.lang.String str46 = dateTimeZone39.getShortName((long) 140, locale42);
        java.util.TimeZone timeZone47 = dateTimeZone39.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime22", (dateTime13.compareTo(dateTime22) == 0) == dateTime13.equals(dateTime22));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime24 = dateTime21.withFieldAdded(durationFieldType22, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.withPeriodAdded(readablePeriod25, 1970);
        boolean boolean29 = dateTime27.isBefore((long) 42);
        org.joda.time.DateTime.Property property30 = dateTime27.year();
        boolean boolean31 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant12.minus(readableDuration19);
        org.joda.time.MutableDateTime mutableDateTime21 = instant12.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant12", (dateTime13.compareTo(instant12) == 0) == dateTime13.equals(instant12));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime1.minus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds(608);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime10", (dateTime13.compareTo(dateTime10) == 0) == dateTime13.equals(dateTime10));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        timeZone0.setID("");
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        timeZone0.setRawOffset(248);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.getDisplayCountry();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale9);
        calendar12.setLenient(false);
        long long15 = calendar12.getTimeInMillis();
        calendar12.add(0, 910);
        int int19 = calendar12.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone20 = calendar12.getTimeZone();
        boolean boolean21 = timeZone0.hasSameRules(timeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar12", (calendar4.compareTo(calendar12) == 0) == calendar4.equals(calendar12));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        int int19 = dateTimeZone12.getStandardOffset(1645513752000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded(1009868913348L, 23);
        int int23 = dateTime22.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.Object[] objArray3 = charSet2.toArray();
        java.lang.Object[] objArray4 = charSet2.toArray();
        java.util.Iterator<java.lang.Character> charItor5 = charSet2.iterator();
        charSet2.clear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(0L, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate14.plus(readablePeriod17);
        org.joda.time.LocalDate localDate19 = localDate11.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate21 = localDate11.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone28 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone29 = fixedDateTimeZone28.toTimeZone();
        int int31 = fixedDateTimeZone28.getOffset((long) 228);
        boolean boolean32 = fixedDateTimeZone28.isFixed();
        java.lang.String str34 = fixedDateTimeZone28.getNameKey((long) 348);
        org.joda.time.DateTime dateTime35 = localDate21.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone28);
        int int37 = fixedDateTimeZone28.getStandardOffset((long) 31);
        int int39 = fixedDateTimeZone28.getOffsetFromLocal(1L);
        boolean boolean40 = charSet2.remove((java.lang.Object) fixedDateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(0L, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(0L, dateTimeZone47);
        org.joda.time.LocalDate localDate50 = localDate48.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate52 = localDate48.plus(readablePeriod51);
        org.joda.time.LocalDate localDate53 = localDate45.withFields((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate.Property property54 = localDate53.year();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        org.joda.time.LocalDate localDate56 = property54.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate58 = localDate56.withCenturyOfEra(1100);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate60 = localDate58.plus(readablePeriod59);
        boolean boolean61 = charSet2.contains((java.lang.Object) localDate58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime35", (dateTime22.compareTo(dateTime35) == 0) == dateTime22.equals(dateTime35));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = fixedDateTimeZone4.getName(1009868913348L, locale6);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        timeZone8.setRawOffset(382);
        java.util.TimeZone.setDefault(timeZone8);
        java.util.TimeZone.setDefault(timeZone8);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone13.observesDaylightTime();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        long long21 = dateTimeField19.remainder((long) (byte) 100);
        java.lang.String str22 = dateTimeField19.getName();
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayCountry();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = dateTimeField19.getAsShortText(2, locale24);
        java.lang.String str28 = locale24.getDisplayCountry();
        java.util.Locale.setDefault(category16, locale24);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone13, locale24);
        java.lang.String str31 = locale24.toLanguageTag();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone8, locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar30", (calendar15.compareTo(calendar30) == 0) == calendar15.equals(calendar30));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        boolean boolean26 = fixedDateTimeZone22.isFixed();
        java.lang.String str28 = fixedDateTimeZone22.getNameKey((long) 348);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(4345831579L, (org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        boolean boolean32 = dateTime30.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight33 = dateTime30.toDateMidnight();
        org.joda.time.DateTime dateTime35 = dateTime30.withCenturyOfEra(23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime29", (dateTime16.compareTo(dateTime29) == 0) == dateTime16.equals(dateTime29));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime15 = dateTime3.minus(1645513739806L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(4);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(dateTimeZone22);
        int int27 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime11 = dateTime8.plus(1645513715772L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone17 = fixedDateTimeZone16.toTimeZone();
        int int19 = fixedDateTimeZone16.getOffset((long) 228);
        boolean boolean20 = fixedDateTimeZone16.isFixed();
        java.lang.String str22 = fixedDateTimeZone16.getNameKey((long) 348);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime8.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 683, (org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime24", (dateTime2.compareTo(dateTime24) == 0) == dateTime2.equals(dateTime24));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.years();
        java.lang.String str33 = chronology30.toString();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 995);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        int int17 = dateTime15.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant16", (dateTime15.compareTo(instant16) == 0) == dateTime15.equals(instant16));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime5 = localDateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(4);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMinutes(32770);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.DurationField durationField13 = durationFieldType1.getField(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        int int20 = dateTime17.getWeekOfWeekyear();
        org.joda.time.Chronology chronology21 = dateTime17.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.Chronology chronology26 = chronology21.withUTC();
        org.joda.time.DurationField durationField27 = chronology21.years();
        boolean boolean28 = durationFieldType1.isSupported(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField22", (durationField13.compareTo(durationField22) == 0) == durationField13.equals(durationField22));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(736);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField(chronology31);
        boolean boolean34 = localDateTime23.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.weekyears();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType43.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFieldAdded(durationFieldType43, 59);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.minus(readablePeriod55);
        long long58 = chronology37.set((org.joda.time.ReadablePartial) localDateTime41, (long) 38);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime20.toMutableDateTime(chronology37);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone64 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone65 = fixedDateTimeZone64.toTimeZone();
        int int67 = fixedDateTimeZone64.getOffset((long) 228);
        boolean boolean68 = fixedDateTimeZone64.isFixed();
        org.joda.time.DateTime dateTime69 = dateTime20.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime69 and mutableDateTime59", (dateTime69.compareTo(mutableDateTime59) == 0) == dateTime69.equals(mutableDateTime59));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        timeZone0.setID("");
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayCountry();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        calendar8.setLenient(false);
        calendar8.setLenient(true);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar8);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        int int16 = calendar15.getWeeksInWeekYear();
        calendar15.setFirstDayOfWeek(65441750);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = fixedDateTimeZone23.getName(1009868913348L, locale25);
        java.util.TimeZone timeZone27 = fixedDateTimeZone23.toTimeZone();
        timeZone27.setID("");
        calendar15.setTimeZone(timeZone27);
        calendar8.setTimeZone(timeZone27);
        boolean boolean32 = timeZone0.hasSameRules(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar8", (calendar4.compareTo(calendar8) == 0) == calendar4.equals(calendar8));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.withMillisOfDay((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology28.years();
        org.joda.time.DateTime dateTime31 = dateTime18.toDateTime(chronology28);
        int int32 = dateTime31.getMillisOfDay();
        boolean boolean33 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant34 = dateTime31.toInstant();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(10);
        int int41 = dateTime38.getWeekOfWeekyear();
        org.joda.time.Chronology chronology42 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.millisOfDay();
        org.joda.time.DateTime dateTime47 = dateTime31.withChronology(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant34", (dateTime3.compareTo(instant34) == 0) == dateTime3.equals(instant34));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(8, 0, 10);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(259, 60, 7, 0);
        java.util.Calendar.Builder builder29 = builder25.setWeekDate(25711821, 228, 0);
        java.util.Calendar.Builder builder33 = builder29.setDate(0, 674, 382);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.property(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        boolean boolean42 = localDateTime35.equals((java.lang.Object) property41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.DateTime dateTime46 = dateTime44.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours(0);
        org.joda.time.DateTime.Property property49 = dateTime46.monthOfYear();
        int int50 = property49.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = property49.getAsShortText(locale52);
        int int54 = property41.getMaximumTextLength(locale52);
        java.util.Calendar.Builder builder55 = builder33.setLocale(locale52);
        java.lang.String str56 = property15.getAsShortText(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(chronology8);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(4);
        org.joda.time.DateTime dateTime20 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        int int21 = dateTime17.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int29 = localDateTime23.get(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getDurationType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType28.getDurationType();
        int int32 = mutableDateTime22.get(dateTimeFieldType28);
        org.joda.time.DateTime.Property property33 = dateTime12.property(dateTimeFieldType28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        boolean boolean12 = dateTime1.isAfter((long) 2022);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime1.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime18.plusYears(22);
        org.joda.time.DateTime.Property property24 = dateTime18.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone29 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone30 = fixedDateTimeZone29.toTimeZone();
        int int32 = fixedDateTimeZone29.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime33 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) readableDuration13, (org.joda.time.DateTimeZone) fixedDateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        int int14 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusYears(17);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.withPeriodAdded(readablePeriod23, 1970);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        boolean boolean32 = dateTimeFieldType28.isSupported(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime25.toMutableDateTime(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTime dateTime35 = dateTime17.withChronology(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime33", (dateTime1.compareTo(mutableDateTime33) == 0) == dateTime1.equals(mutableDateTime33));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime10", (instant12.compareTo(dateTime10) == 0) == instant12.equals(dateTime10));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(32769);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(10);
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.plus(readablePeriod27);
        org.joda.time.DateTime dateTime29 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property30 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime32 = property30.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.year();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 9, chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.year();
        org.joda.time.DateTime dateTime42 = dateTime32.toDateTime(chronology36);
        org.joda.time.Instant instant43 = dateTime42.toInstant();
        boolean boolean44 = dateTime19.isEqual((org.joda.time.ReadableInstant) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.withMillisOfDay((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology28.years();
        org.joda.time.DateTime dateTime31 = dateTime18.toDateTime(chronology28);
        int int32 = dateTime31.getMillisOfDay();
        boolean boolean33 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant34 = dateTime31.toInstant();
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-44L), 667);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology4.years();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.year();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 9, chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.year();
        org.joda.time.DurationField durationField10 = chronology4.months();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 39, chronology4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime11", (dateTime3.compareTo(dateTime11) == 0) == dateTime3.equals(dateTime11));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime14.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(10);
        int int25 = dateTime22.getWeekOfWeekyear();
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        java.lang.String str29 = dateTimeField27.getAsShortText((long) 567);
        int int30 = dateTime14.get(dateTimeField27);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(0);
        org.joda.time.DateTime.Property property39 = dateTime36.weekyear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime36.withPeriodAdded(readablePeriod40, (int) '4');
        int int43 = property32.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime36.plus(readableDuration44);
        int int46 = dateTime45.getSecondOfMinute();
        org.joda.time.DateTime dateTime48 = dateTime45.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        int int51 = localDateTime49.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.Chronology chronology57 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType54.getField(chronology57);
        boolean boolean60 = localDateTime49.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime.Property property61 = dateTime48.property(dateTimeFieldType54);
        int int62 = dateTime14.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime63 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime65 = localDateTime64.toDateTime();
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime69 = dateTime67.plusMinutes(10);
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime72 = dateTime67.plus(readablePeriod71);
        org.joda.time.DateTime dateTime73 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property74 = dateTime67.minuteOfHour();
        org.joda.time.DateTime dateTime76 = property74.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime79 = localDateTime78.toDateTime();
        org.joda.time.Chronology chronology80 = localDateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.secondOfMinute();
        org.joda.time.DurationField durationField82 = chronology80.years();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.year();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 9, chronology80);
        org.joda.time.DateTimeField dateTimeField85 = chronology80.year();
        org.joda.time.DateTime dateTime86 = dateTime76.toDateTime(chronology80);
        org.joda.time.Instant instant87 = dateTime86.toInstant();
        boolean boolean88 = dateTime63.isAfter((org.joda.time.ReadableInstant) instant87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime76 and dateTime86", (dateTime76.compareTo(dateTime86) == 0) == dateTime76.equals(dateTime86));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded(readableDuration14, (int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime10.plusMonths(34);
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds(0);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay(254);
        boolean boolean23 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        int int27 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = localDateTime25.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime.Property property33 = localDateTime8.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology36.years();
        java.lang.String str39 = chronology36.toString();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(4);
        int int44 = dateTime41.getEra();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Calendar calendar47 = dateTime41.toCalendar(locale45);
        java.lang.Object obj48 = null;
        boolean boolean49 = dateTime41.equals(obj48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime41.getZone();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology36.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField53 = chronology52.hours();
        long long57 = chronology52.add((long) 'x', (long) 816, 385);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.weekyearOfCentury();
        boolean boolean59 = dateTimeFieldType30.isSupported(chronology52);
        org.joda.time.DurationField durationField60 = chronology52.weekyears();
        org.joda.time.DurationField durationField61 = chronology52.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField38 and durationField60", (durationField38.compareTo(durationField60) == 0) == durationField38.equals(durationField60));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, 930);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime19", (dateTime10.compareTo(dateTime19) == 0) == dateTime10.equals(dateTime19));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        int int17 = fixedDateTimeZone4.getOffset((long) (byte) 1);
        long long19 = fixedDateTimeZone4.previousTransition((long) 8);
        java.util.Date date21 = new java.util.Date((long) (byte) 1);
        int int22 = date21.getSeconds();
        java.time.Instant instant23 = date21.toInstant();
        boolean boolean24 = fixedDateTimeZone4.equals((java.lang.Object) instant23);
        java.lang.String str26 = fixedDateTimeZone4.getNameKey((long) 259);
        int int28 = fixedDateTimeZone4.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long32 = fixedDateTimeZone4.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int35 = fixedDateTimeZone4.getStandardOffset((long) 25745);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime33", (dateTime7.compareTo(dateTime33) == 0) == dateTime7.equals(dateTime33));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology17.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField19, and durationField20", !(durationField23.compareTo(durationField19) == 0) || (Math.signum(durationField23.compareTo(durationField20)) == Math.signum(durationField19.compareTo(durationField20))));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        long long8 = chronology3.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology3.months();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DurationField durationField14 = chronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        int int20 = dateTimeZone13.getOffsetFromLocal((long) 789);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone22 = fixedDateTimeZone21.toTimeZone();
        int int24 = fixedDateTimeZone21.getOffset((long) 228);
        boolean boolean25 = fixedDateTimeZone21.isFixed();
        java.lang.String str27 = fixedDateTimeZone21.getNameKey((long) 348);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        int int30 = fixedDateTimeZone21.getStandardOffset((long) 31);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime28", (dateTime15.compareTo(dateTime28) == 0) == dateTime15.equals(dateTime28));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        long long14 = chronology9.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(10);
        int int25 = dateTime22.getWeekOfWeekyear();
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.property(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        int int36 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.year();
        org.joda.time.DateTime dateTime39 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int40 = localDateTime35.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        int int23 = fixedDateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime21);
        int int25 = fixedDateTimeZone12.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = locale28.getDisplayLanguage(locale29);
        java.util.Locale locale35 = new java.util.Locale("java.util.GregorianCalendar[time=1645513710548,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=30,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "2", "2022-02-22T07:08:27.149");
        java.lang.String str36 = locale29.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.toLanguageTag();
        java.lang.String str38 = fixedDateTimeZone12.getShortName((-266363700000L), locale35);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(10);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime42.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime42.withTimeAtStartOfDay();
        int int49 = dateTime42.getEra();
        org.joda.time.Instant instant51 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime dateTime53 = instant51.toDateTime();
        org.joda.time.Instant instant56 = instant51.withDurationAdded(13305600000L, (-292275054));
        boolean boolean57 = dateTime42.isAfter((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant60 = instant51.withDurationAdded((long) (-1), 396);
        int int61 = fixedDateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime1.minus(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        int int16 = dateTime13.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime10", (dateTime13.compareTo(dateTime10) == 0) == dateTime13.equals(dateTime10));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(4);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMinutes(32770);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFieldAdded(durationFieldType26, 6);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType26.getField(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.days();
        boolean boolean36 = localDateTime18.equals((java.lang.Object) chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime3.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField38 = chronology31.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime37", (dateTime3.compareTo(mutableDateTime37) == 0) == dateTime3.equals(mutableDateTime37));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        long long16 = property15.remainder();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTime.Property property23 = dateTime20.monthOfYear();
        int int24 = property23.getMaximumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.plus((long) 3);
        int int28 = property15.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        boolean boolean37 = fixedDateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime38 = dateTime27.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = fixedDateTimeZone33.getName((long) 671, locale40);
        java.lang.String str42 = fixedDateTimeZone4.getShortName(1645513749955L, locale40);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime38", (dateTime27.compareTo(dateTime38) == 0) == dateTime27.equals(dateTime38));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears(569);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology20);
        boolean boolean23 = localDateTime12.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology26);
        java.lang.String str31 = dateTime3.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        int int23 = dateTime21.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant22", (dateTime21.compareTo(instant22) == 0) == dateTime21.equals(instant22));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.plus(readableDuration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(413);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfDay();
        org.joda.time.DateTime.Property property25 = dateTime17.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours(4);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = dateTime27.toDateTime(dateTimeZone32);
        int int37 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(10);
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime41.plus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property48 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime50 = property48.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime50.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime36.toMutableDateTime(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getVariant();
        java.lang.String str59 = locale56.getDisplayLanguage(locale57);
        java.lang.String str60 = dateTimeZone53.getShortName((long) 140, locale56);
        org.joda.time.DateTime dateTime61 = dateTime11.withZoneRetainFields(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.plusDays(39610000);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType16.isSupported(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withFieldAdded(durationFieldType16, 59);
        org.joda.time.DateTime dateTime22 = dateTime13.withFieldAdded(durationFieldType16, 25761463);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 995);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.DateTime dateTime17 = instant16.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis(436);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant16", (dateTime9.compareTo(instant16) == 0) == dateTime9.equals(instant16));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusMonths(25711821);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.withPeriodAdded(readablePeriod18, 1970);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        boolean boolean27 = dateTimeFieldType23.isSupported(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime20.toMutableDateTime(chronology26);
        boolean boolean29 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime.Property property30 = dateTime12.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime28", (dateTime1.compareTo(mutableDateTime28) == 0) == dateTime1.equals(mutableDateTime28));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 187);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTime.Property property23 = dateTime20.weekyear();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.withPeriodAdded(readablePeriod24, (int) '4');
        java.lang.String str27 = dateTime20.toString();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.Chronology chronology29 = chronology28.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter14.withChronology(chronology29);
        org.joda.time.DurationField durationField31 = chronology29.halfdays();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter9.withChronology(chronology29);
        org.joda.time.Chronology chronology34 = dateTimeFormatter33.getChronolgy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField(chronology9);
        boolean boolean12 = localDateTime1.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType6.getField(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        int int20 = localDateTime19.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = durationFieldType21.isSupported(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withFieldAdded(durationFieldType21, 59);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTime dateTime32 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime19.minus(readablePeriod33);
        long long36 = chronology15.set((org.joda.time.ReadablePartial) localDateTime19, (long) 38);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 192, chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime37", (dateTime8.compareTo(dateTime37) == 0) == dateTime8.equals(dateTime37));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears((int) (byte) 1);
        boolean boolean19 = dateTime9.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        java.lang.String str26 = dateTimeZone22.getID();
        java.lang.String str27 = dateTimeZone22.getID();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 674, dateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime9.withZone(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime28", (dateTime9.compareTo(dateTime28) == 0) == dateTime9.equals(dateTime28));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusDays(489);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology24 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField26 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        boolean boolean32 = dateTimeFieldType28.isSupported(chronology31);
        long long36 = chronology31.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField38 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology31.era();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.minuteOfHour();
        int[] intArray43 = chronology24.get((org.joda.time.ReadablePartial) localDateTime40, (long) 25794282);
        org.joda.time.DurationField durationField44 = chronology24.weekyears();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) readableDuration20, chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField44", (durationField26.compareTo(durationField44) == 0) == durationField26.equals(durationField44));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        boolean boolean9 = instant7.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((-62104060800000L));
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeFormatter16.getChronolgy();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.withPeriodAdded(readablePeriod26, (int) '4');
        java.lang.String str29 = dateTime22.toString();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.Chronology chronology31 = chronology30.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter16.withChronology(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.halfdays();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology31);
        boolean boolean35 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime10.plusMonths(226);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFieldAdded(durationFieldType25, 6);
        int int28 = localDateTime24.getMonthOfYear();
        boolean boolean29 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(32769);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.plus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime25.plus(readablePeriod32);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.DateTime dateTime37 = property34.addToCopy(1009868913348L);
        org.joda.time.DateTime dateTime38 = property34.roundHalfFloorCopy();
        int int39 = dateTime38.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfDay(573);
        boolean boolean42 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.eras();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(10);
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.plus(readablePeriod24);
        org.joda.time.DateTime dateTime26 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(10);
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime30.plus(readablePeriod34);
        org.joda.time.DateTime dateTime36 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property37 = dateTime30.minuteOfDay();
        org.joda.time.DateTime dateTime39 = property37.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime39.getZone();
        long long45 = dateTimeZone42.adjustOffset((long) 70, false);
        java.lang.String str47 = dateTimeZone42.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime49 = dateTime20.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology50 = chronology13.withZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime15", (dateTime1.compareTo(mutableDateTime15) == 0) == dateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        long long14 = chronology9.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(10);
        int int25 = dateTime22.getWeekOfWeekyear();
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.property(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        int int36 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.year();
        org.joda.time.DateTime dateTime39 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalTime localTime40 = localDateTime35.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(736);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField(chronology31);
        boolean boolean34 = localDateTime23.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.weekyears();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType43.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFieldAdded(durationFieldType43, 59);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.minus(readablePeriod55);
        long long58 = chronology37.set((org.joda.time.ReadablePartial) localDateTime41, (long) 38);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime20.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology60 = dateTime20.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime59", (dateTime20.compareTo(mutableDateTime59) == 0) == dateTime20.equals(mutableDateTime59));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property1.setCopy(331);
        org.joda.time.Instant instant5 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.Instant instant7 = instant5.toInstant();
        int int8 = property1.compareTo((org.joda.time.ReadableInstant) instant7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime6", (instant7.compareTo(dateTime6) == 0) == instant7.equals(dateTime6));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.DateTime.Property property17 = dateTime10.dayOfMonth();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone31 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone32 = fixedDateTimeZone31.toTimeZone();
        int int34 = fixedDateTimeZone31.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone31);
        java.util.TimeZone timeZone36 = fixedDateTimeZone31.toTimeZone();
        long long38 = fixedDateTimeZone22.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone31, (long) 558);
        org.joda.time.DateTime dateTime39 = dateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone31);
        boolean boolean41 = fixedDateTimeZone31.equals((java.lang.Object) 2144673);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime16", (dateTime10.compareTo(dateTime16) == 0) == dateTime10.equals(dateTime16));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears((int) (byte) 1);
        boolean boolean19 = dateTime9.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime21 = dateTime9.plusMillis(969);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(292269054);
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(10);
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.plus(readablePeriod33);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime29.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfMonth();
        int int40 = localDateTime38.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.Chronology chronology46 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType43.getField(chronology46);
        boolean boolean49 = localDateTime38.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        org.joda.time.Chronology chronology52 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType43.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfMonth();
        org.joda.time.DateTime dateTime56 = dateTime29.toDateTime(chronology52);
        int int57 = property25.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime56", (dateTime1.compareTo(dateTime56) == 0) == dateTime1.equals(dateTime56));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour(28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        int int12 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        org.joda.time.DateTime dateTime14 = dateTime3.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant13", (dateTime14.compareTo(instant13) == 0) == dateTime14.equals(instant13));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        long long25 = dateTimeField22.roundCeiling((long) 47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField19 and durationField23", (durationField19.compareTo(durationField23) == 0) == durationField19.equals(durationField23));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 187);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTime.Property property23 = dateTime20.weekyear();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.withPeriodAdded(readablePeriod24, (int) '4');
        java.lang.String str27 = dateTime20.toString();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.Chronology chronology29 = chronology28.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter14.withChronology(chronology29);
        org.joda.time.DurationField durationField31 = chronology29.halfdays();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter9.withChronology(chronology29);
        org.joda.time.DurationField durationField34 = chronology29.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.months();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField11", Math.signum(durationField10.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField10)));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime30 = property10.addToCopy((long) 785);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime10 = instant5.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime9", (instant5.compareTo(dateTime9) == 0) == instant5.equals(dateTime9));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.DurationField durationField17 = chronology13.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        java.util.Date date14 = instant13.toDate();
        java.time.Instant instant15 = date14.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        int int7 = dateTime5.getDayOfMonth();
        int int8 = dateTime5.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology11 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone19);
        int int24 = localDateTime23.getDayOfYear();
        int[] intArray26 = chronology11.get((org.joda.time.ReadablePartial) localDateTime23, (long) 30);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDayOfWeek(5);
        org.joda.time.Chronology chronology29 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime5.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime31", (dateTime5.compareTo(mutableDateTime31) == 0) == dateTime5.equals(mutableDateTime31));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone14 = fixedDateTimeZone13.toTimeZone();
        int int16 = fixedDateTimeZone13.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone13);
        java.util.TimeZone timeZone18 = fixedDateTimeZone13.toTimeZone();
        long long20 = fixedDateTimeZone4.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone13, (long) 558);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        int int23 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths(140);
        int int33 = localDateTime29.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(10);
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(22);
        org.joda.time.DateTime.Property property43 = dateTime37.era();
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfMinute();
        org.joda.time.DateTime dateTime45 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Instant instant46 = dateTime45.toInstant();
        org.joda.time.Instant instant48 = instant46.minus((-3152796670724L));
        boolean boolean49 = fixedDateTimeZone4.equals((java.lang.Object) (-3152796670724L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and instant46", (dateTime45.compareTo(instant46) == 0) == dateTime45.equals(instant46));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.plusMillis(581);
        java.util.Date date14 = localDateTime0.toDate();
        org.joda.time.Chronology chronology15 = localDateTime0.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime16", (dateTime7.compareTo(dateTime16) == 0) == dateTime7.equals(dateTime16));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant3 = instant1.minus((long) 32769);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(10);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime8.plusYears(22);
        org.joda.time.DateTime.Property property14 = dateTime8.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime23 = dateTime8.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        boolean boolean24 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) dateTime8);
        int int25 = dateTime8.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getSeconds();
        date1.setDate((-1));
        date1.setSeconds(283);
        date1.setYear(0);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(10);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.plus(readablePeriod16);
        org.joda.time.DateTime dateTime18 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        boolean boolean21 = dateTime12.isBefore((long) 1870);
        org.joda.time.Instant instant22 = dateTime12.toInstant();
        java.util.Date date23 = instant22.toDate();
        boolean boolean24 = date1.after(date23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant22", (dateTime12.compareTo(instant22) == 0) == dateTime12.equals(instant22));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime3.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        long long22 = chronology14.add((long) 2026, (long) 978, 287);
        org.joda.time.DurationField durationField23 = chronology14.years();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime3.toMutableDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField25 = chronology14.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime24", (dateTime3.compareTo(mutableDateTime24) == 0) == dateTime3.equals(mutableDateTime24));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        long long20 = dateTime18.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (-1));
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.Instant instant5 = instant2.minus(1041L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime3", (instant2.compareTo(mutableDateTime3) == 0) == instant2.equals(mutableDateTime3));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.plus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(10);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.plus(readablePeriod15);
        org.joda.time.DateTime dateTime17 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        int int23 = dateTime20.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime20.toDateMidnight();
        int int25 = dateTime20.getMinuteOfHour();
        int int26 = dateTime20.getMinuteOfHour();
        org.joda.time.DateTime.Property property27 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(436);
        org.joda.time.DateTime dateTime31 = property27.addToCopy((long) 729);
        boolean boolean32 = instant7.equals((java.lang.Object) property27);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(4);
        int int37 = dateTime34.getEra();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTime.Property property44 = dateTime34.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime34.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean48 = dateTime46.isSupported(dateTimeFieldType47);
        int int49 = instant7.get(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime43", (dateTime9.compareTo(dateTime43) == 0) == dateTime9.equals(dateTime43));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(1970);
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.property(dateTimeFieldType9);
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfCeilingCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = instant6.toMutableDateTime(chronology17);
        long long19 = instant6.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime18", (dateTime3.compareTo(mutableDateTime18) == 0) == dateTime3.equals(mutableDateTime18));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfDay(3);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime14.withPeriodAdded(readablePeriod21, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime14.withDurationAdded(readableDuration24, 25787668);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime26", (instant12.compareTo(dateTime26) == 0) == instant12.equals(dateTime26));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime15", (dateTime1.compareTo(mutableDateTime15) == 0) == dateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime.Property property33 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime27.plusDays(22);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime3.toDateTime(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant6.isSupported(dateTimeFieldType7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(704);
        int int19 = dateTime18.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime26 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int int27 = dateTime23.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime23.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime23.minusHours(60);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (-1));
        boolean boolean33 = dateTime23.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime34 = instant32.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        org.joda.time.Chronology chronology38 = localDateTime36.getChronology();
        boolean boolean39 = dateTimeFieldType35.isSupported(chronology38);
        long long43 = chronology38.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfWeek();
        org.joda.time.DurationField durationField45 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.era();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.MutableDateTime mutableDateTime48 = instant32.toMutableDateTime(chronology38);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime34", (instant32.compareTo(dateTime34) == 0) == instant32.equals(dateTime34));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.minus(97L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime2", (instant5.compareTo(dateTime2) == 0) == instant5.equals(dateTime2));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, 228);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant16", (dateTime3.compareTo(instant16) == 0) == dateTime3.equals(instant16));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (byte) 100);
        org.joda.time.Instant instant10 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.Instant instant12 = instant10.toInstant();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.plus(readableDuration13);
        org.joda.time.DateTime dateTime15 = instant12.toDateTime();
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int int17 = localDateTime6.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime15", (instant10.compareTo(dateTime15) == 0) == instant10.equals(dateTime15));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = instant27.withDurationAdded(1041L, 222);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant27", (dateTime3.compareTo(instant27) == 0) == dateTime3.equals(instant27));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(0L, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate17.plus(readablePeriod20);
        org.joda.time.LocalDate localDate22 = localDate14.withFields((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        org.joda.time.LocalDate localDate25 = property23.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = localDate9.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate9.minus(readablePeriod27);
        org.joda.time.DateTime dateTime29 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(0L, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(0L, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate41 = localDate37.plus(readablePeriod40);
        org.joda.time.LocalDate localDate42 = localDate34.withFields((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate localDate44 = localDate34.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        org.joda.time.Chronology chronology47 = dateTime45.getChronology();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime29.toDateTime(chronology47);
        org.joda.time.DateTime dateTime51 = dateTime29.withMillis(1645513753377L);
        int int52 = instant3.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(22);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        int int32 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        long long34 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        boolean boolean38 = instant33.isAfter(126000077L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant33", (dateTime31.compareTo(instant33) == 0) == dateTime31.equals(instant33));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Locale locale24 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getDisplayName();
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        java.lang.String str28 = locale21.getDisplayName(locale24);
        java.lang.String str29 = locale21.getISO3Country();
        java.lang.String str31 = locale21.getExtension('u');
        java.lang.String str32 = timeZone14.getDisplayName(locale21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField6 = chronology2.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime5", (dateTime1.compareTo(dateTime5) == 0) == dateTime1.equals(dateTime5));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        java.lang.String str11 = dateTimeField10.toString();
        long long14 = dateTimeField10.set((long) 1912, 418);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone16.observesDaylightTime();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.remainder((long) (byte) 100);
        java.lang.String str25 = dateTimeField22.getName();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayCountry();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = dateTimeField22.getAsShortText(2, locale27);
        java.lang.String str31 = locale27.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone16, locale27);
        java.lang.String str34 = locale27.toLanguageTag();
        java.lang.String str35 = dateTimeField10.getAsText(234, locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar33", (calendar18.compareTo(calendar33) == 0) == calendar18.equals(calendar33));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.halfdayOfDay();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology2.withZone(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime8", (dateTime1.compareTo(dateTime8) == 0) == dateTime1.equals(dateTime8));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2022, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(chronology10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        long long15 = dateTime14.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime14", (dateTime5.compareTo(dateTime14) == 0) == dateTime5.equals(dateTime14));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        int int39 = dateTime29.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime38", (dateTime29.compareTo(dateTime38) == 0) == dateTime29.equals(dateTime38));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(4);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMinutes(32770);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFieldAdded(durationFieldType26, 6);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType26.getField(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.days();
        boolean boolean36 = localDateTime18.equals((java.lang.Object) chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime3.toMutableDateTime(chronology31);
        long long38 = dateTime3.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime37", (dateTime12.compareTo(mutableDateTime37) == 0) == dateTime12.equals(mutableDateTime37));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant25 = dateTime24.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((-3152796670724L));
        org.joda.time.Instant instant29 = instant27.plus(4345851240L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant25", (dateTime24.compareTo(instant25) == 0) == dateTime24.equals(instant25));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        int int12 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        org.joda.time.LocalDateTime localDateTime14 = dateTime3.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(22);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        int int32 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        long long34 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant36.withDurationAdded(readableDuration37, 537);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant39", (dateTime31.compareTo(instant39) == 0) == dateTime31.equals(instant39));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime.Property property17 = dateTime14.year();
        org.joda.time.DateTime dateTime19 = property17.setCopy(463);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(4);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMinutes(32770);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFieldAdded(durationFieldType26, 6);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType26.getField(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.days();
        boolean boolean36 = localDateTime18.equals((java.lang.Object) chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime3.toMutableDateTime(chronology31);
        org.joda.time.Chronology chronology38 = chronology31.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime37", (dateTime3.compareTo(mutableDateTime37) == 0) == dateTime3.equals(mutableDateTime37));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, (int) 'a');
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(59);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(chronology14);
        org.joda.time.DateTime.Property property18 = dateTime11.dayOfMonth();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone24 = fixedDateTimeZone23.toTimeZone();
        int int26 = fixedDateTimeZone23.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone32 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone33 = fixedDateTimeZone32.toTimeZone();
        int int35 = fixedDateTimeZone32.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone32);
        java.util.TimeZone timeZone37 = fixedDateTimeZone32.toTimeZone();
        long long39 = fixedDateTimeZone23.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone32, (long) 558);
        org.joda.time.DateTime dateTime40 = dateTime11.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone32);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(1000L, (org.joda.time.DateTimeZone) fixedDateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime17", (dateTime11.compareTo(dateTime17) == 0) == dateTime11.equals(dateTime17));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        boolean boolean7 = dateTime2.equals((java.lang.Object) durationFieldType6);
        int int8 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime2.withYearOfEra(70);
        org.joda.time.DateTime.Property property11 = dateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.halfdayOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 2022, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime2, chronology15);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) 514, chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        java.lang.String str26 = dateTimeZone22.getID();
        java.lang.String str27 = dateTimeZone22.getID();
        long long30 = dateTimeZone22.adjustOffset((long) 348, false);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime33 = dateTime6.withSecondOfMinute(11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime31", (dateTime6.compareTo(dateTime31) == 0) == dateTime6.equals(dateTime31));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime3.minusYears((int) (byte) 100);
        int int26 = dateTime25.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology19.getZone();
        long long26 = dateTimeZone23.adjustOffset((long) 2081, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime1.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.Object[] objArray3 = charSet2.toArray();
        java.lang.Object[] objArray4 = charSet2.toArray();
        java.util.Iterator<java.lang.Character> charItor5 = charSet2.iterator();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(10);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.plus(readablePeriod13);
        org.joda.time.DateTime dateTime15 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property16 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime18 = property16.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.year();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 9, chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.year();
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime(chronology22);
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime33.minusMonths(11);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(10);
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.plus(readablePeriod47);
        org.joda.time.DateTime dateTime49 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property50 = dateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime52 = property50.addWrapFieldToCopy(0);
        long long53 = property50.remainder();
        java.lang.String str54 = property50.toString();
        org.joda.time.DateTime dateTime55 = property50.withMaximumValue();
        org.joda.time.DateTime dateTime56 = property50.withMinimumValue();
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = dateTime56.isSupported(dateTimeFieldType58);
        org.joda.time.ReadableInstant[] readableInstantArray60 = new org.joda.time.ReadableInstant[] { dateTime28, dateTime39, dateTime56 };
        org.joda.time.ReadableInstant[] readableInstantArray61 = charSet2.toArray(readableInstantArray60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime28", (dateTime18.compareTo(dateTime28) == 0) == dateTime18.equals(dateTime28));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded(13305600000L, (-292275054));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant1.withDurationAdded(readableDuration7, 910);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int11 = instant1.get(dateTimeFieldType10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.Chronology chronology4 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        java.lang.String str26 = dateTimeZone22.getID();
        java.lang.String str27 = dateTimeZone22.getID();
        long long30 = dateTimeZone22.adjustOffset((long) 348, false);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime31", (dateTime1.compareTo(dateTime31) == 0) == dateTime1.equals(dateTime31));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime3.withDurationAdded(readableDuration10, (int) (byte) 10);
        long long13 = dateTime12.getMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTime.Property property27 = dateTime24.weekyear();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime24.withPeriodAdded(readablePeriod28, (int) '4');
        java.lang.String str31 = dateTime24.toString();
        org.joda.time.Chronology chronology32 = dateTime24.getChronology();
        org.joda.time.Chronology chronology33 = chronology32.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter18.withChronology(chronology33);
        org.joda.time.DurationField durationField35 = chronology33.halfdays();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime12.toMutableDateTime(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        date1.setYear(228);
        int int4 = date1.getDay();
        int int5 = date1.getMinutes();
        date1.setYear(348);
        int int8 = date1.getTimezoneOffset();
        date1.setSeconds(339);
        int int11 = date1.getDate();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date1);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(4);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTime.Property property25 = dateTime15.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.Chronology chronology29 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField(chronology29);
        int int32 = dateTime15.get(dateTimeFieldType26);
        org.joda.time.LocalDate.Property property33 = localDate12.property(dateTimeFieldType26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime24", (dateTime15.compareTo(dateTime24) == 0) == dateTime15.equals(dateTime24));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        org.joda.time.Instant instant8 = instant3.plus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime6", (instant8.compareTo(dateTime6) == 0) == instant8.equals(dateTime6));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        long long18 = dateTimeZone15.adjustOffset((long) 70, false);
        java.lang.String str20 = dateTimeZone15.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str23 = dateTimeZone15.getName((long) 318);
        org.joda.time.Instant instant25 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant27 = instant25.minus((long) (byte) 1);
        org.joda.time.Instant instant28 = instant27.toInstant();
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant27.withDurationAdded(readableDuration31, 25859005);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime30", (instant33.compareTo(mutableDateTime30) == 0) == instant33.equals(mutableDateTime30));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime.Property property17 = dateTime14.year();
        org.joda.time.DateTime dateTime18 = property17.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime18", (instant12.compareTo(dateTime18) == 0) == instant12.equals(dateTime18));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        int int7 = dateTime5.getDayOfMonth();
        int int8 = dateTime5.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology11 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone19);
        int int24 = localDateTime23.getDayOfYear();
        int[] intArray26 = chronology11.get((org.joda.time.ReadablePartial) localDateTime23, (long) 30);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDayOfWeek(5);
        org.joda.time.Chronology chronology29 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime5.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime31", (dateTime5.compareTo(mutableDateTime31) == 0) == dateTime5.equals(mutableDateTime31));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        boolean boolean21 = dateTimeFieldType17.isSupported(chronology20);
        boolean boolean22 = dateTimeFieldType16.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(674);
        org.joda.time.DateTime dateTime31 = dateTime27.withWeekyear((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime27.year();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        boolean boolean34 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime24", (dateTime13.compareTo(dateTime24) == 0) == dateTime13.equals(dateTime24));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Instant instant31 = instant27.plus((long) 893);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant27", (dateTime3.compareTo(instant27) == 0) == dateTime3.equals(instant27));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Chronology chronology30 = instant27.getChronology();
        org.joda.time.Chronology chronology31 = chronology30.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant27", (dateTime3.compareTo(instant27) == 0) == dateTime3.equals(instant27));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        int int57 = dateTime21.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime56", (dateTime5.compareTo(mutableDateTime56) == 0) == dateTime5.equals(mutableDateTime56));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.millis();
        org.joda.time.DateTime dateTime23 = dateTime14.withChronology(chronology19);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        int int25 = localDateTime24.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = durationFieldType26.isSupported(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withFieldAdded(durationFieldType26, 59);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusYears(13);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int34 = localDateTime24.get(dateTimeFieldType33);
        int int35 = dateTime14.get(dateTimeFieldType33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime23", (dateTime14.compareTo(dateTime23) == 0) == dateTime14.equals(dateTime23));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = instant27.withDurationAdded(1041L, 222);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant27", (dateTime3.compareTo(instant27) == 0) == dateTime3.equals(instant27));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType1.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField9 = chronology4.halfdays();
        org.joda.time.DurationField durationField10 = chronology4.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(4471854845L, chronology4);
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField9, and durationField10", !(durationField12.compareTo(durationField9) == 0) || (Math.signum(durationField12.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = instant9.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        boolean boolean24 = dateTime19.equals((java.lang.Object) durationFieldType23);
        int int25 = dateTime19.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime19.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.property(dateTimeFieldType29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.year();
        boolean boolean34 = dateTime19.equals((java.lang.Object) localDateTime28);
        org.joda.time.Chronology chronology35 = dateTime19.getChronology();
        org.joda.time.DateTime.Property property36 = dateTime19.weekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = instant17.toMutableDateTime(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime14", (instant17.compareTo(dateTime14) == 0) == instant17.equals(dateTime14));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant12.withDurationAdded(readableDuration14, 4771502);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant16.withDurationAdded(readableDuration17, 150);
        boolean boolean20 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(0L, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate23.plus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate23.monthOfYear();
        org.joda.time.LocalDate localDate29 = property28.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property28.getFieldType();
        boolean boolean31 = instant19.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime9", (instant1.compareTo(dateTime9) == 0) == instant1.equals(dateTime9));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        java.util.Locale locale20 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        boolean boolean25 = dateTime16.equals((java.lang.Object) locale20);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime16.withChronology(chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(59);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime.Property property38 = dateTime35.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = property38.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property41 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.DateTime.Property property42 = dateTime33.property(dateTimeFieldType40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime31", (dateTime5.compareTo(dateTime31) == 0) == dateTime5.equals(dateTime31));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant4 = instant1.minus(1645513896624L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.plus(readableDuration5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withPeriodAdded(readablePeriod12, 39599999);
        java.lang.String str15 = dateTime10.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant3 = instant1.minus((long) 32769);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(10);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime8.plusYears(22);
        org.joda.time.DateTime.Property property14 = dateTime8.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime23 = dateTime8.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        boolean boolean24 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone31 = fixedDateTimeZone30.toTimeZone();
        int int33 = fixedDateTimeZone30.getOffset((long) 228);
        java.lang.String str35 = fixedDateTimeZone30.getShortName((long) 2);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFieldAdded(durationFieldType42, 6);
        boolean boolean45 = fixedDateTimeZone30.isLocalDateTimeGap(localDateTime44);
        java.lang.String str47 = fixedDateTimeZone30.getNameKey((long) 184);
        int int49 = fixedDateTimeZone30.getOffsetFromLocal((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder57 = builder53.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone58.observesDaylightTime();
        timeZone58.setID("");
        java.util.Calendar.Builder builder62 = builder53.setTimeZone(timeZone58);
        boolean boolean63 = timeZone52.hasSameRules(timeZone58);
        int int64 = timeZone52.getRawOffset();
        java.util.Locale locale67 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = locale67.getDisplayVariant(locale68);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone52, locale68);
        java.lang.String str72 = fixedDateTimeZone30.getName(10L, locale68);
        java.lang.String str73 = locale68.getDisplayLanguage();
        java.lang.String str74 = dateTime8.toString("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.Chronology chronology5 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 9, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.year();
        org.joda.time.DurationField durationField11 = chronology5.months();
        org.joda.time.DurationField durationField12 = chronology5.hours();
        boolean boolean13 = durationFieldType0.isSupported(chronology5);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTime.Property property20 = dateTime17.weekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.withPeriodAdded(readablePeriod21, (int) '4');
        java.lang.String str24 = dateTime17.toString();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.Chronology chronology26 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        boolean boolean29 = durationFieldType0.isSupported(chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField28", Math.signum(durationField7.compareTo(durationField28)) == -Math.signum(durationField28.compareTo(durationField7)));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        int int11 = calendar10.getWeeksInWeekYear();
        calendar10.setFirstDayOfWeek(65441750);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = fixedDateTimeZone18.getName(1009868913348L, locale20);
        java.util.TimeZone timeZone22 = fixedDateTimeZone18.toTimeZone();
        timeZone22.setID("");
        calendar10.setTimeZone(timeZone22);
        calendar3.setTimeZone(timeZone22);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar10", (calendar3.compareTo(calendar10) == 0) == calendar3.equals(calendar10));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, (int) '4');
        int int23 = property12.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.plus(readableDuration24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        int int38 = fixedDateTimeZone33.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime39 = dateTime28.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.TimeZone timeZone40 = fixedDateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime41 = dateTime10.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        org.joda.time.LocalDateTime localDateTime42 = dateTime41.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 3);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        int int28 = fixedDateTimeZone25.getOffset((long) 228);
        boolean boolean29 = fixedDateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime30 = dateTime19.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology34 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.year();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, chronology34);
        org.joda.time.DateTime dateTime39 = dateTime30.toDateTime(chronology34);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) (-1447174180056L), chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime39", (dateTime19.compareTo(dateTime39) == 0) == dateTime19.equals(dateTime39));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology20);
        boolean boolean23 = localDateTime12.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology26);
        org.joda.time.DurationField durationField31 = chronology26.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DurationField durationField6 = chronology2.centuries();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant25 = dateTime24.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((-3152796670724L));
        org.joda.time.Instant instant29 = instant25.minus((-604799880L));
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant25", (dateTime24.compareTo(instant25) == 0) == dateTime24.equals(instant25));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime3.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        long long22 = chronology14.add((long) 2026, (long) 978, 287);
        org.joda.time.DurationField durationField23 = chronology14.years();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime3.toMutableDateTime(chronology14);
        long long25 = dateTime3.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime24", (dateTime6.compareTo(mutableDateTime24) == 0) == dateTime6.equals(mutableDateTime24));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        java.lang.Class<?> wildcardClass6 = instant1.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 3);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        int int28 = fixedDateTimeZone25.getOffset((long) 228);
        boolean boolean29 = fixedDateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime30 = dateTime19.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology34 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.year();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, chronology34);
        org.joda.time.DateTime dateTime39 = dateTime30.toDateTime(chronology34);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(4345828869L, chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime39", (dateTime19.compareTo(dateTime39) == 0) == dateTime19.equals(dateTime39));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant12.minus(readableDuration19);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((long) 25882012, 122);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime13", (instant20.compareTo(dateTime13) == 0) == instant20.equals(dateTime13));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfDay(3);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime14.withPeriodAdded(readablePeriod21, (int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime14.plusMillis(115);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfDay(3);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime14.withPeriodAdded(readablePeriod21, (int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime23", (instant12.compareTo(dateTime23) == 0) == instant12.equals(dateTime23));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        java.lang.String str39 = chronology33.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.halfdayOfDay();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime8", (dateTime1.compareTo(dateTime8) == 0) == dateTime1.equals(dateTime8));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(995);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(29);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = durationFieldType11.isSupported(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withFieldAdded(durationFieldType11, 59);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plusYears(13);
        int int18 = localDateTime17.getEra();
        int int19 = localDateTime17.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMonths(41);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        int int26 = dateTime23.getEra();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale27);
        java.lang.Object obj30 = null;
        boolean boolean31 = dateTime23.equals(obj30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime23.getZone();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long36 = dateTimeZone32.adjustOffset((long) 6, true);
        org.joda.time.DateTime dateTime37 = localDateTime21.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean39 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(4);
        int int44 = dateTime41.getEra();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = dateTime41.toDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(0);
        org.joda.time.DateTime.Property property59 = dateTime56.weekyear();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime56.withPeriodAdded(readablePeriod60, (int) '4');
        int int63 = property52.getDifference((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime56.plus(readableDuration64);
        int int66 = dateTime65.getSecondOfMinute();
        org.joda.time.DateTime dateTime68 = dateTime65.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone73 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone74 = fixedDateTimeZone73.toTimeZone();
        int int76 = fixedDateTimeZone73.getOffset((long) 228);
        int int78 = fixedDateTimeZone73.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime79 = dateTime68.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone73);
        java.util.TimeZone timeZone80 = fixedDateTimeZone73.toTimeZone();
        org.joda.time.DateTime dateTime81 = dateTime50.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone73);
        org.joda.time.DateTime dateTime82 = dateTime8.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime50", (dateTime1.compareTo(dateTime50) == 0) == dateTime1.equals(dateTime50));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2022, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(chronology10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.year();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 9, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.year();
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DurationField durationField25 = chronology18.hours();
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime26", (dateTime5.compareTo(dateTime26) == 0) == dateTime5.equals(dateTime26));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology20);
        boolean boolean23 = localDateTime12.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime14", (instant19.compareTo(dateTime14) == 0) == instant19.equals(dateTime14));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.DurationField durationField21 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.dayOfMonth();
        org.joda.time.DurationField durationField23 = chronology17.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField19, and durationField20", !(durationField23.compareTo(durationField19) == 0) || (Math.signum(durationField23.compareTo(durationField20)) == Math.signum(durationField19.compareTo(durationField20))));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        int int9 = dateTime7.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.plusMinutes(0);
        org.joda.time.DateTime dateTime13 = dateTime7.plusYears(816);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfDay();
        org.joda.time.DateTime dateTime27 = property25.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType30.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration28, chronology33);
        org.joda.time.DateTimeZone dateTimeZone38 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfEra();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 991, chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField42 = chronology33.hours();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology33.getZone();
        org.joda.time.DateTime dateTime44 = dateTime7.toDateTime(dateTimeZone43);
        java.lang.String str46 = dateTimeZone43.getNameKey((long) 437);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime44", (dateTime3.compareTo(dateTime44) == 0) == dateTime3.equals(dateTime44));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        boolean boolean5 = dateTimeFieldType1.isSupported(chronology4);
        boolean boolean6 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(10);
        int int14 = dateTime11.getWeekOfWeekyear();
        org.joda.time.Chronology chronology15 = dateTime11.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.centuryOfEra();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DurationField durationField21 = durationFieldType7.getField(chronology15);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology15.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField21", Math.signum(durationField16.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField16)));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, 228);
        org.joda.time.Instant instant18 = instant16.plus(4345819974L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant16", (dateTime3.compareTo(instant16) == 0) == dateTime3.equals(instant16));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        int int23 = fixedDateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime21);
        int int25 = fixedDateTimeZone12.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone31 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone32 = fixedDateTimeZone31.toTimeZone();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.withZone(dateTimeZone39);
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfSecond();
        int int42 = fixedDateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime40);
        int int44 = fixedDateTimeZone31.getOffset((long) (byte) 1);
        long long46 = fixedDateTimeZone31.previousTransition((long) 8);
        java.util.Date date48 = new java.util.Date((long) (byte) 1);
        int int49 = date48.getSeconds();
        java.time.Instant instant50 = date48.toInstant();
        boolean boolean51 = fixedDateTimeZone31.equals((java.lang.Object) instant50);
        java.lang.String str53 = fixedDateTimeZone31.getNameKey((long) 259);
        int int55 = fixedDateTimeZone31.getStandardOffset(2022L);
        org.joda.time.DateTime dateTime56 = dateTime26.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone31);
        org.joda.time.Instant instant57 = dateTime26.toInstant();
        int int58 = dateTime26.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant57", (dateTime3.compareTo(instant57) == 0) == dateTime3.equals(instant57));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 4830722);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime10", (instant13.compareTo(dateTime10) == 0) == instant13.equals(dateTime10));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Instant instant8 = dateTime3.toInstant();
        java.lang.String str9 = dateTime3.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant8", (dateTime6.compareTo(instant8) == 0) == dateTime6.equals(instant8));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        org.joda.time.DateTime.Property property57 = dateTime21.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime56", (dateTime21.compareTo(mutableDateTime56) == 0) == dateTime21.equals(mutableDateTime56));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        org.joda.time.DateTime dateTime31 = dateTime29.minusYears(25856184);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime2", (instant7.compareTo(dateTime2) == 0) == instant7.equals(dateTime2));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4471839967L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(10);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.plus(readablePeriod16);
        org.joda.time.DateTime dateTime18 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTime dateTime25 = dateTime12.toDateTime(chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, 611);
        boolean boolean29 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime28", (dateTime12.compareTo(dateTime28) == 0) == dateTime12.equals(dateTime28));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        boolean boolean26 = fixedDateTimeZone22.isFixed();
        java.lang.String str28 = fixedDateTimeZone22.getNameKey((long) 348);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(4345831579L, (org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime32 = property31.withMaximumValue();
        org.joda.time.DateTime dateTime34 = property31.addToCopy(711L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime29", (dateTime16.compareTo(dateTime29) == 0) == dateTime16.equals(dateTime29));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone22 = fixedDateTimeZone21.toTimeZone();
        int int24 = fixedDateTimeZone21.getOffset((long) 228);
        boolean boolean25 = fixedDateTimeZone21.isFixed();
        java.lang.String str27 = fixedDateTimeZone21.getNameKey((long) 348);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        java.util.Locale locale30 = java.util.Locale.UK;
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str33 = locale30.getDisplayLanguage(locale31);
        java.util.Locale locale37 = new java.util.Locale("java.util.GregorianCalendar[time=1645513710548,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=30,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "2", "2022-02-22T07:08:27.149");
        java.lang.String str38 = locale31.getDisplayLanguage(locale37);
        java.lang.String str39 = fixedDateTimeZone21.getName(62135942400052L, locale37);
        java.util.TimeZone timeZone40 = fixedDateTimeZone21.toTimeZone();
        boolean boolean42 = fixedDateTimeZone21.isStandardOffset((long) 944);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime28", (dateTime15.compareTo(dateTime28) == 0) == dateTime15.equals(dateTime28));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        int int17 = fixedDateTimeZone4.getOffset((long) (byte) 1);
        long long19 = fixedDateTimeZone4.previousTransition((long) 8);
        java.util.Date date21 = new java.util.Date((long) (byte) 1);
        int int22 = date21.getSeconds();
        java.time.Instant instant23 = date21.toInstant();
        boolean boolean24 = fixedDateTimeZone4.equals((java.lang.Object) instant23);
        java.lang.String str26 = fixedDateTimeZone4.getNameKey((long) 259);
        int int28 = fixedDateTimeZone4.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long32 = fixedDateTimeZone4.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(10);
        int int40 = dateTime37.getWeekOfWeekyear();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        int int45 = dateTime33.get(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = localDateTime47.getChronology();
        boolean boolean50 = dateTimeFieldType46.isSupported(chronology49);
        long long54 = chronology49.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.yearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime33.toDateTime(chronology49);
        java.lang.String str57 = dateTime33.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime56", (dateTime7.compareTo(dateTime56) == 0) == dateTime7.equals(dateTime56));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime3.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.weekyear();
        org.joda.time.DateTime.Property property26 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        boolean boolean30 = dateTime27.isEqual((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.halfdayOfDay();
        org.joda.time.DurationField durationField35 = chronology33.seconds();
        org.joda.time.DurationField durationField36 = chronology33.millis();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime27.toDateTime(chronology33);
        org.joda.time.DateTime dateTime39 = dateTime13.toDateTime(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime38", (dateTime9.compareTo(dateTime38) == 0) == dateTime9.equals(dateTime38));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime(chronology13);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime15", (dateTime1.compareTo(mutableDateTime15) == 0) == dateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 411);
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withYearOfEra(100);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone20 = new org.joda.time.tz.FixedDateTimeZone("Japan", "DateTimeField[millisOfDay]", 2026, 500);
        java.util.TimeZone timeZone21 = fixedDateTimeZone20.toTimeZone();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = fixedDateTimeZone20.getName(0L, locale23);
        java.lang.String str25 = fixedDateTimeZone20.getID();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone20);
        org.joda.time.DateTime dateTime28 = dateTime26.withYear(869);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        int int31 = localDateTime29.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.monthOfYear();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) -1);
        java.lang.String str42 = dateTimeZone38.getID();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime36, dateTimeZone38);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime36.getFields();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.plusDays(489);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int48 = localDateTime46.get(dateTimeFieldType47);
        int int49 = dateTime28.get(dateTimeFieldType47);
        boolean boolean50 = localDateTime9.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) 100);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime14", (instant17.compareTo(dateTime14) == 0) == instant17.equals(dateTime14));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime.Property property4 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime5 = property4.getDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(359);
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        boolean boolean9 = dateTime5.isBeforeNow();
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(10);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.plus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        boolean boolean23 = dateTime14.isBefore((long) 1870);
        org.joda.time.Instant instant24 = dateTime14.toInstant();
        boolean boolean25 = dateTime5.isBefore((org.joda.time.ReadableInstant) instant24);
        int int26 = dateTime5.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant24", (dateTime3.compareTo(instant24) == 0) == dateTime3.equals(instant24));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(1970);
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.property(dateTimeFieldType9);
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfCeilingCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = instant6.toMutableDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = instant6.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime18", (dateTime3.compareTo(mutableDateTime18) == 0) == dateTime3.equals(mutableDateTime18));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(0L, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate9.plus(readablePeriod12);
        org.joda.time.LocalDate localDate14 = localDate6.withFields((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate16 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0, chronology18);
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DurationField durationField21 = durationFieldType0.getField(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.DurationField durationField24 = chronology18.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField20, and durationField21", !(durationField24.compareTo(durationField20) == 0) || (Math.signum(durationField24.compareTo(durationField21)) == Math.signum(durationField20.compareTo(durationField21))));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType12.getField(chronology15);
        int int18 = dateTime1.get(dateTimeFieldType12);
        int int19 = dateTime1.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime14", (dateTime10.compareTo(dateTime14) == 0) == dateTime10.equals(dateTime14));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime3.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime3.withYearOfEra(851);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(4);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(0);
        org.joda.time.DateTime.Property property33 = dateTime30.weekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.withPeriodAdded(readablePeriod34, (int) '4');
        int int37 = property26.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime30.plus(readableDuration38);
        int int40 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone47 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone48 = fixedDateTimeZone47.toTimeZone();
        int int50 = fixedDateTimeZone47.getOffset((long) 228);
        int int52 = fixedDateTimeZone47.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime53 = dateTime42.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone47);
        java.util.TimeZone timeZone54 = fixedDateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime55 = dateTime24.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone47);
        java.lang.String str56 = dateTime24.toString();
        org.joda.time.DateTime dateTime57 = dateTime24.toDateTimeISO();
        int int58 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime57", (dateTime1.compareTo(dateTime57) == 0) == dateTime1.equals(dateTime57));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 3);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        int int28 = fixedDateTimeZone25.getOffset((long) 228);
        boolean boolean29 = fixedDateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime30 = dateTime19.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology34 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.year();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, chronology34);
        org.joda.time.DateTime dateTime39 = dateTime30.toDateTime(chronology34);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 615, chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime39", (dateTime19.compareTo(dateTime39) == 0) == dateTime19.equals(dateTime39));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        int int23 = fixedDateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime21);
        int int25 = fixedDateTimeZone12.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        org.joda.time.DateTime dateTime28 = dateTime7.plusMonths(4771502);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField33 = chronology31.centuries();
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) dateTime28, chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField33 and durationField34", Math.signum(durationField33.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField33)));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((java.lang.Object) dateTime3);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime3.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        boolean boolean20 = dateTime15.equals((java.lang.Object) durationFieldType19);
        int int21 = dateTime15.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime15.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.property(dateTimeFieldType25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.year();
        boolean boolean30 = dateTime15.equals((java.lang.Object) localDateTime24);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        org.joda.time.DateTime.Property property32 = dateTime15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime15.getZone();
        java.lang.String str35 = dateTimeZone33.getName(1645513753373L);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale locale39 = locale37.stripExtensions();
        java.lang.String str40 = dateTimeZone33.getName((long) 26, locale39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime3.toMutableDateTime(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime3", (instant10.compareTo(dateTime3) == 0) == instant10.equals(dateTime3));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        org.joda.time.DateTime dateTime31 = dateTime29.minusYears(25856184);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withPeriodAdded(readablePeriod32, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTime.Property property63 = dateTime60.monthOfYear();
        int int64 = property63.getMaximumValue();
        org.joda.time.DateTime dateTime65 = property63.roundHalfCeilingCopy();
        int int66 = dateTime65.getDayOfYear();
        int int67 = dateTime65.getEra();
        int int68 = mutableDateTime56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        int int71 = localDateTime69.get(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType70.getDurationType();
        org.joda.time.DateTime.Property property73 = dateTime65.property(dateTimeFieldType70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime56", (dateTime5.compareTo(mutableDateTime56) == 0) == dateTime5.equals(mutableDateTime56));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.set(2, 0, (int) (short) 0, 2022, 2);
        java.time.Instant instant10 = calendar3.toInstant();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        calendar3.setFirstDayOfWeek(564);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = dateTimeField18.getAsText((long) (byte) -1, locale20);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str24 = locale20.getDisplayCountry(locale23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone15, locale23);
        java.util.Date date27 = new java.util.Date((long) (byte) 1);
        date27.setYear(228);
        int int30 = date27.getDay();
        int int31 = date27.getMinutes();
        date27.setYear(348);
        int int34 = date27.getTimezoneOffset();
        calendar25.setTime(date27);
        calendar3.setTime(date27);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromDateFields(date27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar25", (calendar3.compareTo(calendar25) == 0) == calendar3.equals(calendar25));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime3.plusMonths(34);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant12.minus(readableDuration16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant17", (dateTime11.compareTo(instant17) == 0) == dateTime11.equals(instant17));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.year();
        org.joda.time.DurationField durationField9 = chronology3.months();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DurationField durationField11 = chronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime10", (dateTime2.compareTo(dateTime10) == 0) == dateTime2.equals(dateTime10));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTime.Property property11 = dateTime8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withPeriodAdded(readablePeriod12, (int) '4');
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withZone(dateTimeZone25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        org.joda.time.DateTime.Property property28 = dateTime26.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        boolean boolean34 = dateTimeFieldType30.isSupported(chronology33);
        boolean boolean35 = dateTimeFieldType29.isSupported(chronology33);
        int int36 = dateTime26.get(dateTimeFieldType29);
        int int37 = localDateTime17.get(dateTimeFieldType29);
        int int38 = instant1.get(dateTimeFieldType29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        int int17 = fixedDateTimeZone4.getOffset((long) (byte) 1);
        long long19 = fixedDateTimeZone4.previousTransition((long) 8);
        java.util.Date date21 = new java.util.Date((long) (byte) 1);
        int int22 = date21.getSeconds();
        java.time.Instant instant23 = date21.toInstant();
        boolean boolean24 = fixedDateTimeZone4.equals((java.lang.Object) instant23);
        java.lang.String str26 = fixedDateTimeZone4.getNameKey((long) 259);
        int int28 = fixedDateTimeZone4.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long32 = fixedDateTimeZone4.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(10);
        int int40 = dateTime37.getWeekOfWeekyear();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        int int45 = dateTime33.get(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = localDateTime47.getChronology();
        boolean boolean50 = dateTimeFieldType46.isSupported(chronology49);
        long long54 = chronology49.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.yearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime33.toDateTime(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int58 = dateTime33.get(dateTimeFieldType57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime56", (dateTime7.compareTo(dateTime56) == 0) == dateTime7.equals(dateTime56));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis(48);
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime6", (instant1.compareTo(dateTime6) == 0) == instant1.equals(dateTime6));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime3.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        long long22 = chronology14.add((long) 2026, (long) 978, 287);
        org.joda.time.DurationField durationField23 = chronology14.years();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime3.toMutableDateTime(chronology14);
        org.joda.time.DateTime dateTime26 = dateTime3.plusHours(836);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime24", (dateTime6.compareTo(mutableDateTime24) == 0) == dateTime6.equals(mutableDateTime24));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        long long13 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        long long28 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Chronology chronology30 = instant27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant27", (dateTime17.compareTo(instant27) == 0) == dateTime17.equals(instant27));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.millis();
        org.joda.time.DateTime dateTime23 = dateTime14.withChronology(chronology19);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        java.lang.String str27 = localDateTime25.toString();
        org.joda.time.Chronology chronology28 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-59L), chronology28);
        org.joda.time.DateTime dateTime31 = dateTime14.toDateTime(chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime23", (dateTime14.compareTo(dateTime23) == 0) == dateTime14.equals(dateTime23));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getOffset((long) 228);
        int int24 = fixedDateTimeZone19.getStandardOffset((long) 548);
        java.lang.String str26 = fixedDateTimeZone19.getNameKey(0L);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.plusHours(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusWeeks(664);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        boolean boolean45 = fixedDateTimeZone19.equals((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        int int48 = localDateTime46.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.monthOfYear();
        org.joda.time.LocalDateTime localDateTime53 = property51.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) -1);
        java.lang.String str59 = dateTimeZone55.getID();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53, dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        int int64 = localDateTime62.getDayOfMonth();
        boolean boolean65 = fixedDateTimeZone19.isLocalDateTimeGap(localDateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime27", (dateTime3.compareTo(dateTime27) == 0) == dateTime3.equals(dateTime27));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, (int) '4');
        int int23 = property12.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.plus(readableDuration24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        int int38 = fixedDateTimeZone33.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime39 = dateTime28.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.TimeZone timeZone40 = fixedDateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime41 = dateTime10.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.lang.String str42 = dateTime10.toString();
        org.joda.time.DateTime dateTime43 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        java.util.Date date30 = dateTime29.toDate();
        date30.setYear(173);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime3.plusMonths(34);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        java.util.Locale locale20 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        boolean boolean25 = dateTime16.equals((java.lang.Object) locale20);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime16.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime31", (dateTime5.compareTo(dateTime31) == 0) == dateTime5.equals(dateTime31));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        long long3 = instant1.getMillis();
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        int int5 = dateTime4.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime3.plusMonths(34);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant17", (dateTime11.compareTo(instant17) == 0) == dateTime11.equals(instant17));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        boolean boolean7 = dateTime2.equals((java.lang.Object) durationFieldType6);
        int int8 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime2.withYearOfEra(70);
        org.joda.time.DateTime.Property property11 = dateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.halfdayOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 2022, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime2, chronology15);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        int int19 = dateTime18.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.LocalDate.Property property14 = localDate12.monthOfYear();
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfWeek();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = property15.getAsShortText(locale16);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        long long23 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime24 = instant20.toDateTime();
        int int25 = dateTime24.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime21", (instant20.compareTo(mutableDateTime21) == 0) == instant20.equals(mutableDateTime21));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0L, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = chronology3.centuries();
        org.joda.time.DurationField durationField10 = chronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField5, and durationField9", !(durationField10.compareTo(durationField5) == 0) || (Math.signum(durationField10.compareTo(durationField9)) == Math.signum(durationField5.compareTo(durationField9))));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology14.eras();
        org.joda.time.DurationField durationField19 = chronology14.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField19, and durationField18", !(durationField18.compareTo(durationField19) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField19.compareTo(durationField18))));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        org.joda.time.DateTime dateTime31 = dateTime29.minusYears(25856184);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2022, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(chronology10);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) -1);
        java.lang.String str20 = dateTimeZone16.getID();
        long long23 = dateTimeZone16.convertLocalToUTC((long) 'u', false);
        org.joda.time.DateTime dateTime24 = dateMidnight14.toDateTime(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime13", (dateTime5.compareTo(dateTime13) == 0) == dateTime5.equals(dateTime13));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(4);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(4);
        int int12 = dateTime9.getEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 48, dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime18", (dateTime4.compareTo(dateTime18) == 0) == dateTime4.equals(dateTime18));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.months();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField11", Math.signum(durationField10.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField10)));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withPeriodAdded(readablePeriod9, 59);
        int int12 = dateTime8.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime8.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(4);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder27 = builder23.setTimeOfDay(8, 0, 10);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayCountry();
        boolean boolean30 = locale28.hasExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale28);
        calendar31.setLenient(false);
        long long34 = calendar31.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromCalendarFields(calendar31);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone40 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone41 = fixedDateTimeZone40.toTimeZone();
        int int42 = timeZone41.getRawOffset();
        calendar31.setTimeZone(timeZone41);
        boolean boolean44 = timeZone41.observesDaylightTime();
        java.util.Calendar.Builder builder45 = builder27.setTimeZone(timeZone41);
        gregorianCalendar22.setTimeZone(timeZone41);
        gregorianCalendar13.setTimeZone(timeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar22 and calendar31", (gregorianCalendar22.compareTo(calendar31) == 0) == gregorianCalendar22.equals(calendar31));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2022, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(chronology10);
        org.joda.time.DateTime.Property property14 = dateTime13.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime13", (dateTime5.compareTo(dateTime13) == 0) == dateTime5.equals(dateTime13));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4471839967L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        long long5 = dateTimeZone3.convertUTCToLocal(58637236L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTime.Property property63 = dateTime60.monthOfYear();
        int int64 = property63.getMaximumValue();
        org.joda.time.DateTime dateTime65 = property63.roundHalfCeilingCopy();
        int int66 = dateTime65.getDayOfYear();
        int int67 = dateTime65.getEra();
        int int68 = mutableDateTime56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime65.plus(readablePeriod69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime56", (dateTime5.compareTo(mutableDateTime56) == 0) == dateTime5.equals(mutableDateTime56));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        calendar3.setFirstDayOfWeek(809);
        int int23 = calendar3.getWeekYear();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone25);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        long long33 = dateTimeField31.remainder((long) (byte) 100);
        java.lang.String str34 = dateTimeField31.getName();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.getDisplayCountry();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = dateTimeField31.getAsShortText(2, locale36);
        java.lang.String str40 = locale36.getDisplayCountry();
        java.util.Locale.setDefault(category28, locale36);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone25, locale36);
        calendar3.setTimeZone(timeZone25);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar27", (calendar18.compareTo(calendar27) == 0) == calendar18.equals(calendar27));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readablePeriod18);
        int int20 = dateTime16.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        org.joda.time.DurationField durationField4 = dateTimeField3.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = localDate7.toDateMidnight(dateTimeZone8);
        int[] intArray16 = new int[] { (-1), (short) 1, 2, 54, (byte) 0 };
        int[] intArray18 = dateTimeField3.add((org.joda.time.ReadablePartial) localDate7, 0, intArray16, 0);
        org.joda.time.LocalDate localDate20 = localDate7.withYear(913);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        org.joda.time.DurationField durationField23 = durationFieldType0.getField(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField4, and durationField22", !(durationField23.compareTo(durationField4) == 0) || (Math.signum(durationField23.compareTo(durationField22)) == Math.signum(durationField4.compareTo(durationField22))));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        int int2 = localDateTime0.get(dateTimeFieldType1);
        int int3 = localDateTime0.getDayOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYear(0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) -1);
        java.lang.String str12 = dateTimeZone8.getID();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis(51574L);
        int int16 = dateTime13.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(10);
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.plus(readablePeriod24);
        org.joda.time.DateTime dateTime26 = dateTime20.withTimeAtStartOfDay();
        int int27 = dateTime20.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int29 = dateTime20.get(dateTimeFieldType28);
        boolean boolean30 = dateTime13.isSupported(dateTimeFieldType28);
        int int31 = localDateTime0.indexOf(dateTimeFieldType28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        long long4 = instant1.getMillis();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone10 = fixedDateTimeZone9.toTimeZone();
        int int12 = fixedDateTimeZone9.getOffset((long) 228);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone9);
        int int15 = fixedDateTimeZone9.getOffset(104162766073402000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.minus(readableDuration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = instant12.isAfter(readableInstant16);
        org.joda.time.MutableDateTime mutableDateTime18 = instant12.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant12.withDurationAdded(readableDuration19, 552);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime18", (instant21.compareTo(mutableDateTime18) == 0) == instant21.equals(mutableDateTime18));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis(860);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 331);
        org.joda.time.Instant instant14 = instant12.plus((long) 954);
        boolean boolean15 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.DateTime.Property property23 = dateTime22.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayCountry();
        boolean boolean26 = locale24.hasExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale24);
        calendar27.setLenient(false);
        long long30 = calendar27.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar27);
        int int32 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withCenturyOfEra(913);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime31.getField((int) (byte) 0);
        int int37 = dateTime22.get(dateTimeField36);
        long long39 = dateTimeField36.roundFloor((long) 87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        org.joda.time.Instant instant9 = instant7.minus((long) (byte) -1);
        org.joda.time.Instant instant12 = instant9.withDurationAdded(1645513753377L, 842);
        org.joda.time.MutableDateTime mutableDateTime13 = instant9.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfDay();
        org.joda.time.DateTime dateTime26 = property24.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.Chronology chronology32 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType29.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration27, chronology32);
        org.joda.time.DateTimeZone dateTimeZone37 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.yearOfEra();
        int int40 = dateTimeField38.getMinimumValue(1169187558838880L);
        long long43 = dateTimeField38.add(25712432L, (long) 535);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField38.getType();
        int int45 = instant9.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime13", (instant9.compareTo(mutableDateTime13) == 0) == instant9.equals(mutableDateTime13));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        int int9 = dateTime7.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.plusMinutes(0);
        org.joda.time.DateTime dateTime13 = dateTime7.plusYears(816);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfDay();
        org.joda.time.DateTime dateTime27 = property25.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType30.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration28, chronology33);
        org.joda.time.DateTimeZone dateTimeZone38 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfEra();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 991, chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField42 = chronology33.hours();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology33.getZone();
        org.joda.time.DateTime dateTime44 = dateTime7.toDateTime(dateTimeZone43);
        java.util.GregorianCalendar gregorianCalendar45 = dateTime7.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime44", (dateTime7.compareTo(dateTime44) == 0) == dateTime7.equals(dateTime44));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 363);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant22", (dateTime3.compareTo(instant22) == 0) == dateTime3.equals(instant22));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant25 = dateTime24.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((-3152796670724L));
        org.joda.time.Instant instant29 = instant27.minus((long) 780);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant25", (dateTime24.compareTo(instant25) == 0) == dateTime24.equals(instant25));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.minus(readableDuration14);
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime16", (instant12.compareTo(dateTime16) == 0) == instant12.equals(dateTime16));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        calendar3.setFirstDayOfWeek(809);
        calendar3.clear();
        calendar3.setMinimalDaysInFirstWeek(790);
        java.util.TimeZone timeZone26 = calendar3.getTimeZone();
        boolean boolean27 = timeZone26.observesDaylightTime();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone32 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone33 = fixedDateTimeZone32.toTimeZone();
        int int35 = fixedDateTimeZone32.getStandardOffset((long) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(0);
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        long long44 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(0);
        org.joda.time.DateTime.Property property51 = dateTime48.monthOfYear();
        int int52 = property51.getMaximumValue();
        org.joda.time.DateTime dateTime53 = property51.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.plus((long) 3);
        int int56 = property43.getDifference((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone61 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone62 = fixedDateTimeZone61.toTimeZone();
        int int64 = fixedDateTimeZone61.getOffset((long) 228);
        boolean boolean65 = fixedDateTimeZone61.isFixed();
        org.joda.time.DateTime dateTime66 = dateTime55.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone61);
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.lang.String str69 = fixedDateTimeZone61.getName((long) 671, locale68);
        java.lang.String str70 = fixedDateTimeZone32.getShortName(1645513749955L, locale68);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone26, locale68);
        java.lang.String str72 = locale68.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar71", (calendar18.compareTo(calendar71) == 0) == calendar18.equals(calendar71));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(22);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        int int32 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        long long34 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        org.joda.time.Instant instant39 = instant33.withDurationAdded((long) 25943861, 297);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant33", (dateTime31.compareTo(instant33) == 0) == dateTime31.equals(instant33));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant3 = instant1.minus((long) 32769);
        org.joda.time.Instant instant5 = instant1.plus(1645513753377L);
        org.joda.time.DateTime dateTime6 = instant1.toDateTimeISO();
        org.joda.time.Instant instant8 = instant1.withMillis(90605889804000L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime6", (instant1.compareTo(dateTime6) == 0) == instant1.equals(dateTime6));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology33);
        org.joda.time.DurationField durationField39 = chronology33.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        long long14 = instant13.getMillis();
        org.joda.time.Instant instant16 = instant13.minus(1645513820399L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology19.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone27 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone28 = fixedDateTimeZone27.toTimeZone();
        int int30 = fixedDateTimeZone27.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone27);
        int int32 = localDateTime31.getDayOfYear();
        int[] intArray34 = chronology19.get((org.joda.time.ReadablePartial) localDateTime31, (long) 30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withCenturyOfEra(651);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfMonth();
        int int39 = localDateTime37.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) -1);
        java.lang.String str50 = dateTimeZone46.getID();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime44, dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy(0);
        boolean boolean57 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        int int59 = localDateTime58.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.property(dateTimeFieldType60);
        int int62 = localDateTime31.indexOf(dateTimeFieldType60);
        int int63 = instant16.get(dateTimeFieldType60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        java.util.Date date14 = instant13.toDate();
        boolean boolean15 = instant13.isBeforeNow();
        org.joda.time.Chronology chronology16 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant13", (dateTime3.compareTo(instant13) == 0) == dateTime3.equals(instant13));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        int int17 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        long long20 = dateTimeField9.addWrapField(1645513716140L, 995);
        org.joda.time.DurationField durationField21 = dateTimeField9.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(10);
        int int29 = dateTime26.getWeekOfWeekyear();
        org.joda.time.Chronology chronology30 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField32.getType();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology36.years();
        java.lang.String str39 = chronology36.toString();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(4);
        int int44 = dateTime41.getEra();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Calendar calendar47 = dateTime41.toCalendar(locale45);
        java.lang.Object obj48 = null;
        boolean boolean49 = dateTime41.equals(obj48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime41.getZone();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology36.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType33.getField(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.Chronology chronology57 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.DurationField durationField59 = chronology57.years();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.year();
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale63.getDisplayName();
        long long65 = dateTimeField60.set(1645513710548L, "22", locale63);
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale66.getScript();
        java.util.Locale.setDefault(locale66);
        int int69 = dateTimeField60.getMaximumTextLength(locale66);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime71.property(dateTimeFieldType72);
        int int76 = localDateTime71.getWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime71.minusHours(790);
        java.util.Locale locale81 = new java.util.Locale("Mon Jul 24 02:05:00 GMT+00:00 1961", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str82 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime78, locale81);
        java.lang.String str83 = dateTimeField53.getAsShortText(1053814108236081L, locale81);
        java.lang.String str84 = dateTimeField9.getAsText(1645513718816L, locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField21 and durationField38", (durationField21.compareTo(durationField38) == 0) == durationField21.equals(durationField38));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        calendar1.setFirstDayOfWeek(65441750);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = fixedDateTimeZone9.getName(1009868913348L, locale11);
        java.util.TimeZone timeZone13 = fixedDateTimeZone9.toTimeZone();
        timeZone13.setID("");
        calendar1.setTimeZone(timeZone13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone23.observesDaylightTime();
        timeZone23.setID("");
        java.util.Calendar.Builder builder27 = builder18.setTimeZone(timeZone23);
        boolean boolean28 = timeZone17.hasSameRules(timeZone23);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone17);
        int int31 = timeZone17.getOffset(1645513740439L);
        boolean boolean32 = timeZone13.hasSameRules(timeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar29", (calendar1.compareTo(calendar29) == 0) == calendar1.equals(calendar29));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime3.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology19.add(readablePeriod23, 1645513830573L, 569);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology20);
        boolean boolean23 = localDateTime12.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.Chronology chronology35 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 2022, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType31.getField(chronology35);
        org.joda.time.Chronology chronology39 = chronology35.withUTC();
        org.joda.time.DateTime dateTime40 = dateTime30.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfDay(3);
        boolean boolean22 = dateTime20.isBefore((long) 25954012);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        long long4 = instant1.getMillis();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone10 = fixedDateTimeZone9.toTimeZone();
        int int12 = fixedDateTimeZone9.getOffset((long) 228);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone9);
        java.lang.String str15 = fixedDateTimeZone9.getName((long) 785);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(4);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property22 = dateTime12.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime12.minus(readableDuration23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        int int27 = dateTime10.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime29 = dateTime10.plusHours(800);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime21", (dateTime1.compareTo(dateTime21) == 0) == dateTime1.equals(dateTime21));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        boolean boolean26 = dateTime17.isBefore((long) 1870);
        org.joda.time.Instant instant27 = dateTime17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        org.joda.time.Chronology chronology29 = chronology7.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant27", (dateTime3.compareTo(instant27) == 0) == dateTime3.equals(instant27));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withPeriodAdded(readablePeriod8, (int) '4');
        java.lang.String str11 = dateTime4.toString();
        org.joda.time.Chronology chronology12 = dateTime4.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 158, chronology13);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.year();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 9, chronology21);
        int int26 = localDateTime25.getYearOfCentury();
        int int27 = localDateTime25.getYear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        int int30 = localDateTime28.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType33.getField(chronology36);
        boolean boolean39 = localDateTime28.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.withYearOfEra(331);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime25.withDurationAdded(readableDuration43, 40150000);
        long long47 = chronology13.set((org.joda.time.ReadablePartial) localDateTime25, (long) 25889);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField23", Math.signum(durationField15.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField15)));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusWeeks(2);
        int int12 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusDays(254);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withZone(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfSecond();
        int int24 = dateTime22.getHourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime22.plusMinutes(0);
        org.joda.time.DateTime dateTime28 = dateTime22.plusYears(816);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(10);
        org.joda.time.DateTime.Property property36 = dateTime33.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.plus(readablePeriod37);
        org.joda.time.DateTime dateTime39 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property40 = dateTime33.minuteOfDay();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology48 = localDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration43, chronology48);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.yearOfEra();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 991, chronology48);
        org.joda.time.DateTimeField dateTimeField56 = chronology48.secondOfDay();
        org.joda.time.DurationField durationField57 = chronology48.hours();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology48.getZone();
        org.joda.time.DateTime dateTime59 = dateTime22.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDateTime14.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime59", (dateTime18.compareTo(dateTime59) == 0) == dateTime18.equals(dateTime59));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        long long14 = chronology9.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(10);
        int int25 = dateTime22.getWeekOfWeekyear();
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.property(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        int int36 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.year();
        org.joda.time.DateTime dateTime39 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(readableDuration40, 25969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(4);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime.Property property19 = dateTime3.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime3.withMillisOfSecond((int) 'a');
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Instant instant11 = dateTime9.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 2144673);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.minus(readableDuration15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant16", (dateTime9.compareTo(instant16) == 0) == dateTime9.equals(instant16));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(32769);
        org.joda.time.DateTime dateTime21 = dateTime19.minusYears(713);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((java.lang.Object) dateTime3);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime3.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(2021);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant10", (dateTime13.compareTo(instant10) == 0) == dateTime13.equals(instant10));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(25851871);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        boolean boolean7 = localDateTime3.isSupported(durationFieldType6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(10);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.plus(readablePeriod15);
        org.joda.time.DateTime dateTime17 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology21.years();
        org.joda.time.DateTime dateTime24 = dateTime11.toDateTime(chronology21);
        boolean boolean25 = durationFieldType6.isSupported(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime24", (dateTime11.compareTo(dateTime24) == 0) == dateTime11.equals(dateTime24));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        int int9 = dateTime7.getHourOfDay();
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant10", (dateTime7.compareTo(instant10) == 0) == dateTime7.equals(instant10));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1009868913348L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(331);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.property(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withSecondOfMinute(6);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra(374);
        int int26 = localDateTime23.getMonthOfYear();
        int int27 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMonths(761);
        boolean boolean30 = localDateTime11.equals((java.lang.Object) 761);
        org.joda.time.LocalDateTime.Property property31 = localDateTime11.dayOfWeek();
        org.joda.time.Chronology chronology32 = localDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime3.toMutableDateTime(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime33", (dateTime3.compareTo(mutableDateTime33) == 0) == dateTime3.equals(mutableDateTime33));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        org.joda.time.Instant instant9 = instant7.minus((long) (byte) -1);
        org.joda.time.Instant instant12 = instant9.withDurationAdded(1645513753377L, 842);
        boolean boolean13 = instant12.isBeforeNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.minus(readableDuration14);
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.plus(readableDuration17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime16", (instant18.compareTo(mutableDateTime16) == 0) == instant18.equals(mutableDateTime16));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone7);
        boolean boolean10 = dateTime8.isEqual((long) 26);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology13.eras();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology13.getZone();
        org.joda.time.DateTime dateTime19 = dateTime8.toDateTime(chronology13);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 275, chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime19", (dateTime4.compareTo(dateTime19) == 0) == dateTime4.equals(dateTime19));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.withPeriodAdded(readablePeriod15, (int) '4');
        java.lang.String str18 = dateTime11.toString();
        org.joda.time.Chronology chronology19 = dateTime11.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withChronology(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.halfdays();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology20.getZone();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 1970, dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime23", (dateTime9.compareTo(dateTime23) == 0) == dateTime9.equals(dateTime23));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(15);
        org.joda.time.Instant instant19 = dateTime16.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant23", (dateTime5.compareTo(instant23) == 0) == dateTime5.equals(instant23));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, (int) '4');
        int int23 = property12.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.plus(readableDuration24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        int int38 = fixedDateTimeZone33.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime39 = dateTime28.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.TimeZone timeZone40 = fixedDateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime41 = dateTime10.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.lang.String str42 = dateTime10.toString();
        org.joda.time.DateTime dateTime43 = dateTime10.toDateTimeISO();
        int int44 = dateTime43.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMonths(420);
        java.lang.String str20 = dateTime19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(dateTimeZone18);
        int int23 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime22.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale43.getVariant();
        java.lang.String str45 = locale42.getDisplayLanguage(locale43);
        java.lang.String str46 = dateTimeZone39.getShortName((long) 140, locale42);
        java.lang.String str47 = locale42.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        long long4 = instant1.getMillis();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone10 = fixedDateTimeZone9.toTimeZone();
        int int12 = fixedDateTimeZone9.getOffset((long) 228);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.Chronology chronology9 = dateTime7.getChronology();
        int int10 = dateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFieldAdded(durationFieldType17, 6);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.centuryOfEra();
        org.joda.time.DurationField durationField25 = durationFieldType17.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime7.toDateTime(chronology22);
        java.lang.String str28 = chronology22.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime27", (dateTime7.compareTo(dateTime27) == 0) == dateTime7.equals(dateTime27));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        int int20 = dateTime18.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        boolean boolean26 = fixedDateTimeZone22.isFixed();
        java.lang.String str28 = fixedDateTimeZone22.getNameKey((long) 348);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(4345831579L, (org.joda.time.DateTimeZone) fixedDateTimeZone22);
        boolean boolean31 = fixedDateTimeZone22.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime29", (dateTime16.compareTo(dateTime29) == 0) == dateTime16.equals(dateTime29));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone22 = fixedDateTimeZone21.toTimeZone();
        int int24 = fixedDateTimeZone21.getOffset((long) 228);
        boolean boolean25 = fixedDateTimeZone21.isFixed();
        java.lang.String str27 = fixedDateTimeZone21.getNameKey((long) 348);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        java.util.TimeZone timeZone29 = fixedDateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(0L, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(0L, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate41 = localDate37.plus(readablePeriod40);
        org.joda.time.LocalDate localDate42 = localDate34.withFields((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property43 = localDate42.year();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(0L, dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate50 = localDate46.plus(readablePeriod49);
        int int51 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate50);
        int int52 = localDate42.getYear();
        org.joda.time.LocalDate.Property property53 = localDate42.yearOfEra();
        org.joda.time.LocalDate localDate54 = property53.roundHalfEvenCopy();
        boolean boolean55 = fixedDateTimeZone21.equals((java.lang.Object) localDate54);
        int int56 = localDate54.getYearOfEra();
        org.joda.time.LocalDate localDate58 = localDate54.minusWeeks(16);
        org.joda.time.LocalDate localDate60 = localDate58.withMonthOfYear(10);
        org.joda.time.DateMidnight dateMidnight61 = localDate58.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime28", (dateTime15.compareTo(dateTime28) == 0) == dateTime15.equals(dateTime28));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone22 = fixedDateTimeZone21.toTimeZone();
        int int24 = fixedDateTimeZone21.getOffset((long) 228);
        boolean boolean25 = fixedDateTimeZone21.isFixed();
        java.lang.String str27 = fixedDateTimeZone21.getNameKey((long) 348);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        java.util.TimeZone timeZone29 = fixedDateTimeZone21.toTimeZone();
        int int31 = fixedDateTimeZone21.getStandardOffset(1645513731802L);
        int int33 = fixedDateTimeZone21.getOffsetFromLocal((long) 976);
        java.util.TimeZone timeZone34 = fixedDateTimeZone21.toTimeZone();
        timeZone34.setID("25761312");
        java.lang.Object obj37 = timeZone34.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime28", (dateTime15.compareTo(dateTime28) == 0) == dateTime15.equals(dateTime28));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        java.lang.String str10 = dateTime3.toString();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology12.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField16, and durationField14", !(durationField14.compareTo(durationField16) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField16.compareTo(durationField14))));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant12.withDurationAdded(readableDuration14, 4771502);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant16.withDurationAdded(readableDuration17, 150);
        boolean boolean20 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime9", (instant1.compareTo(dateTime9) == 0) == instant1.equals(dateTime9));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        int int11 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime8.plusMillis(539);
        org.joda.time.DateTime.Property property14 = dateTime8.weekOfWeekyear();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) dateTime8);
        java.util.Date date16 = dateTime8.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant15", (dateTime8.compareTo(instant15) == 0) == dateTime8.equals(instant15));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime22.plusMonths(95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant23", (dateTime12.compareTo(instant23) == 0) == dateTime12.equals(instant23));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.DateTime.Property property17 = dateTime10.dayOfMonth();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone31 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone32 = fixedDateTimeZone31.toTimeZone();
        int int34 = fixedDateTimeZone31.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone31);
        java.util.TimeZone timeZone36 = fixedDateTimeZone31.toTimeZone();
        long long38 = fixedDateTimeZone22.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone31, (long) 558);
        org.joda.time.DateTime dateTime39 = dateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone31);
        org.joda.time.DateTime.Property property40 = dateTime10.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime39", (dateTime16.compareTo(dateTime39) == 0) == dateTime16.equals(dateTime39));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime.Property property19 = dateTime3.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant25 = dateTime24.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((-3152796670724L));
        org.joda.time.Instant instant29 = instant25.minus((-604799880L));
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant25.plus(readableDuration30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant31", (dateTime24.compareTo(instant31) == 0) == dateTime24.equals(instant31));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(1970);
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.property(dateTimeFieldType9);
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfCeilingCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = instant6.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant6.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime18", (dateTime3.compareTo(mutableDateTime18) == 0) == dateTime3.equals(mutableDateTime18));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = dateTimeField4.getAsText((long) (byte) -1, locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale9);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone1);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone14);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone21.observesDaylightTime();
        timeZone21.setID("");
        java.util.Calendar.Builder builder25 = builder16.setTimeZone(timeZone21);
        boolean boolean26 = timeZone14.hasSameRules(timeZone21);
        int int27 = timeZone14.getRawOffset();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getScript();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(0L, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(0L, dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate38.plus(readablePeriod41);
        org.joda.time.LocalDate localDate43 = localDate35.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property44 = localDate43.year();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.getDisplayCountry();
        java.util.Calendar.Builder builder50 = builder47.setLocale(locale48);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder52 = builder50.setLocale(locale51);
        java.lang.String str53 = dateTimeField45.getAsText(2, locale51);
        java.lang.String str54 = locale51.getDisplayScript();
        java.lang.String str55 = locale28.getDisplayCountry(locale51);
        java.util.Locale locale56 = locale28.stripExtensions();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone14, locale28);
        int int58 = timeZone14.getRawOffset();
        java.lang.String str59 = timeZone14.getID();
        calendar12.setTimeZone(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar57", (calendar11.compareTo(calendar57) == 0) == calendar11.equals(calendar57));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.year();
        org.joda.time.DurationField durationField6 = chronology2.eras();
        org.joda.time.DurationField durationField7 = chronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField7", Math.signum(durationField4.compareTo(durationField7)) == -Math.signum(durationField7.compareTo(durationField4)));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withDurationAdded(readableDuration8, 286);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        long long18 = property17.remainder();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTime.Property property25 = dateTime22.monthOfYear();
        int int26 = property25.getMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.plus((long) 3);
        int int30 = property17.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone36 = fixedDateTimeZone35.toTimeZone();
        int int38 = fixedDateTimeZone35.getOffset((long) 228);
        boolean boolean39 = fixedDateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime40 = dateTime29.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone35);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = fixedDateTimeZone35.getName((long) 671, locale42);
        org.joda.time.DateTime dateTime44 = dateTime6.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone35);
        int int45 = dateTime6.getEra();
        int int46 = dateTime6.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime44", (dateTime3.compareTo(dateTime44) == 0) == dateTime3.equals(dateTime44));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        int int14 = localDate12.getEra();
        int int15 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(0L, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(0L, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate23.plus(readablePeriod26);
        org.joda.time.LocalDate localDate28 = localDate20.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(0L, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate32.plus(readablePeriod35);
        int int37 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate28.getYear();
        org.joda.time.LocalDate.Property property39 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(0L, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(0L, dateTimeZone47);
        org.joda.time.LocalDate localDate50 = localDate48.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate52 = localDate48.plus(readablePeriod51);
        org.joda.time.LocalDate localDate53 = localDate45.withFields((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate55 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime56 = localDate55.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone62 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone63 = fixedDateTimeZone62.toTimeZone();
        int int65 = fixedDateTimeZone62.getOffset((long) 228);
        boolean boolean66 = fixedDateTimeZone62.isFixed();
        java.lang.String str68 = fixedDateTimeZone62.getNameKey((long) 348);
        org.joda.time.DateTime dateTime69 = localDate55.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone62);
        java.util.TimeZone timeZone70 = fixedDateTimeZone62.toTimeZone();
        boolean boolean72 = fixedDateTimeZone62.isStandardOffset((long) 761);
        org.joda.time.DateMidnight dateMidnight73 = localDate40.toDateMidnight((org.joda.time.DateTimeZone) fixedDateTimeZone62);
        boolean boolean74 = fixedDateTimeZone62.isFixed();
        java.util.TimeZone timeZone75 = fixedDateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone62);
        org.joda.time.DateMidnight dateMidnight77 = localDate12.toDateMidnight((org.joda.time.DateTimeZone) fixedDateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime56 and dateTime69", (dateTime56.compareTo(dateTime69) == 0) == dateTime56.equals(dateTime69));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withZone(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        int int16 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        int int18 = fixedDateTimeZone5.getOffset((long) (byte) 1);
        long long20 = fixedDateTimeZone5.previousTransition((long) 8);
        java.util.Date date22 = new java.util.Date((long) (byte) 1);
        int int23 = date22.getSeconds();
        java.time.Instant instant24 = date22.toInstant();
        boolean boolean25 = fixedDateTimeZone5.equals((java.lang.Object) instant24);
        java.lang.String str27 = fixedDateTimeZone5.getNameKey((long) 259);
        int int29 = fixedDateTimeZone5.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long33 = fixedDateTimeZone5.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(10);
        int int41 = dateTime38.getWeekOfWeekyear();
        org.joda.time.Chronology chronology42 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = dateTime34.get(dateTimeFieldType45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        boolean boolean51 = dateTimeFieldType47.isSupported(chronology50);
        long long55 = chronology50.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.yearOfEra();
        org.joda.time.DateTime dateTime57 = dateTime34.toDateTime(chronology50);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(1645513872997L, chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime34", (dateTime8.compareTo(dateTime34) == 0) == dateTime8.equals(dateTime34));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        int int3 = localDateTime0.getDayOfYear();
        int int4 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYear(22);
        org.joda.time.DateTime dateTime7 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(25809251);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = property16.getMaximumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) 3);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(4);
        int int25 = dateTime22.getEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property32 = dateTime22.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime22.minus(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean36 = dateTime34.isSupported(dateTimeFieldType35);
        int int37 = dateTime20.get(dateTimeFieldType35);
        boolean boolean38 = dateTime7.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime31", (dateTime11.compareTo(dateTime31) == 0) == dateTime11.equals(dateTime31));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        int int16 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime13.minusSeconds(0);
        boolean boolean19 = dateTime8.equals((java.lang.Object) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = fixedDateTimeZone25.getName(1009868913348L, locale27);
        java.util.TimeZone timeZone29 = fixedDateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime30 = dateTime18.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        long long32 = fixedDateTimeZone25.nextTransition((long) 125);
        boolean boolean33 = fixedDateTimeZone25.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        org.joda.time.DateTime dateTime7 = instant3.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property11 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime3.plusHours(0);
        org.joda.time.DateTime dateTime15 = dateTime3.withWeekOfWeekyear(11);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded(readableDuration23, (int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime19.plusMonths(34);
        boolean boolean28 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant29 = dateTime19.toInstant();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.plus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYear(796);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours(4);
        org.joda.time.DateMidnight dateMidnight53 = dateTime52.toDateMidnight();
        org.joda.time.DateTime.Property property54 = dateTime52.centuryOfEra();
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfYear();
        boolean boolean56 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime52);
        int int57 = instant31.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant31", (dateTime3.compareTo(instant31) == 0) == dateTime3.equals(instant31));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(chronology8);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(151);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(22);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        int int32 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        long long34 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        org.joda.time.DateTime dateTime37 = instant33.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant33", (dateTime31.compareTo(instant33) == 0) == dateTime31.equals(instant33));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        long long3 = instant1.getMillis();
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.minus((long) 849);
        org.joda.time.Instant instant8 = instant6.plus(1645514000694L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(4);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMinutes(32770);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFieldAdded(durationFieldType26, 6);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType26.getField(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.days();
        boolean boolean36 = localDateTime18.equals((java.lang.Object) chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime3.toMutableDateTime(chronology31);
        org.joda.time.DateTime.Property property38 = dateTime3.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime37", (dateTime12.compareTo(mutableDateTime37) == 0) == dateTime12.equals(mutableDateTime37));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.Instant instant9 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime dateTime11 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withFields(readablePartial12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime10", (instant9.compareTo(dateTime10) == 0) == instant9.equals(dateTime10));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        java.util.Locale locale20 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        boolean boolean25 = dateTime16.equals((java.lang.Object) locale20);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime16.withChronology(chronology28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime31", (dateTime5.compareTo(dateTime31) == 0) == dateTime5.equals(dateTime31));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant12.withDurationAdded(readableDuration14, 4771502);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant16.withDurationAdded(readableDuration17, 150);
        boolean boolean20 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTime dateTime22 = dateTime9.withMillisOfSecond(9);
        java.lang.String str23 = dateTime22.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime9", (instant1.compareTo(dateTime9) == 0) == instant1.equals(dateTime9));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withZone(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        int int16 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        int int18 = fixedDateTimeZone5.getOffset((long) (byte) 1);
        long long20 = fixedDateTimeZone5.previousTransition((long) 8);
        java.util.Date date22 = new java.util.Date((long) (byte) 1);
        int int23 = date22.getSeconds();
        java.time.Instant instant24 = date22.toInstant();
        boolean boolean25 = fixedDateTimeZone5.equals((java.lang.Object) instant24);
        java.lang.String str27 = fixedDateTimeZone5.getNameKey((long) 259);
        int int29 = fixedDateTimeZone5.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long33 = fixedDateTimeZone5.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(10);
        int int41 = dateTime38.getWeekOfWeekyear();
        org.joda.time.Chronology chronology42 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = dateTime34.get(dateTimeFieldType45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        boolean boolean51 = dateTimeFieldType47.isSupported(chronology50);
        long long55 = chronology50.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.yearOfEra();
        org.joda.time.DateTime dateTime57 = dateTime34.toDateTime(chronology50);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(67616104031873000L, chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime57", (dateTime8.compareTo(dateTime57) == 0) == dateTime8.equals(dateTime57));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, (int) '4');
        int int23 = property12.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.plus(readableDuration24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        int int38 = fixedDateTimeZone33.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime39 = dateTime28.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.TimeZone timeZone40 = fixedDateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime41 = dateTime10.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.lang.String str42 = dateTime10.toString();
        org.joda.time.DateTime dateTime43 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime10.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime43", (dateTime1.compareTo(dateTime43) == 0) == dateTime1.equals(dateTime43));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        long long8 = chronology3.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology3.add(readablePeriod9, (long) 2022, 1870);
        org.joda.time.DurationField durationField13 = chronology3.weekyears();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DurationField durationField15 = chronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime14", (dateTime2.compareTo(dateTime14) == 0) == dateTime2.equals(dateTime14));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        boolean boolean18 = dateTime16.isAfter(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withChronology(chronology19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        int int28 = fixedDateTimeZone25.getOffset((long) 228);
        boolean boolean29 = fixedDateTimeZone25.isFixed();
        java.lang.String str31 = fixedDateTimeZone25.getNameKey(25821695L);
        org.joda.time.DateTime dateTime32 = dateTime20.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime20.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(10);
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.plus(readablePeriod41);
        org.joda.time.DateTime dateTime43 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property44 = dateTime37.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property44.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime46.getZone();
        long long51 = dateTimeZone49.nextTransition(1645513723723L);
        org.joda.time.Instant instant53 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        int int55 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime33.toMutableDateTime(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant53 and dateTime54", (instant53.compareTo(dateTime54) == 0) == instant53.equals(dateTime54));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder6 = builder2.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone7.observesDaylightTime();
        timeZone7.setID("");
        java.util.Calendar.Builder builder11 = builder2.setTimeZone(timeZone7);
        boolean boolean12 = timeZone0.hasSameRules(timeZone7);
        int int13 = timeZone0.getRawOffset();
        timeZone0.setRawOffset(313);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone16.observesDaylightTime();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.remainder((long) (byte) 100);
        java.lang.String str25 = dateTimeField22.getName();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayCountry();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = dateTimeField22.getAsShortText(2, locale27);
        java.lang.String str31 = locale27.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone16, locale27);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.lang.String str36 = locale27.getDisplayVariant(locale35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone0, locale27);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar33", (calendar18.compareTo(calendar33) == 0) == calendar18.equals(calendar33));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("19", "0", 495, 17);
        java.lang.String str6 = fixedDateTimeZone5.getID();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) "25714150", (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(4);
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(32770);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFieldAdded(durationFieldType22, 913);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withDefaultYear(3);
        java.lang.Integer int30 = dateTimeFormatter29.getPivotYear();
        org.joda.time.Chronology chronology31 = dateTimeFormatter29.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withOffsetParsed();
        boolean boolean34 = dateTimeFormatter29.isParser();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.plusHours(0);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(10);
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime50.plus(readablePeriod54);
        org.joda.time.DateTime dateTime56 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property57 = dateTime50.minuteOfDay();
        org.joda.time.DateTime dateTime59 = property57.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime59.getZone();
        long long65 = dateTimeZone62.adjustOffset((long) 70, false);
        org.joda.time.DateTime dateTime66 = localDateTime46.toDateTime(dateTimeZone62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter29.withZone(dateTimeZone62);
        boolean boolean68 = localDateTime24.equals((java.lang.Object) dateTimeZone62);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(1645513752407L, dateTimeZone62);
        boolean boolean71 = fixedDateTimeZone5.equals((java.lang.Object) dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime21.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime56", (dateTime5.compareTo(mutableDateTime56) == 0) == dateTime5.equals(mutableDateTime56));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusDays(539);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(4);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property22 = dateTime12.minuteOfHour();
        int int23 = dateTime12.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean25 = dateTime12.isSupported(dateTimeFieldType24);
        boolean boolean26 = localDateTime10.equals((java.lang.Object) dateTimeFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime21", (dateTime12.compareTo(dateTime21) == 0) == dateTime12.equals(dateTime21));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(4);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((-1));
        int int28 = dateTime27.getMonthOfYear();
        long long29 = dateTime27.getMillis();
        boolean boolean30 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime21.isEqualNow();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(10);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.plus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology50 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType47.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration45, chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime21.toMutableDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTime.Property property63 = dateTime60.monthOfYear();
        int int64 = property63.getMaximumValue();
        org.joda.time.DateTime dateTime65 = property63.roundHalfCeilingCopy();
        int int66 = dateTime65.getDayOfYear();
        int int67 = dateTime65.getEra();
        int int68 = mutableDateTime56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        java.util.Date date69 = mutableDateTime56.toDate();
        int int70 = date69.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime56", (dateTime5.compareTo(mutableDateTime56) == 0) == dateTime5.equals(mutableDateTime56));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.property(dateTimeFieldType7);
        int int11 = localDateTime6.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        long long16 = dateTimeField14.remainder((long) (byte) 100);
        java.lang.String str17 = dateTimeField14.getName();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        int int19 = dateTimeField14.getMaximumShortTextLength(locale18);
        java.lang.String str20 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime6, locale18);
        org.joda.time.Chronology chronology21 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DurationField durationField24 = chronology21.halfdays();
        long long28 = chronology21.add((long) 440, (long) 828, 100);
        org.joda.time.DurationField durationField29 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField24 and durationField29", Math.signum(durationField24.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField24)));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant3 = instant1.minus((long) 32769);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime6 = instant1.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readablePeriod7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        long long4 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant1.plus(readableDuration5);
        org.joda.time.Instant instant8 = instant6.plus((long) 202);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        java.lang.String str12 = property11.getAsText();
        org.joda.time.DateTime dateTime14 = property11.addWrapFieldToCopy(1);
        org.joda.time.DateTime dateTime15 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(dateTimeZone16);
        int int18 = dateTime17.getSecondOfDay();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (-1));
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.MutableDateTime mutableDateTime22 = instant21.toMutableDateTime();
        boolean boolean23 = dateTime17.isBefore((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime22", (instant21.compareTo(mutableDateTime22) == 0) == instant21.equals(mutableDateTime22));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String str20 = locale19.getDisplayCountry();
        boolean boolean21 = locale19.hasExtensions();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale19);
        calendar22.setLenient(false);
        long long25 = calendar22.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromCalendarFields(calendar22);
        int int27 = localDateTime26.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withCenturyOfEra(913);
        org.joda.time.DateTimeField dateTimeField31 = localDateTime26.getField((int) (byte) 0);
        org.joda.time.Chronology chronology32 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime18.toDateTime(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (-1));
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        boolean boolean5 = instant2.isAfter((long) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime3", (instant2.compareTo(mutableDateTime3) == 0) == instant2.equals(mutableDateTime3));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant7 = instant5.plus(4471839967L);
        org.joda.time.Instant instant9 = instant7.minus((long) (byte) -1);
        org.joda.time.Instant instant12 = instant9.withDurationAdded(1645513753377L, 842);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        int int20 = dateTime17.getWeekOfWeekyear();
        org.joda.time.Chronology chronology21 = dateTime17.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.Chronology chronology26 = chronology21.withUTC();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfMonth();
        int int29 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) -1);
        java.lang.String str40 = dateTimeZone36.getID();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readableDuration42);
        int[] intArray45 = chronology21.get((org.joda.time.ReadablePartial) localDateTime43, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField46 = chronology21.weekyearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime.Property property48 = dateTime47.weekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime47.getZone();
        org.joda.time.DateTime dateTime50 = dateTime13.toDateTime(dateTimeZone49);
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime50", (instant12.compareTo(dateTime50) == 0) == instant12.equals(dateTime50));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime17", (dateTime10.compareTo(dateTime17) == 0) == dateTime10.equals(dateTime17));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(0);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime13.withMillisOfSecond(248);
        int int22 = dateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant23 = dateTime13.toInstant();
        boolean boolean24 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant23", (dateTime13.compareTo(instant23) == 0) == dateTime13.equals(instant23));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((java.lang.Object) dateTime3);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.minus(readableDuration11);
        boolean boolean14 = instant10.isBefore(0L);
        long long15 = instant10.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant10", (dateTime3.compareTo(instant10) == 0) == dateTime3.equals(instant10));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 46);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths(140);
        int int14 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime18.plusYears(22);
        org.joda.time.DateTime.Property property24 = dateTime18.era();
        org.joda.time.DateTime.Property property25 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime26 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        org.joda.time.Instant instant29 = instant27.minus((-3152796670724L));
        org.joda.time.Instant instant31 = instant27.minus((-604799880L));
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant27.plus(readableDuration32);
        org.joda.time.DateTime dateTime34 = localDate1.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant33", (dateTime26.compareTo(instant33) == 0) == dateTime26.equals(instant33));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.Instant instant13 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant15 = instant13.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.plus(4471839967L);
        org.joda.time.Instant instant21 = instant19.minus((long) (byte) -1);
        org.joda.time.Instant instant24 = instant21.withDurationAdded(1645513753377L, 842);
        org.joda.time.MutableDateTime mutableDateTime25 = instant21.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant21.withDurationAdded(readableDuration26, 41);
        boolean boolean29 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and instant21", (mutableDateTime25.compareTo(instant21) == 0) == mutableDateTime25.equals(instant21));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(59);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(chronology13);
        org.joda.time.DateTime.Property property17 = dateTime10.dayOfMonth();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone31 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone32 = fixedDateTimeZone31.toTimeZone();
        int int34 = fixedDateTimeZone31.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone31);
        java.util.TimeZone timeZone36 = fixedDateTimeZone31.toTimeZone();
        long long38 = fixedDateTimeZone22.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone31, (long) 558);
        org.joda.time.DateTime dateTime39 = dateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone31);
        org.joda.time.DateTime.Property property40 = dateTime10.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime39", (dateTime16.compareTo(dateTime39) == 0) == dateTime16.equals(dateTime39));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds(0);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime8.withCenturyOfEra(140);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        int int15 = localDateTime13.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        java.lang.String str26 = dateTimeZone22.getID();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(548);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.Chronology chronology39 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        int int41 = dateTimeField40.getMaximumValue();
        boolean boolean42 = dateTimeField40.isSupported();
        int int44 = dateTimeField40.getMinimumValue((long) 6);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(0);
        org.joda.time.DateTime.Property property51 = dateTime48.monthOfYear();
        int int52 = property51.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField53 = property51.getField();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.dayOfYear();
        int int56 = dateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTime.Property property63 = dateTime60.weekyear();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime66 = dateTime60.withPeriodAdded(readablePeriod64, (int) '4');
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime60);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks(54);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str72 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime67, 6, locale71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.withCenturyOfEra(785);
        java.util.Locale locale75 = java.util.Locale.UK;
        java.lang.String str76 = locale75.getDisplayCountry();
        boolean boolean77 = locale75.hasExtensions();
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = locale78.getDisplayCountry();
        java.lang.String str80 = locale75.getDisplayName(locale78);
        java.util.Locale locale81 = java.util.Locale.UK;
        java.lang.String str82 = locale81.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet83 = locale81.getExtensionKeys();
        java.lang.String str84 = locale78.getDisplayName(locale81);
        java.lang.String str85 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale81);
        int int86 = property36.getMaximumTextLength(locale81);
        java.lang.String str87 = locale81.getVariant();
        java.lang.String str88 = dateTimeZone22.getName(1645513724819L, locale81);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime8.toMutableDateTime(dateTimeZone22);
        int int90 = dateTime8.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime89", (dateTime8.compareTo(mutableDateTime89) == 0) == dateTime8.equals(mutableDateTime89));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone24 = fixedDateTimeZone23.toTimeZone();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        int int34 = fixedDateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime32);
        int int36 = fixedDateTimeZone23.getOffset((long) (byte) 1);
        long long38 = fixedDateTimeZone23.previousTransition((long) 8);
        java.util.Date date40 = new java.util.Date((long) (byte) 1);
        int int41 = date40.getSeconds();
        java.time.Instant instant42 = date40.toInstant();
        boolean boolean43 = fixedDateTimeZone23.equals((java.lang.Object) instant42);
        long long45 = fixedDateTimeZone14.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone23, (long) (-1));
        long long47 = fixedDateTimeZone23.nextTransition((long) 25844489);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(736);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField(chronology31);
        boolean boolean34 = localDateTime23.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.weekyears();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType43.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFieldAdded(durationFieldType43, 59);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.minus(readablePeriod55);
        long long58 = chronology37.set((org.joda.time.ReadablePartial) localDateTime41, (long) 38);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime20.toMutableDateTime(chronology37);
        org.joda.time.DurationField durationField60 = chronology37.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime59", (dateTime1.compareTo(mutableDateTime59) == 0) == dateTime1.equals(mutableDateTime59));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime18.minusMinutes(2012);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) -1);
        java.lang.String str27 = dateTimeZone23.getID();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis(51574L);
        int int31 = dateTime28.getMinuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.Chronology chronology35 = localDateTime33.getChronology();
        boolean boolean36 = dateTimeFieldType32.isSupported(chronology35);
        long long40 = chronology35.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField44 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTime dateTime47 = dateTime21.withChronology(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(4);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((-1));
        int int34 = dateTime33.getMillisOfSecond();
        boolean boolean35 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        boolean boolean37 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = durationFieldType40.isSupported(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withFieldAdded(durationFieldType40, (int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime26.withFieldAdded(durationFieldType40, 192);
        org.joda.time.Instant instant47 = dateTime26.toInstant();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Chronology chronology50 = instant47.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant47", (dateTime26.compareTo(instant47) == 0) == dateTime26.equals(instant47));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        long long18 = dateTimeZone15.adjustOffset((long) 70, false);
        java.lang.String str20 = dateTimeZone15.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str23 = dateTimeZone15.getName((long) 318);
        org.joda.time.Instant instant25 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant27 = instant25.minus((long) (byte) 1);
        org.joda.time.Instant instant28 = instant27.toInstant();
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant27.withDurationAdded(readableDuration31, 25875012);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime30", (instant33.compareTo(mutableDateTime30) == 0) == instant33.equals(mutableDateTime30));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime1.minus(readableDuration12);
        boolean boolean15 = dateTime13.isAfter(1645513752000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime10", (dateTime13.compareTo(dateTime10) == 0) == dateTime13.equals(dateTime10));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 9, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology16);
        org.joda.time.DateTime.Property property23 = dateTime22.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayCountry();
        boolean boolean26 = locale24.hasExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale24);
        calendar27.setLenient(false);
        long long30 = calendar27.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar27);
        int int32 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withCenturyOfEra(913);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime31.getField((int) (byte) 0);
        int int37 = dateTime22.get(dateTimeField36);
        long long40 = dateTimeField36.set((long) 2081, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology2.eras();
        org.joda.time.Chronology chronology7 = chronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusYears(329);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withPeriodAdded(readablePeriod12, (int) 'x');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime3.withMillisOfSecond((int) 'a');
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Instant instant11 = dateTime9.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.minus(readableDuration13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, (int) '4');
        int int23 = property12.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.plus(readableDuration24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone34 = fixedDateTimeZone33.toTimeZone();
        int int36 = fixedDateTimeZone33.getOffset((long) 228);
        int int38 = fixedDateTimeZone33.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime39 = dateTime28.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.util.TimeZone timeZone40 = fixedDateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime41 = dateTime10.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.lang.String str42 = dateTime10.toString();
        org.joda.time.DateTime dateTime43 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(25716933);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2922789);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfDay(3);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 617, 25890375);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTime(chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("25707776");
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusYears(32);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusWeeks(782);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMillis(231);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.withPeriodAdded(readablePeriod18, (int) '4');
        int int21 = property10.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime23 = dateTime14.withMillisOfDay((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField39 = chronology37.years();
        org.joda.time.DateTime dateTime40 = dateTime27.toDateTime(chronology37);
        int int41 = dateTime40.getMillisOfDay();
        boolean boolean42 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = localDateTime1.equals((java.lang.Object) dateTime40);
        org.joda.time.DateTime.Property property44 = dateTime40.monthOfYear();
        org.joda.time.DateTime dateTime45 = property44.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime40", (dateTime14.compareTo(dateTime40) == 0) == dateTime14.equals(dateTime40));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        int int10 = dateTime3.getEra();
        org.joda.time.Instant instant12 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.Instant instant17 = instant12.withDurationAdded(13305600000L, (-292275054));
        boolean boolean18 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant12.minus(readableDuration19);
        org.joda.time.Instant instant23 = instant12.withDurationAdded(0L, 1092);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant23", (dateTime13.compareTo(instant23) == 0) == dateTime13.equals(instant23));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        long long28 = dateTimeZone25.adjustOffset((long) 70, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths(3);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.year();
        org.joda.time.DateTime dateTime41 = dateTime32.toDateTime(chronology37);
        long long45 = chronology37.add(1645513922252L, 806L, 712);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime41", (dateTime3.compareTo(dateTime41) == 0) == dateTime3.equals(dateTime41));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.plus(readablePeriod8);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds(3);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        boolean boolean18 = localTime14.isSupported(durationFieldType17);
        boolean boolean19 = localTime13.isSupported(durationFieldType17);
        int int20 = localTime13.getMinuteOfHour();
        int int21 = localTime13.getMillisOfDay();
        org.joda.time.DateTime dateTime22 = localTime13.toDateTimeToday();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone27 = new org.joda.time.tz.FixedDateTimeZone("Japan", "DateTimeField[millisOfDay]", 2026, 500);
        int int29 = fixedDateTimeZone27.getStandardOffset((long) 348);
        java.lang.String str31 = fixedDateTimeZone27.getShortName(1645513772727L);
        java.util.TimeZone timeZone32 = fixedDateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime33 = dateTime22.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone27);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 25817, (org.joda.time.DateTimeZone) fixedDateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime33", (dateTime22.compareTo(dateTime33) == 0) == dateTime22.equals(dateTime33));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        int int14 = localDate12.getYear();
        org.joda.time.LocalDate localDate16 = localDate12.withDayOfYear(131);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(0L, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(0L, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate26.plus(readablePeriod29);
        org.joda.time.LocalDate localDate31 = localDate23.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        boolean boolean34 = localDate31.equals((java.lang.Object) (-1));
        org.joda.time.LocalDate localDate36 = localDate31.plusMonths(567);
        int int37 = localDate36.getEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(0L, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(0L, dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate50 = localDate46.plusMonths((-1));
        int int51 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone56 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone57 = fixedDateTimeZone56.toTimeZone();
        org.joda.time.DateMidnight dateMidnight58 = localDate46.toDateMidnight((org.joda.time.DateTimeZone) fixedDateTimeZone56);
        long long61 = fixedDateTimeZone56.convertLocalToUTC(0L, true);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(0L, (org.joda.time.DateTimeZone) fixedDateTimeZone56);
        org.joda.time.Interval interval63 = localDate36.toInterval((org.joda.time.DateTimeZone) fixedDateTimeZone56);
        long long65 = fixedDateTimeZone56.previousTransition(1645513740406L);
        boolean boolean67 = fixedDateTimeZone56.isStandardOffset(4345825462L);
        int int69 = fixedDateTimeZone56.getStandardOffset(1645513788517L);
        org.joda.time.DateTime dateTime70 = dateTime17.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone56);
        int int72 = fixedDateTimeZone56.getStandardOffset((long) 879);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime70", (dateTime17.compareTo(dateTime70) == 0) == dateTime17.equals(dateTime70));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime2", (instant5.compareTo(dateTime2) == 0) == instant5.equals(dateTime2));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime.Property property14 = dateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(10);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfDay();
        org.joda.time.DateTime dateTime27 = property25.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone35 = fixedDateTimeZone34.toTimeZone();
        int int37 = fixedDateTimeZone34.getOffset((long) 228);
        int int39 = fixedDateTimeZone34.getStandardOffset((long) 548);
        java.lang.String str41 = fixedDateTimeZone34.getNameKey(0L);
        org.joda.time.DateTime dateTime42 = dateTime29.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        org.joda.time.DateTime dateTime44 = dateTime29.minus((long) 17);
        java.util.Locale locale45 = java.util.Locale.PRC;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Calendar calendar48 = dateTime29.toCalendar(locale45);
        java.lang.String str49 = locale45.getCountry();
        java.util.Calendar calendar50 = dateTime12.toCalendar(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime42", (dateTime12.compareTo(dateTime42) == 0) == dateTime12.equals(dateTime42));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime5.withMillisOfSecond(537);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime5.withField(dateTimeFieldType17, 892);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withZone(dateTimeZone26);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone32 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone33 = fixedDateTimeZone32.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withZone(dateTimeZone40);
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfSecond();
        int int43 = fixedDateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime41);
        int int45 = fixedDateTimeZone32.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime27.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone32);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale48.getDisplayLanguage(locale49);
        java.util.Locale locale55 = new java.util.Locale("java.util.GregorianCalendar[time=1645513710548,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=30,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "2", "2022-02-22T07:08:27.149");
        java.lang.String str56 = locale49.getDisplayLanguage(locale55);
        java.lang.String str57 = locale55.toLanguageTag();
        java.lang.String str58 = fixedDateTimeZone32.getShortName((-266363700000L), locale55);
        org.joda.time.DateTime dateTime59 = dateTime19.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone32);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime61 = localDateTime60.toDateTime();
        org.joda.time.DateTime dateTime63 = dateTime61.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMinutes(10);
        org.joda.time.DateTime.Property property66 = dateTime63.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime68 = dateTime63.plus(readablePeriod67);
        org.joda.time.DateTime dateTime69 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property70 = dateTime63.minuteOfDay();
        org.joda.time.DateTime dateTime72 = property70.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime72.getZone();
        boolean boolean76 = dateTimeZone75.isFixed();
        org.joda.time.DateTime dateTime77 = dateTime59.toDateTime(dateTimeZone75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime46", (dateTime5.compareTo(dateTime46) == 0) == dateTime5.equals(dateTime46));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        boolean boolean19 = dateTimeFieldType15.isSupported(chronology18);
        long long23 = chronology18.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField25 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.era();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.MutableDateTime mutableDateTime28 = instant12.toMutableDateTime(chronology18);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        java.lang.String str5 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.hourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(4);
        org.joda.time.DateTime dateTime19 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusMinutes(32770);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology22.add(readablePeriod25, (long) 433, 25844);
        boolean boolean29 = dateTimeFieldType11.isSupported(chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(10);
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime4.plus(readablePeriod8);
        org.joda.time.DateTime dateTime10 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfHour();
        boolean boolean13 = dateTime4.isBefore((long) 1870);
        org.joda.time.Instant instant14 = dateTime4.toInstant();
        long long15 = instant14.getMillis();
        org.joda.time.Instant instant17 = instant14.minus(1645513820399L);
        org.joda.time.DateTime dateTime18 = instant14.toDateTimeISO();
        org.joda.time.Chronology chronology19 = instant14.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(25200000L, chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant14", (dateTime4.compareTo(instant14) == 0) == dateTime4.equals(instant14));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        long long4 = instant1.getMillis();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone10 = fixedDateTimeZone9.toTimeZone();
        int int12 = fixedDateTimeZone9.getOffset((long) 228);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone9);
        long long14 = mutableDateTime13.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology20);
        boolean boolean23 = localDateTime12.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = dateTime3.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.Chronology chronology12 = chronology7.withUTC();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        int int15 = localDateTime13.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) -1);
        java.lang.String str26 = dateTimeZone22.getID();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.minus(readableDuration28);
        int[] intArray31 = chronology7.get((org.joda.time.ReadablePartial) localDateTime29, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = chronology7.weekyearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime.Property property34 = dateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(4);
        org.joda.time.DateTime dateTime40 = dateTime38.minusHours(1970);
        org.joda.time.Instant instant41 = dateTime38.toInstant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.property(dateTimeFieldType44);
        int int48 = property47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = property47.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfCeilingCopy();
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.Chronology chronology52 = localDateTime50.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = instant41.toMutableDateTime(chronology52);
        org.joda.time.DateTime dateTime54 = dateTime33.toDateTime(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and instant41", (dateTime38.compareTo(instant41) == 0) == dateTime38.equals(instant41));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        long long8 = chronology3.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime(chronology15);
        boolean boolean21 = dateTime19.equals((java.lang.Object) "25783339");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.DateTime dateTime25 = dateTime19.withFieldAdded(durationFieldType23, 83);
        java.lang.String str26 = durationFieldType23.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime19", (dateTime12.compareTo(dateTime19) == 0) == dateTime12.equals(dateTime19));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant12.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology20 = null;
        boolean boolean21 = durationFieldType19.isSupported(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withFieldAdded(durationFieldType19, 59);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.DateTimeField dateTimeField29 = localDateTime27.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField29.getType();
        boolean boolean31 = instant12.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant12", (dateTime14.compareTo(instant12) == 0) == dateTime14.equals(instant12));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        java.util.Locale locale2 = new java.util.Locale("+00:00:00.059", "25811900");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.joda.time.tz.NameProvider nameProvider4 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        int int12 = property11.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        int int16 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTime.Property property23 = dateTime20.weekyear();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.withPeriodAdded(readablePeriod24, (int) '4');
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime20);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(54);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime27, 6, locale31);
        java.lang.String str35 = nameProvider4.getShortName(locale31, "\u53f0\u6e7e", "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str40 = nameProvider4.getName(locale36, "1969-12-31T23:59:59.999Z", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider4);
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Calendar.Builder builder45 = builder42.setLocale(locale43);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder47 = builder45.setLocale(locale46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone48);
        java.util.Calendar.Builder builder50 = builder45.setTimeZone(timeZone48);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder55 = builder52.setLocale(locale53);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder57 = builder55.setLocale(locale56);
        boolean boolean58 = calendar51.before((java.lang.Object) locale56);
        java.lang.String str61 = nameProvider4.getName(locale56, "2022-02-22T07:12:38.560+00:00:00.059", "1961/07/24 5:46:00");
        java.lang.String str62 = locale56.getScript();
        java.lang.String str63 = locale2.getDisplayName(locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar51", (calendar37.compareTo(calendar51) == 0) == calendar37.equals(calendar51));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = dateTime1.equals((java.lang.Object) durationFieldType5);
        int int7 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime1.withYearOfEra(70);
        org.joda.time.DateTime.Property property10 = dateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 2022, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology14);
        org.joda.time.LocalDate localDate19 = dateTime1.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.Chronology chronology9 = dateTime7.getChronology();
        int int10 = dateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFieldAdded(durationFieldType17, 6);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.centuryOfEra();
        org.joda.time.DurationField durationField25 = durationFieldType17.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime7.toDateTime(chronology22);
        org.joda.time.DateTime dateTime28 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        int int30 = localDateTime29.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology32 = null;
        boolean boolean33 = durationFieldType31.isSupported(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withFieldAdded(durationFieldType31, 59);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusWeeks(2);
        int int41 = localDateTime37.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusSeconds(544);
        boolean boolean44 = dateTime28.equals((java.lang.Object) 544);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime27", (dateTime7.compareTo(dateTime27) == 0) == dateTime7.equals(dateTime27));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Instant instant8 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 25873288);
        long long11 = instant10.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant8", (dateTime3.compareTo(instant8) == 0) == dateTime3.equals(instant8));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime6.withChronology(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(736);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType28.getField(chronology31);
        boolean boolean34 = localDateTime23.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.weekyears();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType43.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFieldAdded(durationFieldType43, 59);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.minus(readablePeriod55);
        long long58 = chronology37.set((org.joda.time.ReadablePartial) localDateTime41, (long) 38);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime20.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField60 = chronology37.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime59", (dateTime1.compareTo(mutableDateTime59) == 0) == dateTime1.equals(mutableDateTime59));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        long long14 = instant13.getMillis();
        org.joda.time.Instant instant16 = instant13.minus(1645513820399L);
        org.joda.time.Instant instant17 = instant13.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant19", (dateTime3.compareTo(instant19) == 0) == dateTime3.equals(instant19));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.Chronology chronology9 = dateTime7.getChronology();
        int int10 = dateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFieldAdded(durationFieldType17, 6);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.centuryOfEra();
        org.joda.time.DurationField durationField25 = durationFieldType17.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime7.toDateTime(chronology22);
        org.joda.time.DateTime dateTime28 = dateTime7.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime27", (dateTime7.compareTo(dateTime27) == 0) == dateTime7.equals(dateTime27));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime14.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        int int27 = fixedDateTimeZone22.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime28 = dateTime17.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(0);
        org.joda.time.DateTime.Property property37 = dateTime34.weekyear();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime34.withPeriodAdded(readablePeriod38, (int) '4');
        int int41 = property30.getDifference((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime34.plus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(2);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear(39);
        boolean boolean49 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(1970);
        int int53 = dateTimeZone51.getStandardOffset(1645513714231L);
        org.joda.time.DateTime dateTime54 = dateTime46.toDateTime(dateTimeZone51);
        java.lang.String str55 = dateTimeZone51.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime54", (dateTime5.compareTo(dateTime54) == 0) == dateTime5.equals(dateTime54));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) -1);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(51574L);
        int int9 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        long long18 = chronology13.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime6.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField25 = chronology13.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime12", (dateTime6.compareTo(dateTime12) == 0) == dateTime6.equals(dateTime12));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        java.util.Date date6 = new java.util.Date((long) (byte) 0);
        int int7 = date6.getHours();
        date6.setYear(9);
        boolean boolean10 = localTime0.equals((java.lang.Object) date6);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        boolean boolean22 = fixedDateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime23 = localTime12.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        boolean boolean24 = localTime0.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime12.plus(readablePeriod25);
        org.joda.time.DateTime dateTime27 = localTime26.toDateTimeToday();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(37);
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        org.joda.time.Instant instant31 = dateTime27.toInstant();
        boolean boolean33 = dateTime27.isBefore(68425822L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant31", (dateTime23.compareTo(instant31) == 0) == dateTime23.equals(instant31));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime3.plusMonths(34);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Instant instant16 = instant12.withDurationAdded(0L, 217);
        org.joda.time.MutableDateTime mutableDateTime17 = instant12.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        boolean boolean18 = dateTimeFieldType14.isSupported(chronology17);
        long long22 = chronology17.add((long) 184, 0L, 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 2022, 1870);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTime dateTime29 = dateTime11.toDateTime(chronology17);
        java.util.Date date30 = dateTime29.toDate();
        date30.setYear(957);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        java.lang.String str5 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology2.weeks();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone10 = chronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        long long4 = instant1.getMillis();
        org.joda.time.Instant instant6 = instant1.plus(1645513788734L);
        org.joda.time.Chronology chronology7 = instant1.getChronology();
        org.joda.time.DateTime dateTime8 = instant1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(0L, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(0L, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate19.plus(readablePeriod22);
        org.joda.time.LocalDate localDate24 = localDate16.withFields((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDate24.getFieldTypes();
        java.lang.String str26 = localDate24.toString();
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        boolean boolean29 = dateTimeFieldType10.isSupported(chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 674, chronology27);
        boolean boolean31 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = dateTime30.isAfter((long) 433);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int8 = dateTimeFormatter2.getPivotYear();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        int int15 = property14.getMinimumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        int int19 = localDateTime18.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = durationFieldType20.isSupported(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFieldAdded(durationFieldType20, 59);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTime.Property property34 = dateTime31.weekyear();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime31.withPeriodAdded(readablePeriod35, (int) '4');
        int int38 = property27.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime31.plus(readableDuration39);
        int int41 = dateTime40.getSecondOfMinute();
        long long42 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime43 = dateTime40.toLocalDateTime();
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime17.withChronology(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.DurationField durationField51 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.year();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 9, chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.millisOfDay();
        org.joda.time.DurationField durationField56 = chronology49.seconds();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTime45, chronology49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter2.withChronology(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime45", (dateTime17.compareTo(dateTime45) == 0) == dateTime17.equals(dateTime45));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology19.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("Japan", "DateTimeField[millisOfDay]", 2026, 500);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = fixedDateTimeZone4.getName(0L, locale7);
        java.lang.String str9 = fixedDateTimeZone4.getID();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.lang.String str12 = fixedDateTimeZone4.getNameKey((-97L));
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfMonth();
        int int16 = localDateTime14.getMillisOfSecond();
        int int17 = localDateTime14.getDayOfYear();
        int int18 = localDateTime14.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withYear(22);
        org.joda.time.DateTime dateTime21 = localDateTime14.toDateTime();
        java.util.Date date22 = dateTime21.toDate();
        org.joda.time.DateTime dateTime24 = dateTime21.withDayOfYear(363);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = dateTime24.toString("25714074", locale26);
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale26.getLanguage();
        java.lang.String str30 = locale26.getCountry();
        java.lang.String str31 = fixedDateTimeZone4.getShortName(1645528495769L, locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime21", (dateTime10.compareTo(dateTime21) == 0) == dateTime10.equals(dateTime21));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) -1);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(51574L);
        int int9 = dateTime6.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        int int20 = dateTime13.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int22 = dateTime13.get(dateTimeFieldType21);
        boolean boolean23 = dateTime6.isSupported(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime11", (dateTime6.compareTo(dateTime11) == 0) == dateTime6.equals(dateTime11));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = dateTimeField4.getAsText((long) (byte) -1, locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale9);
        timeZone1.setID("2022-02-23T18:08:44.927");
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder17 = builder14.setLocale(locale15);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder19 = builder17.setLocale(locale18);
        java.util.Calendar.Builder builder23 = builder19.setDate(109, 0, 18);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(4);
        int int28 = dateTime25.getEra();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Calendar calendar31 = dateTime25.toCalendar(locale29);
        java.util.Calendar.Builder builder32 = builder23.setLocale(locale29);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone1, locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar31", (calendar11.compareTo(calendar31) == 0) == calendar11.equals(calendar31));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone15 = fixedDateTimeZone14.toTimeZone();
        int int17 = fixedDateTimeZone14.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 363);
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant23", (dateTime3.compareTo(instant23) == 0) == dateTime3.equals(instant23));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 386);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        org.joda.time.Instant instant6 = instant1.withDurationAdded((long) 534, 25844657);
        boolean boolean7 = instant6.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, 611);
        int int20 = dateTime19.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime19", (dateTime3.compareTo(dateTime19) == 0) == dateTime3.equals(dateTime19));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        java.lang.String str23 = fixedDateTimeZone4.getNameKey(1645528203378L);
        boolean boolean24 = fixedDateTimeZone4.isFixed();
        long long26 = fixedDateTimeZone4.previousTransition((long) 789);
        java.util.TimeZone timeZone27 = fixedDateTimeZone4.toTimeZone();
        timeZone27.setRawOffset(551);
        boolean boolean30 = timeZone27.observesDaylightTime();
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder35 = builder31.setTimeOfDay(8, 0, 10);
        java.util.Calendar.Builder builder40 = builder35.setTimeOfDay(259, 60, 7, 0);
        java.util.Calendar.Builder builder44 = builder40.setWeekDate(25711821, 228, 0);
        java.util.Calendar.Builder builder48 = builder44.setDate(0, 674, 382);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone49.observesDaylightTime();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone.setDefault(timeZone49);
        boolean boolean53 = timeZone49.observesDaylightTime();
        timeZone49.setID("2022-02-22T07:10:33.250+00:00:00.059");
        java.util.Calendar.Builder builder56 = builder44.setTimeZone(timeZone49);
        java.util.Locale locale58 = new java.util.Locale("2022-02-22T07:09:04.613+00:00:00.059");
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone49, locale58);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime62 = localDateTime61.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime62.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime66 = dateTime64.plusHours(0);
        org.joda.time.DateTime.Property property67 = dateTime64.monthOfYear();
        int int68 = property67.getMaximumValue();
        org.joda.time.DateTime dateTime69 = property67.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.plus(readablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 199, dateTimeZone72);
        java.util.TimeZone timeZone74 = dateTimeZone72.toTimeZone();
        boolean boolean75 = timeZone49.hasSameRules(timeZone74);
        boolean boolean76 = timeZone27.hasSameRules(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar59", (calendar51.compareTo(calendar59) == 0) == calendar51.equals(calendar59));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("07:08:37.313", "Englisch", 25803870, 439);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.weekOfWeekyear();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.lang.String str14 = nameProvider7.getName(locale8, "1870-02-04", "51");
        java.util.Locale locale18 = new java.util.Locale("Greenwich Mean Time", "2022-02-22T07:10:26.680", "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        java.lang.String str21 = nameProvider7.getShortName(locale18, "22 Feb 2022 07:12:13 GMT", "2022-02-22T07:10:51.977+00:00:00.059");
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        long long27 = dateTimeField25.remainder((long) (byte) 100);
        java.lang.String str28 = dateTimeField25.getName();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.getDisplayCountry();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = dateTimeField25.getAsShortText(2, locale30);
        java.lang.String str34 = locale30.getDisplayCountry();
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.getDisplayCountry();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getVariant();
        java.util.Locale.setDefault(category22, locale36);
        java.lang.String str43 = nameProvider7.getShortName(locale36, "2022-03-17T01:21:57.737", "\u661f\u671f\u4e8c");
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.Chronology chronology46 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        int int48 = dateTimeField47.getMaximumValue();
        boolean boolean49 = dateTimeField47.isSupported();
        int int51 = dateTimeField47.getMinimumValue((long) 6);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(0);
        org.joda.time.DateTime.Property property58 = dateTime55.monthOfYear();
        int int59 = property58.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfYear();
        int int63 = dateTimeField60.getMinimumValue((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime65 = localDateTime64.toDateTime();
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime69 = dateTime67.plusHours(0);
        org.joda.time.DateTime.Property property70 = dateTime67.weekyear();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime73 = dateTime67.withPeriodAdded(readablePeriod71, (int) '4');
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime67);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks(54);
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str79 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime74, 6, locale78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.withCenturyOfEra(785);
        java.util.Locale locale82 = java.util.Locale.UK;
        java.lang.String str83 = locale82.getDisplayCountry();
        boolean boolean84 = locale82.hasExtensions();
        java.util.Locale locale85 = java.util.Locale.UK;
        java.lang.String str86 = locale85.getDisplayCountry();
        java.lang.String str87 = locale82.getDisplayName(locale85);
        java.util.Locale locale88 = java.util.Locale.UK;
        java.lang.String str89 = locale88.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet90 = locale88.getExtensionKeys();
        java.lang.String str91 = locale85.getDisplayName(locale88);
        java.lang.String str92 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime74, locale88);
        java.util.Locale locale93 = locale88.stripExtensions();
        java.lang.String str96 = nameProvider7.getName(locale93, "1970-01-01T00:00:00.094", "");
        int int97 = property6.getMaximumTextLength(locale93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime45", (dateTime5.compareTo(dateTime45) == 0) == dateTime5.equals(dateTime45));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 3);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = dateTime18.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        java.lang.String str30 = fixedDateTimeZone24.toString();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfMonth();
        int int33 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) -1);
        java.lang.String str44 = dateTimeZone40.getID();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withWeekyear(228);
        boolean boolean50 = fixedDateTimeZone24.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.secondOfMinute();
        int int52 = property51.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime29", (dateTime18.compareTo(dateTime29) == 0) == dateTime18.equals(dateTime29));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime2", (instant4.compareTo(dateTime2) == 0) == instant4.equals(dateTime2));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant25 = dateTime24.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((-3152796670724L));
        org.joda.time.Instant instant29 = instant25.minus((-604799880L));
        org.joda.time.Instant instant31 = instant29.withMillis((long) 745);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant25", (dateTime24.compareTo(instant25) == 0) == dateTime24.equals(instant25));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(22);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        int int32 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        long long34 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded(1645513837340L, 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant36", (dateTime31.compareTo(instant36) == 0) == dateTime31.equals(instant36));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(9);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTimeISO();
        int int14 = dateTime11.getHourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((-61472908799900L), chronology20);
        org.joda.time.DurationField durationField25 = chronology20.minutes();
        org.joda.time.DurationField durationField26 = chronology20.weeks();
        org.joda.time.DateTime dateTime27 = dateTime11.withChronology(chronology20);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and dateTime27", (mutableDateTime13.compareTo(dateTime27) == 0) == mutableDateTime13.equals(dateTime27));
    }
}


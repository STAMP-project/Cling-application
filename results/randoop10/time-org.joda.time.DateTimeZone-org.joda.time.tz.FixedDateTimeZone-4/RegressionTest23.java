import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 878, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(54);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime5.minusMonths(23);
        boolean boolean19 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime5.minusDays(552);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(0L, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate6.toDateMidnight(dateTimeZone7);
        int[] intArray15 = new int[] { (-1), (short) 1, 2, 54, (byte) 0 };
        int[] intArray17 = dateTimeField2.add((org.joda.time.ReadablePartial) localDate6, 0, intArray15, 0);
        org.joda.time.LocalDate localDate19 = localDate6.withYear(913);
        org.joda.time.LocalDate localDate21 = localDate6.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property22 = localDate6.era();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate24 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withTime((int) (short) 0, (int) ' ', 12, 374);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusWeeks(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(695);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        int int17 = dateTimeField16.getMaximumValue();
        boolean boolean18 = dateTimeField16.isSupported();
        int int20 = dateTimeField16.getMinimumValue((long) 6);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        int int32 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(0);
        org.joda.time.DateTime.Property property39 = dateTime36.weekyear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime36.withPeriodAdded(readablePeriod40, (int) '4');
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime36);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks(54);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str48 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime43, 6, locale47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.withCenturyOfEra(785);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale51.getDisplayCountry();
        boolean boolean53 = locale51.hasExtensions();
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = locale54.getDisplayCountry();
        java.lang.String str56 = locale51.getDisplayName(locale54);
        java.util.Locale locale57 = java.util.Locale.UK;
        java.lang.String str58 = locale57.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet59 = locale57.getExtensionKeys();
        java.lang.String str60 = locale54.getDisplayName(locale57);
        java.lang.String str61 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime43, locale57);
        org.joda.time.LocalDateTime.Property property62 = localDateTime43.centuryOfEra();
        boolean boolean63 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime12.minusDays(0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u516d\u6708" + "'", str48, "\u516d\u6708");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "United Kingdom" + "'", str52, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "United Kingdom" + "'", str55, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "English (United Kingdom)" + "'", str56, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "United Kingdom" + "'", str58, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English (United Kingdom)" + "'", str60, "English (United Kingdom)");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "39" + "'", str61, "39");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 2022, chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.year();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 65, chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        int int15 = localDateTime7.getEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime7.getFields();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withDurationAdded(readableDuration17, 25872894);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withWeekyear(26077);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 861 + "'", int2 == 861);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(26075513, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        int int27 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = localDateTime25.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime.Property property33 = localDateTime8.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology36.years();
        java.lang.String str39 = chronology36.toString();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(4);
        int int44 = dateTime41.getEra();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Calendar calendar47 = dateTime41.toCalendar(locale45);
        java.lang.Object obj48 = null;
        boolean boolean49 = dateTime41.equals(obj48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime41.getZone();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology36.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField53 = chronology52.hours();
        long long57 = chronology52.add((long) 'x', (long) 816, 385);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.weekyearOfCentury();
        boolean boolean59 = dateTimeFieldType30.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = chronology52.days();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 894 + "'", int2 == 894);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 895 + "'", int27 == 895);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514139836,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=39,MILLISECOND=895,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 314280L + "'", long57 == 314280L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = chronology7.millis();
        org.joda.time.DurationField durationField11 = chronology7.years();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        long long20 = chronology7.set((org.joda.time.ReadablePartial) localDateTime18, (long) 25822);
        org.joda.time.DurationField durationField21 = chronology7.seconds();
        org.joda.time.DurationField durationField22 = chronology7.weeks();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514139878L + "'", long20 == 1645514139878L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setDate(3, (int) (short) 1, 25717313);
        java.util.Calendar calendar8 = builder0.build();
        java.util.Calendar.Builder builder13 = builder0.setTimeOfDay(472, 899, 79, 727);
        java.util.Calendar.Builder builder17 = builder0.setDate(616, 168, 893);
        java.util.Calendar.Builder builder21 = builder17.setTimeOfDay(160, 0, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.DurationField durationField25 = dateTimeField24.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(0L, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight(dateTimeZone29);
        int[] intArray37 = new int[] { (-1), (short) 1, 2, 54, (byte) 0 };
        int[] intArray39 = dateTimeField24.add((org.joda.time.ReadablePartial) localDate28, 0, intArray37, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder40 = builder21.setFields(intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2159905737599687,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=70414,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=252,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 2, 54, 0]");
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(15);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(10);
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime23.plusYears(22);
        org.joda.time.DateTime.Property property29 = dateTime23.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone35 = fixedDateTimeZone34.toTimeZone();
        int int37 = fixedDateTimeZone34.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime38 = dateTime23.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone44 = fixedDateTimeZone43.toTimeZone();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.withZone(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        int int54 = fixedDateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime52);
        int int56 = fixedDateTimeZone43.getOffset((long) (byte) 1);
        long long58 = fixedDateTimeZone43.previousTransition((long) 8);
        java.util.Date date60 = new java.util.Date((long) (byte) 1);
        int int61 = date60.getSeconds();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = fixedDateTimeZone43.equals((java.lang.Object) instant62);
        long long65 = fixedDateTimeZone34.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone43, (long) (-1));
        org.joda.time.Chronology chronology66 = chronology19.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 8L + "'", long58 == 8L);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645513830573L);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(704);
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 72);
        int int21 = dateTime20.getMinuteOfHour();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone26 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone27 = fixedDateTimeZone26.toTimeZone();
        int int29 = fixedDateTimeZone26.getOffset((long) 228);
        int int31 = fixedDateTimeZone26.getStandardOffset((long) 548);
        int int33 = fixedDateTimeZone26.getStandardOffset((-62104186800000L));
        int int35 = fixedDateTimeZone26.getStandardOffset(4345814218L);
        org.joda.time.DateTime dateTime36 = dateTime20.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.property(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        boolean boolean45 = localDateTime38.equals((java.lang.Object) property44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours(0);
        org.joda.time.DateTime.Property property52 = dateTime49.monthOfYear();
        int int53 = property52.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField54 = property52.getField();
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = property52.getAsShortText(locale55);
        int int57 = property44.getMaximumTextLength(locale55);
        java.lang.String str58 = locale55.getDisplayName();
        java.lang.String str59 = locale55.getDisplayName();
        java.util.Calendar calendar60 = dateTime36.toCalendar(locale55);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e8c\u6708" + "'", str56, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (Taiwan)" + "'", str58, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645513840021,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=40,MILLISECOND=80,ZONE_OFFSET=59,DST_OFFSET=0]");
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getName();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.plus(readablePeriod10);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondOfMinute" + "'", str7, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("Japan", "DateTimeField[millisOfDay]", 2026, 500);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        boolean boolean7 = timeZone5.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Japan Standard Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        boolean boolean14 = localTime1.isSupported(dateTimeFieldType13);
        org.joda.time.LocalTime.Property property15 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime17 = localTime1.plusMinutes(529);
        org.joda.time.LocalTime localTime19 = localTime1.minusMillis(396);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localTime1.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = fixedDateTimeZone9.getName(1009868913348L, locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        long long17 = dateTimeField15.remainder((long) (byte) 100);
        java.lang.String str18 = dateTimeField15.getName();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = locale20.getDisplayCountry();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = dateTimeField15.getAsShortText(2, locale20);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.lang.String str25 = locale11.getDisplayName(locale20);
        java.lang.String str26 = locale20.getLanguage();
        java.util.Locale.Builder builder27 = builder0.setLocale(locale20);
        java.lang.String str28 = locale20.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.059" + "'", str12, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United Kingdom" + "'", str21, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United Kingdom" + "'", str24, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en_GB" + "'", str28, "en_GB");
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime3.toGregorianCalendar();
        int int9 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime dateTime11 = dateTime3.withWeekyear(736);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        int int13 = dateTime11.getSecondOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25840 + "'", int13 == 25840);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        boolean boolean9 = dateTime7.isEqual((long) 26);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology12.getZone();
        org.joda.time.DateTime dateTime18 = dateTime7.toDateTime(chronology12);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = locale21.getDisplayCountry();
        boolean boolean23 = locale21.hasExtensions();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale21);
        calendar24.setLenient(false);
        long long27 = calendar24.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        int int29 = localDateTime28.getMillisOfSecond();
        int int30 = localDateTime28.size();
        int int31 = localDateTime28.getDayOfWeek();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone36 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone37 = fixedDateTimeZone36.toTimeZone();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withZone(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.millisOfSecond();
        int int47 = fixedDateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime45);
        int int49 = fixedDateTimeZone36.getOffset((long) (byte) 1);
        long long51 = fixedDateTimeZone36.previousTransition((long) 8);
        boolean boolean52 = fixedDateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime53 = localDateTime28.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        java.util.TimeZone timeZone54 = fixedDateTimeZone36.toTimeZone();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours(0);
        org.joda.time.DateTime.Property property61 = dateTime58.weekyear();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime64 = dateTime58.withPeriodAdded(readablePeriod62, (int) '4');
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime58);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.minuteOfHour();
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime73 = localDateTime72.toDateTime();
        org.joda.time.Chronology chronology74 = localDateTime72.getChronology();
        boolean boolean75 = dateTimeFieldType71.isSupported(chronology74);
        boolean boolean76 = localDateTime70.isSupported(dateTimeFieldType71);
        boolean boolean77 = fixedDateTimeZone36.isLocalDateTimeGap(localDateTime70);
        org.joda.time.DateTime dateTime78 = dateTime18.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "United Kingdom" + "'", str22, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514140059,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=40,MILLISECOND=372,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514140059L + "'", long27 == 1645514140059L);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 372 + "'", int29 == 372);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded(readablePeriod14, (int) '4');
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withChronology(chronology19);
        boolean boolean21 = dateTimeFormatter4.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:10:40.191+00:00:00.059" + "'", str17, "2022-02-22T07:10:40.191+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 449, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.minus((long) 812);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.withPeriodAdded(readablePeriod5, 268);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        timeZone0.setID("");
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        calendar5.roll(11, false);
        java.lang.String str9 = calendar5.getCalendarType();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra(492);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(0L, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate17.plus(readablePeriod20);
        org.joda.time.LocalDate.Property property22 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str24 = dateTimeFieldType23.toString();
        boolean boolean25 = localDate17.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        boolean boolean28 = durationFieldType14.isSupported(chronology26);
        org.joda.time.LocalDate localDate30 = localDate12.withFieldAdded(durationFieldType14, 812);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate30.withEra(490);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 490 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514140190,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=40,MILLISECOND=503,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645510540190,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=15,SECOND=40,MILLISECOND=503,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "clockhourOfHalfday" + "'", str24, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        calendar3.setTimeZone(timeZone13);
        calendar3.set(100, 1970, 34, 348, (int) (short) 10, (int) (byte) 100);
        calendar3.setTimeInMillis((long) 39599999);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone31 = fixedDateTimeZone30.toTimeZone();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withZone(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        int int41 = fixedDateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime39);
        int int43 = fixedDateTimeZone30.getOffset((long) (byte) 1);
        long long45 = fixedDateTimeZone30.previousTransition((long) 8);
        java.util.Date date47 = new java.util.Date((long) (byte) 1);
        int int48 = date47.getSeconds();
        java.time.Instant instant49 = date47.toInstant();
        boolean boolean50 = fixedDateTimeZone30.equals((java.lang.Object) instant49);
        long long52 = fixedDateTimeZone30.previousTransition((long) 660);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        java.lang.String str55 = fixedDateTimeZone30.getName((long) 40);
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withDefaultYear(3);
        java.lang.Integer int62 = dateTimeFormatter61.getPivotYear();
        java.util.Locale locale63 = java.util.Locale.UK;
        java.lang.String str64 = locale63.getDisplayCountry();
        boolean boolean65 = locale63.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter61.withLocale(locale63);
        java.util.Locale locale67 = java.util.Locale.US;
        java.util.Locale locale70 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getDisplayName();
        java.lang.String str73 = locale70.getDisplayVariant(locale71);
        java.lang.String str74 = locale67.getDisplayName(locale70);
        java.lang.String str75 = locale67.getISO3Country();
        java.lang.String str76 = locale63.getDisplayLanguage(locale67);
        java.lang.String str77 = locale67.getDisplayLanguage();
        java.lang.String str78 = fixedDateTimeZone30.getName((long) 774, locale67);
        java.util.TimeZone timeZone79 = fixedDateTimeZone30.toTimeZone();
        calendar3.setTimeZone(timeZone79);
        int int81 = timeZone79.getDSTSavings();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=39599999,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=58,ZONE_OFFSET=59,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514140213L + "'", long6 == 1645514140213L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 8L + "'", long45 == 8L);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 660L + "'", long52 == 660L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.059" + "'", str55, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "United Kingdom" + "'", str64, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertEquals(locale70.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Korean (South Korea)" + "'", str72, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English (United States)" + "'", str74, "English (United States)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "USA" + "'", str75, "USA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English" + "'", str76, "English");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.059" + "'", str78, "+00:00:00.059");
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.LocalTime localTime14 = localTime1.plusHours(18);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localTime14.getFields();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology19 = null;
        boolean boolean20 = durationFieldType18.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFieldAdded(durationFieldType18, 59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = localTime14.withFieldAdded(durationFieldType18, 606);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType15.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration13, chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology18.getZone();
        org.joda.time.DurationField durationField24 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withSecondOfMinute(6);
        boolean boolean15 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withWeekyear(2022);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusYears(1881);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime dateTime13 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minus(readablePeriod14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime0.getFields();
        int int17 = localDateTime0.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        int int3 = property2.get();
        boolean boolean4 = property2.isLeap();
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        long long7 = dateTimeField5.roundHalfEven(4355057375000L);
        java.lang.String str8 = dateTimeField5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField5.getType();
        long long12 = dateTimeField5.set(1645514003552L, "25867118");
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 26140385 + "'", int3 == 26140385);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4355057375000L + "'", long7 == 4355057375000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513867118L + "'", long12 == 1645513867118L);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1645513811472L, chronology3);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        int int17 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMaximumValue();
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = localDateTime23.toString("07:09:07.846", locale25);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "07:09:07.846" + "'", str26, "07:09:07.846");
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 674);
        boolean boolean5 = dateTime2.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.minus(readableDuration6);
        org.joda.time.Instant instant9 = instant4.withMillis(1645514139878L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        int int4 = localDateTime2.getMillisOfSecond();
        int int5 = localDateTime2.getDayOfYear();
        int int6 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withYear(22);
        int int9 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int10 = localDateTime8.getHourOfDay();
        org.joda.time.Chronology chronology11 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        int int14 = dateTimeField12.get((long) 46);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 498 + "'", int4 == 498);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse("25795762");
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 669, chronology3);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfSecond();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate2.minus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(0L, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(0L, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate30.plus(readablePeriod33);
        org.joda.time.LocalDate localDate35 = localDate27.withFields((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.LocalDate localDate37 = localDate27.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology40);
        org.joda.time.DateTime dateTime42 = dateTime22.toDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate17 = localDate15.minusYears((-1));
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.Chronology chronology19 = localDate15.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 70, chronology19);
        org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate20.withYear(346);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays(674);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(401);
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int[] intArray18 = localDate17.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDate17.getFields();
        org.joda.time.LocalDate localDate21 = localDate17.minusDays(2097);
        int int22 = localDate21.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate21.withDayOfYear(25815441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25815441 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2022-02-22T07:09:03.986", "GB", 739, 173);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(545);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2022-02-22T07:10:16.743+00:00:00.059", "+00:00:00.841", 838, 25757031);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.plusMillis(0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        java.util.Locale locale14 = null;
        int int15 = property13.getMaximumShortTextLength(locale14);
        org.joda.time.LocalDate localDate16 = property13.roundCeilingCopy();
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(79);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(25859005);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(3);
        java.lang.Integer int26 = dateTimeFormatter25.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withOffsetParsed();
        java.util.Locale locale30 = dateTimeFormatter25.getLocale();
        int int31 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter25.withPivotYear((int) '4');
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime41 = localTime39.plusMinutes(52);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localDate20.toString(dateTimeFormatter25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNull(dateTimePrinter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        int int9 = dateTime8.getDayOfYear();
        int int10 = dateTime8.getEra();
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(10);
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 59);
        boolean boolean24 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property25 = dateTime8.weekyear();
        org.joda.time.DateTime.Property property26 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime8.toDateTimeISO();
        org.joda.time.Instant instant28 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.MutableDateTime mutableDateTime30 = instant28.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = instant28.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 60 + "'", int9 == 60);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int11 = localDate8.indexOf(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = localDate8.minusWeeks(25821695);
        int int14 = localDate13.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        int int17 = fixedDateTimeZone4.getOffset((long) (byte) 1);
        long long19 = fixedDateTimeZone4.previousTransition((long) 8);
        java.util.Date date21 = new java.util.Date((long) (byte) 1);
        int int22 = date21.getSeconds();
        java.time.Instant instant23 = date21.toInstant();
        boolean boolean24 = fixedDateTimeZone4.equals((java.lang.Object) instant23);
        java.lang.String str26 = fixedDateTimeZone4.getNameKey((long) 259);
        int int28 = fixedDateTimeZone4.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long32 = fixedDateTimeZone4.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(10);
        int int40 = dateTime37.getWeekOfWeekyear();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        int int45 = dateTime33.get(dateTimeFieldType44);
        boolean boolean46 = dateTime33.isEqualNow();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 8L + "'", long19 == 8L);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str26, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 38L + "'", long32 == 38L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        int int3 = localDateTime0.getDayOfYear();
        int int4 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYear(22);
        org.joda.time.DateTime dateTime7 = localDateTime0.toDateTime();
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond(32);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis(25800535L);
        int int13 = dateTime10.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 755 + "'", int2 == 755);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMillis(683);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        int int12 = property11.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(28591L);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        long long8 = chronology3.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DurationField durationField10 = chronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.era();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        boolean boolean20 = dateTime15.equals((java.lang.Object) durationFieldType19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.property(dateTimeFieldType28);
        int int32 = localDateTime27.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        long long37 = dateTimeField35.remainder((long) (byte) 100);
        java.lang.String str38 = dateTimeField35.getName();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        int int40 = dateTimeField35.getMaximumShortTextLength(locale39);
        java.lang.String str41 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale39);
        org.joda.time.Chronology chronology42 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField43 = durationFieldType19.getField(chronology42);
        boolean boolean44 = localDateTime12.equals((java.lang.Object) chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone47.convertUTCToLocal((long) 660);
        org.joda.time.Chronology chronology50 = chronology42.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 184L + "'", long8 == 184L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfDay" + "'", str38, "millisOfDay");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u661f\u671f\u4e8c" + "'", str41, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 660L + "'", long49 == 660L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths((-1));
        int int12 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate17 = localDate7.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(25788);
        int int22 = localDate21.getWeekOfWeekyear();
        int int23 = localDate21.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37 + "'", int22 == 37);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 253 + "'", int23 == 253);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean9 = dateTimeFormatter4.isParser();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plusHours(0);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.plus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfDay();
        org.joda.time.DateTime dateTime34 = property32.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        long long40 = dateTimeZone37.adjustOffset((long) 70, false);
        org.joda.time.DateTime dateTime41 = localDateTime21.toDateTime(dateTimeZone37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter4.withZone(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.Chronology chronology46 = localDateTime44.getChronology();
        boolean boolean47 = dateTimeFieldType43.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter42.withChronology(chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter42.withPivotYear(67);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 70L + "'", long40 == 70L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        int int8 = fixedDateTimeZone5.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((-1L));
        boolean boolean12 = fixedDateTimeZone5.isLocalDateTimeGap(localDateTime11);
        int int13 = localDateTime11.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withTime(0, 0, 899, 2024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 899 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withPeriodAdded(readablePeriod9, 59);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.withZone(dateTimeZone18);
        int int20 = dateTime19.getWeekyear();
        boolean boolean21 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime19);
        int int22 = dateTime19.getDayOfYear();
        int int23 = dateTime19.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(25757770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25757770 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        java.lang.String str5 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology2.weeks();
        org.joda.time.DurationField durationField9 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology2);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(10);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime8.minuteOfDay();
        boolean boolean17 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        java.lang.String str27 = fixedDateTimeZone22.getShortName((long) 2);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFieldAdded(durationFieldType34, 6);
        boolean boolean37 = fixedDateTimeZone22.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekyear(13);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plus(readablePeriod40);
        org.joda.time.DateTime dateTime42 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTime.Property property43 = dateTime8.secondOfDay();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime46 = dateTime8.plusMinutes(8);
        org.joda.time.DateTime dateTime47 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant48 = dateTime8.toInstant();
        org.joda.time.Instant instant49 = instant48.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.059" + "'", str27, "+00:00:00.059");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant49);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:10:10.584+00:00:00.059");
        int int2 = timeZone1.getRawOffset();
        java.lang.String str3 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str3, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = dateTime1.equals((java.lang.Object) durationFieldType5);
        int int7 = dateTime1.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime1.getZone();
        org.joda.time.DateTime.Property property9 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        int int7 = localTime6.size();
        int int8 = localTime6.getHourOfDay();
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, (long) '4', 374);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.era();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.year();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withZone(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfSecond();
        int int35 = fixedDateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime33);
        long long37 = fixedDateTimeZone24.previousTransition((long) '#');
        long long39 = fixedDateTimeZone24.nextTransition(1645513711304L);
        long long41 = fixedDateTimeZone24.previousTransition((long) 4);
        int int43 = fixedDateTimeZone24.getOffsetFromLocal((long) 733);
        long long45 = fixedDateTimeZone24.nextTransition(1053814108236081L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) chronology12, (org.joda.time.DateTimeZone) fixedDateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645513711304L + "'", long39 == 1645513711304L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4L + "'", long41 == 4L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1053814108236081L + "'", long45 == 1053814108236081L);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        java.util.Date date4 = calendar1.getTime();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        org.joda.time.LocalDate localDate7 = localDate5.plusWeeks(607);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate7.withDayOfMonth(68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514140973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=286,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 53 + "'", int2 == 53);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:15:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:15:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        long long4 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant1.plus(readableDuration5);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62104060800059L) + "'", long4 == (-62104060800059L));
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.Locale.FilteringMode filteringMode7 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5, filteringMode7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList20);
        org.joda.time.tz.Provider provider23 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet24 = provider23.getAvailableIDs();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet24);
        java.lang.Character[] charArray29 = new java.lang.Character[] { '#', '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet30 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet30, charArray29);
        java.lang.Object[] objArray32 = charSet30.toArray();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = localTime33.withMillisOfSecond(12);
        org.joda.time.LocalTime localTime37 = localTime33.plusMillis((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeFormatter42.getChronolgy();
        boolean boolean45 = localTime37.equals((java.lang.Object) dateTimeFormatter42);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList51, filteringMode53);
        boolean boolean55 = localTime37.equals((java.lang.Object) strList51);
        boolean boolean56 = charSet30.retainAll((java.util.Collection<java.lang.String>) strList51);
        java.util.Locale.FilteringMode filteringMode57 = null;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList51, filteringMode57);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList51);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + filteringMode7 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode7.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[#, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[#, 4]");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(dateTimeZone43);
        org.junit.Assert.assertNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate17 = property13.setCopy(65321929);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str19 = dateTimeFieldType18.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate17.withField(dateTimeFieldType18, 734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 734 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "monthOfYear" + "'", str19, "monthOfYear");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getSeconds();
        java.lang.String str3 = date1.toGMTString();
        java.util.Date date4 = new java.util.Date();
        boolean boolean5 = date1.after(date4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = dateTimeField10.getAsText((long) (byte) -1, locale12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.util.Date date19 = new java.util.Date((long) (byte) 1);
        date19.setYear(228);
        int int22 = date19.getDay();
        int int23 = date19.getMinutes();
        date19.setYear(348);
        int int26 = date19.getTimezoneOffset();
        calendar17.setTime(date19);
        int int28 = date19.getHours();
        date19.setSeconds(40150000);
        boolean boolean31 = date1.before(date19);
        date1.setYear(73);
        int int34 = date1.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Jan 01 00:00:00 GMT+00:00 1973");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str3, "1 Jan 1970 00:00:00 GMT");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:15:41 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "58" + "'", str13, "58");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=8772796800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2248,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Apr 09 16:46:40 GMT+00:00 2249");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology3);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.getDisplayCountry();
        boolean boolean9 = locale7.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale7.getDisplayName(locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet15 = locale13.getExtensionKeys();
        java.lang.String str16 = locale10.getDisplayName(locale13);
        java.lang.String str17 = dateTimeField5.getAsText(0, locale10);
        long long20 = dateTimeField5.getDifferenceAsLong(97L, (long) 564);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        int int23 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) -1);
        java.lang.String str34 = dateTimeZone30.getID();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime28, dateTimeZone30);
        int int36 = localDateTime28.getEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime28.minusDays(1912);
        int int39 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime28.yearOfEra();
        int int42 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean44 = dateTimeField5.isLeap(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = dateTimeField5.set(4345845986L, "2022-03-07T10:13:50.553+315:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-03-07T10:13:50.553+315:00\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "United Kingdom" + "'", str8, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United Kingdom" + "'", str11, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (United Kingdom)" + "'", str12, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United Kingdom" + "'", str14, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (United Kingdom)" + "'", str16, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 193 + "'", int23 == 193);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+35:00" + "'", str33, "+35:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+35:00" + "'", str34, "+35:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26 + "'", int39 == 26);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.monthOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = property17.getAsShortText(locale20);
        java.lang.String str22 = dateTimeField9.getAsText((int) (byte) 10, locale20);
        java.lang.String str23 = locale20.getISO3Country();
        java.lang.String str24 = locale0.getDisplayScript(locale20);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale20);
        calendar25.set(463, 12, 0, 50, 708);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.fromCalendarFields(calendar25);
        long long33 = calendar25.getTimeInMillis();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e8c\u6708" + "'", str21, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u5341\u6708" + "'", str22, "\u5341\u6708");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "TWN" + "'", str23, "TWN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-47524529478845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=464,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=48,SECOND=41,MILLISECOND=468,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-47524529478845L) + "'", long33 == (-47524529478845L));
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, 785);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int23 = localDateTime22.getDayOfYear();
        int[] intArray25 = chronology10.get((org.joda.time.ReadablePartial) localDateTime22, (long) 30);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withCenturyOfEra(651);
        org.joda.time.DateTime dateTime28 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(49);
        int int31 = dateTime30.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65169 + "'", int31 == 65169);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(0L, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate9.plus(readablePeriod12);
        org.joda.time.LocalDate localDate14 = localDate6.withFields((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate16 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(0L, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str28 = dateTimeFieldType27.toString();
        int int29 = localDate26.indexOf(dateTimeFieldType27);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDate26, (-1), locale31);
        java.lang.String str33 = localDate26.toString();
        org.joda.time.LocalDate localDate35 = localDate26.minusYears(1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate26.withPeriodAdded(readablePeriod36, 789);
        java.util.Date date40 = new java.util.Date((long) (byte) 0);
        int int41 = date40.getHours();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromDateFields(date40);
        org.joda.time.LocalTime.Property property43 = localTime42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        long long46 = dateTimeField44.roundFloor(28227L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField44.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = localDate26.get(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "clockhourOfHalfday" + "'", str1, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "clockhourOfHalfday" + "'", str28, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1870-01-01" + "'", str33, "1870-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 28000L + "'", long46 == 28000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekOfWeekyear();
        int int10 = dateTime3.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime3.minusHours(968);
        int int13 = dateTime12.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withDayOfWeek(25855919);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25855919 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        long long28 = dateTimeZone25.adjustOffset((long) 70, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(953);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 70L + "'", long28 == 70L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str30, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        java.util.Locale locale1 = new java.util.Locale("2022-03-18T12:18:43.346");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-03-18t12:18:43.346");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(413);
        org.joda.time.LocalDateTime localDateTime9 = property6.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        boolean boolean6 = dateTimeField5.isLenient();
        long long8 = dateTimeField5.roundHalfFloor(1645513739806L);
        org.joda.time.DurationField durationField9 = dateTimeField5.getRangeDurationField();
        java.util.Locale locale14 = new java.util.Locale("47", "Property[minuteOfHour]", "English (United States)");
        java.lang.String str15 = dateTimeField5.getAsText(0, locale14);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513740000L + "'", long8 == 1645513740000L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals(locale14.toString(), "47_PROPERTY[MINUTEOFHOUR]_English (United States)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayCountry();
        boolean boolean8 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(0L, dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(0L, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate20.plus(readablePeriod23);
        org.joda.time.LocalDate localDate25 = localDate17.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDate25.getFieldTypes();
        java.lang.String str27 = localDate25.toString();
        org.joda.time.Chronology chronology28 = localDate25.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter9.withChronology(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 878, dateTimeZone31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localTime32.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeFormatter9.print((org.joda.time.ReadablePartial) localTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-61468390289452L));
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        long long3 = property2.remainder();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1510246289393L) + "'", long3 == (-1510246289393L));
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder5 = builder3.setLocale(locale4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone6);
        java.util.Calendar.Builder builder8 = builder3.setTimeZone(timeZone6);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder13 = builder10.setLocale(locale11);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder15 = builder13.setLocale(locale14);
        boolean boolean16 = calendar9.before((java.lang.Object) locale14);
        java.util.TimeZone timeZone17 = calendar9.getTimeZone();
        int int18 = calendar9.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("25707776");
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusYears(32);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusWeeks(782);
        boolean boolean26 = calendar9.after((java.lang.Object) 782);
        calendar9.setMinimalDaysInFirstWeek(25927);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514141349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=25927,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=662,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder1.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone6.observesDaylightTime();
        timeZone6.setID("");
        java.util.Calendar.Builder builder10 = builder1.setTimeZone(timeZone6);
        boolean boolean11 = timeZone0.hasSameRules(timeZone6);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        long long22 = dateTimeField20.remainder((long) (byte) 100);
        java.lang.String str23 = dateTimeField20.getName();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getDisplayCountry();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = dateTimeField20.getAsShortText(2, locale25);
        java.lang.String str29 = locale25.getDisplayCountry();
        java.lang.String str30 = dateTimeField16.getAsShortText((long) (short) 0, locale25);
        java.lang.String str31 = locale25.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet34 = locale32.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayCountry();
        java.lang.String str37 = locale32.getDisplayLanguage(locale35);
        java.util.Locale locale40 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale40.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        java.lang.String str45 = locale35.getDisplayName(locale40);
        java.lang.String str46 = locale25.getDisplayVariant(locale35);
        java.util.Locale locale47 = locale25.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone6, locale47);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514141367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=680,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "millisOfDay" + "'", str23, "millisOfDay");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "United Kingdom" + "'", str26, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2" + "'", str28, "2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "United Kingdom" + "'", str29, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "United Kingdom" + "'", str33, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Korean (South Korea)" + "'", str42, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (United Kingdom)" + "'", str45, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514141367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=680,ZONE_OFFSET=313,DST_OFFSET=0]");
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime5.minusMonths(23);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime18.toGregorianCalendar();
        boolean boolean22 = gregorianCalendar21.isLenient();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        java.util.Date date4 = calendar1.getTime();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        calendar1.setMinimalDaysInFirstWeek(1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(216);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514141402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=715,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 53 + "'", int2 == 53);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:15:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:15:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.plus(readableDuration5);
        org.joda.time.Instant instant9 = instant6.withDurationAdded(35679L, 132);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 25891234);
        org.joda.time.Instant instant15 = instant12.withDurationAdded(1277942400000L, 299);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localTime6.toString("2022-02-22T07:10:51.140+00:00:00.059", locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        boolean boolean14 = localTime1.isSupported(dateTimeFieldType13);
        org.joda.time.LocalTime.Property property15 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime17 = localTime1.plusHours(518);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType19 = localTime1.getFieldType(475);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 475");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(548);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMinimumValue();
        int int9 = localDateTime8.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 59021546L + "'", long7 == 59021546L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded(1009868913348L, 23);
        org.joda.time.DateTime.Property property23 = dateTime17.millisOfDay();
        int int24 = dateTime17.getDayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withPivotYear((java.lang.Integer) 660);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTime17.toString(dateTimeFormatter29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+35:00" + "'", str15, "+35:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getName();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.LocalTime localTime11 = property4.setCopy(41);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds(25844657);
        org.joda.time.LocalTime localTime15 = localTime11.minusHours(329);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondOfMinute" + "'", str7, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider3 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder9 = builder7.setLocale(locale8);
        java.lang.String str12 = nameProvider3.getShortName(locale8, "Thu Jan 01 00:00:00 GMT+00:00 2128", "ja_JP");
        java.util.Locale locale15 = new java.util.Locale("Mon Jul 24 02:05:00 GMT+00:00 1961", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str18 = nameProvider3.getShortName(locale15, "2022-02-22T07:10:08.966+00:00:00.059", "2022-02-22T07:10:11.783+00:00:00.059");
        java.lang.String str21 = nameProvider0.getShortName(locale15, "2022-02-22T07:10:45.334+00:00:00.059", "CN");
        java.util.Locale locale25 = new java.util.Locale("2022-02-23T18:08:46.986", "", "25714150");
        java.lang.String str28 = nameProvider0.getName(locale25, "2022-02-22T07:10:57.110", "2022-02-22T07:10:12.647");
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(0L, dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(0L, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate36.plus(readablePeriod39);
        org.joda.time.LocalDate localDate41 = localDate33.withFields((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDate41.getFieldTypes();
        java.lang.String str43 = localDate41.toString();
        org.joda.time.Chronology chronology44 = localDate41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfYear();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("2022-02-23T18:08:46.986");
        java.lang.String str49 = dateTimeField45.getAsText(733, locale48);
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str53 = nameProvider0.getName(locale50, "25866660", "353");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals(locale15.toString(), "mon jul 24 02:05:00 gmt+00:00 1961_1 JAN 1970 00:00:00 GMT");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals(locale25.toString(), "2022-02-23t18:08:46.986__25714150");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "733" + "'", str49, "733");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        java.time.Instant instant10 = calendar3.toInstant();
        calendar3.set(6, 866, 323, (int) 'a', 809, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(0L, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(0L, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate25.plus(readablePeriod28);
        org.joda.time.LocalDate localDate30 = localDate22.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property31 = localDate30.year();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(0L, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate34.plus(readablePeriod37);
        int int39 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate38.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra(100);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(3);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int49 = localDate47.indexOf(dateTimeFieldType48);
        int int50 = localDate43.indexOf(dateTimeFieldType48);
        int int51 = localDate43.getDayOfWeek();
        org.joda.time.LocalDate.Property property52 = localDate43.dayOfWeek();
        org.joda.time.LocalDate localDate53 = property52.roundHalfEvenCopy();
        boolean boolean54 = calendar3.before((java.lang.Object) localDate53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=6,MONTH=866,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=323,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=97,MINUTE=809,SECOND=-1,MILLISECOND=914,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292269054 + "'", int9 == 292269054);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("10:18:20.002", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10:18:20.002");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        int int14 = localDate12.getEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate12.withPeriodAdded(readablePeriod15, 342);
        org.joda.time.LocalDate.Property property18 = localDate17.year();
        org.joda.time.LocalDate localDate20 = localDate17.minusMonths(65321929);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        java.util.Date date3 = new java.util.Date(239, 0, 838);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date3);
        java.time.Instant instant5 = date3.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        int int7 = date6.getYear();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 17 00:00:00 GMT+00:00 2141");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 17 00:00:00 GMT+00:00 2141");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 241 + "'", int7 == 241);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = property8.setCopy(612);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(3);
        java.lang.Integer int32 = dateTimeFormatter31.getPivotYear();
        org.joda.time.Chronology chronology33 = dateTimeFormatter31.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter31.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter31.withOffsetParsed();
        java.util.Locale locale36 = dateTimeFormatter31.getLocale();
        boolean boolean37 = dateTimeFormatter31.isParser();
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String str39 = locale38.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter31.withLocale(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.lang.String str42 = property8.getAsShortText(locale38);
        java.util.Locale locale46 = new java.util.Locale("30", "Japanese", "2022-02-22T07:10:12.083+00:00:00.059");
        java.lang.String str47 = property8.getAsShortText(locale46);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "United Kingdom" + "'", str39, "United Kingdom");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertEquals(locale46.toString(), "30_JAPANESE_2022-02-22T07:10:12.083+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.property(dateTimeFieldType7);
        int int11 = localDateTime6.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        long long16 = dateTimeField14.remainder((long) (byte) 100);
        java.lang.String str17 = dateTimeField14.getName();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        int int19 = dateTimeField14.getMaximumShortTextLength(locale18);
        java.lang.String str20 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime6, locale18);
        org.joda.time.Chronology chronology21 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusYears(25875012);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u661f\u671f\u4e8c" + "'", str20, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        int int14 = localDate12.getEra();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTime(localTime15);
        int int17 = localDate12.getDayOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDate12.getFields();
        org.joda.time.LocalDate.Property property19 = localDate12.year();
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.TimeZone timeZone9 = calendar7.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1970-01-01T00:00:00.000Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514141759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=41,MILLISECOND=818,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        java.util.Locale locale3 = new java.util.Locale("2022-02-23T18:10:59.753+35:00", "\u30a4\u30ae\u30ea\u30b9", "\u53f0\u6e7e,offset=248,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=70414,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=252,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=5,SECOND=39,MILLISECOND=0,ZONE_OFFSET=248,DST_OFFSET=0]");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("6", "357", 535, 78);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = fixedDateTimeZone8.getShortName(1645513723560L, locale10);
        java.lang.String str15 = fixedDateTimeZone8.getNameKey(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) "\u53f0\u6e7e,offset=248,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=70414,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=252,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=5,SECOND=39,MILLISECOND=0,ZONE_OFFSET=248,DST_OFFSET=0]", (org.joda.time.DateTimeZone) fixedDateTimeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30a4\u30ae\u30ea\u30b9\u53f0\u6e7e,offset=248,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=70414,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=252,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=5,SECOND=39,MILLISECOND=0,ZONE_OFFSET=248,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.535" + "'", str13, "+00:00:00.535");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "357" + "'", str15, "357");
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getName();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.LocalTime localTime11 = property4.setCopy(41);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds(25844657);
        org.joda.time.LocalTime.Property property14 = localTime11.hourOfDay();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondOfMinute" + "'", str7, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        int int11 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime8.plusSeconds(786);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra(976);
        boolean boolean17 = dateTime13.isAfter((long) 65458977);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withZone(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        int int33 = fixedDateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime31);
        int int35 = fixedDateTimeZone22.getOffset((long) (byte) 1);
        long long37 = fixedDateTimeZone22.previousTransition((long) 8);
        java.util.Date date39 = new java.util.Date((long) (byte) 1);
        int int40 = date39.getSeconds();
        java.time.Instant instant41 = date39.toInstant();
        boolean boolean42 = fixedDateTimeZone22.equals((java.lang.Object) instant41);
        java.lang.String str44 = fixedDateTimeZone22.getNameKey((long) 259);
        int int46 = fixedDateTimeZone22.getStandardOffset(2022L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        long long50 = fixedDateTimeZone22.convertLocalToUTC((long) 'a', false);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours(4);
        org.joda.time.DateTime dateTime57 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        int int58 = dateTime54.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime54.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime54.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone67 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone68 = fixedDateTimeZone67.toTimeZone();
        long long70 = dateTimeZone62.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone67, (long) 136);
        long long72 = fixedDateTimeZone22.getMillisKeepLocal(dateTimeZone62, (long) 1971);
        java.lang.String str74 = dateTimeZone62.getShortName((long) 2022);
        org.joda.time.DateTime dateTime75 = dateTime13.toDateTime(dateTimeZone62);
        int int76 = dateTime75.getSecondOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str44, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 38L + "'", long50 == 38L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 136L + "'", long70 == 136L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1971L + "'", long72 == 1971L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.059" + "'", str74, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 786 + "'", int76 == 786);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(761, 14, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder0.setCalendarType("2022-02-22T07:13:47.079Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-22T07:13:47.079Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str23 = dateTimeZone21.getNameKey(13305600000L);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone21);
        int int25 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property26 = localDate24.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Korean", strMap1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        int int10 = property9.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = property9.getAsShortText(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Locale locale18 = new java.util.Locale("1 Oct 2195 00:00:00 GMT", "2022-02-22T07:10:22.693+00:00:00.059", "2022-02-23T18:08:06.664");
        java.lang.String str19 = locale12.getDisplayLanguage(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet20);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e8c\u6708" + "'", str13, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals(locale18.toString(), "1 oct 2195 00:00:00 gmt_2022-02-22T07:10:22.693+00:00:00.059_2022-02-23T18:08:06.664");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        java.lang.String str5 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekOfWeekyear();
        long long10 = dateTimeField7.add((long) 'x', (int) (byte) -1);
        boolean boolean11 = dateTimeField7.isSupported();
        java.lang.String str13 = dateTimeField7.getAsText(0L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-604799880L) + "'", long10 == (-604799880L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology16.weekyears();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime5.withMillisOfSecond(537);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks(497);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:10:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(10);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime8.minuteOfDay();
        boolean boolean17 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        int int25 = fixedDateTimeZone22.getOffset((long) 228);
        java.lang.String str27 = fixedDateTimeZone22.getShortName((long) 2);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFieldAdded(durationFieldType34, 6);
        boolean boolean37 = fixedDateTimeZone22.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekyear(13);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plus(readablePeriod40);
        org.joda.time.DateTime dateTime42 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTime.Property property43 = dateTime8.secondOfDay();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime45 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        boolean boolean48 = dateTime46.isAfter(1645513718816L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.059" + "'", str27, "+00:00:00.059");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks((int) 'x');
        org.joda.time.LocalDate localDate6 = localDate2.withEra(0);
        org.joda.time.LocalDate localDate8 = localDate2.minusWeeks(15);
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(957);
        int int11 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate2.withField(dateTimeFieldType12, (-2152034));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2152034 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("19", "0", 495, 17);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(3);
        java.lang.Integer int11 = dateTimeFormatter10.getPivotYear();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getDisplayCountry();
        boolean boolean14 = locale12.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter10.withLocale(locale12);
        java.lang.String str16 = fixedDateTimeZone4.getShortName(63934358400008L, locale12);
        java.lang.String str17 = fixedDateTimeZone4.getID();
        long long19 = fixedDateTimeZone4.previousTransition(285L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        long long27 = property26.remainder();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTime.Property property34 = dateTime31.monthOfYear();
        int int35 = property34.getMaximumValue();
        org.joda.time.DateTime dateTime36 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.plus((long) 3);
        int int39 = property26.getDifference((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone44 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone45 = fixedDateTimeZone44.toTimeZone();
        int int47 = fixedDateTimeZone44.getOffset((long) 228);
        boolean boolean48 = fixedDateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime49 = dateTime38.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone44);
        java.lang.String str50 = fixedDateTimeZone44.toString();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.dayOfMonth();
        int int53 = localDateTime51.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime58 = property56.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        java.lang.String str63 = dateTimeZone60.getName((long) (byte) -1);
        java.lang.String str64 = dateTimeZone60.getID();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58, dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withWeekyear(228);
        boolean boolean70 = fixedDateTimeZone44.isLocalDateTimeGap(localDateTime69);
        long long72 = fixedDateTimeZone4.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone44, (long) 269);
        int int74 = fixedDateTimeZone44.getOffset((long) 664);
        boolean boolean76 = fixedDateTimeZone44.equals((java.lang.Object) 758);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.495" + "'", str16, "+00:00:00.495");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "19" + "'", str17, "19");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 285L + "'", long19 == 285L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4345842051L + "'", long27 == 4345842051L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str50, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 51 + "'", int53 == 51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+35:00" + "'", str63, "+35:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+35:00" + "'", str64, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 705L + "'", long72 == 705L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        int int4 = property2.getMinimumValueOverall();
        int int5 = property2.getLeapAmount();
        org.joda.time.LocalDate localDate6 = property2.withMaximumValue();
        org.joda.time.LocalDate localDate7 = property2.getLocalDate();
        org.joda.time.LocalDate localDate9 = property2.addToCopy(25840618);
        int int10 = localDate9.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter4.getChronology();
        java.util.Locale locale10 = dateTimeFormatter4.getLocale();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable11, 615L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNull(locale10);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime3.hourOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        gregorianCalendar18.add(318, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = gregorianCalendar18.getMaximum(25831972);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25831972");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        int int9 = dateTimeFormatter8.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTimeFormatter8.parseDateTime("\u4e0b\u5348 11:59:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long11 = dateTimeField9.remainder((long) (byte) 100);
        java.lang.String str12 = dateTimeField9.getName();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = dateTimeField9.getAsShortText(2, locale14);
        java.lang.String str18 = locale14.getDisplayCountry();
        java.lang.String str19 = dateTimeField5.getAsShortText((long) (short) 0, locale14);
        java.lang.String str20 = locale14.getDisplayScript();
        java.lang.String str21 = locale0.getDisplayCountry(locale14);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale0);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("2022-02-22T07:10:10.584+00:00:00.059");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone24);
        calendar22.setTimeZone(timeZone24);
        java.time.ZoneId zoneId27 = timeZone24.toZoneId();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone(zoneId27);
        timeZone28.setID("2022-02-22T07:11:21.817+00:00:00.059");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfDay" + "'", str12, "millisOfDay");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2" + "'", str17, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "United Kingdom" + "'", str18, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514142148,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=42,MILLISECOND=461,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514142148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=42,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withPeriodAdded(readablePeriod9, 59);
        int int12 = dateTime8.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime8.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        int int20 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusSeconds(0);
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        org.joda.time.DateTime dateTime26 = property23.roundCeilingCopy();
        boolean boolean28 = dateTime26.isBefore((long) 22);
        org.joda.time.DateTime dateTime30 = dateTime26.plusYears(24);
        boolean boolean31 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime30.withTime(736, 25941388, 283, 129);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 736 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMonths(0);
        int int20 = localDateTime19.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours(25855012);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMonths(602);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 251 + "'", int2 == 251);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26142251 + "'", int20 == 26142251);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.Object[] objArray3 = charSet2.toArray();
        java.lang.Object[] objArray4 = charSet2.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.tz.Provider provider17 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet18 = provider17.getAvailableIDs();
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet18);
        boolean boolean20 = charSet2.removeAll((java.util.Collection<java.lang.String>) strSet18);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime25 = property22.withMinimumValue();
        boolean boolean26 = charSet2.remove((java.lang.Object) property22);
        org.joda.time.LocalDateTime localDateTime27 = property22.roundCeilingCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.plus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.Chronology chronology27 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.yearOfEra();
        java.util.Locale locale35 = new java.util.Locale("1970-01-01T00:00:00.000Z", "\u4e8c\u6708");
        java.lang.String str36 = dateTimeField31.getAsShortText(3, locale35);
        java.util.Calendar calendar37 = dateTime16.toCalendar(locale35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.String str42 = property12.getAsShortText(locale35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = property12.setCopy("292278922-02-22T07:10:07.148");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278922-02-22T07:10:07.148\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3" + "'", str36, "3");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513842252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=42,MILLISECOND=311,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Englisch" + "'", str40, "Englisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e8c\u6708" + "'", str41, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusDays(489);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.Instant instant20 = org.joda.time.Instant.parse("2022-02-22T07:10:08.966+00:00:00.059");
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant20.withDurationAdded(readableDuration21, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTime.Property property32 = dateTime29.weekyear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.withPeriodAdded(readablePeriod33, (int) '4');
        int int36 = property25.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime29.plus(readableDuration37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime29.minus(readablePeriod39);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfMinute();
        java.util.Locale locale44 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale44.getDisplayVariant(locale45);
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleKeys();
        boolean boolean49 = dateTime40.equals((java.lang.Object) locale44);
        boolean boolean50 = instant20.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime40.plus(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str54 = dateTimeFieldType53.toString();
        int int55 = dateTime52.get(dateTimeFieldType53);
        int int56 = dateTime52.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime52.withPeriodAdded(readablePeriod57, 25757955);
        org.joda.time.DateTime dateTime60 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime.Property property61 = localDateTime17.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 326 + "'", int2 == 326);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals(locale44.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean (South Korea)" + "'", str46, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "clockhourOfHalfday" + "'", str54, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 327 + "'", int56 == 327);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        long long14 = dateTimeField12.remainder((long) (byte) 100);
        java.lang.String str15 = dateTimeField12.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(0L, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate22 = localDate18.plusMonths((-1));
        java.util.Locale locale26 = new java.util.Locale("1970-01-01T00:00:00.000Z", "\u4e8c\u6708");
        java.lang.String str27 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate18, 22, locale26);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.getDisplayName();
        int int30 = dateTimeField12.getMaximumTextLength(locale28);
        java.lang.String str31 = locale28.getLanguage();
        int int32 = property9.getMaximumShortTextLength(locale28);
        int int33 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(0L, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(0L, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate41.plus(readablePeriod44);
        org.joda.time.LocalDate localDate46 = localDate38.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDate46.getFieldTypes();
        java.lang.String str48 = localDate46.toString();
        org.joda.time.Chronology chronology49 = localDate46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekyearOfCentury();
        boolean boolean51 = property9.equals((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfDay" + "'", str15, "millisOfDay");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "22" + "'", str27, "22");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean (South Korea)" + "'", str29, "Korean (South Korea)");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ko" + "'", str31, "ko");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.Interval interval17 = localDate14.toInterval();
        org.joda.time.LocalDate.Property property18 = localDate14.weekOfWeekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDate14.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 187);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(10);
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime28 = dateTime25.withFieldAdded(durationFieldType26, (int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime25.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(0);
        org.joda.time.DateTime.Property property37 = dateTime34.weekyear();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime34.withPeriodAdded(readablePeriod38, (int) '4');
        java.lang.String str41 = dateTime34.toString();
        org.joda.time.Chronology chronology42 = dateTime34.getChronology();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        org.joda.time.DateTime dateTime44 = dateTime30.withChronology(chronology42);
        org.joda.time.Chronology chronology45 = chronology42.withUTC();
        org.joda.time.DurationField durationField46 = chronology42.weekyears();
        boolean boolean47 = dateTimeFieldType22.isSupported(chronology42);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(1645513840276L, chronology42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:10:42.400+00:00:00.059" + "'", str41, "2022-02-22T07:10:42.400+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getSeconds();
        java.lang.String str3 = date1.toGMTString();
        java.util.Date date4 = new java.util.Date();
        boolean boolean5 = date1.after(date4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = dateTimeField10.getAsText((long) (byte) -1, locale12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.util.Date date19 = new java.util.Date((long) (byte) 1);
        date19.setYear(228);
        int int22 = date19.getDay();
        int int23 = date19.getMinutes();
        date19.setYear(348);
        int int26 = date19.getTimezoneOffset();
        calendar17.setTime(date19);
        int int28 = date19.getHours();
        date19.setSeconds(40150000);
        boolean boolean31 = date1.before(date19);
        date1.setSeconds(137);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:02:17 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str3, "1 Jan 1970 00:00:00 GMT");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:15:42 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "58" + "'", str13, "58");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=8772796800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2248,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Apr 09 16:46:40 GMT+00:00 2249");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset((long) 228);
        java.lang.String str9 = fixedDateTimeZone4.getShortName((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFieldAdded(durationFieldType16, 6);
        boolean boolean19 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime18);
        long long21 = fixedDateTimeZone4.previousTransition((long) 500);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(25761463);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear(576);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.059" + "'", str9, "+00:00:00.059");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String str5 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder6 = builder3.setLocale(locale4);
        java.util.Calendar.Builder builder10 = builder3.setDate(3, (int) (short) 1, 25717313);
        boolean boolean11 = property2.equals((java.lang.Object) builder3);
        org.joda.time.LocalDateTime localDateTime13 = property2.addWrapFieldToCopy(754);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United Kingdom" + "'", str5, "United Kingdom");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.withPeriodAdded(readablePeriod13, (int) '4');
        java.lang.String str16 = dateTime9.toString();
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = dateTimeFormatter2.parseLocalTime("2022-03-07T10:10:36.556");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:42.505+00:00:00.059" + "'", str16, "2022-02-22T07:10:42.505+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(495);
        int int12 = localDate11.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 29 + "'", int12 == 29);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((-292275054));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(2022);
        int int16 = localDateTime11.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(10);
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime22.plus(readablePeriod26);
        org.joda.time.DateTime.Property property28 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime22.plusDays(22);
        int int31 = dateTime22.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(0);
        org.joda.time.DateTime.Property property38 = dateTime35.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime35.plusYears((int) (byte) 1);
        boolean boolean41 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology42 = dateTime22.getChronology();
        boolean boolean43 = localDateTime11.equals((java.lang.Object) chronology42);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = chronology42.getDateTimeMillis((long) 26066825, 25810, 900, 998, 906);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25810 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 529 + "'", int2 == 529);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 25842529 + "'", int31 == 25842529);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        int int15 = property13.getMaximumShortTextLength(locale14);
        org.joda.time.LocalDate localDate16 = property13.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property13.roundFloorCopy();
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalDate localDate20 = localDate17.plusYears(41);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(25864924);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = localDate24.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property27 = localDate24.era();
        org.joda.time.LocalDate localDate28 = property27.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate29 = property27.roundHalfEvenCopy();
        int int30 = localDate22.compareTo((org.joda.time.ReadablePartial) localDate29);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 363 + "'", int18 == 363);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        boolean boolean8 = dateTimeFormatter3.isPrinter();
        java.lang.Integer int9 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withDefaultYear(25859156);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.parse("", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(100L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(0L, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate9.plus(readablePeriod12);
        org.joda.time.LocalDate localDate14 = localDate6.withFields((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate16 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.millis();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(501);
        org.joda.time.DateTime dateTime24 = dateTime20.minusWeeks(2678);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = fixedDateTimeZone9.getName(1009868913348L, locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        long long17 = dateTimeField15.remainder((long) (byte) 100);
        java.lang.String str18 = dateTimeField15.getName();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = locale20.getDisplayCountry();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = dateTimeField15.getAsShortText(2, locale20);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.lang.String str25 = locale11.getDisplayName(locale20);
        java.lang.String str26 = locale20.getLanguage();
        java.util.Locale.Builder builder27 = builder0.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder0.setScript("DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.059" + "'", str12, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United Kingdom" + "'", str21, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United Kingdom" + "'", str24, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(345599941L);
        java.lang.String str11 = localDateTime10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withHourOfDay(2009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2009 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "948242-08-24T07:15:42.657" + "'", str11, "948242-08-24T07:15:42.657");
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate4.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        int int12 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime dateTime14 = dateTime3.withDayOfYear(287);
        org.joda.time.DateTime.Property property15 = dateTime3.millisOfDay();
        org.joda.time.DateTime.Property property16 = dateTime3.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(70);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) 65441750);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfSecond();
        int int24 = dateTime22.getDayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property5.addNoWrapToCopy(956);
        org.joda.time.LocalTime localTime9 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(187);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale9 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withDefaultYear(348);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter11.getParser();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayCountry();
        boolean boolean15 = locale13.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale13);
        calendar16.setLenient(false);
        long long19 = calendar16.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        int int21 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withCenturyOfEra(913);
        int int24 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours(0);
        org.joda.time.DateTime.Property property31 = dateTime28.weekyear();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime28.withPeriodAdded(readablePeriod32, (int) '4');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime28);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks(54);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = locale40.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.lang.String str43 = locale40.getDisplayScript();
        java.lang.String str44 = locale40.getScript();
        int int45 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter11.withLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime48 = dateTimeFormatter11.parseMutableDateTime("2022-02-22T07:11:35.115");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United Kingdom" + "'", str14, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514142685,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=42,MILLISECOND=998,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514142685L + "'", long19 == 1645514142685L);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 998 + "'", int21 == 998);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "United Kingdom" + "'", str41, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        long long18 = dateTimeZone15.adjustOffset((long) 70, false);
        java.lang.String str20 = dateTimeZone15.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str22 = dateTime21.toString();
        boolean boolean24 = dateTime21.isEqual((long) 115);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 70L + "'", long18 == 70L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str20, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:15:42.762+00:00:00.059" + "'", str22, "2022-02-22T07:15:42.762+00:00:00.059");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        int int9 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property5.addToCopy((long) 41);
        org.joda.time.LocalDateTime localDateTime13 = property5.addWrapFieldToCopy(500);
        java.util.Locale locale15 = new java.util.Locale("2022-02-22T07:10:14.097Z");
        int int16 = property5.getMaximumTextLength(locale15);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 776 + "'", int2 == 776);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-22t07:10:14.097z");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(100);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter2.print(1947827525049L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withCenturyOfEra(48);
        int int11 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plusMillis(211);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTime.Property property20 = dateTime17.weekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.withPeriodAdded(readablePeriod21, (int) '4');
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime1.withCenturyOfEra(524);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long11 = dateTimeField9.remainder((long) (byte) 100);
        java.lang.String str12 = dateTimeField9.getName();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = dateTimeField9.getAsShortText(2, locale14);
        java.lang.String str18 = property5.getAsText(locale14);
        java.lang.String str19 = locale14.toLanguageTag();
        java.lang.String str20 = locale14.getDisplayCountry();
        java.lang.String str21 = locale14.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfDay" + "'", str12, "millisOfDay");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2" + "'", str17, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "42" + "'", str18, "42");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-GB" + "'", str19, "en-GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-GB" + "'", str21, "en-GB");
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 465, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfEra();
        int int9 = dateTimeField6.getDifference((long) 25997692, 1645513961493L);
        org.joda.time.DurationField durationField10 = dateTimeField6.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-52) + "'", int9 == (-52));
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        int int20 = localDateTime18.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int24 = localDateTime18.get(dateTimeFieldType23);
        int int25 = localDateTime18.getHourOfDay();
        int int26 = localDateTime18.getYearOfEra();
        boolean boolean27 = localDateTime17.equals((java.lang.Object) int26);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 22, 28782900]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 900 + "'", int20 == 900);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645513872997L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(569);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime1.withEra(915);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 915 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant3 = instant1.minus((long) 32769);
        org.joda.time.Instant instant5 = instant1.plus(1645513753377L);
        org.joda.time.DateTime dateTime6 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        long long12 = dateTimeField10.roundHalfFloor((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology16 = null;
        boolean boolean17 = durationFieldType15.isSupported(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withFieldAdded(durationFieldType15, 59);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusYears(13);
        int int22 = localDateTime21.getEra();
        int int23 = localDateTime21.size();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths(41);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        java.util.Locale locale28 = java.util.Locale.PRC;
        boolean boolean29 = locale28.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.util.Calendar.Builder builder34 = builder31.setLocale(locale32);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder36 = builder34.setLocale(locale35);
        java.lang.String str39 = nameProvider30.getShortName(locale35, "Thu Jan 01 00:00:00 GMT+00:00 2128", "ja_JP");
        java.lang.String str40 = locale28.getDisplayLanguage(locale35);
        java.lang.String str41 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 143, locale28);
        org.joda.time.Chronology chronology42 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime25.plusHours(25838178);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "United Kingdom" + "'", str33, "United Kingdom");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "143" + "'", str41, "143");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("25754969", "\u4e2d\u6587\u53f0\u7063)", 933, 626);
        long long7 = fixedDateTimeZone4.adjustOffset(74278L, false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 74278L + "'", long7 == 74278L);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        date1.setYear(228);
        int int4 = date1.getDay();
        int int5 = date1.getDate();
        int int6 = date1.getDay();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone7.observesDaylightTime();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone7);
        java.util.Date date15 = new java.util.Date(60, 18, 1, 541, 785);
        date15.setHours(908);
        date15.setDate(11);
        calendar9.setTime(date15);
        boolean boolean21 = date1.after(date15);
        int int22 = date1.getMonth();
        int int23 = date1.getSeconds();
        java.lang.Object obj24 = date1.clone();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 2128");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-264225300313,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1961,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=229,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=5,SECOND=0,MILLISECOND=0,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Aug 17 20:05:00 GMT+00:00 1961");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "Thu Jan 01 00:00:00 GMT+00:00 2128");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "Thu Jan 01 00:00:00 GMT+00:00 2128");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "Thu Jan 01 00:00:00 GMT+00:00 2128");
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalDate localDate15 = property13.roundHalfCeilingCopy();
        int int16 = localDate15.size();
        org.joda.time.LocalDate.Property property17 = localDate15.era();
        org.joda.time.LocalDate localDate18 = property17.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, 70);
        int int22 = localDate21.getYear();
        java.util.Date date23 = localDate21.toDate();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:00 GMT+00:00 1");
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        java.util.Date date4 = new java.util.Date((long) (byte) 0);
        int int5 = date4.getHours();
        date4.setMonth(6);
        calendar2.setTime(date4);
        calendar2.set(25757031, 87, (int) (byte) 10, 396, 2020, 671);
        java.lang.String str16 = calendar2.toString();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25757031,MONTH=87,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=182,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=396,MINUTE=2020,SECOND=671,MILLISECOND=313,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Jul 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25757031,MONTH=87,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=182,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=396,MINUTE=2020,SECOND=671,MILLISECOND=313,ZONE_OFFSET=313,DST_OFFSET=0]" + "'", str16, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25757031,MONTH=87,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=182,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=396,MINUTE=2020,SECOND=671,MILLISECOND=313,ZONE_OFFSET=313,DST_OFFSET=0]");
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate17 = property13.setCopy(65321929);
        java.lang.String str18 = localDate17.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "65321929-01-03" + "'", str18, "65321929-01-03");
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(25960447);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = dateTime7.plus(1645513715772L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        int int13 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int17 = localDateTime11.get(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getDurationType();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFieldAdded(durationFieldType26, 6);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType26.getField(chronology31);
        long long38 = chronology31.add(1169187558080000L, (long) 930, 816);
        boolean boolean39 = durationFieldType19.isSupported(chronology31);
        org.joda.time.DateTime dateTime41 = dateTime10.withFieldAdded(durationFieldType19, 13);
        java.util.Locale locale43 = new java.util.Locale("2022-02-22T07:09:04.613+00:00:00.059");
        java.util.Calendar calendar44 = dateTime10.toCalendar(locale43);
        calendar44.set(37, 0, 549, 2922789, 718, 70);
        java.util.Date date52 = calendar44.getTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(4);
        org.joda.time.DateTime dateTime59 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        java.lang.String str60 = localDateTime54.toString();
        org.joda.time.LocalDateTime.Property property61 = localDateTime54.yearOfCentury();
        boolean boolean62 = calendar44.after((java.lang.Object) property61);
        org.joda.time.LocalDateTime localDateTime63 = property61.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime65 = property61.addToCopy((long) 545);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54 + "'", int13 == 54);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1169187558838880L + "'", long38 == 1169187558838880L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals(locale43.toString(), "2022-02-22t07:09:04.613+00:00:00.059");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-50430265249233,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=371,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=339,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=59,SECOND=10,MILLISECOND=826,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Dec 05 08:59:11 GMT+00:00 371");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-22T07:15:43.054" + "'", str60, "2022-02-22T07:15:43.054");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.plus(readablePeriod15);
        org.joda.time.LocalDate localDate17 = localDate9.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property18 = localDate17.year();
        org.joda.time.LocalDate localDate19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate21 = localDate19.withYear((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight22 = localDate19.toDateMidnight();
        boolean boolean23 = charSet4.equals((java.lang.Object) localDate19);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList33);
        boolean boolean36 = charSet4.retainAll((java.util.Collection<java.lang.String>) strList33);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale locale40 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale40.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap46);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Korean (South Korea)" + "'", str42, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withWeekOfWeekyear(913);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 913 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean9 = dateTimeFormatter4.isParser();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plusHours(0);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(10);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.plus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfDay();
        org.joda.time.DateTime dateTime34 = property32.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        long long40 = dateTimeZone37.adjustOffset((long) 70, false);
        org.joda.time.DateTime dateTime41 = localDateTime21.toDateTime(dateTimeZone37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter4.withZone(dateTimeZone37);
        java.util.Locale locale43 = dateTimeFormatter4.getLocale();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone48 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone49 = fixedDateTimeZone48.toTimeZone();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime51.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.withZone(dateTimeZone56);
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfSecond();
        int int59 = fixedDateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime57);
        long long61 = fixedDateTimeZone48.previousTransition((long) '#');
        long long63 = fixedDateTimeZone48.nextTransition(1645513711304L);
        long long65 = fixedDateTimeZone48.previousTransition((long) 4);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        org.joda.time.DateTime dateTime69 = dateTime67.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(10);
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfMonth();
        org.joda.time.DateTime dateTime74 = dateTime69.plusYears(22);
        org.joda.time.DateTime dateTime75 = dateTime69.withTimeAtStartOfDay();
        int int76 = fixedDateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime79 = dateTimeFormatter4.parseMutableDateTime("26094360");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 70L + "'", long40 == 70L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 35L + "'", long61 == 35L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645513711304L + "'", long63 == 1645513711304L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4L + "'", long65 == 4L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property8 = dateTime3.weekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone14 = fixedDateTimeZone13.toTimeZone();
        int int16 = fixedDateTimeZone13.getOffset((long) 228);
        boolean boolean17 = fixedDateTimeZone13.isFixed();
        java.util.TimeZone timeZone18 = fixedDateTimeZone13.toTimeZone();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(0);
        org.joda.time.DateTime.Property property37 = dateTime34.monthOfYear();
        int int38 = property37.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.lang.String str42 = dateTimeField29.getAsText((int) (byte) 10, locale40);
        java.lang.String str44 = locale40.getExtension('x');
        java.util.Locale.setDefault(category20, locale40);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = locale53.getDisplayCountry();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str57 = property51.getAsShortText(locale53);
        java.util.Locale.setDefault(category20, locale53);
        java.lang.String str59 = fixedDateTimeZone13.getShortName((long) 211, locale53);
        java.util.Calendar calendar60 = dateTime3.toCalendar(locale53);
        java.util.TimeZone timeZone61 = calendar60.getTimeZone();
        java.util.TimeZone.setDefault(timeZone61);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e8c\u6708" + "'", str41, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5341\u6708" + "'", str42, "\u5341\u6708");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str54, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26143162" + "'", str57, "26143162");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.059" + "'", str59, "+00:00:00.059");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645528543102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=15,SECOND=43,MILLISECOND=161,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = localDateTime0.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = durationFieldType9.isSupported(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withFieldAdded(durationFieldType9, (int) 'x');
        java.lang.String str14 = durationFieldType9.getName();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withFieldAdded(durationFieldType9, 25757031);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(978);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes(239);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 192 + "'", int2 == 192);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "years" + "'", str14, "years");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator2 = charSet1.spliterator();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime6.withPeriodAdded(readablePeriod10, (int) '4');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks(54);
        boolean boolean16 = charSet1.contains((java.lang.Object) localDateTime13);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTime.Property property23 = dateTime20.monthOfYear();
        int int24 = property23.getMaximumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfCeilingCopy();
        int int26 = dateTime25.getDayOfYear();
        int int27 = dateTime25.getEra();
        org.joda.time.DateTime.Property property28 = dateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(10);
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withPeriodAdded(readablePeriod38, 59);
        boolean boolean41 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean42 = charSet1.contains((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime43 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(10);
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime47.plus(readablePeriod51);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime47.withMillisOfSecond(248);
        org.joda.time.DateTime dateTime57 = dateTime47.plusSeconds(23);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear(129);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMinutes(261);
        boolean boolean62 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charSpliterator2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 60 + "'", int26 == 60);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withDefaultYear(3);
        java.lang.Integer int33 = dateTimeFormatter32.getPivotYear();
        org.joda.time.Chronology chronology34 = dateTimeFormatter32.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter32.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter32.withOffsetParsed();
        java.util.Locale locale37 = dateTimeFormatter32.getLocale();
        boolean boolean38 = dateTimeFormatter32.isParser();
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = locale39.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter32.withLocale(locale39);
        java.util.Calendar calendar42 = dateTime26.toCalendar(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(chronology34);
        org.junit.Assert.assertNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str40, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=820,ZONE_OFFSET=59,DST_OFFSET=0]");
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = dateTime1.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.property(dateTimeFieldType14);
        int int18 = localDateTime13.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        long long23 = dateTimeField21.remainder((long) (byte) 100);
        java.lang.String str24 = dateTimeField21.getName();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        int int26 = dateTimeField21.getMaximumShortTextLength(locale25);
        java.lang.String str27 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime13, locale25);
        org.joda.time.Chronology chronology28 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType5.getField(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.halfdays();
        long long34 = chronology28.add((long) 431, (long) 25960447, 737);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfDay" + "'", str24, "millisOfDay");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u661f\u671f\u4e8c" + "'", str27, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 19132849870L + "'", long34 == 19132849870L);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(930);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withDurationAdded(readableDuration4, 40);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withDurationAdded(readableDuration9, 448);
        int int12 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plusMillis(727);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(323);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property4.addCopy(228);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate9 = localDate6.withYear(69);
        org.joda.time.LocalDate.Property property10 = localDate6.centuryOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(0L, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(0L, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate19.plus(readablePeriod22);
        org.joda.time.LocalDate localDate24 = localDate16.withFields((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate26 = localDate19.plusWeeks((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate26.plus(readablePeriod27);
        int int29 = localDate28.getWeekyear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfWeek();
        org.joda.time.LocalDate localDate32 = localDate28.plusDays(849);
        boolean boolean33 = localDate11.equals((java.lang.Object) 849);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(849, 676);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 676");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        boolean boolean15 = localDate12.equals((java.lang.Object) (-1));
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(567);
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList40);
        org.joda.time.tz.Provider provider43 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet44 = provider43.getAvailableIDs();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet44, filteringMode46);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getVariant();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet50);
        boolean boolean52 = localDate12.equals((java.lang.Object) languageRangeList20);
        org.joda.time.Chronology chronology53 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(0L, dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(0L, dateTimeZone62);
        org.joda.time.LocalDate localDate65 = localDate63.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate67 = localDate63.plus(readablePeriod66);
        org.joda.time.LocalDate localDate68 = localDate60.withFields((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate.Property property69 = localDate68.year();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        java.util.Calendar.Builder builder72 = new java.util.Calendar.Builder();
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = locale73.getDisplayCountry();
        java.util.Calendar.Builder builder75 = builder72.setLocale(locale73);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder77 = builder75.setLocale(locale76);
        java.lang.String str78 = dateTimeField70.getAsText(2, locale76);
        java.lang.String str79 = locale76.getDisplayScript();
        java.util.Set<java.lang.String> strSet80 = locale76.getUnicodeLocaleKeys();
        java.lang.String str81 = dateTimeField54.getAsShortText(87, locale76);
        boolean boolean83 = dateTimeField54.isLeap((long) 270);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str74, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2" + "'", str78, "2");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "87" + "'", str81, "87");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        boolean boolean8 = dateTimeFormatter5.isParser();
        java.lang.Integer int9 = dateTimeFormatter5.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(0L, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate13.plus(readablePeriod16);
        org.joda.time.LocalDate.Property property18 = localDate13.monthOfYear();
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property20 = localDate13.yearOfCentury();
        java.util.Locale locale22 = new java.util.Locale("Property[dayOfMonth]");
        java.lang.String str23 = property20.getAsText(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter5.withLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.parse("2022-02-22T07:12:14.304", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(locale22.toString(), "property[dayofmonth]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property12 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(30);
        java.util.Date date16 = localDateTime15.toDate();
        java.lang.String str17 = date16.toGMTString();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withDefaultYear(3);
        java.lang.Integer int23 = dateTimeFormatter22.getPivotYear();
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayCountry();
        boolean boolean26 = locale24.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter22.withLocale(locale24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        long long37 = dateTimeField35.remainder((long) (byte) 100);
        java.lang.String str38 = dateTimeField35.getName();
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = locale40.getDisplayCountry();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = dateTimeField35.getAsShortText(2, locale40);
        java.lang.String str44 = locale40.getDisplayCountry();
        java.lang.String str45 = dateTimeField31.getAsShortText((long) (short) 0, locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withLocale(locale40);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone51 = new org.joda.time.tz.FixedDateTimeZone("65337936", "Thu Jan 01 00:00:00 UTC 1970", 437, 764);
        long long53 = fixedDateTimeZone51.nextTransition(1645513743878L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter27.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone51);
        boolean boolean55 = fixedDateTimeZone51.isFixed();
        long long57 = fixedDateTimeZone51.convertUTCToLocal(1645513748277L);
        boolean boolean58 = date16.equals((java.lang.Object) 1645513748277L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 502 + "'", int2 == 502);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:30:44 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "22 Feb 2022 07:30:44 GMT" + "'", str17, "22 Feb 2022 07:30:44 GMT");
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str25, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfDay" + "'", str38, "millisOfDay");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str41, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str44, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645513743878L + "'", long53 == 1645513743878L);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645513748714L + "'", long57 == 1645513748714L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        java.lang.String str10 = dateTime3.toString();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime19 = dateTime16.withFieldAdded(durationFieldType17, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.withPeriodAdded(readablePeriod20, 1970);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:43.542+00:00:00.059" + "'", str10, "2022-02-22T07:10:43.542+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((-1));
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = localDate18.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate18.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDate.Property property23 = localDate18.property(dateTimeFieldType22);
        org.joda.time.LocalDate localDate24 = localDate16.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate26 = localDate18.withYear(429);
        org.joda.time.DateTime dateTime27 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property28 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate30 = localDate18.plusYears(470);
        org.joda.time.LocalDate localDate32 = localDate30.withMonthOfYear((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate30.withDayOfWeek(468);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 468 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguageTag("2022-02-22T07:13:26.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay(0);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) 1970);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = dateTimeField2.getAsText(790, locale7);
        java.lang.String str10 = locale7.getISO3Country();
        java.lang.String str11 = locale7.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "790" + "'", str9, "790");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FRA" + "'", str10, "FRA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FRA" + "'", str11, "FRA");
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears(22);
        org.joda.time.DateTime.Property property19 = dateTime13.era();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime28 = dateTime13.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        boolean boolean29 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime28.getMinuteOfHour();
        int int31 = dateTime28.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime28.withDayOfMonth(31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        java.lang.String str11 = durationFieldType10.getName();
        java.lang.String str12 = durationFieldType10.toString();
        java.lang.String str13 = durationFieldType10.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "months" + "'", str11, "months");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "months" + "'", str12, "months");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "months" + "'", str13, "months");
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(0L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight(dateTimeZone16);
        int[] intArray24 = new int[] { (-1), (short) 1, 2, 54, (byte) 0 };
        int[] intArray26 = dateTimeField11.add((org.joda.time.ReadablePartial) localDate15, 0, intArray24, 0);
        org.joda.time.LocalDate localDate28 = localDate15.withYear(913);
        org.joda.time.LocalDate localDate30 = localDate15.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property31 = localDate15.era();
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale33.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder32.setLocale(locale33);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder37 = builder35.setLocale(locale36);
        java.lang.String str38 = locale36.getScript();
        int int39 = property31.getMaximumShortTextLength(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = dateTimeField7.getAsText(420, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 420");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str34, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        boolean boolean12 = dateTime3.isBefore((long) 1870);
        org.joda.time.Instant instant13 = dateTime3.toInstant();
        long long14 = instant13.getMillis();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = durationFieldType17.isSupported(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFieldAdded(durationFieldType17, 59);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusSeconds(785);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears(39597000);
        java.lang.Object obj28 = null;
        boolean boolean29 = localDateTime27.equals(obj28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1924992000286L));
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(0);
        org.joda.time.DateTime.Property property41 = dateTime38.weekyear();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime38.withPeriodAdded(readablePeriod42, (int) '4');
        int int45 = property34.getDifference((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime38.plus(readableDuration46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime38.minus(readablePeriod48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(15);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(4);
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.plusMinutes(32770);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.yearOfEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.plusWeeks(25842980);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int66 = localDateTime60.get(dateTimeFieldType65);
        int int67 = dateTime51.get(dateTimeFieldType65);
        org.joda.time.DateTime.Property property68 = dateTime31.property(dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property69 = localDateTime27.property(dateTimeFieldType65);
        boolean boolean70 = instant13.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513843656L + "'", long14 == 1645513843656L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 85 + "'", int66 == 85);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 430 + "'", int67 == 430);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusSeconds(26026157);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, 828);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        boolean boolean5 = dateTimeFieldType1.isSupported(chronology4);
        boolean boolean6 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        long long11 = chronology4.add((long) 237, 1645513863207L, 0);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.year();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology4.getDateTimeMillis(187, 36, 26099464, 2, 1964, 362, 271);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 237L + "'", long11 == 237L);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime1.withPeriodAdded(readablePeriod13, 37);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = property16.getLeapAmount();
        org.joda.time.LocalTime localTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = localTime18.minusMinutes((int) '4');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime18.withPeriodAdded(readablePeriod21, 249);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone18 = fixedDateTimeZone17.toTimeZone();
        int int20 = fixedDateTimeZone17.getOffset((long) 228);
        int int22 = fixedDateTimeZone17.getStandardOffset((long) 548);
        java.lang.String str24 = fixedDateTimeZone17.getNameKey(0L);
        org.joda.time.DateTime dateTime25 = dateTime12.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        java.util.TimeZone timeZone26 = fixedDateTimeZone17.toTimeZone();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        int int29 = fixedDateTimeZone17.getStandardOffset(16883017712432L);
        java.lang.String str31 = fixedDateTimeZone17.getNameKey(1645513904474L);
        long long34 = fixedDateTimeZone17.adjustOffset((long) 222, false);
        java.util.TimeZone timeZone35 = fixedDateTimeZone17.toTimeZone();
        java.lang.Object obj36 = timeZone35.clone();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str24, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str31, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 222L + "'", long34 == 222L);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        int int7 = localTime6.size();
        int int8 = localTime6.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime6.plus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = localTime10.minusSeconds(518);
        org.joda.time.LocalTime.Property property13 = localTime10.minuteOfHour();
        int int14 = localTime10.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42730000 + "'", int14 == 42730000);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(25905566);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayCountry();
        boolean boolean8 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        long long19 = dateTimeField17.remainder((long) (byte) 100);
        java.lang.String str20 = dateTimeField17.getName();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = dateTimeField17.getAsShortText(2, locale22);
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = dateTimeField13.getAsShortText((long) (short) 0, locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter9.withLocale(locale22);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone35 = fixedDateTimeZone34.toTimeZone();
        int int37 = fixedDateTimeZone34.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone34);
        int int40 = fixedDateTimeZone34.getOffset((long) 228);
        boolean boolean41 = fixedDateTimeZone34.isFixed();
        java.lang.String str43 = fixedDateTimeZone34.getName((long) 4755917);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter28.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        java.util.TimeZone timeZone45 = fixedDateTimeZone34.toTimeZone();
        java.util.TimeZone timeZone46 = fixedDateTimeZone34.toTimeZone();
        int int48 = timeZone46.getOffset(1645513742233L);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str7, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfDay" + "'", str20, "millisOfDay");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str23, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str26, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.059" + "'", str43, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 59 + "'", int48 == 59);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 660);
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter7.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(chronology9);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.plusHours(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusWeeks(664);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMonths(313432);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime14.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        java.util.Date date5 = new java.util.Date(8, 54, (int) ' ', (int) (short) 1, 54);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = date5.getMonth();
        date5.setYear(550);
        date5.setMinutes(569);
        int int12 = date5.getHours();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Aug 01 10:29:00 GMT+00:00 2450");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        java.util.Date date5 = new java.util.Date(730, 261, 607, 1970, 792);
        date5.setDate(51);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 20 15:12:00 GMT+00:00 2653");
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(70);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) 65441750);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears(903);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime22.withTime(110, 729, 253, 26034831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 110 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.plusHours(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        int int13 = localDateTime11.getEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone11 = fixedDateTimeZone10.toTimeZone();
        int int13 = fixedDateTimeZone10.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone10);
        int int15 = localDateTime14.getDayOfYear();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, (long) 30);
        org.joda.time.DateTimeField dateTimeField18 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology2.yearOfEra();
        long long22 = dateTimeField19.addWrapField((long) 860, 714);
        org.joda.time.DurationField durationField23 = dateTimeField19.getDurationField();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((-61468390289452L));
        int int26 = localDateTime25.getDayOfYear();
        int int27 = localDateTime25.getMillisOfDay();
        int int28 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 22531651200860L + "'", long22 == 22531651200860L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25710607 + "'", int27 == 25710607);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withSecondOfMinute(6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayLanguage(locale13);
        java.util.Locale locale18 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale18.getDisplayVariant(locale19);
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        java.lang.String str23 = locale13.getDisplayName(locale18);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale13.getDisplayLanguage(locale24);
        java.lang.String str26 = locale13.getISO3Country();
        java.util.Locale.setDefault(locale13);
        java.lang.String str28 = property8.getAsText(locale13);
        org.joda.time.DurationField durationField29 = property8.getDurationField();
        org.joda.time.LocalDateTime localDateTime30 = property8.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str11, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str14, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)" + "'", str20, "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English (United Kingdom)" + "'", str23, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4" + "'", str25, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.util.Locale.Builder builder8 = builder4.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setLanguageTag("2022-02-22T07:11:39.383");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(10);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.plus(readablePeriod13);
        org.joda.time.DateTime dateTime15 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.plus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        long long21 = dateTimeField19.roundHalfEven(0L);
        boolean boolean22 = dateTimeField19.isLenient();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        int int33 = property32.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        int int37 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(0);
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withPeriodAdded(readablePeriod45, (int) '4');
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime41);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks(54);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime48, 6, locale52);
        java.lang.String str54 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale52);
        java.lang.String str55 = locale2.getDisplayName(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale52.getExtensionKeys();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime61 = dateTime58.withFieldAdded(durationFieldType59, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.seconds();
        boolean boolean63 = dateTime58.equals((java.lang.Object) durationFieldType62);
        int int64 = dateTime58.getSecondOfMinute();
        org.joda.time.DateTime dateTime66 = dateTime58.withYearOfEra(70);
        org.joda.time.DateTime.Property property67 = dateTime58.hourOfDay();
        boolean boolean68 = charSet56.contains((java.lang.Object) dateTime58);
        int int69 = charSet56.size();
        java.lang.Character[] charArray74 = new java.lang.Character[] { '#', 'a', 'u', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet75 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet75, charArray74);
        java.util.Iterator<java.lang.Character> charItor77 = charSet75.iterator();
        java.util.LinkedHashSet[] linkedHashSetArray79 = new java.util.LinkedHashSet[1];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.Character>[] charSetArray80 = (java.util.LinkedHashSet<java.lang.Character>[]) linkedHashSetArray79;
        charSetArray80[0] = charSet75;
        java.util.LinkedHashSet<java.lang.Character>[] charSetArray83 = charSet56.toArray(charSetArray80);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Korean (South Korea)" + "'", str4, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-59L) + "'", long21 == (-59L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u516d\u6708" + "'", str53, "\u516d\u6708");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "44" + "'", str54, "44");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22t07:10:26.657z (0)" + "'", str55, "2022-02-22t07:10:26.657z (0)");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 44 + "'", int64 == 44);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(charItor77);
        org.junit.Assert.assertNotNull(linkedHashSetArray79);
        org.junit.Assert.assertNotNull(charSetArray80);
        org.junit.Assert.assertNotNull(charSetArray83);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        java.util.Date date6 = new java.util.Date((long) (byte) 0);
        int int7 = date6.getHours();
        date6.setYear(9);
        boolean boolean10 = localTime0.equals((java.lang.Object) date6);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        boolean boolean22 = fixedDateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime23 = localTime12.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        boolean boolean24 = localTime0.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime.Property property25 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime26 = property25.roundCeilingCopy();
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.969" + "'", str13, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime17.plus(1645513715772L);
        org.joda.time.DateTime dateTime22 = dateTime17.withYearOfEra(143);
        boolean boolean23 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant25 = instant7.withMillis((long) 65339964);
        org.joda.time.Instant instant27 = instant7.minus(4345812417L);
        org.joda.time.Instant instant30 = instant7.withDurationAdded(25865169L, 14);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale5);
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTime1.equals(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime1.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.minus(readablePeriod17);
        int int19 = dateTime14.getSecondOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514144333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=44,MILLISECOND=392,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) -1);
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str6 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        long long9 = dateTimeZone1.nextTransition(818248804769399618L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:00" + "'", str4, "+35:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:00" + "'", str5, "+35:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:00" + "'", str6, "+35:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 818248804769399618L + "'", long9 == 818248804769399618L);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.withPeriodAdded(readablePeriod26, (int) '4');
        int int29 = property18.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime22.plus(readableDuration30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime31.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime36 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int int37 = dateTime31.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 441 + "'", int2 == 441);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 430 + "'", int37 == 430);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = fixedDateTimeZone4.getName(1009868913348L, locale6);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        timeZone8.setID("Property[dayOfYear]");
        int int11 = timeZone8.getRawOffset();
        int int12 = timeZone8.getDSTSavings();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.059" + "'", str7, "+00:00:00.059");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1645513760435L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes(47);
        org.joda.time.LocalTime.Property property5 = localTime4.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayCountry();
        boolean boolean8 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        boolean boolean17 = dateTimeFormatter15.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(632);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime3.withPeriodAdded(readablePeriod11, 268);
        int int14 = dateTime3.getEra();
        org.joda.time.DateTime dateTime16 = dateTime3.minusWeeks(382);
        int int17 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusHours(776);
        boolean boolean21 = dateTime19.isEqual((-56329084797978L));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 430 + "'", int17 == 430);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayCountry();
        boolean boolean8 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withChronology(chronology13);
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withZoneUTC();
        org.joda.time.Instant instant19 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant21 = instant19.minus((long) 32769);
        org.joda.time.Instant instant23 = instant19.plus(1645513753377L);
        org.joda.time.DateTime dateTime24 = instant19.toDateTimeISO();
        org.joda.time.Instant instant26 = instant19.withMillis(90605889804000L);
        org.joda.time.Instant instant28 = instant19.plus((long) 25954012);
        org.joda.time.Instant instant30 = instant19.minus(25849483L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTimeFormatter15.print((org.joda.time.ReadableInstant) instant19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((-1));
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfYear();
        org.joda.time.LocalDate localDate18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        int int20 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(0L, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.plusWeeks((int) 'x');
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        int int28 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1870 + "'", int20 == 1870);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = fixedDateTimeZone4.getName(1009868913348L, locale6);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(25883969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25883969 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.059" + "'", str7, "+00:00:00.059");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(3);
        java.lang.Integer int10 = dateTimeFormatter9.getPivotYear();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter9.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withOffsetParsed();
        boolean boolean14 = dateTimeFormatter9.isParser();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        int int18 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology24 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType21.getField(chronology24);
        boolean boolean27 = localDateTime16.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType21.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfMinute();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 337, chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter9.withChronology(chronology30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) durationField4, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ScaledDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 602 + "'", int18 == 602);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = fixedDateTimeZone4.getName(1009868913348L, locale6);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalTime localTime11 = localDateTime10.toLocalTime();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.059" + "'", str7, "+00:00:00.059");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        java.lang.String str8 = property6.getName();
        org.joda.time.DateTime dateTime9 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfMonth" + "'", str8, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, 785);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int23 = localDateTime22.getDayOfYear();
        int[] intArray25 = chronology10.get((org.joda.time.ReadablePartial) localDateTime22, (long) 30);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withCenturyOfEra(651);
        org.joda.time.DateTime dateTime28 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.Instant instant29 = dateTime28.toInstant();
        java.lang.String str30 = dateTime28.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "65170-01-01T00:00:00.156+00:00:00.059" + "'", str30, "65170-01-01T00:00:00.156+00:00:00.059");
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.plus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addCopy((long) 1969);
        org.joda.time.LocalTime localTime12 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.addWrapFieldToCopy(11425);
        org.joda.time.LocalTime localTime15 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime16 = property9.roundHalfFloorCopy();
        java.lang.Object obj17 = null;
        boolean boolean18 = localTime16.equals(obj17);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(228);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMillis((-1));
        int int21 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        int int24 = localDateTime22.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) -1);
        java.lang.String str35 = dateTimeZone31.getID();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, dateTimeZone31);
        int int37 = localDateTime29.getEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.minusDays(1912);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfEra(623);
        boolean boolean44 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 722 + "'", int2 == 722);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26 + "'", int21 == 26);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 722 + "'", int24 == 722);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+35:00" + "'", str34, "+35:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+35:00" + "'", str35, "+35:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withCenturyOfEra(48);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks(602);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(432);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property4.addCopy(1645513733868L);
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(416);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        int int15 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime13);
        long long17 = fixedDateTimeZone4.previousTransition((long) '#');
        long long19 = fixedDateTimeZone4.nextTransition(1645513711304L);
        long long21 = fixedDateTimeZone4.previousTransition((long) 4);
        java.lang.String str23 = fixedDateTimeZone4.getNameKey(1645528203378L);
        boolean boolean24 = fixedDateTimeZone4.isFixed();
        long long26 = fixedDateTimeZone4.previousTransition((long) 789);
        java.lang.String str28 = fixedDateTimeZone4.getShortName((long) 25818144);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513711304L + "'", long19 == 1645513711304L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str23, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 789L + "'", long26 == 789L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.059" + "'", str28, "+00:00:00.059");
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone6 = new org.joda.time.tz.FixedDateTimeZone("19", "0", 495, 17);
        java.lang.String str7 = fixedDateTimeZone6.getID();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) "25714150", (org.joda.time.DateTimeZone) fixedDateTimeZone6);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone14 = fixedDateTimeZone13.toTimeZone();
        java.util.TimeZone timeZone15 = fixedDateTimeZone13.toTimeZone();
        int int17 = fixedDateTimeZone13.getStandardOffset((long) 1114);
        java.lang.String str19 = fixedDateTimeZone13.getShortName(1645513975744L);
        int int21 = fixedDateTimeZone13.getOffset((long) 946);
        long long23 = fixedDateTimeZone6.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone13, (long) 786);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 72, (org.joda.time.DateTimeZone) fixedDateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType26 = localTime24.getFieldType(628);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 628");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "19" + "'", str7, "19");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.059" + "'", str19, "+00:00:00.059");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1222L + "'", long23 == 1222L);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone14 = fixedDateTimeZone13.toTimeZone();
        int int16 = fixedDateTimeZone13.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone13);
        java.util.TimeZone timeZone18 = fixedDateTimeZone13.toTimeZone();
        long long20 = fixedDateTimeZone4.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone13, (long) 558);
        int int22 = fixedDateTimeZone13.getStandardOffset((long) (byte) 1);
        int int24 = fixedDateTimeZone13.getOffset((long) 483);
        java.lang.String str26 = fixedDateTimeZone13.getShortName((long) 173);
        java.lang.String str28 = fixedDateTimeZone13.getNameKey(1645513803563L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 558L + "'", long20 == 558L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.059" + "'", str26, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str28, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYearOfCentury();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(266);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 266 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(413);
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.year();
        org.joda.time.DurationField durationField9 = chronology3.months();
        org.joda.time.DurationField durationField10 = chronology3.hours();
        org.joda.time.DurationField durationField11 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.year();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        int int14 = calendar3.getWeeksInWeekYear();
        int int15 = calendar3.getFirstDayOfWeek();
        calendar3.setMinimalDaysInFirstWeek(519);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        int int19 = calendar3.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514144854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=519,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=167,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292269054 + "'", int9 == 292269054);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:15:45 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        java.util.Locale locale2 = new java.util.Locale("+00:00:00.158", "2022-02-22T07:12:14.304");
        org.junit.Assert.assertEquals(locale2.toString(), "+00:00:00.158_2022-02-22T07:12:14.304");
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644909016350L);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        calendar3.setMinimalDaysInFirstWeek(0);
        int int12 = calendar3.getActualMaximum(5);
        calendar3.setTimeInMillis((long) 8);
        java.time.Instant instant15 = calendar3.toInstant();
        calendar3.setTimeInMillis(1645513712594L);
        int int18 = calendar3.getWeeksInWeekYear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.DurationField durationField25 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        long long28 = dateTimeField26.roundCeiling(1645513715772L);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Calendar.Builder builder32 = builder29.setLocale(locale30);
        java.lang.String str33 = locale30.getCountry();
        int int34 = dateTimeField26.getMaximumShortTextLength(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap35 = calendar3.getDisplayNames(426, 695, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645513712594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=32,MILLISECOND=907,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1672531200000L + "'", long28 == 1672531200000L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "United Kingdom" + "'", str31, "United Kingdom");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GB" + "'", str33, "GB");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        int int15 = dateTime12.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        int int17 = dateTime12.getMinuteOfHour();
        int int18 = dateTime12.getMinuteOfHour();
        org.joda.time.DateTime.Property property19 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime12.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = dateTimeField4.getAsText((long) (byte) -1, locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("United Kingdom");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone13);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone20.observesDaylightTime();
        timeZone20.setID("");
        java.util.Calendar.Builder builder24 = builder15.setTimeZone(timeZone20);
        boolean boolean25 = timeZone13.hasSameRules(timeZone20);
        boolean boolean26 = timeZone1.hasSameRules(timeZone13);
        boolean boolean27 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "58" + "'", str7, "58");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514144938,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=44,MILLISECOND=938,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.weekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.withPeriodAdded(readablePeriod17, (int) '4');
        int int20 = property9.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime13.plus(readableDuration21);
        int int23 = dateTime22.getSecondOfMinute();
        long long24 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = dateTime22.toLocalDateTime();
        int int26 = dateTime22.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 45 + "'", int23 == 45);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 21550L + "'", long24 == 21550L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        int int27 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = localDateTime25.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime.Property property33 = localDateTime8.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime8.plusMillis((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime8.withDayOfWeek(541);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 541 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69 + "'", int2 == 69);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 69 + "'", int27 == 69);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset((long) 228);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(226);
        int int11 = localDate8.getYearOfEra();
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property12.getLocalDate();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.plus(readablePeriod15);
        org.joda.time.LocalDate localDate17 = localDate9.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate19 = localDate9.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        int int22 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate19.withPeriodAdded(readablePeriod23, 65458977);
        int int26 = localDate19.size();
        org.joda.time.LocalDate localDate28 = localDate19.withWeekyear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate19.plus(readablePeriod29);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 25787668);
        org.joda.time.Instant instant3 = instant1.minus(3151L);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant1.minus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours(4);
        int int10 = dateTime7.getEra();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.plus(readablePeriod11);
        org.joda.time.DateTime dateTime14 = dateTime7.plusDays((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.util.Calendar calendar17 = dateTime14.toCalendar(locale15);
        boolean boolean18 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "France" + "'", str16, "France");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1646378145065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=63,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=124,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.Chronology chronology17 = chronology16.withUTC();
        org.joda.time.DurationField durationField18 = chronology16.months();
        org.joda.time.DurationField durationField19 = chronology16.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology16.getDateTimeMillis(1645514123688L, 209, 872, 859, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 209 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        boolean boolean6 = dateTime1.equals((java.lang.Object) durationFieldType5);
        int int7 = dateTime1.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.property(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        boolean boolean16 = dateTime1.equals((java.lang.Object) localDateTime10);
        org.joda.time.Chronology chronology17 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.seconds();
        org.joda.time.DurationField durationField20 = chronology17.months();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.withYearOfEra(331);
        int int14 = localDateTime0.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 204 + "'", int2 == 204);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int6 = timeZone5.getRawOffset();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale8.getDisplayLanguage(locale11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone5, locale8);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("50");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone16);
        calendar14.setTimeZone(timeZone16);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514145158,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=217,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "United Kingdom" + "'", str9, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514145159,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=218,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514145159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(20);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks(40);
        java.util.Date date17 = localDate12.toDate();
        date17.setHours(25814499);
        long long20 = date17.getTime();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Nov 27 03:00:00 GMT+00:00 4914");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 92932196399687L + "'", long20 == 92932196399687L);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(20);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks(40);
        org.joda.time.LocalDate.Property property17 = localDate12.monthOfYear();
        java.lang.String str18 = localDate12.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears(956);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTimeField13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        java.util.Date date16 = new java.util.Date((int) (short) 100, (int) (short) 100, 913);
        java.util.Date date18 = new java.util.Date((long) (byte) 1);
        int int19 = date18.getSeconds();
        java.lang.String str20 = date18.toGMTString();
        java.util.Date date21 = new java.util.Date();
        boolean boolean22 = date18.after(date21);
        date21.setSeconds(671);
        boolean boolean25 = date16.after(date21);
        int int26 = date16.getHours();
        boolean boolean27 = date12.after(date16);
        int int28 = date16.getDate();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime34 = dateTime31.withFieldAdded(durationFieldType32, (int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime31.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(0);
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime46 = dateTime40.withPeriodAdded(readablePeriod44, (int) '4');
        java.lang.String str47 = dateTime40.toString();
        org.joda.time.Chronology chronology48 = dateTime40.getChronology();
        org.joda.time.Chronology chronology49 = chronology48.withUTC();
        org.joda.time.DateTime dateTime50 = dateTime36.withChronology(chronology48);
        org.joda.time.Chronology chronology51 = chronology48.withUTC();
        boolean boolean52 = durationFieldType29.isSupported(chronology48);
        boolean boolean53 = date16.equals((java.lang.Object) boolean52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514145243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=45,MILLISECOND=556,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292269054 + "'", int9 == 292269054);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:15:45 GMT+00:00 2022");
        org.junit.Assert.assertEquals(date16.toString(), "Sat Oct 30 00:00:00 GMT+00:00 2010");
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str20, "1 Jan 1970 00:00:00 GMT");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:26:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:10:45.302+00:00:00.059" + "'", str47, "2022-02-22T07:10:45.302+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime3.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime3.withPeriodAdded(readablePeriod11, (int) (short) 1);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate7.withPeriodAdded(readablePeriod13, 575);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(0L, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(0L, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate23.plus(readablePeriod26);
        org.joda.time.LocalDate localDate28 = localDate20.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate20.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property32 = localDate30.year();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate37 = localDate35.plusYears(54);
        boolean boolean38 = localDate15.isBefore((org.joda.time.ReadablePartial) localDate37);
        int int39 = localDate37.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = localDate37.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(548);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale9.getDisplayLanguage(locale10);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayCountry();
        int int15 = property7.getMaximumShortTextLength(locale9);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587" + "'", str12, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United Kingdom" + "'", str14, "United Kingdom");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readableDuration2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(668);
        int int7 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 28 + "'", int7 == 28);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        boolean boolean8 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime17 = property14.addToCopy(59);
        org.joda.time.DateTime dateTime19 = dateTime17.minus((long) 292278993);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis(429);
        long long22 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Interval interval23 = property6.toInterval();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-97L) + "'", long22 == (-97L));
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology8);
        boolean boolean11 = localDateTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.secondOfMinute();
        long long20 = dateTimeField18.remainder(63934358400008L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFieldAdded(durationFieldType27, 6);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMonths(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType33.getField(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfMonth();
        int int44 = localDateTime42.getMillisOfSecond();
        int int45 = localDateTime42.getDayOfYear();
        int int46 = localDateTime42.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.withYear(22);
        int[] intArray50 = chronology36.get((org.joda.time.ReadablePartial) localDateTime42, 1L);
        int int51 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray50);
        java.lang.String str52 = dateTimeField18.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 512 + "'", int2 == 512);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 8L + "'", long20 == 8L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 512 + "'", int44 == 512);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondOfMinute" + "'", str52, "secondOfMinute");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime5.withMillisOfSecond(537);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("65337936", "Thu Jan 01 00:00:00 UTC 1970", 437, 764);
        long long23 = fixedDateTimeZone21.nextTransition(1645513743878L);
        long long25 = fixedDateTimeZone21.convertUTCToLocal(1645513823261L);
        org.joda.time.DateTime dateTime26 = dateTime5.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        int int27 = dateTime26.getEra();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.minus(readableDuration28);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513743878L + "'", long23 == 1645513743878L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513823698L + "'", long25 == 1645513823698L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra(374);
        int int13 = localDateTime10.getMonthOfYear();
        int int14 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusYears(20);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(4);
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int int13 = dateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime9.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime9.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime9.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        long long25 = dateTimeZone17.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone22, (long) 136);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(788, 310, 581, 842, 150, 36, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 842 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 136L + "'", long25 == 136L);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(25857212, 52, 988, 0, 0, 65331610, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65331610 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = chronology7.millis();
        org.joda.time.DurationField durationField11 = chronology7.years();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        long long20 = chronology7.set((org.joda.time.ReadablePartial) localDateTime18, (long) 25822);
        org.joda.time.DurationField durationField21 = chronology7.seconds();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology7);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514145574L + "'", long20 == 1645514145574L);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusYears(13);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        java.util.Date date12 = localDateTime10.toDate();
        date12.setTime(0L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        int int8 = fixedDateTimeZone5.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusDays(155);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfCentury(2144673);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2144673 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("25707776");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(931);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-22T07:10:43.845+00:00:00.059");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:10:43.845+00:00:00.059\" is malformed at \"22-02-22T07:10:43.845+00:00:00.059\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("27");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        java.lang.String str10 = dateTime3.toString();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime3.plusHours(32769);
        int int14 = dateTime3.getHourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime3.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = property15.setCopy(65605379);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65605379 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:45.722+00:00:00.059" + "'", str10, "2022-02-22T07:10:45.722+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone11 = fixedDateTimeZone10.toTimeZone();
        int int13 = fixedDateTimeZone10.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone10);
        int int15 = localDateTime14.getDayOfYear();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, (long) 30);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withCenturyOfEra(651);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        int int22 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) -1);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy(0);
        boolean boolean40 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime14.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 759 + "'", int22 == 759);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+35:00" + "'", str32, "+35:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+35:00" + "'", str33, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        date1.setYear(228);
        int int4 = date1.getDate();
        date1.setSeconds(187);
        int int7 = date1.getSeconds();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromDateFields(date1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(226);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.plus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime16.plus(readablePeriod23);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        org.joda.time.DateTime dateTime28 = property25.addToCopy(1009868913348L);
        org.joda.time.DateTime dateTime29 = property25.roundHalfFloorCopy();
        int int30 = dateTime29.getWeekOfWeekyear();
        int int31 = dateTime29.getEra();
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        boolean boolean33 = dateTime29.isAfterNow();
        int int34 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:03:07 GMT+00:00 2128");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 813600000 + "'", int34 == 813600000);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        long long17 = dateTimeZone15.nextTransition(1645513723723L);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = dateTimeZone15.getShortName((long) 25707776, locale19);
        java.lang.String str22 = dateTimeZone15.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone29 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone30 = fixedDateTimeZone29.toTimeZone();
        int int32 = fixedDateTimeZone29.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone29);
        int int35 = fixedDateTimeZone29.getOffset((long) 228);
        long long37 = fixedDateTimeZone29.previousTransition((long) 25713348);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = locale39.getDisplayVariant();
        java.util.Locale locale42 = locale39.stripExtensions();
        java.lang.String str43 = fixedDateTimeZone29.getShortName(0L, locale39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.property(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        boolean boolean52 = localDateTime45.equals((java.lang.Object) property51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(0);
        org.joda.time.DateTime.Property property59 = dateTime56.monthOfYear();
        int int60 = property59.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = property59.getAsShortText(locale62);
        int int64 = property51.getMaximumTextLength(locale62);
        java.lang.String str65 = locale39.getDisplayLanguage(locale62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.property(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfYear();
        boolean boolean74 = localDateTime67.equals((java.lang.Object) property73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime76 = localDateTime75.toDateTime();
        org.joda.time.DateTime dateTime78 = dateTime76.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime80 = dateTime78.plusHours(0);
        org.joda.time.DateTime.Property property81 = dateTime78.monthOfYear();
        int int82 = property81.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField83 = property81.getField();
        java.util.Locale locale84 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str85 = property81.getAsShortText(locale84);
        int int86 = property73.getMaximumTextLength(locale84);
        java.lang.String str87 = locale84.getDisplayName();
        java.lang.String str88 = locale84.getDisplayScript();
        java.util.Locale locale89 = locale84.stripExtensions();
        java.lang.String str90 = locale62.getDisplayVariant(locale84);
        java.lang.String str91 = dateTimeZone15.getName((long) 606, locale84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = locale84.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513723723L + "'", long17 == 1645513723723L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.059" + "'", str21, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str22, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 25713348L + "'", long37 == 25713348L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.059" + "'", str43, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e8c\u6708" + "'", str63, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587" + "'", str65, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u4e8c\u6708" + "'", str85, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Chinese (Taiwan)" + "'", str87, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.059" + "'", str91, "+00:00:00.059");
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy(292278993);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.lang.String str14 = property7.getAsShortText(locale11);
        org.joda.time.LocalDateTime localDateTime15 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = property7.addWrapFieldToCopy(933);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "53" + "'", str14, "53");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        int int17 = dateTime12.get(dateTimeField16);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.lang.String str21 = dateTimeField16.getAsShortText(1169187558838880L, locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale19);
        calendar22.set(0, 25757963, 658);
        int int27 = calendar22.getWeekYear();
        java.time.Instant instant28 = calendar22.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 45 + "'", int17 == 45);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "58" + "'", str21, "58");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=67676180512545928,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2146542,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=288,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=46,MILLISECOND=241,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2146542 + "'", int27 == 2146542);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int11 = localDate8.indexOf(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = localDate8.minusWeeks(25821695);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.withDayOfYear(34);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 560);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.LocalDate localDate15 = property13.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645488048267L);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTime dateTime13 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withDurationAdded(readableDuration14, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime0.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 228);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime1.withPeriodAdded(readablePeriod2, 245);
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(364);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withPeriodAdded(readablePeriod9, 59);
        int int12 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.plusDays(910);
        java.util.Locale locale18 = new java.util.Locale("1 Oct 2195 00:00:00 GMT", "2022-02-22T07:10:22.693+00:00:00.059", "2022-02-23T18:08:06.664");
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale18.getDisplayScript();
        java.util.Calendar calendar21 = dateTime14.toCalendar(locale18);
        org.joda.time.DateTime.Property property22 = dateTime14.era();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals(locale18.toString(), "1 oct 2195 00:00:00 gmt_2022-02-22T07:10:22.693+00:00:00.059_2022-02-23T18:08:06.664");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1 oct 2195 00:00:00 gmt" + "'", str19, "1 oct 2195 00:00:00 gmt");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1724137846319,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=233,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=46,MILLISECOND=378,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        int int15 = localDate14.getWeekyear();
        org.joda.time.LocalDate.Property property16 = localDate14.dayOfMonth();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(140);
        boolean boolean19 = property16.isLeap();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalDate localDate21 = property16.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1870 + "'", int15 == 1870);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay(0);
        java.lang.String str4 = localTime0.toString("25707776");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime0.plusMillis(0);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime14 = property9.setCopy(59);
        org.joda.time.LocalTime localTime15 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime16 = property9.getLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25707776" + "'", str4, "25707776");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(28591L);
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfDay(806);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        java.lang.String str7 = dateTimeFieldType4.getName();
        org.joda.time.LocalTime localTime9 = localTime1.withField(dateTimeFieldType4, 1968);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "millisOfDay" + "'", str7, "millisOfDay");
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = fixedDateTimeZone4.getName(1009868913348L, locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        long long12 = dateTimeField10.remainder((long) (byte) 100);
        java.lang.String str13 = dateTimeField10.getName();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayCountry();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = dateTimeField10.getAsShortText(2, locale15);
        java.lang.String str19 = locale15.getDisplayCountry();
        java.lang.String str20 = locale6.getDisplayName(locale15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.property(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readableDuration28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plus(readableDuration30);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getScript();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale33.getDisplayLanguage(locale35);
        java.lang.String str37 = localDateTime31.toString("+00:00:00.059", locale35);
        java.lang.String str38 = locale6.getDisplayCountry(locale35);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.059" + "'", str7, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "United Kingdom" + "'", str19, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (Taiwan)" + "'", str20, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais" + "'", str36, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.059" + "'", str37, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Taiwan" + "'", str38, "Taiwan");
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime9 = property6.addWrapFieldToCopy(126000000);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime5.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 12);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(131);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateTime.Property property26 = dateTime23.weekOfWeekyear();
        org.joda.time.DateTime dateTime27 = property26.getDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis(359);
        int int30 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime29);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = locale31.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet33 = locale31.getExtensionKeys();
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.lang.String str36 = locale31.getDisplayLanguage(locale34);
        java.util.Locale locale39 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleKeys();
        java.lang.String str44 = locale34.getDisplayName(locale39);
        java.util.Calendar calendar45 = dateTime19.toCalendar(locale39);
        calendar45.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar45.add(899, 675);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "United Kingdom" + "'", str35, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Korean (South Korea)" + "'", str41, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (United Kingdom)" + "'", str44, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645513846436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=46,MILLISECOND=495,ZONE_OFFSET=59,DST_OFFSET=0]");
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone20.observesDaylightTime();
        timeZone20.setID("");
        java.util.Calendar.Builder builder24 = builder15.setTimeZone(timeZone20);
        boolean boolean25 = timeZone14.hasSameRules(timeZone20);
        int int26 = timeZone14.getRawOffset();
        java.lang.String str27 = timeZone14.getID();
        calendar3.setTimeZone(timeZone14);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(0);
        java.lang.String str35 = localTime31.toString("25707776");
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = localTime31.isSupported(dateTimeFieldType36);
        org.joda.time.LocalTime localTime39 = localTime31.plusMillis(0);
        org.joda.time.LocalTime.Property property40 = localTime39.minuteOfHour();
        org.joda.time.LocalTime localTime41 = property40.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime42 = property40.withMaximumValue();
        java.lang.String str43 = property40.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        long long48 = dateTimeField46.remainder((long) (byte) 100);
        java.lang.String str49 = dateTimeField46.getName();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale51.getDisplayCountry();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = dateTimeField46.getAsShortText(2, locale51);
        java.lang.String str55 = locale51.getDisplayCountry();
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.lang.String str57 = property40.getAsShortText(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = timeZone14.getDisplayName(true, 854, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 854");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514146453,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-22T07:10:33.250+00:00:00.059,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=46,MILLISECOND=766,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292269054 + "'", int9 == 292269054);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:15:46 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 313 + "'", int26 == 313);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:10:33.250+00:00:00.059" + "'", str27, "2022-02-22T07:10:33.250+00:00:00.059");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "25707776" + "'", str35, "25707776");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "15" + "'", str43, "15");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "millisOfDay" + "'", str49, "millisOfDay");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "United Kingdom" + "'", str52, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2" + "'", str54, "2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "United Kingdom" + "'", str55, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "English" + "'", str56, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "15" + "'", str57, "15");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2022-02-22T07:10:16.743+00:00:00.059", "+00:00:00.841", 838, 25757031);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 25885294);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 25757031 + "'", int6 == 25757031);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone11 = fixedDateTimeZone10.toTimeZone();
        int int13 = fixedDateTimeZone10.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone10);
        int int15 = localDateTime14.getDayOfYear();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(4);
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes(32770);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMillis(10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusWeeks(86399999);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(4);
        org.joda.time.DateTime dateTime39 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.plusMinutes(32770);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property43.getFieldType();
        org.joda.time.LocalDateTime.Property property45 = localDateTime29.property(dateTimeFieldType44);
        boolean boolean46 = localDateTime14.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime14.withMillisOfDay(726);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(0L, dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate51.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(0L, dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate56.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate60 = localDate56.plus(readablePeriod59);
        org.joda.time.LocalDate localDate61 = localDate53.withFields((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate localDate63 = localDate53.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime64 = localDate63.toDateTimeAtCurrentTime();
        int int65 = localDate63.size();
        // The following exception was thrown during execution in test generation
        try {
            int int66 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDate63);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusHours(20);
        org.joda.time.LocalTime.Property property8 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime10 = property8.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property8.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond((int) (byte) 100);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYearOfCentury();
        int int21 = localDate18.getDayOfMonth();
        org.joda.time.LocalDate.Property property22 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate24 = localDate18.plusMonths(751);
        int int25 = localDate18.getYearOfEra();
        org.joda.time.LocalDate localDate27 = localDate18.minusWeeks(102);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        calendar3.setMinimalDaysInFirstWeek(0);
        int int12 = calendar3.getActualMaximum(5);
        calendar3.setTimeInMillis((long) 8);
        java.time.Instant instant15 = calendar3.toInstant();
        calendar3.setTimeInMillis((long) 2020);
        int int18 = calendar3.getWeekYear();
        java.util.Date date19 = calendar3.getTime();
        calendar3.setTimeInMillis((long) 411);
        calendar3.set(699, 539, 404);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar3.getActualMinimum(818);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 818");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-22T07:10:33.250+00:00:00.059,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=699,MONTH=539,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=404,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=724,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:02 GMT+00:00 1970");
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays(674);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(401);
        org.joda.time.DateTime dateTime8 = dateTime4.withWeekyear(339);
        org.joda.time.Instant instant10 = org.joda.time.Instant.parse("2022-02-22T07:09:04.613+00:00:00.059");
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology11.getZone();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology11);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDateTime11.getValue(25821695);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25821695");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.year();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.getDisplayName();
        long long10 = dateTimeField5.set(1645513710548L, "22", locale8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.lang.String str12 = locale11.getScript();
        java.util.Locale.setDefault(locale11);
        int int14 = dateTimeField5.getMaximumTextLength(locale11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.property(dateTimeFieldType17);
        int int21 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(790);
        java.util.Locale locale26 = new java.util.Locale("Mon Jul 24 02:05:00 GMT+00:00 1961", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str27 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMonths(111);
        int int30 = localDateTime29.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean (South Korea)" + "'", str9, "Korean (South Korea)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-61468390289452L) + "'", long10 == (-61468390289452L));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals(locale26.toString(), "mon jul 24 02:05:00 gmt+00:00 1961_1 JAN 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.plus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalTime localTime11 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.addWrapFieldToCopy(9);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        int int15 = localTime13.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime13.withMinuteOfHour(371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 371 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40150000 + "'", int15 == 40150000);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Calendar.Builder builder4 = builder1.setLocale(locale2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.lang.String str9 = nameProvider0.getShortName(locale5, "Thu Jan 01 00:00:00 GMT+00:00 2128", "ja_JP");
        java.util.Locale locale12 = new java.util.Locale("Mon Jul 24 02:05:00 GMT+00:00 1961", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str15 = nameProvider0.getShortName(locale12, "2022-02-22T07:10:08.966+00:00:00.059", "2022-02-22T07:10:11.783+00:00:00.059");
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayCountry();
        boolean boolean18 = locale16.hasExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale16);
        calendar19.setLenient(false);
        long long22 = calendar19.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromCalendarFields(calendar19);
        int int24 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withCenturyOfEra(913);
        int int27 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTime.Property property34 = dateTime31.weekyear();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime31.withPeriodAdded(readablePeriod35, (int) '4');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime31);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks(54);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet45 = locale43.getExtensionKeys();
        java.lang.String str46 = locale43.getDisplayScript();
        java.lang.String str47 = locale43.getScript();
        int int48 = property42.getMaximumShortTextLength(locale43);
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale12.getDisplayLanguage(locale43);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str3, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(locale12.toString(), "mon jul 24 02:05:00 gmt+00:00 1961_1 JAN 1970 00:00:00 GMT");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str17, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514146855,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=2022-02-22T07:10:33.250+00:00:00.059,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=47,MILLISECOND=168,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514146855L + "'", long22 == 1645514146855L);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 168 + "'", int24 == 168);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str44, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mon jul 24 02:05:00 gmt+00:00 1961" + "'", str50, "mon jul 24 02:05:00 gmt+00:00 1961");
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        java.util.Date date3 = new java.util.Date(851, 726, 25976754);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jun 07 00:00:00 GMT+00:00 73933");
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        int int15 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minusDays(1912);
        int int18 = localDateTime7.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.plus(readablePeriod19);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.year();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 958 + "'", int2 == 958);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 173 + "'", int18 == 173);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26 + "'", int21 == 26);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("65321988", "2022-02-22T07:10:10.041+00:00:00.059", 883, 25842980);
        java.lang.String str7 = fixedDateTimeZone5.getName((long) 474);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(1645528350335L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.883" + "'", str7, "+00:00:00.883");
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths((-1));
        int int12 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone18 = fixedDateTimeZone17.toTimeZone();
        org.joda.time.DateMidnight dateMidnight19 = localDate7.toDateMidnight((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        java.util.Date date20 = localDate7.toDate();
        date20.setYear(411);
        date20.setHours(353);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Jan 15 17:00:00 GMT+00:00 2311");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        long long5 = dateTimeField3.roundHalfEven((long) 374);
        java.util.Locale locale7 = new java.util.Locale("2022-02-22T07:08:36.698");
        int int8 = dateTimeField3.getMaximumTextLength(locale7);
        java.lang.String str9 = dateTimeField3.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals(locale7.toString(), "2022-02-22t07:08:36.698");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "clockhourOfDay" + "'", str9, "clockhourOfDay");
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(25842980);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone17 = fixedDateTimeZone16.toTimeZone();
        int int19 = fixedDateTimeZone16.getOffset((long) 228);
        boolean boolean20 = fixedDateTimeZone16.isFixed();
        java.lang.String str22 = fixedDateTimeZone16.getNameKey((long) 348);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.DateTime dateTime24 = localDate11.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        java.util.Date date25 = localDate11.toDate();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.LocalDate localDate27 = localDate11.withFields(readablePartial26);
        org.joda.time.LocalDate localDate29 = localDate11.plusYears(514);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra(1912);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate33 = localDate31.plus(readablePeriod32);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str22, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 29 00:00:00 GMT+00:00 68786");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(796);
        long long17 = dateTime16.getMillis();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-37043369352940L) + "'", long17 == (-37043369352940L));
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        java.util.Date date5 = new java.util.Date(25817468, 352, 26016479, 2021, 633);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Apr 05 15:33:00 GMT+00:00 25890628");
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone18 = fixedDateTimeZone17.toTimeZone();
        int int20 = fixedDateTimeZone17.getOffset((long) 228);
        int int22 = fixedDateTimeZone17.getStandardOffset((long) 548);
        java.lang.String str24 = fixedDateTimeZone17.getNameKey(0L);
        org.joda.time.DateTime dateTime25 = dateTime12.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        java.util.TimeZone timeZone26 = fixedDateTimeZone17.toTimeZone();
        int int28 = timeZone26.getOffset((long) 17);
        int int29 = timeZone26.getRawOffset();
        int int30 = timeZone26.getDSTSavings();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str24, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder5 = builder3.setLocale(locale4);
        java.util.Calendar.Builder builder9 = builder5.setWeekDate(809, 236, 25748190);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = property16.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTime.Property property26 = dateTime23.monthOfYear();
        int int27 = property26.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = property26.getAsShortText(locale29);
        java.lang.String str31 = dateTimeField18.getAsText((int) (byte) 10, locale29);
        java.lang.String str33 = locale29.getExtension('x');
        java.lang.String str34 = locale29.toLanguageTag();
        java.util.Calendar.Builder builder35 = builder5.setLocale(locale29);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str2, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e8c\u6708" + "'", str30, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u5341\u6708" + "'", str31, "\u5341\u6708");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-TW" + "'", str34, "zh-TW");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.LocalTime localTime14 = localTime1.plusHours(18);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(65339964);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime23 = localTime21.plusMinutes(52);
        int int24 = localTime23.size();
        int int25 = localTime23.getHourOfDay();
        org.joda.time.LocalTime.Property property26 = localTime23.minuteOfHour();
        org.joda.time.LocalTime localTime28 = property26.addWrapFieldToCopy(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withField(dateTimeFieldType29, 25717313);
        boolean boolean32 = localTime14.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        int int41 = localDateTime40.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = durationFieldType42.isSupported(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withFieldAdded(durationFieldType42, 59);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime50.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes(10);
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfMonth();
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str58 = dateTimeFieldType57.toString();
        org.joda.time.DateTime.Property property59 = dateTime56.property(dateTimeFieldType57);
        int int60 = localDateTime48.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfMonth();
        int int63 = localDateTime61.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime68 = localDateTime67.toDateTime();
        org.joda.time.Chronology chronology69 = localDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType66.getField(chronology69);
        boolean boolean72 = localDateTime61.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime74 = localDateTime73.toDateTime();
        org.joda.time.Chronology chronology75 = localDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType66.getField(chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType57.getField(chronology75);
        boolean boolean81 = localDateTime36.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property82 = localDateTime36.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = localTime14.isAfter((org.joda.time.ReadablePartial) localDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "clockhourOfHalfday" + "'", str58, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 195 + "'", int63 == 195);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMillis(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(497);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(678L);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(0L, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate16.plus(readablePeriod19);
        int int21 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate20.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra(100);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(3);
        int int28 = localDate25.getWeekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDate25.getFields();
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtCurrentTime();
        long long31 = dateTime30.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime30.withTime(384, 26011546, 402, 25859156);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 384 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-59006940252722L) + "'", long31 == (-59006940252722L));
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        java.lang.String str10 = dateTime3.toString();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime3.plusHours(32769);
        boolean boolean15 = dateTime3.isBefore((long) 304);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime3.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(10);
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime20.plusYears(22);
        org.joda.time.DateTime.Property property26 = dateTime20.era();
        org.joda.time.DateTime.Property property27 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property28 = dateTime20.yearOfCentury();
        boolean boolean29 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minus(readableDuration32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withYearOfCentury((int) 'a');
        int int38 = localDateTime37.getMillisOfDay();
        int int39 = localDateTime37.getYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours(4);
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.plusMinutes(32770);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int53 = localDateTime51.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime37.property(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType52.getDurationType();
        org.joda.time.DateTime dateTime57 = dateTime3.withFieldAdded(durationFieldType55, 1439);
        org.joda.time.DateTime.Property property58 = dateTime3.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:47.392+00:00:00.059" + "'", str10, "2022-02-22T07:10:47.392+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 26147393 + "'", int38 == 26147393);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2097 + "'", int39 == 2097);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(10);
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime14.plusWeeks(813);
        int int21 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property22 = dateTime10.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate12.getFieldTypes();
        java.lang.String str14 = localDate12.toString();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.minus(readablePeriod15);
        org.joda.time.LocalDate.Property property17 = localDate12.weekyear();
        org.joda.time.LocalDate localDate18 = property17.roundCeilingCopy();
        java.lang.String str19 = property17.getAsString();
        org.joda.time.LocalDate localDate20 = property17.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate20.minusWeeks(26138187);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -9223372016611200000 + -15808375497600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970" + "'", str19, "1970");
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField19 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.millisOfSecond();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale5);
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTime1.equals(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime1.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.setCopy("19");
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514147528,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=47,MILLISECOND=587,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withLaterOffsetAtOverlap();
        int int5 = dateTime4.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26147608 + "'", int5 == 26147608);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 228);
        int int3 = localTime1.getValue(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime.Property property6 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property6.setCopy("25707776");
        java.lang.String str10 = property6.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "287" + "'", str10, "287");
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(995);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(29);
        org.joda.time.DateTime dateTime10 = dateTime4.minusMonths(59021960);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((-1));
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = localDate18.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate18.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDate.Property property23 = localDate18.property(dateTimeFieldType22);
        org.joda.time.LocalDate localDate24 = localDate16.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate16.plus(readablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(0L, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(0L, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate35.plus(readablePeriod38);
        org.joda.time.LocalDate localDate40 = localDate32.withFields((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate42 = localDate32.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone49 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone50 = fixedDateTimeZone49.toTimeZone();
        int int52 = fixedDateTimeZone49.getOffset((long) 228);
        boolean boolean53 = fixedDateTimeZone49.isFixed();
        java.lang.String str55 = fixedDateTimeZone49.getNameKey((long) 348);
        org.joda.time.DateTime dateTime56 = localDate42.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone) fixedDateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(0L, dateTimeZone58);
        org.joda.time.LocalDate localDate61 = localDate59.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(0L, dateTimeZone63);
        org.joda.time.LocalDate localDate66 = localDate64.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate68 = localDate64.plus(readablePeriod67);
        org.joda.time.LocalDate localDate69 = localDate61.withFields((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.LocalDate.Property property70 = localDate69.weekyear();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        int int72 = property70.getMaximumShortTextLength(locale71);
        java.util.Calendar calendar73 = dateTime56.toCalendar(locale71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = localDate26.toString("27837-02-22T00:00:00.000+00:00:00.059", locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str55, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-3152709852403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1870,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=35,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=47,MILLISECOND=656,ZONE_OFFSET=59,DST_OFFSET=0]");
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = builder3.build();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.getDisplayCountry();
        java.util.Calendar.Builder builder9 = builder6.setLocale(locale7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder11 = builder9.setLocale(locale10);
        java.lang.String str14 = nameProvider5.getShortName(locale10, "Thu Jan 01 00:00:00 GMT+00:00 2128", "ja_JP");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.year();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale23.getDisplayName();
        long long25 = dateTimeField20.set(1645513710548L, "22", locale23);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale26.getScript();
        java.util.Locale.setDefault(locale26);
        int int29 = dateTimeField20.getMaximumTextLength(locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.property(dateTimeFieldType32);
        int int36 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusHours(790);
        java.util.Locale locale41 = new java.util.Locale("Mon Jul 24 02:05:00 GMT+00:00 1961", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str42 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale41);
        java.lang.String str45 = nameProvider5.getShortName(locale41, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=59,DAY_OF_YEAR=84,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=97,MINUTE=283,SECOND=35,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-03-17T01:20:36.335");
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours(0);
        org.joda.time.DateTime.Property property52 = dateTime49.monthOfYear();
        int int53 = property52.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField54 = property52.getField();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours(0);
        org.joda.time.DateTime.Property property62 = dateTime59.monthOfYear();
        int int63 = property62.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField64 = property62.getField();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str66 = property62.getAsShortText(locale65);
        java.lang.String str67 = dateTimeField54.getAsText((int) (byte) 10, locale65);
        java.lang.String str68 = locale65.getISO3Country();
        java.lang.String str71 = nameProvider5.getShortName(locale65, "java.util.GregorianCalendar[time=1645513711272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=31,MILLISECOND=272,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-02t00:00:00.000+35:00");
        java.util.Locale.Builder builder72 = builder3.setLocale(locale65);
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale74 = java.util.Locale.getDefault(category73);
        java.util.Locale.Builder builder75 = builder3.setLocale(locale74);
        java.util.Locale locale76 = builder75.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str8, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)" + "'", str24, "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61468390289452L) + "'", long25 == (-61468390289452L));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals(locale41.toString(), "mon jul 24 02:05:00 gmt+00:00 1961_1 JAN 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e8c\u6708" + "'", str66, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u5341\u6708" + "'", str67, "\u5341\u6708");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "TWN" + "'", str68, "TWN");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + category73 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category73.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        long long4 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant1.plus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant1.plus(readableDuration7);
        long long9 = instant1.getMillis();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder13 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder17 = builder10.setTimeOfDay(761, 14, (int) (short) 10);
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(575, 463, 761);
        java.util.Calendar.Builder builder23 = builder21.setLenient(true);
        boolean boolean24 = instant1.equals((java.lang.Object) builder21);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62104060800059L) + "'", long4 == (-62104060800059L));
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62104060800059L) + "'", long9 == (-62104060800059L));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str12, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1645513757904L);
        org.joda.time.ReadablePartial readablePartial2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.withFields(readablePartial2);
        org.joda.time.DateTimeField dateTimeField5 = localTime3.getField(0);
        int int6 = dateTimeField5.getMinimumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = durationFieldType9.isSupported(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withFieldAdded(durationFieldType9, 59);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(10);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str25 = dateTimeFieldType24.toString();
        org.joda.time.DateTime.Property property26 = dateTime23.property(dateTimeFieldType24);
        int int27 = localDateTime15.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        int int30 = localDateTime28.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType33.getField(chronology36);
        boolean boolean39 = localDateTime28.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.Chronology chronology42 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType33.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType24.getField(chronology42);
        boolean boolean48 = localDateTime3.isSupported(dateTimeFieldType24);
        int int49 = localDateTime3.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "clockhourOfHalfday" + "'", str25, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 782 + "'", int30 == 782);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = property2.setCopy("2022-02-22T07:10:42.936+00:00:00.059");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:10:42.936+00:00:00.059\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(4);
        org.joda.time.DateTime dateTime17 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMinutes(32770);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMillis(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(497);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        int int26 = localDateTime24.getMillisOfDay();
        int int27 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(10);
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.plus(readablePeriod35);
        org.joda.time.DateTime dateTime37 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property38 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime40 = property38.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        long long46 = dateTimeZone43.adjustOffset((long) 70, false);
        java.lang.String str48 = dateTimeZone43.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime50 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(0);
        org.joda.time.DateTime.Property property59 = dateTime56.weekyear();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime56.withPeriodAdded(readablePeriod60, (int) '4');
        int int63 = property52.getDifference((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime56.plus(readableDuration64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime56.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfMonth();
        int int70 = localDateTime68.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property73 = localDateTime68.monthOfYear();
        org.joda.time.LocalDateTime localDateTime75 = property73.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType78.getField(chronology79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime77.property(dateTimeFieldType78);
        int int82 = dateTime56.get(dateTimeFieldType78);
        boolean boolean83 = dateTime49.isSupported(dateTimeFieldType78);
        boolean boolean84 = dateTime10.isSupported(dateTimeFieldType78);
        org.joda.time.DateTime dateTime86 = dateTime10.plusWeeks(464);
        org.joda.time.DateTime dateTime88 = dateTime86.plusMonths(69);
        org.joda.time.DateTime dateTime89 = dateTime86.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5147821 + "'", int26 == 5147821);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2012 + "'", int27 == 2012);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 70L + "'", long46 == 70L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 831 + "'", int70 == 831);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(property81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 25847831 + "'", int82 == 25847831);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.LocalTime localTime4 = localTime0.plusMillis((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        boolean boolean12 = localTime4.equals((java.lang.Object) dateTimeFormatter9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        int int17 = dateTimeFormatter15.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withDefaultYear(0);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronolgy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Calendar.Builder builder4 = builder1.setLocale(locale2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.lang.String str9 = nameProvider0.getShortName(locale5, "Thu Jan 01 00:00:00 GMT+00:00 2128", "ja_JP");
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str13 = nameProvider0.getName(locale10, "8", "00:00:00.910");
        java.util.Locale locale14 = java.util.Locale.PRC;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale19 = new java.util.Locale("2022-02-22T07:09:15.209", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=2022,MINUTE=2,SECOND=4,MILLISECOND=636,ZONE_OFFSET=59,DST_OFFSET=0]", "2022-02-22T07:10:45.837+00:00:00.059");
        java.lang.String str20 = locale14.getDisplayVariant(locale19);
        java.util.Locale locale21 = locale14.stripExtensions();
        java.lang.String str24 = nameProvider0.getName(locale14, "07:08:37.313", "2022-02-22T07:10:45.302+00:00:00.059");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str3, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale19.toString(), "2022-02-22t07:09:15.209_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=JAVA.UTIL.SIMPLETIMEZONE[ID=1970-01-01T00:00:00.000Z,OFFSET=59,DSTSAVINGS=3600000,USEDAYLIGHT=FALSE,STARTYEAR=0,STARTMODE=0,STARTMONTH=0,STARTDAY=0,STARTDAYOFWEEK=0,STARTTIME=0,STARTTIMEMODE=0,ENDMODE=0,ENDMONTH=0,ENDDAY=0,ENDDAYOFWEEK=0,ENDTIME=0,ENDTIMEMODE=0],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=2022,MINUTE=2,SECOND=4,MILLISECOND=636,ZONE_OFFSET=59,DST_OFFSET=0]_2022-02-22T07:10:45.837+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime1.withPeriodAdded(readablePeriod13, 37);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = property16.getLeapAmount();
        org.joda.time.LocalTime localTime18 = property16.roundFloorCopy();
        boolean boolean19 = property16.isLeap();
        org.joda.time.LocalTime localTime21 = property16.addCopy((long) 24);
        org.joda.time.DateTimeField dateTimeField22 = property16.getField();
        org.joda.time.LocalTime localTime24 = property16.addNoWrapToCopy(0);
        int int25 = property16.get();
        org.joda.time.LocalTime localTime26 = property16.roundCeilingCopy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.969" + "'", str2, "00:00:00.969");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 969 + "'", int25 == 969);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        int int9 = localDate8.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate8.getValue(718);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 718");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayCountry();
        boolean boolean8 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withChronology(chronology13);
        java.lang.StringBuffer stringBuffer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(stringBuffer16, 1645513904474L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str7, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean9 = dateTimeFormatter4.isParser();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        int int13 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField(chronology19);
        boolean boolean22 = localDateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.Chronology chronology25 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 337, chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter4.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField32 = chronology25.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 68 + "'", int13 == 68);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        java.util.Date date5 = new java.util.Date(8, 54, (int) ' ', (int) (short) 1, 54);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = date5.getMonth();
        int int8 = date5.getDate();
        date5.setDate(261);
        java.util.Date date14 = new java.util.Date(489, 913, 0);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromDateFields(date14);
        int int16 = date5.compareTo(date14);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Apr 18 01:54:00 GMT+00:00 1913");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 31 00:00:00 GMT+00:00 2465");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-22T07:10:36.586+00:00:00.059");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:10:36.586+00:00:00.059\" is malformed at \"22-02-22T07:10:36.586+00:00:00.059\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        boolean boolean15 = dateTimeFieldType11.isSupported(chronology14);
        boolean boolean16 = dateTimeFieldType10.isSupported(chronology14);
        int int17 = dateTime7.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime23.withPeriodAdded(readablePeriod27, (int) '4');
        int int30 = property19.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime23.plus(readableDuration31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime32.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime32.minuteOfDay();
        int int37 = dateTime32.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(4);
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours(1970);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(535);
        boolean boolean47 = dateTime45.isEqual((long) 301);
        boolean boolean48 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.minus(readableDuration49);
        boolean boolean51 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime7.minusMinutes(414);
        org.joda.time.DateTime dateTime54 = dateTime53.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 48 + "'", int37 == 48);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        calendar3.setTimeZone(timeZone13);
        calendar3.set(100, 1970, 34, 348, (int) (short) 10, (int) (byte) 100);
        calendar3.setTimeInMillis((long) 39599999);
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder25.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone30.observesDaylightTime();
        timeZone30.setID("");
        java.util.Calendar.Builder builder34 = builder25.setTimeZone(timeZone30);
        calendar3.setTimeZone(timeZone30);
        java.util.TimeZone timeZone36 = calendar3.getTimeZone();
        java.lang.Object obj37 = timeZone36.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str1, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=39599999,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=58,ZONE_OFFSET=59,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514148106L + "'", long6 == 1645514148106L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property20 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = property20.setCopy("2022-02-22T07:10:49.144");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:10:49.144\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        java.lang.String str5 = chronology2.toString();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours(4);
        int int10 = dateTime7.getEra();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        java.lang.Object obj14 = null;
        boolean boolean15 = dateTime7.equals(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime7.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.Chronology chronology18 = chronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfDay();
        int int23 = dateTimeField21.getLeapAmount(1645513960919L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645514148243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=48,MILLISECOND=302,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.DurationField durationField9 = chronology2.days();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusYears(25813);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 333 + "'", int2 == 333);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.remainder((long) (byte) 100);
        java.lang.String str5 = dateTimeField2.getName();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate12 = localDate8.plusMonths((-1));
        java.util.Locale locale16 = new java.util.Locale("1970-01-01T00:00:00.000Z", "\u4e8c\u6708");
        java.lang.String str17 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate8, 22, locale16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(0L, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate20.plus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.minusWeeks(229);
        org.joda.time.DateTime dateTime32 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate34 = localDate8.minusYears(202);
        org.joda.time.LocalDate localDate36 = localDate8.withEra(0);
        int int37 = localDate8.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "22" + "'", str17, "22");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.059" + "'", str29, "1970-01-01T00:00:00.000+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        int int4 = dateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis((-62104060800000L));
        long long9 = dateTime8.getMillis();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int18 = dateTime13.getSecondOfMinute();
        boolean boolean19 = dateTime13.isAfterNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62104060800000L) + "'", long9 == (-62104060800000L));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        long long28 = dateTimeZone25.adjustOffset((long) 70, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime34 = dateTime3.minusDays(374);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime3.toDateTime(chronology35);
        int int37 = dateTime36.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 70L + "'", long28 == 70L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str30, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        int int2 = dateTime1.getYearOfEra();
        java.lang.String str3 = dateTime1.toString();
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime5 = property4.roundHalfFloorCopy();
        java.util.Locale locale8 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        int int9 = property4.getMaximumShortTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property4.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property4.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:15:48.495+00:00:00.059" + "'", str3, "2022-02-22T07:15:48.495+00:00:00.059");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale8.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645488048267L);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis(358);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfEra(168);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 348, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear(3);
        org.joda.time.DateTime dateTime23 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.plus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        long long42 = dateTimeZone39.adjustOffset((long) 70, false);
        java.lang.String str44 = dateTimeZone39.getNameKey(1009868913348L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime23.toMutableDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime51 = dateTime48.withFieldAdded(durationFieldType49, (int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        org.joda.time.Chronology chronology58 = localDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfMinute();
        boolean boolean62 = dateTime55.equals((java.lang.Object) dateTimeField61);
        org.joda.time.DateTime.Property property63 = dateTime55.millisOfSecond();
        org.joda.time.DateTime.Property property64 = dateTime55.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        org.joda.time.DateTime.Property property66 = dateTime23.property(dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime4.property(dateTimeFieldType65);
        boolean boolean68 = localDateTime1.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 70L + "'", long42 == 70L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str44, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = dateTime10.isBefore(readableInstant12);
        int int14 = dateTime10.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay(0);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property3.setCopy(30);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds(25821695);
        org.joda.time.LocalTime localTime9 = localTime7.minusMillis(188);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        int int6 = property5.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(40);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withCenturyOfEra(912);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(389);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.withPeriodAdded(readablePeriod26, (int) '4');
        int int29 = property18.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime22.plus(readableDuration30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime22.minus(readablePeriod32);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfMonth();
        int int37 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMonths(140);
        int int47 = localDateTime43.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(10);
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime56 = dateTime51.plusYears(22);
        org.joda.time.DateTime.Property property57 = dateTime51.era();
        org.joda.time.DateTime.Property property58 = dateTime51.secondOfMinute();
        org.joda.time.DateTime dateTime59 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfMonth();
        int int62 = localDateTime60.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int66 = localDateTime60.get(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getDurationType();
        org.joda.time.LocalDateTime.Property property68 = localDateTime43.property(dateTimeFieldType65);
        int int69 = dateTime33.get(dateTimeFieldType65);
        boolean boolean70 = localDateTime14.isSupported(dateTimeFieldType65);
        java.lang.String str71 = dateTimeFieldType65.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 711 + "'", int37 == 711);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 712 + "'", int62 == 712);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 7 + "'", int66 == 7);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "clockhourOfHalfday" + "'", str71, "clockhourOfHalfday");
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime3.withPeriodAdded(readablePeriod10, 34);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.monthOfYear();
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25848746 + "'", int13 == 25848746);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.seconds();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withWeekOfWeekyear(931);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 931 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("25967880");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(286);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.plusHours(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear(761);
        boolean boolean16 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        int int17 = localDateTime13.size();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withCenturyOfEra(748);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusMillis(1970);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.Chronology chronology9 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        boolean boolean18 = localDateTime11.equals((java.lang.Object) property17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTime.Property property25 = dateTime22.monthOfYear();
        int int26 = property25.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = property25.getAsShortText(locale28);
        int int30 = property17.getMaximumTextLength(locale28);
        java.util.Calendar calendar31 = dateTime7.toCalendar(locale28);
        java.lang.String str32 = calendar31.getCalendarType();
        java.util.TimeZone timeZone33 = calendar31.getTimeZone();
        boolean boolean34 = calendar31.isWeekDateSupported();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e8c\u6708" + "'", str29, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645487999941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "gregory" + "'", str32, "gregory");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property20 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.plus(readablePeriod22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 69);
        boolean boolean26 = localDate21.equals((java.lang.Object) localDate25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.property(dateTimeFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDate25.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        calendar3.setTimeZone(timeZone13);
        calendar3.set(100, 1970, 34, 348, (int) (short) 10, (int) (byte) 100);
        calendar3.setTimeInMillis((long) 39599999);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.clear(25840626);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str1, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=39599999,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=58,ZONE_OFFSET=59,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514148877L + "'", long6 == 1645514148877L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(100L);
        int int2 = localTime1.size();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond(718);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.minus(readablePeriod5);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime9 = property7.addWrapFieldToCopy(844);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property7.setCopy("2022-02-22T07:14:40.404");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:14:40.404\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        java.lang.String str10 = dateTime3.toString();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        boolean boolean15 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:49.006+00:00:00.059" + "'", str10, "2022-02-22T07:10:49.006+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(454, 26128, 85, 910, 858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 910 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime5 = localDateTime4.toDateTime();
        org.joda.time.Chronology chronology6 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField8 = chronology6.years();
        java.lang.String str9 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyearOfCentury();
        java.util.Locale locale13 = new java.util.Locale("1970-01-01");
        java.lang.String str14 = dateTimeField10.getAsText(529, locale13);
        java.lang.String str15 = locale13.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970-01-01 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals(locale13.toString(), "1970-01-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "529" + "'", str14, "529");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime11 = localTime9.plusMinutes(52);
        int int12 = localTime11.size();
        int int13 = localTime11.getHourOfDay();
        org.joda.time.LocalTime.Property property14 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property14.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withChronology(chronology17);
        int int19 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withDefaultYear(348);
        int int24 = dateTimeFormatter23.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2000 + "'", int19 == 2000);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 348 + "'", int24 == 348);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.set(2, 0, (int) (short) 0, 2022, 2);
        java.time.Instant instant10 = calendar3.toInstant();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str1, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-62097040630989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-22T07:10:33.250+00:00:00.059,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=2,SECOND=49,MILLISECOND=324,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("January");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime3.plusMonths(34);
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfDay();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.halfdayOfDay();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 2022, chronology19);
        boolean boolean23 = dateTime21.isAfter(0L);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfDay();
        int int25 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime21);
        int int26 = dateTime21.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) -1);
        java.lang.String str14 = dateTimeZone10.getID();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, dateTimeZone10);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime8.getFields();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusDays(489);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int20 = localDateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology24 = localDateTime22.getChronology();
        boolean boolean25 = dateTimeFieldType21.isSupported(chronology24);
        long long29 = chronology24.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfWeek();
        org.joda.time.DurationField durationField31 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType19.getField(chronology24);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone38 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone39 = fixedDateTimeZone38.toTimeZone();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withZone(dateTimeZone46);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        int int49 = fixedDateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime47);
        int int51 = fixedDateTimeZone38.getOffset((long) (byte) 1);
        java.lang.String str53 = fixedDateTimeZone38.getNameKey((-61472908799900L));
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone38);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone60 = new org.joda.time.tz.FixedDateTimeZone("19", "0", 495, 17);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withDefaultYear(3);
        java.lang.Integer int67 = dateTimeFormatter66.getPivotYear();
        java.util.Locale locale68 = java.util.Locale.UK;
        java.lang.String str69 = locale68.getDisplayCountry();
        boolean boolean70 = locale68.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter66.withLocale(locale68);
        java.lang.String str72 = fixedDateTimeZone60.getShortName(63934358400008L, locale68);
        java.lang.String str73 = fixedDateTimeZone38.getName((long) 12, locale68);
        java.lang.String str74 = dateTimeField32.getAsShortText((long) 'a', locale68);
        java.util.Locale.setDefault(category0, locale68);
        java.util.Locale locale76 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 268 + "'", int3 == 268);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+35:00" + "'", str14, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 184L + "'", long29 == 184L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str53, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str69, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.495" + "'", str72, "+00:00:00.495");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.059" + "'", str73, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_GB");
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay(0);
        java.lang.String str4 = localTime0.toString("25707776");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime0.plusMillis(0);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property9.addCopy((long) 663);
        org.joda.time.LocalTime localTime14 = localTime12.minusHours(25914385);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25707776" + "'", str4, "25707776");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.Locale.FilteringMode filteringMode7 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5, filteringMode7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList40);
        org.joda.time.tz.Provider provider43 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet44 = provider43.getAvailableIDs();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet44, filteringMode46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap48);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = locale50.getVariant();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet52.stream();
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList49, (java.util.Collection<java.lang.String>) strSet52, filteringMode54);
        java.util.stream.Stream<java.lang.String> strStream56 = strSet52.stream();
        java.lang.String str57 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList65, filteringMode67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, strMap69);
        org.joda.time.tz.Provider provider71 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet72 = provider71.getAvailableIDs();
        java.util.Set<java.lang.String> strSet73 = provider71.getAvailableIDs();
        java.util.Set<java.lang.String> strSet74 = provider71.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone76 = provider71.getZone("2022-02-23T18:08:52.208");
        java.util.Set<java.lang.String> strSet77 = provider71.getAvailableIDs();
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.FilteringMode filteringMode79 = null;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet77, filteringMode79);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + filteringMode7 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode7.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode54.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate2.plusWeeks(0);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(2);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = property19.setCopy(103);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 103 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField21.set((long) 825, 25814499);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25814499 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.plus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime11 = property9.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime14 = localTime11.withPeriodAdded(readablePeriod12, 613);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime14.plus(readablePeriod15);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.plus(readablePeriod15);
        org.joda.time.LocalDate localDate17 = localDate9.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate19 = localDate9.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        int int22 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.Chronology chronology23 = localDate2.getChronology();
        int int24 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate26 = localDate2.minusMonths(199);
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) dateTime27);
        org.joda.time.DateTime dateTime31 = dateTime27.withDurationAdded(4345821828L, 605);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        int int9 = localDateTime1.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.plusWeeks(25823410);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime1.withTime(799, 430, 26077, 26061326);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 799 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears((int) (byte) 1);
        boolean boolean19 = dateTime9.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime21 = dateTime9.plusMillis(969);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        int int17 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes(188);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(361);
        org.joda.time.DateTime dateTime23 = dateTime19.withEra(0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate4.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate16 = localDate14.minusYears((-1));
        org.joda.time.LocalDate localDate18 = localDate14.minusDays(25815459);
        org.joda.time.LocalDate localDate20 = localDate14.minusYears(25831457);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears(775);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        int int15 = property13.getMaximumShortTextLength(locale14);
        org.joda.time.LocalDate localDate17 = property13.addWrapFieldToCopy(908);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(1971);
        int int20 = localDate17.getYear();
        int int21 = localDate17.getYearOfCentury();
        org.joda.time.LocalDate localDate23 = localDate17.minusMonths(25757420);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2878 + "'", int20 == 2878);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 78 + "'", int21 == 78);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getHours();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        int int7 = property4.getMaximumTextLength(locale6);
        org.joda.time.LocalTime localTime9 = property4.addCopy(954);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(757);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3" + "'", str13, "3");
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeFormatter11.getZone();
        long long15 = dateTimeZone13.previousTransition((long) 850);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 4771502, dateTimeZone13);
        int int18 = dateTimeZone13.getOffset(3155846399505L);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 850L + "'", long15 == 850L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        int int6 = dateTime3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        int int17 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMillis(521);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        int int8 = fixedDateTimeZone5.getOffset((long) 228);
        boolean boolean9 = fixedDateTimeZone5.isFixed();
        long long11 = fixedDateTimeZone5.nextTransition(1645513715372L);
        long long14 = fixedDateTimeZone5.adjustOffset((long) 25821695, false);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1908, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(94);
        boolean boolean27 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.plusYears(39600000);
        org.joda.time.LocalDateTime.Property property30 = localDateTime15.yearOfEra();
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513715372L + "'", long11 == 1645513715372L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25821695L + "'", long14 == 25821695L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.years();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone10 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone11 = fixedDateTimeZone10.toTimeZone();
        int int13 = fixedDateTimeZone10.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone10);
        int int15 = localDateTime14.getDayOfYear();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, (long) 30);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withCenturyOfEra(651);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        int int22 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) -1);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy(0);
        boolean boolean40 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 30]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63 + "'", int22 == 63);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+35:00" + "'", str32, "+35:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+35:00" + "'", str33, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 228);
        int int3 = localTime1.getValue(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime.Property property6 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property6.setCopy("25707776");
        org.joda.time.LocalTime localTime10 = property6.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        org.joda.time.LocalTime.Property property2 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime3 = property2.withMinimumValue();
        org.joda.time.LocalTime localTime5 = localTime3.plusMinutes(656);
        java.lang.String str6 = localTime5.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "18:11:50.000" + "'", str6, "18:11:50.000");
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone5.observesDaylightTime();
        timeZone5.setID("");
        java.util.Calendar.Builder builder9 = builder0.setTimeZone(timeZone5);
        java.util.Calendar.Builder builder14 = builder9.setTimeOfDay(18, 136, 581, 664);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(104, 50, 25851);
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property20 = localDate18.dayOfYear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone26 = fixedDateTimeZone25.toTimeZone();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtStartOfDay((org.joda.time.DateTimeZone) fixedDateTimeZone25);
        org.joda.time.LocalDate.Property property29 = localDate18.era();
        org.joda.time.LocalDate localDate31 = localDate18.minusYears(25716933);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(153);
        int int34 = localDate31.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(0);
        int int23 = dateTime22.getHourOfDay();
        int int24 = property8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillis((long) 761);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(4);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((-1));
        int int34 = dateTime33.getMillisOfSecond();
        boolean boolean35 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        boolean boolean37 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTime.Property property39 = dateTime33.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 160 + "'", int34 == 160);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("2022-06-20");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-06-20 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis(4);
        int int9 = localTime8.getMinuteOfHour();
        org.joda.time.DateTime dateTime10 = localTime8.toDateTimeToday();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(10);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str20 = dateTimeFieldType19.toString();
        org.joda.time.DateTime.Property property21 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = property21.isLeap();
        org.joda.time.DateTime dateTime24 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        int int27 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = localDateTime25.get(dateTimeFieldType30);
        int int32 = dateTime24.get(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime34 = localTime8.withField(dateTimeFieldType30, 695);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 695 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfHalfday" + "'", str20, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 201 + "'", int27 == 201);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.plus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.Chronology chronology27 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.yearOfEra();
        java.util.Locale locale35 = new java.util.Locale("1970-01-01T00:00:00.000Z", "\u4e8c\u6708");
        java.lang.String str36 = dateTimeField31.getAsShortText(3, locale35);
        java.util.Calendar calendar37 = dateTime16.toCalendar(locale35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.String str42 = property12.getAsShortText(locale35);
        org.joda.time.DateTime dateTime43 = property12.getDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3" + "'", str36, "3");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513850182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=50,MILLISECOND=241,ZONE_OFFSET=59,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Englisch" + "'", str40, "Englisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e8c\u6708" + "'", str41, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 2022, chronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.minus(0L);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(10);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.plus(readablePeriod15);
        org.joda.time.DateTime dateTime17 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType23.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration21, chronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.yearOfEra();
        int int34 = dateTimeField32.getMinimumValue(1169187558838880L);
        long long37 = dateTimeField32.add(25712432L, (long) 535);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField32.getType();
        org.joda.time.DateTime dateTime40 = dateTime7.withField(dateTimeFieldType38, 185);
        org.joda.time.DateTime dateTime42 = dateTime40.plusWeeks(25823320);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 16883017712432L + "'", long37 == 16883017712432L);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        int int8 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withCenturyOfEra(913);
        int int11 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.withPeriodAdded(readablePeriod19, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime15);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks(54);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.hourOfDay();
        int int27 = property26.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = property26.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.hourOfDay();
        int int32 = property31.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514150266,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=50,MILLISECOND=579,ZONE_OFFSET=313,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514150266L + "'", long6 == 1645514150266L);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 579 + "'", int8 == 579);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset((long) 228);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.Interval interval10 = localDate8.toInterval();
        int int11 = localDate8.getYear();
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfEra();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) -1);
        java.lang.String str16 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(32769);
        org.joda.time.DateTime dateTime21 = dateTime17.minusDays(373);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime17.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+35:00" + "'", str15, "+35:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.setLenient(false);
        calendar3.setLenient(true);
        int int9 = calendar3.getLeastMaximum(1);
        calendar3.setMinimalDaysInFirstWeek(0);
        java.util.Date date12 = calendar3.getTime();
        int int13 = calendar3.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        timeZone14.setID("");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar3.setTimeZone(timeZone14);
        calendar3.setFirstDayOfWeek(809);
        calendar3.clear();
        calendar3.setMinimalDaysInFirstWeek(790);
        java.util.TimeZone timeZone26 = calendar3.getTimeZone();
        boolean boolean27 = timeZone26.observesDaylightTime();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone28.observesDaylightTime();
        timeZone28.setID("1961/07/24 2:05:00");
        boolean boolean32 = timeZone26.hasSameRules(timeZone28);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone33.observesDaylightTime();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone33);
        java.util.Date date37 = new java.util.Date((long) (byte) 0);
        int int38 = date37.getHours();
        date37.setMonth(6);
        calendar35.setTime(date37);
        date37.setSeconds(537);
        boolean boolean44 = timeZone28.inDaylightTime(date37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=809,minimalDaysInFirstWeek=790,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292269054 + "'", int9 == 292269054);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:15:50 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514150375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=50,MILLISECOND=688,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514150375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=50,MILLISECOND=688,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=15638400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=313,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date37.toString(), "Wed Jul 01 00:08:57 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology6 = null;
        boolean boolean7 = durationFieldType5.isSupported(chronology6);
        boolean boolean8 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime4.withPeriodAdded(readablePeriod9, 28);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.util.Calendar.Builder builder16 = builder13.setLocale(locale14);
        java.lang.String str17 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localTime11, 211, locale14);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone22 = new org.joda.time.tz.FixedDateTimeZone("Japan", "DateTimeField[millisOfDay]", 2026, 500);
        java.util.TimeZone timeZone23 = fixedDateTimeZone22.toTimeZone();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = fixedDateTimeZone22.getName(0L, locale25);
        java.lang.String str27 = fixedDateTimeZone22.getID();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(869);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfMonth();
        int int33 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) -1);
        java.lang.String str44 = dateTimeZone40.getID();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38, dateTimeZone40);
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = localDateTime38.getFields();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime38.plusDays(489);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int50 = localDateTime48.get(dateTimeFieldType49);
        int int51 = dateTime30.get(dateTimeFieldType49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localTime11.get(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "211" + "'", str17, "211");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Japan Standard Time");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:02.026" + "'", str26, "+00:00:02.026");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 455 + "'", int33 == 455);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+35:00" + "'", str43, "+35:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+35:00" + "'", str44, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 42 + "'", int50 == 42);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime3.plusYears(22);
        org.joda.time.DateTime.Property property9 = dateTime3.era();
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property11 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime3.plusHours(0);
        int int14 = dateTime13.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("25724878");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '25724878' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = localDate4.toString("1951/01/31 17:51:00", locale6);
        int int8 = localDate4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1951/01/31 17:51:00" + "'", str7, "1951/01/31 17:51:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone20 = fixedDateTimeZone19.toTimeZone();
        int int22 = fixedDateTimeZone19.getOffset((long) 228);
        int int24 = fixedDateTimeZone19.getStandardOffset((long) 548);
        java.lang.String str26 = fixedDateTimeZone19.getNameKey(0L);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        org.joda.time.DateTime dateTime29 = dateTime14.minus((long) 17);
        java.util.Locale locale30 = java.util.Locale.PRC;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getDisplayVariant();
        java.util.Calendar calendar33 = dateTime14.toCalendar(locale30);
        calendar33.set(539, 26078554, 109, 137, 0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str26, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.000Z,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=539,MONTH=26078554,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=109,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=137,MINUTE=0,SECOND=50,MILLISECOND=716,ZONE_OFFSET=59,DST_OFFSET=0]");
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(294, 898, 10, 25926443, 25, 271);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25926443 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime5 = property2.withMaximumValue();
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        int int7 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = localDate18.toDateMidnight();
        org.joda.time.LocalDate localDate23 = localDate18.withWeekyear(583);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(10);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime16.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime16.era();
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        java.lang.String str26 = localDateTime8.toString("\u5341\u6708");
        int int27 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime8.minusHours(37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime8.withEra(570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 570 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 778 + "'", int2 == 778);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u5341\u6708" + "'", str26, "\u5341\u6708");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        int int3 = localDateTime0.getDayOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        int int5 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property6.addWrapFieldToCopy(594);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(10);
        int int15 = dateTime12.getWeekOfWeekyear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField18 = chronology16.months();
        long long22 = chronology16.add((long) 331, (long) 99, 25960447);
        boolean boolean23 = property6.equals((java.lang.Object) 25960447);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 795 + "'", int2 == 795);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2570084584L + "'", long22 == 2570084584L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Property[secondOfMinute]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = calendar2.getGreatestMinimum(455);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 455");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514150822,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=50,MILLISECOND=822,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1645513811472L, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str12 = localTime11.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone17 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone18 = fixedDateTimeZone17.toTimeZone();
        int int20 = fixedDateTimeZone17.getOffset((long) 228);
        boolean boolean21 = fixedDateTimeZone17.isFixed();
        org.joda.time.DateTime dateTime22 = localTime11.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone17);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone27 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone28 = fixedDateTimeZone27.toTimeZone();
        int int30 = fixedDateTimeZone27.getOffset((long) 228);
        int int32 = fixedDateTimeZone27.getStandardOffset((long) 548);
        java.lang.String str34 = fixedDateTimeZone27.getNameKey(0L);
        org.joda.time.DateTime dateTime35 = dateTime22.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone27);
        java.util.TimeZone timeZone36 = fixedDateTimeZone27.toTimeZone();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone27);
        org.joda.time.LocalTime localTime39 = localTime37.minusMinutes(453);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology43 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.DurationField durationField45 = chronology43.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.year();
        org.joda.time.ReadablePartial readablePartial47 = null;
        int[] intArray49 = new int[] { 20 };
        int int50 = dateTimeField46.getMinimumValue(readablePartial47, intArray49);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime39, 151, intArray49, 815);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 151");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00:00:00.910" + "'", str12, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str34, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[20]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Set<java.lang.String> strSet2 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean3 = charSet1.retainAll((java.util.Collection<java.lang.String>) strSet2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(0L, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.minusYears((int) (short) 100);
        boolean boolean9 = charSet1.remove((java.lang.Object) localDate8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15, filteringMode17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "United Kingdom" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList24, filteringMode26);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayCountry();
        boolean boolean37 = locale35.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String str39 = locale38.getDisplayCountry();
        java.lang.String str40 = locale35.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet41);
        org.joda.time.tz.Provider provider43 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet44 = provider43.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone46 = provider43.getZone("1 Jan 1970 00:00:00 GMT");
        org.joda.time.DateTimeZone dateTimeZone48 = provider43.getZone("ko");
        org.joda.time.DateTimeZone.setProvider(provider43);
        java.util.Set<java.lang.String> strSet50 = provider43.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet50, filteringMode51);
        boolean boolean53 = charSet1.retainAll((java.util.Collection<java.lang.String>) strList52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "United Kingdom" + "'", str39, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (United Kingdom)" + "'", str40, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(dateTimeZone46);
        org.junit.Assert.assertNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime.Property property4 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime5 = property4.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone13 = fixedDateTimeZone12.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        int int23 = fixedDateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime21);
        int int25 = fixedDateTimeZone12.getOffset((long) (byte) 1);
        long long27 = fixedDateTimeZone12.previousTransition((long) 8);
        java.util.Date date29 = new java.util.Date((long) (byte) 1);
        int int30 = date29.getSeconds();
        java.time.Instant instant31 = date29.toInstant();
        boolean boolean32 = fixedDateTimeZone12.equals((java.lang.Object) instant31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime5.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        boolean boolean34 = mutableDateTime33.isAfterNow();
        java.lang.Class<?> wildcardClass35 = mutableDateTime33.getClass();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 8L + "'", long27 == 8L);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getVariant();
        java.lang.String str6 = locale3.getDisplayLanguage(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap7 = calendar0.getDisplayNames(0, 936, locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514150930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=243,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u82f1\u6587" + "'", str6, "\u82f1\u6587");
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder5 = builder3.setLocale(locale4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone6);
        java.util.Calendar.Builder builder8 = builder3.setTimeZone(timeZone6);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder13 = builder10.setLocale(locale11);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder15 = builder13.setLocale(locale14);
        boolean boolean16 = calendar9.before((java.lang.Object) locale14);
        java.util.TimeZone timeZone17 = calendar9.getTimeZone();
        int int19 = timeZone17.getOffset(1645401600000L);
        java.lang.String str20 = timeZone17.getID();
        java.util.Locale locale24 = new java.util.Locale("\u82f1\u8a9e", "25707776", "Jan 1, 1970 12:00:00 AM");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone17, locale24);
        java.lang.Object obj26 = timeZone17.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514150960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=273,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 313 + "'", int19 == 313);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertEquals(locale24.toString(), "\u82f1\u8a9e_25707776_Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514150961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=274,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        java.util.Date date3 = new java.util.Date(10, 13, (int) '#');
        date3.setMinutes((int) (byte) 100);
        int int6 = date3.getMonth();
        java.util.Date date12 = new java.util.Date(8, 54, (int) ' ', (int) (short) 1, 54);
        boolean boolean13 = date3.before(date12);
        int int14 = date12.getMonth();
        int int15 = date12.getHours();
        java.util.Date date22 = new java.util.Date(470, 16, 846, 254, 25745, 385);
        java.util.Date date24 = new java.util.Date((long) (byte) 1);
        date24.setYear(228);
        int int27 = date24.getDay();
        int int28 = date24.getMinutes();
        date24.setYear(348);
        date24.setTime(35L);
        int int33 = date24.getTimezoneOffset();
        java.lang.String str34 = date24.toGMTString();
        date24.setYear(48);
        int int37 = date24.getDay();
        boolean boolean38 = date22.before(date24);
        int int39 = date24.getYear();
        boolean boolean40 = date12.before(date24);
        java.util.Date date42 = new java.util.Date((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date42);
        boolean boolean44 = date12.after(date42);
        org.joda.time.Instant instant46 = org.joda.time.Instant.parse("2");
        org.joda.time.Instant instant47 = instant46.toInstant();
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        long long49 = instant46.getMillis();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant46.plus(readableDuration50);
        org.joda.time.Instant instant53 = instant51.plus((long) 202);
        org.joda.time.Instant instant55 = instant51.withMillis(1645514088902L);
        boolean boolean56 = date12.equals((java.lang.Object) 1645514088902L);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Mar 07 01:40:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Aug 01 01:54:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Sep 20 11:11:25 GMT+00:00 2373");
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1948");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str34, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62104060800000L) + "'", long49 == (-62104060800000L));
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        int int15 = property13.getMinimumValue();
        org.joda.time.LocalDate localDate16 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate17 = property13.roundHalfCeilingCopy();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property13.getAsShortText(locale18);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970" + "'", str19, "1970");
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.set(2, 0, (int) (short) 0, 2022, 2);
        java.time.Instant instant10 = calendar3.toInstant();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        java.util.TimeZone timeZone12 = calendar3.getTimeZone();
        java.util.Locale locale15 = new java.util.Locale("120", "7");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone12, locale15);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = timeZone12.getOffset(206, 922, 803, 857, 179, 996);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 206");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-62097040628920,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=2,SECOND=51,MILLISECOND=393,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale15.toString(), "120_7");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514151080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=393,ZONE_OFFSET=313,DST_OFFSET=0]");
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        timeZone0.setID("");
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        calendar5.roll(11, false);
        java.time.Instant instant9 = calendar5.toInstant();
        calendar5.clear();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514151164,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=477,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        int int8 = localDateTime7.getYearOfCentury();
        int int9 = localDateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime17.plus(1645513715772L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        int int23 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int27 = localDateTime21.get(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getDurationType();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withFieldAdded(durationFieldType36, 6);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.Chronology chronology41 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.centuryOfEra();
        org.joda.time.DurationField durationField44 = durationFieldType36.getField(chronology41);
        long long48 = chronology41.add(1169187558080000L, (long) 930, 816);
        boolean boolean49 = durationFieldType29.isSupported(chronology41);
        org.joda.time.DateTime dateTime51 = dateTime20.withFieldAdded(durationFieldType29, 13);
        java.util.Locale locale53 = new java.util.Locale("2022-02-22T07:09:04.613+00:00:00.059");
        java.util.Calendar calendar54 = dateTime20.toCalendar(locale53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(10);
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime58.plus(readablePeriod62);
        org.joda.time.DateTime dateTime64 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property65 = dateTime58.minuteOfDay();
        org.joda.time.DateTime.Property property66 = dateTime58.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        int int68 = dateTime58.get(dateTimeFieldType67);
        org.joda.time.DateTime dateTime70 = dateTime20.withField(dateTimeFieldType67, 25716933);
        boolean boolean71 = localDateTime7.isSupported(dateTimeFieldType67);
        int int72 = localDateTime7.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 177 + "'", int23 == 177);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1169187558838880L + "'", long48 == 1169187558838880L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals(locale53.toString(), "2022-02-22t07:09:04.613+00:00:00.059");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=3291027566949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=105,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=19,SECOND=26,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusWeeks(268);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(25780157);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10);
        int int13 = localDateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        int int9 = dateTime7.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.plusMinutes(0);
        org.joda.time.DateTime dateTime13 = dateTime7.plusYears(816);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTime.Property property20 = dateTime17.weekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.withPeriodAdded(readablePeriod21, (int) '4');
        java.lang.String str24 = dateTime17.toString();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime17.plusHours(32769);
        int int28 = dateTime17.getHourOfDay();
        boolean boolean29 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime7.minus(1645513880899L);
        int int33 = dateTime7.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:10:51.254Z" + "'", str24, "2022-02-22T07:10:51.254Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear(352);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        boolean boolean22 = property21.isLeap();
        org.joda.time.DateTime dateTime24 = property21.addToCopy(714);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder29 = builder26.removeUnicodeLocaleAttribute("25714150");
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale locale33 = new java.util.Locale("UTC", "fran\347ais");
        java.lang.String str34 = locale30.getDisplayName(locale33);
        java.util.Locale.Builder builder35 = builder26.setLocale(locale30);
        java.util.Locale.Builder builder37 = builder26.addUnicodeLocaleAttribute("25754969");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("\ub300\ub9cc");
        java.util.Locale.Builder builder40 = builder37.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = property21.setCopy("", locale39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals(locale33.toString(), "utc_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime3.withMillisOfSecond(248);
        int int12 = dateTime3.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime3.withTimeAtStartOfDay();
        int int14 = dateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(4);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType20.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime18.toDateTime(chronology23);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale9 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withPivotYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        boolean boolean13 = dateTimeFormatter11.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 995);
        boolean boolean16 = dateTimeFormatter11.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime3.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone17 = fixedDateTimeZone16.toTimeZone();
        long long19 = dateTimeZone11.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone16, (long) 136);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withDefaultYear(3);
        java.lang.Integer int25 = dateTimeFormatter24.getPivotYear();
        org.joda.time.Chronology chronology26 = dateTimeFormatter24.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter24.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter24.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter24.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType30.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.yearOfEra();
        org.joda.time.DurationField durationField38 = chronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.millisOfDay();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours(0);
        org.joda.time.DateTime.Property property48 = dateTime45.monthOfYear();
        int int49 = property48.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(0);
        org.joda.time.DateTime.Property property58 = dateTime55.monthOfYear();
        int int59 = property58.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str62 = property58.getAsShortText(locale61);
        java.lang.String str63 = dateTimeField50.getAsText((int) (byte) 10, locale61);
        java.lang.String str65 = locale61.getExtension('x');
        java.util.Locale.setDefault(category41, locale61);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime68.property(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime73 = property72.roundHalfFloorCopy();
        java.util.Locale locale74 = java.util.Locale.UK;
        java.lang.String str75 = locale74.getDisplayCountry();
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = locale74.getScript();
        java.lang.String str78 = property72.getAsShortText(locale74);
        java.util.Locale.setDefault(category41, locale74);
        java.lang.String str80 = dateTimeField39.getAsShortText(1645513723723L, locale74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter24.withLocale(locale74);
        boolean boolean82 = dateTimeFormatter81.isParser();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone85);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 339, dateTimeZone85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter81.withZone(dateTimeZone85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter81.withPivotYear((java.lang.Integer) 492);
        boolean boolean91 = fixedDateTimeZone16.equals((java.lang.Object) dateTimeFormatter81);
        long long93 = fixedDateTimeZone16.nextTransition((long) 2922789);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 77L + "'", long19 == 77L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNull(dateTimePrinter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e8c\u6708" + "'", str62, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u5341\u6708" + "'", str63, "\u5341\u6708");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "United Kingdom" + "'", str75, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "26151393" + "'", str78, "26151393");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "25723723" + "'", str80, "25723723");
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 2922789L + "'", long93 == 2922789L);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTime.Property property16 = dateTime13.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded(readableDuration17, (int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime13.plusMonths(34);
        int int22 = dateTime13.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(228);
        org.joda.time.DateTime dateTime25 = dateTime13.withZoneRetainFields(dateTimeZone24);
        long long28 = dateTimeZone24.adjustOffset((-1L), false);
        boolean boolean30 = dateTimeZone24.isStandardOffset(0L);
        java.util.Date date32 = new java.util.Date((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.fromDateFields(date32);
        boolean boolean34 = dateTimeZone24.equals((java.lang.Object) date32);
        boolean boolean35 = localDateTime9.equals((java.lang.Object) boolean34);
        int int36 = localDateTime9.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str3 = localTime2.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone9 = fixedDateTimeZone8.toTimeZone();
        int int11 = fixedDateTimeZone8.getOffset((long) 228);
        boolean boolean12 = fixedDateTimeZone8.isFixed();
        org.joda.time.DateTime dateTime13 = localTime2.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        int int23 = fixedDateTimeZone18.getStandardOffset((long) 548);
        java.lang.String str25 = fixedDateTimeZone18.getNameKey(0L);
        org.joda.time.DateTime dateTime26 = dateTime13.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int28 = fixedDateTimeZone18.getStandardOffset((long) 49);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 660, (org.joda.time.DateTimeZone) fixedDateTimeZone18);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        boolean boolean31 = fixedDateTimeZone18.isFixed();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "00:00:00.910" + "'", str3, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str25, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(140);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((-292275054));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMonthOfYear(606);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 606 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 487 + "'", int2 == 487);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(4);
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(1970);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = durationFieldType8.isSupported(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFieldAdded(durationFieldType8, 59);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plusYears(13);
        int int15 = localDateTime14.getEra();
        int int16 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMonths(41);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(4);
        int int23 = dateTime20.getEra();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.lang.Object obj27 = null;
        boolean boolean28 = dateTime20.equals(obj27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime20.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long33 = dateTimeZone29.adjustOffset((long) 6, true);
        org.joda.time.DateTime dateTime34 = localDateTime18.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime3.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime37 = dateTime35.minusYears(0);
        int int38 = dateTime37.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514151537,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=51,MILLISECOND=537,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6L + "'", long33 == 6L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.plus(readablePeriod5);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate2.plusWeeks(0);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfEra();
        org.joda.time.LocalDate localDate13 = localDate10.plusMonths(140);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.LocalDate.Property property17 = localDate15.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfDay();
        long long21 = dateTimeField19.roundFloor((long) '4');
        int int23 = dateTimeField19.getMinimumValue((long) (byte) 1);
        org.joda.time.DurationField durationField24 = dateTimeField19.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(2);
        int int17 = dateTime16.getHourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMillis(283);
        int int20 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        org.joda.time.DateTime.Property property22 = dateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 430 + "'", int20 == 430);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        int int11 = localDateTime9.getMillisOfSecond();
        int int12 = localDateTime9.getDayOfYear();
        int int13 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withYear(22);
        int[] intArray17 = chronology3.get((org.joda.time.ReadablePartial) localDateTime9, 1L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withSecondOfMinute(704);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 704 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 745 + "'", int11 == 745);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 1]");
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(20);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks(40);
        java.util.Date date17 = localDate12.toDate();
        org.joda.time.LocalDate.Property property18 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear(168);
        int int23 = localDate20.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology17.days();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        java.lang.String str8 = localTime6.toString("54");
        int int9 = localTime6.getHourOfDay();
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "54" + "'", str8, "54");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.minusHours(60);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (-1));
        boolean boolean13 = dateTime3.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.minus(readableDuration14);
        org.joda.time.Instant instant18 = instant15.withDurationAdded((long) 259, 60);
        org.joda.time.Instant instant20 = instant18.withMillis((long) 1971);
        org.joda.time.Chronology chronology21 = instant18.getChronology();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant18.plus(readableDuration22);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime16.withYearOfCentury((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, 785);
        org.joda.time.LocalDateTime localDateTime7 = dateTime1.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime1.plusMonths(17);
        org.joda.time.DateTime dateTime11 = dateTime1.minusMillis(35);
        java.util.Date date12 = dateTime1.toDate();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime1.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:15:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withCenturyOfEra(48);
        int int11 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusDays(529);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds(287);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        int int18 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) -1);
        java.lang.String str29 = dateTimeZone25.getID();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.minus(readableDuration31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minus(readableDuration34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime15.withDayOfMonth(527);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 527 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 924 + "'", int18 == 924);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+35:00" + "'", str28, "+35:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+35:00" + "'", str29, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        int int2 = dateTime1.getYearOfEra();
        java.lang.String str3 = dateTime1.toString();
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime5 = property4.roundHalfFloorCopy();
        java.util.Locale locale8 = new java.util.Locale("2022-02-22T07:10:26.657Z", "0");
        int int9 = property4.getMaximumShortTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(143);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:15:51.967Z" + "'", str3, "2022-02-22T07:15:51.967Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale8.toString(), "2022-02-22t07:10:26.657z_0");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(4);
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(32770);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(25842980);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDateTime8.getField(25967);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25967");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        boolean boolean8 = localDateTime1.equals((java.lang.Object) property7);
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(345599941L);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withTime(161, 404, 660, 818);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 161 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "948242-08-24T07:15:52.030" + "'", str11, "948242-08-24T07:15:52.030");
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.withDurationAdded(readableDuration9, 66);
        int int12 = dateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        int int7 = localTime6.size();
        int int8 = localTime6.getHourOfDay();
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        int int10 = property9.getMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundCeilingCopy();
        org.joda.time.Interval interval12 = property9.toInterval();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.LocalTime localTime4 = localTime0.plusMillis((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        boolean boolean12 = localTime4.equals((java.lang.Object) dateTimeFormatter9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(465);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withDefaultYear(509);
        java.io.Writer writer20 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime27 = localTime25.plusMinutes(52);
        int int28 = localTime27.size();
        int int29 = localTime27.getHourOfDay();
        org.joda.time.LocalTime.Property property30 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime32 = property30.addWrapFieldToCopy(53);
        org.joda.time.LocalTime localTime33 = property30.roundFloorCopy();
        org.joda.time.LocalTime localTime34 = property30.withMinimumValue();
        java.lang.String str35 = property30.getAsText();
        org.joda.time.LocalTime localTime36 = property30.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer20, (org.joda.time.ReadablePartial) localTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52" + "'", str35, "52");
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromDateFields(date1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator2 = charSet1.spliterator();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime6.withPeriodAdded(readablePeriod10, (int) '4');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks(54);
        boolean boolean16 = charSet1.contains((java.lang.Object) localDateTime13);
        java.util.Iterator<java.lang.Character> charItor17 = charSet1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = charSet1.add((java.lang.Character) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charSpliterator2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charItor17);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(110);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond(26140385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26140385 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 163 + "'", int2 == 163);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        int int12 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property10.setCopy(248);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withPeriodAdded(readablePeriod9, (int) '4');
        int int12 = property1.getDifference((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(4);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) (byte) 1);
        java.lang.String str20 = dateTime18.toString("659");
        org.joda.time.DateTime dateTime22 = dateTime18.minusSeconds(0);
        org.joda.time.DateTime dateTime24 = dateTime18.withCenturyOfEra(901);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withMonthOfYear(265);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 265 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "659" + "'", str20, "659");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withPeriodAdded(readablePeriod5, 1970);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 995);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = dateTime13.getSecondOfMinute();
        int int15 = dateTime13.getHourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis(489);
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekyear(65341045);
        java.lang.String str20 = dateTime13.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0010-02-22T07:15:52.233Z" + "'", str20, "0010-02-22T07:15:52.233Z");
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime12 = localTime10.plusMinutes(52);
        int int13 = localTime12.size();
        int int14 = localTime12.getHourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime12.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.halfdays();
        org.joda.time.DurationField durationField22 = chronology18.days();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(4363200000L, chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str2 = localTime1.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone8 = fixedDateTimeZone7.toTimeZone();
        int int10 = fixedDateTimeZone7.getOffset((long) 228);
        boolean boolean11 = fixedDateTimeZone7.isFixed();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime1.withPeriodAdded(readablePeriod13, 37);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.minus(readablePeriod16);
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = property18.addCopy(192);
        org.joda.time.LocalTime localTime21 = property18.withMinimumValue();
        org.joda.time.LocalTime localTime23 = property18.addWrapFieldToCopy(32772);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.910" + "'", str2, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.Chronology chronology4 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 2022, chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology4);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((-1L));
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours(52);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        boolean boolean24 = dateTimeFieldType20.isSupported(chronology23);
        long long28 = chronology23.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfWeek();
        org.joda.time.DurationField durationField30 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.era();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        int[] intArray35 = chronology16.get((org.joda.time.ReadablePartial) localDateTime32, (long) 25794282);
        int int36 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime10, intArray35);
        long long38 = dateTimeField8.roundHalfCeiling((long) 775);
        int int40 = dateTimeField8.getMinimumValue(1645514083883L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 184L + "'", long28 == 184L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 25794282]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.set(2, 0, (int) (short) 0, 2022, 2);
        java.time.Instant instant10 = calendar3.toInstant();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime.Property property18 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.property(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.Interval interval24 = property22.toInterval();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-62097040627633,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=2,SECOND=52,MILLISECOND=680,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter5.getPrinter();
        java.lang.Integer int9 = dateTimeFormatter5.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        long long20 = property19.remainder();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateTime dateTime29 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime31 = dateTime29.plus((long) 3);
        int int32 = property19.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone37 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone38 = fixedDateTimeZone37.toTimeZone();
        int int40 = fixedDateTimeZone37.getOffset((long) 228);
        boolean boolean41 = fixedDateTimeZone37.isFixed();
        org.joda.time.DateTime dateTime42 = dateTime31.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone37);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = locale44.getDisplayCountry();
        boolean boolean46 = locale44.hasExtensions();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale44);
        java.lang.String str48 = fixedDateTimeZone37.getName((long) 535, locale44);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime51.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours(0);
        org.joda.time.DateTime.Property property56 = dateTime53.monthOfYear();
        int int57 = property56.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = property56.getAsShortText(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.lang.String str62 = fixedDateTimeZone37.getName((long) 558, locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter12.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone37);
        int int64 = dateTimeFormatter63.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.parse("\u4e2d\u6587\u4e2d\u570b)", dateTimeFormatter63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4345852403L + "'", long20 == 4345852403L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "United Kingdom" + "'", str45, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514152403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=52,MILLISECOND=716,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.059" + "'", str48, "+00:00:00.059");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e8c\u6708" + "'", str60, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.059" + "'", str62, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setDate(3, (int) (short) 1, 25717313);
        java.util.Calendar.Builder builder11 = builder7.setTimeOfDay(1, 0, 339);
        java.util.Calendar calendar12 = builder7.build();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 'a', (org.joda.time.DateTimeZone) fixedDateTimeZone18);
        java.util.TimeZone timeZone23 = fixedDateTimeZone18.toTimeZone();
        java.util.Calendar.Builder builder24 = builder7.setTimeZone(timeZone23);
        int int25 = timeZone23.getRawOffset();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getDisplayCountry();
        boolean boolean28 = locale26.hasExtensions();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        calendar29.set(2, 0, (int) (short) 0, 2022, 2);
        java.time.Instant instant36 = calendar29.toInstant();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone37);
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder43 = builder39.setTimeOfDay(8, 0, 10);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone44.observesDaylightTime();
        timeZone44.setID("");
        java.util.Calendar.Builder builder48 = builder39.setTimeZone(timeZone44);
        boolean boolean49 = timeZone37.hasSameRules(timeZone44);
        calendar29.setTimeZone(timeZone44);
        boolean boolean51 = timeZone23.hasSameRules(timeZone44);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=2159905741538687,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=70414,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=252,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=5,SECOND=39,MILLISECOND=0,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "United Kingdom" + "'", str27, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-62097040627539,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=2,SECOND=52,MILLISECOND=774,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField(chronology9);
        boolean boolean12 = localDateTime1.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime1.plusMillis(581);
        java.util.Date date15 = localDateTime1.toDate();
        org.joda.time.Chronology chronology16 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645513983828L, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 487 + "'", int3 == 487);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:15:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.minusYears(2026);
        org.joda.time.DateTime.Property property6 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(228);
        org.joda.time.DateTime dateTime10 = property6.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.LocalTime localTime4 = localTime0.plusMillis((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(3);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        boolean boolean12 = localTime4.equals((java.lang.Object) dateTimeFormatter9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(465);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withDefaultYear(509);
        java.lang.StringBuffer stringBuffer20 = null;
        java.util.Date date26 = new java.util.Date((int) (byte) 100, (int) (byte) 1, 809, 32769, 348);
        int int27 = date26.getDate();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer20, (org.joda.time.ReadablePartial) localDate28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Jan 13 14:48:00 GMT+00:00 2006");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 13 + "'", int27 == 13);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusSeconds(616);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.clear();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-313,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 29);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime3.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        long long15 = dateTimeField12.add((long) 254, 389);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime23.withPeriodAdded(readablePeriod27, (int) '4');
        int int30 = property19.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime23.plus(readableDuration31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime32.minusWeeks((int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone40 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone41 = fixedDateTimeZone40.toTimeZone();
        int int43 = fixedDateTimeZone40.getOffset((long) 228);
        int int45 = fixedDateTimeZone40.getStandardOffset((long) 548);
        org.joda.time.DateTime dateTime46 = dateTime35.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone40);
        long long49 = fixedDateTimeZone40.adjustOffset((long) 25842980, false);
        java.util.TimeZone timeZone50 = fixedDateTimeZone40.toTimeZone();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfMonth();
        int int54 = localDateTime52.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        java.lang.String str64 = dateTimeZone61.getName((long) (byte) -1);
        java.lang.String str65 = dateTimeZone61.getID();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59, dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readablePeriod67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        long long74 = dateTimeField72.remainder((long) (byte) 100);
        java.lang.String str75 = dateTimeField72.getName();
        long long78 = dateTimeField72.set((long) 1870, 15);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = dateTimeField72.getType();
        int int80 = localDateTime68.get(dateTimeFieldType79);
        org.joda.time.DurationFieldType durationFieldType81 = null;
        boolean boolean82 = localDateTime68.isSupported(durationFieldType81);
        java.util.Locale locale85 = new java.util.Locale("25783339", "1970-01-01");
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        boolean boolean87 = localDateTime68.equals((java.lang.Object) locale85);
        java.lang.String str88 = fixedDateTimeZone40.getName((long) 4518558, locale85);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = dateTimeField12.set((-48976358398088L), "2022-02-22t07:10:26.657z (0)", locale85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22t07:10:26.657z (0)\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 389254L + "'", long15 == 389254L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25842980L + "'", long49 == 25842980L);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 637 + "'", int54 == 637);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+35:00" + "'", str64, "+35:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+35:00" + "'", str65, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "millisOfDay" + "'", str75, "millisOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 15L + "'", long78 == 15L);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 26152637 + "'", int80 == 26152637);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals(locale85.toString(), "25783339_1970-01-01");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.059" + "'", str88, "+00:00:00.059");
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        java.util.Date date6 = new java.util.Date((long) (byte) 0);
        int int7 = date6.getHours();
        date6.setYear(9);
        boolean boolean10 = localTime0.equals((java.lang.Object) date6);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        boolean boolean22 = fixedDateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime23 = localTime12.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        boolean boolean24 = localTime0.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime.Property property25 = localTime12.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime28 = localTime12.withPeriodAdded(readablePeriod26, 28);
        org.joda.time.LocalTime.Property property29 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime31 = property29.addCopy((long) 249);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = localTime31.withField(dateTimeFieldType33, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.910" + "'", str13, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(10);
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime4.plus(readablePeriod8);
        org.joda.time.DateTime dateTime10 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType16.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration14, chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology19.getZone();
        org.joda.time.DurationField durationField25 = chronology19.hours();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 688, chronology19);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(239, 25905566, 825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 239 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTime.Property property6 = dateTime3.weekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withPeriodAdded(readablePeriod7, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(54);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plus(readablePeriod16);
        org.joda.time.DurationFieldType durationFieldType18 = null;
        boolean boolean19 = localDateTime17.isSupported(durationFieldType18);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        int int29 = fixedDateTimeZone24.getOffset((long) 780);
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) localDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 22, 28792840]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        int int2 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) -1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusDays(489);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        boolean boolean24 = dateTimeFieldType20.isSupported(chronology23);
        long long28 = chronology23.add((long) 184, 0L, 0);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfWeek();
        org.joda.time.DurationField durationField30 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField33 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 855 + "'", int2 == 855);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 42 + "'", int19 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 184L + "'", long28 == 184L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(374);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths((-1));
        int int12 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.plusYears(495);
        int int18 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate15);
        int int19 = localDate2.getYear();
        org.joda.time.LocalDate localDate21 = localDate2.minusWeeks(25822);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale7);
        java.util.Locale locale10 = dateTimeFormatter4.getLocale();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withZone(dateTimeZone11);
        java.lang.StringBuffer stringBuffer13 = null;
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        int int22 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusWeeks(100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) '4');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) -1);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withWeekyear(228);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMillis((-1));
        org.joda.time.DateTime dateTime41 = dateTime19.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime19.plus(readableDuration42);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer13, (org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514152901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=53,MILLISECOND=214,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 901 + "'", int22 == 901);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+35:00" + "'", str32, "+35:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+35:00" + "'", str33, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property20 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.plus(readablePeriod22);
        org.joda.time.LocalDate.Property property24 = localDate21.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 9, chronology3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 411);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays(234);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withTime(621, 11439, 5139591, 246);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 621 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 10);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Calendar.Builder builder10 = builder0.setDate(65458977, 495, 268);
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(65441750, 45, 930);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str19 = localTime18.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone25 = fixedDateTimeZone24.toTimeZone();
        int int27 = fixedDateTimeZone24.getOffset((long) 228);
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime29 = localTime18.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone34 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone35 = fixedDateTimeZone34.toTimeZone();
        int int37 = fixedDateTimeZone34.getOffset((long) 228);
        int int39 = fixedDateTimeZone34.getStandardOffset((long) 548);
        java.lang.String str41 = fixedDateTimeZone34.getNameKey(0L);
        org.joda.time.DateTime dateTime42 = dateTime29.withZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        java.util.TimeZone timeZone43 = fixedDateTimeZone34.toTimeZone();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone34);
        int int46 = fixedDateTimeZone34.getStandardOffset(16883017712432L);
        java.lang.String str48 = fixedDateTimeZone34.getNameKey(1645513904474L);
        long long51 = fixedDateTimeZone34.adjustOffset((long) 222, false);
        java.util.TimeZone timeZone52 = fixedDateTimeZone34.toTimeZone();
        java.util.Calendar.Builder builder53 = builder14.setTimeZone(timeZone52);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "00:00:00.910" + "'", str19, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str41, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 222L + "'", long51 == 222L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("25714150");
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Locale locale7 = new java.util.Locale("UTC", "fran\347ais");
        java.lang.String str8 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder9 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder11 = builder0.addUnicodeLocaleAttribute("25754969");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("\ub300\ub9cc");
        java.util.Locale.Builder builder14 = builder11.setLocale(locale13);
        java.util.Locale locale15 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder11.setLanguageTag("\u53f0\u6e7e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals(locale7.toString(), "utc_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English" + "'", str8, "English");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate2.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear(500);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(179);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 179 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(0L, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate6.toDateMidnight(dateTimeZone7);
        int[] intArray15 = new int[] { (-1), (short) 1, 2, 54, (byte) 0 };
        int[] intArray17 = dateTimeField2.add((org.joda.time.ReadablePartial) localDate6, 0, intArray15, 0);
        org.joda.time.LocalDate localDate19 = localDate6.withYear(913);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate19.plusWeeks(236);
        org.joda.time.DateMidnight dateMidnight24 = localDate19.toDateMidnight();
        org.joda.time.Chronology chronology25 = localDate19.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 2, 54, 0]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japan");
        java.util.Locale.Builder builder4 = builder3.clear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = fixedDateTimeZone9.getName(1009868913348L, locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        long long17 = dateTimeField15.remainder((long) (byte) 100);
        java.lang.String str18 = dateTimeField15.getName();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = locale20.getDisplayCountry();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = dateTimeField15.getAsShortText(2, locale20);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.lang.String str25 = locale11.getDisplayName(locale20);
        java.lang.String str26 = locale20.getLanguage();
        java.util.Locale.Builder builder27 = builder3.setLocale(locale20);
        java.lang.String str28 = locale20.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.059" + "'", str12, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United Kingdom" + "'", str21, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United Kingdom" + "'", str24, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GB" + "'", str28, "GB");
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.plus(readablePeriod10);
        org.joda.time.LocalDate localDate12 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(0L, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate16.plus(readablePeriod19);
        int int21 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate20.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra(100);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int31 = localDate29.indexOf(dateTimeFieldType30);
        int int32 = localDate25.indexOf(dateTimeFieldType30);
        int int33 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate25.dayOfWeek();
        org.joda.time.DateTime dateTime35 = localDate25.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        java.util.Date date8 = new java.util.Date(60, 18, 1, 541, 785);
        date8.setHours(908);
        date8.setDate(11);
        calendar2.setTime(date8);
        long long14 = calendar2.getTimeInMillis();
        calendar2.roll(12, 868);
        calendar2.setFirstDayOfWeek(936);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=de,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=936,minimalDaysInFirstWeek=4,ERA=1,YEAR=1961,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=229,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=33,SECOND=0,MILLISECOND=0,ZONE_OFFSET=313,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Aug 17 20:05:00 GMT+00:00 1961");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-264225300313L) + "'", long14 == (-264225300313L));
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekyear();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayCountry();
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale8.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField6.getAsShortText(744, locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale11.getUnicodeLocaleType("25948502");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 25948502");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "United Kingdom" + "'", str9, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (United Kingdom)" + "'", str13, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "744" + "'", str14, "744");
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(3);
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = fixedDateTimeZone15.getName(1009868913348L, locale17);
        java.util.TimeZone timeZone19 = fixedDateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.parse("2022-02-22T07:10:18.026+00:00:00.059", dateTimeFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.059" + "'", str18, "+00:00:00.059");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        org.joda.time.LocalTime localTime8 = localTime6.plusMinutes(187);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = durationFieldType11.isSupported(chronology12);
        boolean boolean14 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime10.withPeriodAdded(readablePeriod15, 28);
        int int18 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime10);
        java.lang.String str19 = localTime6.toString();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "11:52:10.000" + "'", str19, "11:52:10.000");
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        date1.setYear(228);
        int int4 = date1.getDay();
        int int5 = date1.getMinutes();
        date1.setYear(348);
        int int8 = date1.getTimezoneOffset();
        date1.setSeconds(339);
        int int11 = date1.getDate();
        java.util.Date date13 = new java.util.Date((long) (byte) 1);
        date13.setYear(228);
        int int16 = date13.getDay();
        int int17 = date13.getMinutes();
        date13.setYear(348);
        date13.setTime(35L);
        int int22 = date13.getTimezoneOffset();
        java.lang.String str23 = date13.toGMTString();
        long long24 = date13.getTime();
        boolean boolean25 = date1.after(date13);
        date1.setTime((long) 866);
        date1.setSeconds(673);
        date1.setHours(0);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:13 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str23, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withPeriodAdded(readablePeriod8, (int) '4');
        java.lang.String str11 = dateTime4.toString();
        org.joda.time.Chronology chronology12 = dateTime4.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 158, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfHour();
        long long21 = dateTimeField18.addWrapField((long) 2674, 72);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:10:53.440Z" + "'", str11, "2022-02-22T07:10:53.440Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 722674L + "'", long21 == 722674L);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("25714074");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = builder6.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder6.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology3 = null;
        boolean boolean4 = durationFieldType2.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withFieldAdded(durationFieldType2, 59);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (byte) 100);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMillis(113);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        int int14 = localDateTime13.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2081 + "'", int9 == 2081);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 81 + "'", int14 == 81);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        java.util.Date date3 = new java.util.Date((int) (short) 100, (int) (short) 100, 913);
        java.util.Date date5 = new java.util.Date((long) (byte) 1);
        int int6 = date5.getSeconds();
        java.lang.String str7 = date5.toGMTString();
        java.util.Date date8 = new java.util.Date();
        boolean boolean9 = date5.after(date8);
        date8.setSeconds(671);
        boolean boolean12 = date3.after(date8);
        int int13 = date3.getHours();
        java.util.Date date19 = new java.util.Date(8, 54, (int) ' ', (int) (short) 1, 54);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromDateFields(date19);
        boolean boolean21 = date3.after(date19);
        int int22 = date3.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Oct 30 00:00:00 GMT+00:00 2010");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str7, "1 Jan 1970 00:00:00 GMT");
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:26:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Aug 01 01:54:00 GMT+00:00 1912");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime3.plusDays(22);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = dateTime11.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime11.plusWeeks(836);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(25851871);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, (int) (short) 1, 99);
        int int4 = date3.getHours();
        int int5 = date3.getMonth();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromDateFields(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue May 09 00:00:00 GMT+00:00 2000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(100);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(374);
        int int12 = localDateTime9.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readableDuration18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withTime((int) (short) 0, (int) ' ', 12, 374);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean11 = localDateTime9.isSupported(durationFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withWeekOfWeekyear(334);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 334 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate10.plus(readablePeriod13);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.LocalDate localDate18 = property16.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate2.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateMidnight dateMidnight20 = localDate2.toDateMidnight();
        org.joda.time.LocalDate.Property property21 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        boolean boolean24 = dateTimeField23.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate15 = localDate5.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        int int24 = dateTimeField22.getMinimumValue((long) (short) 10);
        java.lang.String str25 = dateTimeField22.toString();
        long long27 = dateTimeField22.roundCeiling((long) 960);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str25, "DateTimeField[weekyearOfCentury]");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31536000000L + "'", long27 == 31536000000L);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        long long6 = java.util.Date.UTC(25802895, 737, 870, 240, 930, 26048);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 814260524136248000L + "'", long6 == 814260524136248000L);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset((long) 228);
        java.lang.String str9 = fixedDateTimeZone4.getShortName((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes(548);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFieldAdded(durationFieldType16, 6);
        boolean boolean19 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = fixedDateTimeZone4.getNameKey((long) 184);
        int int23 = fixedDateTimeZone4.getOffsetFromLocal((long) (short) 0);
        int int25 = fixedDateTimeZone4.getOffsetFromLocal(1645513815926L);
        long long28 = fixedDateTimeZone4.convertLocalToUTC((long) 489, true);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.lang.String str32 = locale30.getISO3Language();
        java.lang.String str33 = fixedDateTimeZone4.getName((long) 550, locale30);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.059" + "'", str9, "+00:00:00.059");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str21, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 430L + "'", long28 == 430L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deu" + "'", str32, "deu");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.059" + "'", str33, "+00:00:00.059");
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(52);
        int int7 = localTime6.size();
        int int8 = localTime6.getHourOfDay();
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addWrapFieldToCopy(53);
        java.lang.String str12 = property9.getName();
        int int13 = property9.getMinimumValue();
        org.joda.time.LocalTime localTime14 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property9.addCopy(211);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime19 = localTime16.minusMinutes(286);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours(483);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(12);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        boolean boolean4 = localTime0.isSupported(durationFieldType3);
        java.util.Date date6 = new java.util.Date((long) (byte) 0);
        int int7 = date6.getHours();
        date6.setYear(9);
        boolean boolean10 = localTime0.equals((java.lang.Object) date6);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 910);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("1970-01-01T00:00:00.000Z", "1970-01-01T00:00:00.000Z", 59, (int) (short) 1);
        java.util.TimeZone timeZone19 = fixedDateTimeZone18.toTimeZone();
        int int21 = fixedDateTimeZone18.getOffset((long) 228);
        boolean boolean22 = fixedDateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime23 = localTime12.toDateTimeToday((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        boolean boolean24 = localTime0.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime.Property property25 = localTime12.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime28 = localTime12.withPeriodAdded(readablePeriod26, 28);
        org.joda.time.LocalTime localTime30 = localTime28.plusSeconds(489);
        int int31 = localTime28.getMillisOfSecond();
        org.joda.time.LocalTime.Property property32 = localTime28.hourOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.910" + "'", str13, "00:00:00.910");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 910 + "'", int31 == 910);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator2 = charSet1.spliterator();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = charSet1.contains((java.lang.Object) durationFieldType3);
        java.util.Spliterator<java.lang.Character> charSpliterator5 = charSet1.spliterator();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder10 = builder6.setRegion("");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(0L, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(0L, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate21.plus(readablePeriod24);
        org.joda.time.LocalDate localDate26 = localDate18.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = locale31.getDisplayCountry();
        java.util.Calendar.Builder builder33 = builder30.setLocale(locale31);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder35 = builder33.setLocale(locale34);
        java.lang.String str36 = dateTimeField28.getAsText(2, locale34);
        java.util.Locale.Builder builder37 = builder13.setLocale(locale34);
        java.util.Locale locale38 = builder37.build();
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale39.getDisplayLanguage(locale42);
        java.util.Locale.Builder builder45 = builder37.setLocale(locale42);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder46.clearExtensions();
        java.util.Locale.Builder builder48 = builder46.clear();
        java.util.Locale.Builder builder49 = builder46.clear();
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder52.addUnicodeLocaleAttribute("Japan");
        java.util.Locale.Builder builder55 = builder54.clear();
        java.util.Locale locale56 = builder54.build();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale locale58 = builder57.build();
        java.util.Locale.Builder builder60 = builder57.removeUnicodeLocaleAttribute("25714150");
        java.util.Locale.Builder[] builderArray61 = new java.util.Locale.Builder[] { builder10, builder37, builder49, builder54, builder60 };
        java.util.Locale.Builder[] builderArray62 = charSet1.toArray(builderArray61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int66 = localDate64.indexOf(dateTimeFieldType65);
        org.joda.time.LocalDate.Property property67 = localDate64.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDate.Property property69 = localDate64.property(dateTimeFieldType68);
        org.joda.time.LocalDate.Property property70 = localDate64.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate64.plus(readablePeriod71);
        org.joda.time.DateTime dateTime73 = localDate64.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        boolean boolean75 = charSet1.contains((java.lang.Object) property74);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charSpliterator2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charSpliterator5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "United Kingdom" + "'", str40, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "United Kingdom" + "'", str43, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English" + "'", str44, "English");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builderArray61);
        org.junit.Assert.assertNotNull(builderArray62);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(11, 0, (int) (short) 10, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        org.joda.time.LocalTime localTime12 = localTime8.plusSeconds(1000);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        int int9 = dateTimeZone7.getOffsetFromLocal((long) 25757955);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(10);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears(22);
        org.joda.time.DateTime.Property property19 = dateTime13.era();
        org.joda.time.DateTime.Property property20 = dateTime13.secondOfMinute();
        org.joda.time.DateTime.Property property21 = dateTime13.yearOfCentury();
        java.util.GregorianCalendar gregorianCalendar22 = dateTime13.toGregorianCalendar();
        boolean boolean23 = dateTimeZone7.equals((java.lang.Object) gregorianCalendar22);
        gregorianCalendar22.clear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(10);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.plus(readablePeriod7);
        org.joda.time.DateTime dateTime9 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime3.plus(readablePeriod10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMillis(25844489);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTime dateTime1 = localDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfMinute();
        long long10 = chronology2.add((long) 2081, (long) 187, 573);
        java.lang.String str11 = chronology2.toString();
        org.joda.time.DurationField durationField12 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology2.yearOfCentury();
        int int15 = dateTimeField13.getLeapAmount(0L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 109232L + "'", long10 == 109232L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }
}

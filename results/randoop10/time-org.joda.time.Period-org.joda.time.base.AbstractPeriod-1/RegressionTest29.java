import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        boolean boolean4 = minutes2.isLessThan(minutes3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType6 = minutes5.getPeriodType();
        int int7 = minutes5.getMinutes();
        java.lang.String str8 = minutes5.toString();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = minutes9.getFieldType();
        java.lang.String str11 = minutes9.toString();
        boolean boolean12 = minutes5.isLessThan(minutes9);
        int int13 = minutes5.size();
        org.joda.time.Minutes minutes14 = minutes2.plus(minutes5);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        boolean boolean17 = minutes15.isLessThan(minutes16);
        org.joda.time.Minutes minutes19 = minutes16.multipliedBy((int) (short) 10);
        org.joda.time.Minutes minutes20 = minutes5.plus(minutes19);
        org.joda.time.Minutes minutes22 = minutes19.plus((-2147483638));
        org.joda.time.Minutes minutes23 = minutes1.plus(minutes22);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0M" + "'", str8, "PT0M");
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-2147483648M" + "'", str11, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter6.getParser();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours10 = hours8.minus(0);
        org.joda.time.Hours hours11 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours13 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean14 = hours11.isGreaterThan(hours13);
        boolean boolean15 = hours10.isLessThan(hours13);
        java.lang.String str16 = hours10.toString();
        org.joda.time.Hours hours18 = hours10.dividedBy((int) (short) 10);
        org.joda.time.PeriodType periodType19 = hours18.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter6.withParseType(periodType20);
        org.joda.time.PeriodType periodType22 = periodFormatter21.getParseType();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT4H" + "'", str16, "PT4H");
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.format.PeriodFormatter periodFormatter3 = null;
        java.lang.String str4 = mutablePeriod2.toString(periodFormatter3);
        int int5 = mutablePeriod2.getMillis();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.secondsIn(readableInterval6);
        int int8 = seconds7.getSeconds();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) seconds7);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod2.copy();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutablePeriod2.setPeriod(readableInstant11, readableInstant12);
        int int14 = mutablePeriod2.getHours();
        mutablePeriod2.addWeeks(0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((-3600L), (-1L), chronology2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100000L);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant3);
        org.joda.time.Period period6 = period4.plusMinutes(35);
        org.joda.time.Period period8 = period6.withSeconds((-59));
        org.joda.time.Period period10 = period8.minusYears(135);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1666L + "'", long2 == 1666L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str4 = duration3.toString();
        org.joda.time.Duration duration6 = duration3.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType9);
        int int13 = period12.getHours();
        org.joda.time.Period period15 = period12.withMinutes((-302));
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT600S" + "'", str4, "PT600S");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod2.setPeriod(1666L, (long) 8384459, chronology11);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale14);
        boolean boolean16 = periodFormatter2.isParser();
        java.io.Writer writer17 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(540000L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        mutablePeriod19.setPeriod(readableInstant20, readableInstant21);
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod19.setPeriod((long) 600, chronology24);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) 0, periodType27, chronology28);
        mutablePeriod29.setMonths((int) (byte) 100);
        int int32 = mutablePeriod29.getYears();
        mutablePeriod29.setPeriod((long) (-32));
        int[] intArray35 = mutablePeriod29.getValues();
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Duration duration38 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        long long42 = duration38.getMillis();
        org.joda.time.Chronology chronology43 = null;
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration38, chronology43);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer17, (org.joda.time.ReadablePeriod) mutablePeriod19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.joda.time.Period period8 = new org.joda.time.Period(32, 32, (int) (short) 0, (int) '4', (int) (short) 1, 1, 100, 1);
        org.joda.time.Period period10 = period8.minusDays((int) (short) -1);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT0.032S");
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Hours hours3 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period2);
        java.lang.String str4 = hours3.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0H" + "'", str4, "PT0H");
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        long long6 = duration5.getStandardDays();
        org.joda.time.Hours hours7 = duration5.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType8 = hours7.getFieldType();
        mutablePeriod2.add(durationFieldType8, (-1));
        mutablePeriod2.setPeriod((int) ' ', (int) (short) -1, (int) (short) 0, (-2147483648), 54, 600, (int) (byte) 0, (int) (byte) -1);
        mutablePeriod2.setPeriod((long) 'a', 194400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.minus(10);
        boolean boolean7 = days1.isGreaterThan(days4);
        org.joda.time.Days days8 = days0.minus(days1);
        org.joda.time.Days days10 = days8.dividedBy((int) (byte) 1);
        org.joda.time.Duration duration11 = days8.toStandardDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-160), (-515), (-87), (-2));
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (-32), (long) 32, periodType2);
        mutablePeriod4.addMillis((int) '4');
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.joda.time.Period period4 = new org.joda.time.Period(15120008, 160, (-4), (-97));
        org.joda.time.Period period6 = period4.withHours(688);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        boolean boolean12 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType15 = periodType14.withMinutesRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant13, periodType14);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant5, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period19 = duration10.toPeriod(periodType18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant21, readableDuration22);
        mutablePeriod23.setHours((int) (short) 100);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration27, chronology28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant20, (org.joda.time.ReadableDuration) duration27, periodType31);
        org.joda.time.Period period34 = duration10.toPeriod(periodType31);
        org.joda.time.format.PeriodFormatter periodFormatter35 = periodFormatter3.withParseType(periodType31);
        java.util.Locale locale36 = null;
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter3.withLocale(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period38 = org.joda.time.Period.parse("PT92S", periodFormatter37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodFormatter35);
        org.junit.Assert.assertNotNull(periodFormatter37);
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
        mutablePeriod10.setHours((int) (short) 100);
        boolean boolean13 = periodType7.equals((java.lang.Object) mutablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType7, chronology14);
        boolean boolean16 = duration1.isEqual((org.joda.time.ReadableDuration) duration3);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration3.toIntervalTo(readableInstant19);
        org.joda.time.Days days21 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval20);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        mutablePeriod4.setHours((int) (short) 100);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration8, chronology9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType14 = seconds13.getFieldType();
        mutablePeriod4.add(durationFieldType14, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant17, readableDuration18);
        mutablePeriod19.setHours((int) (short) 100);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration23, chronology24);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration23, chronology26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType31 = seconds30.getFieldType();
        org.joda.time.Seconds seconds33 = seconds30.plus(25);
        org.joda.time.Seconds seconds34 = seconds30.negated();
        org.joda.time.PeriodType periodType35 = seconds34.getPeriodType();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration23.toPeriod(periodType35, chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType35);
        int int39 = period38.getWeeks();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
        mutablePeriod3.setHours((int) (short) 100);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration7, periodType11);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.ZERO;
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) ' ');
        boolean boolean19 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration18, chronology20);
        java.lang.String str22 = duration18.toString();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) '#', 0L);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.PeriodType periodType28 = seconds27.getPeriodType();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.Period period30 = duration18.toPeriodFrom(readableInstant23, periodType29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.millis(60000L);
        boolean boolean33 = duration18.isEqual((org.joda.time.ReadableDuration) duration32);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.033S" + "'", str22, "PT0.033S");
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        java.lang.String str3 = seconds0.toString();
        org.joda.time.Seconds seconds4 = null;
        org.joda.time.Seconds seconds5 = seconds0.minus(seconds4);
        org.joda.time.Seconds seconds7 = seconds5.plus((-672));
        org.joda.time.Seconds seconds8 = seconds7.negated();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) seconds7);
        org.joda.time.Seconds seconds11 = seconds7.dividedBy((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant14, readableDuration15);
        mutablePeriod16.setPeriod((long) ' ', (long) 52);
        mutablePeriod16.addDays(100);
        org.joda.time.PeriodType periodType22 = mutablePeriod16.getPeriodType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(10L, (long) 13, periodType22, chronology23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType26 = seconds25.getFieldType();
        boolean boolean27 = periodType22.isSupported(durationFieldType26);
        boolean boolean28 = seconds11.isSupported(durationFieldType26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant29, readableDuration30);
        org.joda.time.Period period32 = mutablePeriod31.toPeriod();
        org.joda.time.Period period34 = period32.withHours(0);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = period32.indexOf(durationFieldType35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Seconds seconds40 = duration38.toStandardSeconds();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds43 = duration42.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType44 = seconds43.getFieldType();
        org.joda.time.Seconds seconds46 = seconds43.plus(25);
        boolean boolean47 = seconds40.isLessThan(seconds46);
        org.joda.time.Seconds seconds48 = seconds46.negated();
        org.joda.time.Duration duration49 = seconds46.toStandardDuration();
        org.joda.time.Seconds seconds50 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.PeriodType periodType51 = seconds50.getPeriodType();
        boolean boolean52 = seconds46.isLessThan(seconds50);
        int int53 = seconds50.getSeconds();
        org.joda.time.Period period54 = period32.withFields((org.joda.time.ReadablePeriod) seconds50);
        org.joda.time.Period period55 = seconds50.toPeriod();
        org.joda.time.Seconds seconds56 = seconds11.plus(seconds50);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(seconds56);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 0, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DurationField durationField5 = durationFieldType3.getField(chronology4);
        boolean boolean6 = mutablePeriod2.isSupported(durationFieldType3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = mutablePeriod2.toDurationFrom(readableInstant7);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) '#', 54, (-32), 32);
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours(25);
        org.joda.time.DurationFieldType durationFieldType7 = hours6.getFieldType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        long long9 = duration8.getStandardDays();
        org.joda.time.Hours hours10 = duration8.toStandardHours();
        boolean boolean11 = hours6.isLessThan(hours10);
        org.joda.time.Hours hours13 = hours6.dividedBy((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = hours6.getFieldType();
        int int15 = mutablePeriod4.get(durationFieldType14);
        int int16 = mutablePeriod4.getMonths();
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.minus(0);
        org.joda.time.Hours hours3 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean6 = hours3.isGreaterThan(hours5);
        boolean boolean7 = hours2.isLessThan(hours5);
        java.lang.String str8 = hours2.toString();
        org.joda.time.Hours hours10 = hours2.dividedBy((int) (short) 10);
        org.joda.time.Hours hours12 = hours2.multipliedBy(6);
        org.joda.time.Duration duration13 = hours12.toStandardDuration();
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        long long15 = duration14.getStandardDays();
        org.joda.time.Hours hours16 = duration14.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType17 = hours16.getFieldType();
        org.joda.time.Hours hours18 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours20 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean21 = hours18.isGreaterThan(hours20);
        org.joda.time.Hours hours23 = hours18.minus((int) (byte) 0);
        org.joda.time.Hours hours24 = hours16.minus(hours18);
        int int25 = hours24.size();
        org.joda.time.Hours hours27 = hours24.dividedBy(35);
        org.joda.time.Hours hours29 = hours24.plus(1);
        boolean boolean30 = duration13.equals((java.lang.Object) hours29);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = hours29.getValue(160);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 160");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT4H" + "'", str8, "PT4H");
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = period6.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withYearsRemoved();
        org.joda.time.Period period14 = duration1.toPeriodTo(readableInstant2, periodType13);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = days15.toPeriod();
        org.joda.time.Period period18 = period16.plusHours((int) (byte) 1);
        int int19 = period18.getHours();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (short) 1, (long) 2147483647, periodType2, chronology3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.joda.time.Seconds seconds10 = seconds7.dividedBy(3);
        org.joda.time.Seconds seconds12 = seconds7.minus((int) (short) 0);
        org.joda.time.Period period13 = period4.minus((org.joda.time.ReadablePeriod) seconds12);
        org.joda.time.Duration duration14 = period13.toStandardDuration();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str17 = duration16.toString();
        boolean boolean19 = duration16.equals((java.lang.Object) 100.0d);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.format.PeriodPrinter periodPrinter21 = null;
        org.joda.time.format.PeriodParser periodParser22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = new org.joda.time.format.PeriodFormatter(periodPrinter21, periodParser22);
        org.joda.time.format.PeriodParser periodParser24 = periodFormatter23.getParser();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType28 = seconds27.getFieldType();
        org.joda.time.Seconds seconds30 = seconds27.plus(25);
        org.joda.time.Seconds seconds31 = seconds27.negated();
        org.joda.time.PeriodType periodType32 = seconds31.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter23.withParseType(periodType32);
        org.joda.time.PeriodType periodType34 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        org.joda.time.Period period36 = duration16.toPeriodFrom(readableInstant20, periodType35);
        org.joda.time.PeriodType periodType37 = periodType35.withYearsRemoved();
        org.joda.time.Period period38 = period13.normalizedStandard(periodType37);
        int int39 = period38.getHours();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT600S" + "'", str17, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(periodParser24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = duration1.toIntervalFrom(readableInstant6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Period period3 = duration1.toPeriod();
        org.joda.time.Period period5 = period3.withMillis(27);
        org.joda.time.Period period7 = period5.withWeeks(194);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = period7.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours4 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean7 = hours4.isGreaterThan(hours6);
        org.joda.time.Hours hours9 = hours4.minus((int) (byte) 0);
        org.joda.time.Hours hours10 = hours2.minus(hours4);
        int int11 = hours10.size();
        org.joda.time.Hours hours13 = hours10.dividedBy(35);
        org.joda.time.Hours hours15 = hours10.plus(1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withDaysRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType20);
        org.joda.time.Hours hours22 = period21.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType23 = hours22.getFieldType();
        org.joda.time.Hours hours25 = hours22.minus(0);
        boolean boolean26 = hours15.isGreaterThan(hours22);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration18, chronology19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType24 = seconds23.getFieldType();
        mutablePeriod14.add(durationFieldType24, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
        mutablePeriod29.setHours((int) (short) 100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33, chronology34);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration33, chronology36);
        int int38 = duration5.compareTo((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration39 = duration33.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant41);
        org.joda.time.Duration duration44 = duration39.minus((long) (-1));
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration44);
        java.lang.String str46 = mutablePeriod45.toString();
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod45.setPeriod((long) 671, chronology48);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M0.001S" + "'", str46, "PT1M0.001S");
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((-31535940000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = periodType3.indexOf(durationFieldType4);
        org.joda.time.PeriodType periodType6 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType3.withDaysRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, 864000000L);
        org.joda.time.Period period13 = period11.minusHours(5);
        org.joda.time.Period period15 = period13.plusMonths((-160));
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType17 = periodType16.withMinutesRemoved();
        org.joda.time.PeriodType periodType18 = periodType16.withYearsRemoved();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration20.toPeriod(periodType21, chronology23);
        org.joda.time.Days days25 = org.joda.time.Days.ZERO;
        int int26 = days25.getDays();
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        boolean boolean34 = days29.isGreaterThan(days32);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Days days38 = days32.minus(days37);
        org.joda.time.Days days39 = days25.minus(days32);
        boolean boolean40 = duration20.equals((java.lang.Object) days32);
        org.joda.time.DurationFieldType durationFieldType41 = days32.getFieldType();
        boolean boolean42 = periodType16.isSupported(durationFieldType41);
        org.joda.time.PeriodType periodType43 = periodType16.withDaysRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period47 = period45.withHours(32);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = durationFieldType48.isSupported(chronology49);
        boolean boolean51 = period45.isSupported(durationFieldType48);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Period period53 = period45.minus(readablePeriod52);
        org.joda.time.Period period55 = period45.multipliedBy((int) (short) 0);
        org.joda.time.Period period57 = period45.minusHours((-2147483648));
        org.joda.time.Period period59 = period45.plusMinutes((-32));
        org.joda.time.DurationFieldType durationFieldType61 = period45.getFieldType(6);
        boolean boolean62 = periodType43.isSupported(durationFieldType61);
        int int63 = period13.get(durationFieldType61);
        org.joda.time.Chronology chronology64 = null;
        boolean boolean65 = durationFieldType61.isSupported(chronology64);
        int int66 = periodType8.indexOf(durationFieldType61);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
        mutablePeriod7.setPeriod((long) ' ', (long) 52);
        mutablePeriod7.addDays(100);
        org.joda.time.PeriodType periodType13 = mutablePeriod7.getPeriodType();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 0, periodType13);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType13);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType13);
        org.joda.time.Period period18 = period16.plusMonths(13);
        org.joda.time.Duration duration19 = period16.toStandardDuration();
        org.joda.time.Period period20 = period16.negated();
        org.joda.time.Minutes minutes21 = period20.toStandardMinutes();
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy(100);
        org.joda.time.Period period24 = minutes23.toPeriod();
        int int25 = period24.getWeeks();
        int[] intArray26 = period24.getValues();
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(50);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 2147483647);
        int int2 = period1.getYears();
        org.joda.time.Period period3 = period1.toPeriod();
        org.joda.time.Period period5 = period1.minusMinutes(5);
        org.joda.time.Period period7 = period5.minusMonths((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours8 = period7.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Hours as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(3, 35, 100, 25);
        mutablePeriod4.add((long) (-160));
        mutablePeriod4.add(0L);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = mutablePeriod4.getValue((-87));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -87");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant6, readableDuration7);
        mutablePeriod8.setHours((int) (short) 100);
        boolean boolean11 = periodType5.equals((java.lang.Object) mutablePeriod8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        long long13 = duration12.getStandardDays();
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withDaysRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant15, periodType17);
        java.lang.String str20 = periodType17.getName();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) 0, periodType17, chronology23);
        int int25 = mutablePeriod24.getMillis();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Millis" + "'", str20, "Millis");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(59L, chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = mutablePeriod2.toDurationFrom(readableInstant3);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT1S");
        org.joda.time.Chronology chronology3 = null;
        mutablePeriod1.setPeriod((long) (-2147483638), chronology3);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusMillis((int) ' ');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Minutes minutes12 = minutes10.minus((int) '4');
        org.joda.time.Minutes minutes13 = minutes0.plus(minutes12);
        java.lang.String str14 = minutes13.toString();
        org.joda.time.Minutes minutes16 = minutes13.dividedBy(32);
        org.joda.time.Duration duration17 = minutes13.toStandardDuration();
        long long18 = duration17.getMillis();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT-52M" + "'", str14, "PT-52M");
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3120000L) + "'", long18 == (-3120000L));
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        java.lang.String str4 = seconds3.toString();
        org.joda.time.PeriodType periodType5 = seconds3.getPeriodType();
        org.joda.time.PeriodType periodType6 = seconds3.getPeriodType();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration8);
        boolean boolean12 = periodType6.equals((java.lang.Object) duration8);
        org.joda.time.PeriodType periodType13 = periodType6.withMonthsRemoved();
        org.joda.time.PeriodType periodType14 = periodType6.withWeeksRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 74, periodType14);
        int int16 = period15.getDays();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT60S" + "'", str4, "PT60S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-4));
        org.joda.time.Hours hours3 = org.joda.time.Hours.hours(2);
        org.joda.time.Duration duration4 = hours3.toStandardDuration();
        org.joda.time.Hours hours5 = hours1.plus(hours3);
        org.joda.time.Hours hours7 = hours5.plus(15120008);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        int int7 = days6.getDays();
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        boolean boolean15 = days10.isGreaterThan(days13);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days19 = days13.minus(days18);
        org.joda.time.Days days20 = days6.minus(days13);
        boolean boolean21 = duration1.equals((java.lang.Object) days13);
        org.joda.time.DurationFieldType durationFieldType22 = days13.getFieldType();
        org.joda.time.Duration duration23 = days13.toStandardDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(172800000L, (long) 42, chronology2);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Interval interval3 = duration0.toIntervalFrom(readableInstant2);
        org.joda.time.Duration duration4 = duration0.toDuration();
        java.lang.String str5 = duration4.toString();
        org.joda.time.Minutes minutes6 = duration4.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withMonthsRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(600L, periodType4, chronology5);
        org.joda.time.PeriodType periodType7 = periodType4.withSecondsRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (-141), periodType7, chronology8);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setPeriod((long) ' ', (long) 52);
        mutablePeriod18.addDays(100);
        org.joda.time.PeriodType periodType24 = mutablePeriod18.getPeriodType();
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) 0, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant13, readableInstant14, periodType24);
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType24);
        org.joda.time.Period period29 = period27.plusMonths(13);
        org.joda.time.Duration duration30 = period27.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration30.toIntervalFrom(readableInstant31);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        boolean boolean8 = minutes6.isLessThan(minutes7);
        boolean boolean9 = minutes2.isLessThan(minutes6);
        org.joda.time.Duration duration10 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes12 = minutes2.dividedBy((int) (short) 100);
        org.joda.time.PeriodType periodType13 = minutes2.getPeriodType();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (-1), 600000L, periodType13, chronology15);
        org.joda.time.PeriodType periodType17 = periodType13.withMinutesRemoved();
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withMinutesRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant14, periodType15);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableDuration19);
        mutablePeriod20.setHours((int) (short) 100);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType30 = seconds29.getFieldType();
        mutablePeriod20.add(durationFieldType30, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant33, readableDuration34);
        mutablePeriod35.setHours((int) (short) 100);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration39, chronology40);
        org.joda.time.Chronology chronology42 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration39, chronology42);
        int int44 = duration11.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period45 = duration39.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds48 = duration47.toStandardSeconds();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        boolean boolean52 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds55 = duration54.toStandardSeconds();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds58 = duration57.toStandardSeconds();
        boolean boolean59 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period60 = duration54.toPeriod();
        boolean boolean61 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = duration50.toPeriodTo(readableInstant62);
        long long64 = duration50.getStandardDays();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period67 = duration66.toPeriod();
        long long68 = duration66.getStandardSeconds();
        boolean boolean69 = duration50.isEqual((org.joda.time.ReadableDuration) duration66);
        int int70 = duration39.compareTo((org.joda.time.ReadableDuration) duration50);
        int int71 = duration6.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Seconds seconds72 = duration6.toStandardSeconds();
        org.joda.time.PeriodType periodType73 = seconds72.getPeriodType();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period76 = duration75.toPeriod();
        org.joda.time.Seconds seconds77 = duration75.toStandardSeconds();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds80 = duration79.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType81 = seconds80.getFieldType();
        org.joda.time.Seconds seconds83 = seconds80.plus(25);
        boolean boolean84 = seconds77.isLessThan(seconds83);
        org.joda.time.Seconds seconds85 = seconds83.negated();
        org.joda.time.Duration duration86 = seconds83.toStandardDuration();
        org.joda.time.Seconds seconds87 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.PeriodType periodType88 = seconds87.getPeriodType();
        boolean boolean89 = seconds83.isLessThan(seconds87);
        int int90 = seconds87.getSeconds();
        boolean boolean91 = seconds72.isLessThan(seconds87);
        org.joda.time.PeriodType periodType92 = seconds87.getPeriodType();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-60L) + "'", long68 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(seconds80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(seconds83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(seconds85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(seconds87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        int int5 = mutablePeriod2.getYears();
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.add(1L, chronology7);
        mutablePeriod2.setDays((-2147483648));
        int int11 = mutablePeriod2.getSeconds();
        mutablePeriod2.setMillis(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        boolean boolean27 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period28 = duration22.toPeriod();
        boolean boolean29 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = duration18.toPeriodTo(readableInstant30);
        long long32 = duration18.getStandardDays();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period35 = duration34.toPeriod();
        long long36 = duration34.getStandardSeconds();
        boolean boolean37 = duration18.isEqual((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str40 = duration39.toString();
        org.joda.time.Duration duration42 = duration39.minus((long) (byte) 10);
        boolean boolean43 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration42.toIntervalTo(readableInstant44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration48.toPeriod(periodType49, chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType55 = periodType54.withMonthsRemoved();
        org.joda.time.Period period56 = duration48.toPeriodTo(readableInstant53, periodType55);
        org.joda.time.Duration duration57 = duration48.toDuration();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType63 = periodType62.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration60, readableInstant61, periodType62);
        org.joda.time.Period period65 = new org.joda.time.Period(readableInstant58, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration66 = duration48.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(readableInstant46, (org.joda.time.ReadableDuration) duration60);
        int int68 = duration42.compareTo((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((java.lang.Object) duration60);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration60);
        org.joda.time.MutablePeriod mutablePeriod71 = mutablePeriod2.toMutablePeriod();
        org.joda.time.Seconds seconds73 = org.joda.time.Seconds.seconds((int) (short) 0);
        boolean boolean74 = mutablePeriod71.equals((java.lang.Object) (short) 0);
        mutablePeriod71.addYears((int) ' ');
        mutablePeriod71.setDays(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60L) + "'", long36 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT600S" + "'", str40, "PT600S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(seconds73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = period1.withSeconds((int) ' ');
        java.lang.String str5 = period1.toString();
        int int6 = period1.getMinutes();
        org.joda.time.Period period7 = period1.toPeriod();
        org.joda.time.Period period9 = period7.plusMonths(0);
        org.joda.time.Period period11 = period9.withYears((int) (short) 0);
        org.joda.time.Period period13 = period11.multipliedBy((int) (short) 10);
        org.joda.time.Period period14 = period11.toPeriod();
        org.joda.time.Period period16 = period11.minusWeeks((-20));
        org.joda.time.Period period18 = period16.minusDays(23);
        int int19 = period16.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-31));
        org.joda.time.Seconds seconds3 = seconds1.plus(30);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter4.getParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter4.withLocale(locale6);
        java.util.Locale locale8 = periodFormatter4.getLocale();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter4.withLocale(locale9);
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatter4.getPrinter();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter4.getParser();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, readableDuration14);
        org.joda.time.Period period16 = mutablePeriod15.toPeriod();
        int int17 = period16.size();
        org.joda.time.Period period19 = period16.plusDays(1);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period21 = period16.withFields((org.joda.time.ReadablePeriod) minutes20);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType25 = minutes24.getPeriodType();
        int int26 = minutes24.getMinutes();
        java.lang.String str27 = minutes24.toString();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = minutes28.getFieldType();
        java.lang.String str30 = minutes28.toString();
        boolean boolean31 = minutes24.isLessThan(minutes28);
        org.joda.time.Minutes minutes32 = minutes24.negated();
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes36 = minutes34.dividedBy((int) '#');
        org.joda.time.Minutes minutes37 = minutes24.minus(minutes34);
        boolean boolean38 = minutes23.isGreaterThan(minutes34);
        org.joda.time.Minutes minutes39 = minutes20.minus(minutes34);
        org.joda.time.Duration duration40 = minutes20.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType46 = periodType45.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (-1), periodType46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(10L, (long) 8, periodType46, chronology48);
        org.joda.time.PeriodType periodType50 = mutablePeriod49.getPeriodType();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType50);
        org.joda.time.PeriodType periodType53 = periodType50.withMillisRemoved();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((java.lang.Object) periodParser12, periodType50, chronology54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(4320L, (long) (byte) 0, periodType50);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNull(periodPrinter11);
        org.junit.Assert.assertNull(periodParser12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0M" + "'", str27, "PT0M");
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT-2147483648M" + "'", str30, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType53);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Period period2 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Days days5 = days3.minus(10);
        boolean boolean6 = days0.isGreaterThan(days3);
        org.joda.time.Days days8 = days3.multipliedBy((int) '4');
        org.joda.time.Period period10 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        boolean boolean16 = days11.isGreaterThan(days14);
        int int17 = days11.size();
        org.joda.time.Days days18 = days11.negated();
        org.joda.time.Days days20 = days18.minus(3);
        org.joda.time.Days days21 = org.joda.time.Days.ZERO;
        int int22 = days21.getDays();
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType29 = days28.getPeriodType();
        boolean boolean30 = days25.isGreaterThan(days28);
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Days days34 = days28.minus(days33);
        org.joda.time.Days days35 = days21.minus(days28);
        org.joda.time.Days days37 = days28.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType39 = days37.getFieldType((int) (short) 0);
        boolean boolean40 = days20.isLessThan(days37);
        org.joda.time.Days days41 = org.joda.time.Days.ZERO;
        org.joda.time.Period period43 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Days days46 = days44.minus(10);
        boolean boolean47 = days41.isGreaterThan(days44);
        boolean boolean48 = days20.isGreaterThan(days44);
        org.joda.time.DurationFieldType durationFieldType49 = days20.getFieldType();
        org.joda.time.PeriodType periodType50 = days20.getPeriodType();
        org.joda.time.Days days52 = days20.dividedBy(20);
        org.joda.time.Days days53 = days3.minus(days20);
        org.joda.time.PeriodType periodType54 = days20.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        int int12 = days5.size();
        org.joda.time.Days days13 = org.joda.time.Days.ZERO;
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Days days18 = days16.minus(10);
        boolean boolean19 = days13.isGreaterThan(days16);
        org.joda.time.Days days20 = days5.minus(days16);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType22 = days20.getFieldType();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) days20, periodType23, chronology24);
        org.joda.time.Period period27 = period25.minusDays((int) (short) -1);
        org.joda.time.Period period29 = period25.plusMillis(0);
        org.joda.time.Period period31 = period25.withMinutes(54);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        org.joda.time.Period period7 = period4.normalizedStandard();
        java.lang.String str8 = period7.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period10 = period7.normalizedStandard(periodType9);
        org.joda.time.Period period12 = period7.minusHours(3);
        int int13 = period12.getYears();
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period12.withSeconds((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Period period20 = period16.plusMillis((int) '#');
        org.joda.time.Period period21 = period16.normalizedStandard();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.052S" + "'", str8, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.joda.time.Days days4 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) days4, periodType5, chronology6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 52, periodType5);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 7, (-60L), periodType5);
        org.joda.time.PeriodType periodType10 = periodType5.withDaysRemoved();
        java.lang.String str11 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 23, periodType5);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod12.copy();
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "YearMonthDay" + "'", str11, "YearMonthDay");
        org.junit.Assert.assertNotNull(mutablePeriod13);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.joda.time.Period period4 = new org.joda.time.Period((int) '4', 32, (int) '#', 3);
        org.joda.time.Period period5 = period4.negated();
        org.joda.time.Period period7 = period4.withYears((int) (short) 10);
        org.joda.time.Period period9 = period4.plusYears(96);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalTo(readableInstant7);
        long long9 = duration4.getStandardMinutes();
        long long10 = duration4.getMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.millis((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration12.toPeriodTo(readableInstant13);
        org.joda.time.Duration duration15 = duration4.plus((org.joda.time.ReadableDuration) duration12);
        long long16 = duration12.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType1 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        mutablePeriod3.addMillis((int) (byte) 0);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType8 = minutes7.getPeriodType();
        int int9 = minutes7.getMinutes();
        java.lang.String str10 = minutes7.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType12 = minutes11.getFieldType();
        java.lang.String str13 = minutes11.toString();
        boolean boolean14 = minutes7.isLessThan(minutes11);
        int int15 = minutes7.size();
        org.joda.time.Minutes minutes16 = minutes7.negated();
        org.joda.time.Minutes minutes18 = minutes7.plus(97);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes22 = minutes20.dividedBy((int) '#');
        boolean boolean23 = minutes18.isLessThan(minutes20);
        boolean boolean24 = minutes0.isLessThan(minutes20);
        org.joda.time.Minutes minutes26 = minutes0.dividedBy((-58));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0M" + "'", str10, "PT0M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT-2147483648M" + "'", str13, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(minutes26);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 2147483647);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours(60000L);
        org.joda.time.Duration duration4 = duration3.toDuration();
        org.joda.time.Duration duration6 = duration3.withMillis((long) 59);
        boolean boolean7 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = periodType13.indexOf(durationFieldType14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant8, readableInstant9, periodType16);
        org.joda.time.PeriodType periodType19 = periodType16.withMillisRemoved();
        java.lang.String str20 = periodType19.toString();
        int int21 = periodType19.size();
        org.joda.time.PeriodType periodType22 = periodType19.withWeeksRemoved();
        org.joda.time.Period period23 = duration1.toPeriod(periodType22);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Days]" + "'", str20, "PeriodType[Days]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(3120000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        boolean boolean10 = weeks7.isLessThan(weeks9);
        org.joda.time.Weeks weeks11 = weeks7.negated();
        org.joda.time.Weeks weeks13 = weeks11.minus((int) (byte) 100);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks11);
        org.joda.time.Weeks weeks15 = null;
        org.joda.time.Weeks weeks16 = weeks5.plus(weeks15);
        org.joda.time.Weeks weeks18 = weeks16.multipliedBy((int) ' ');
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn(readableInterval19);
        org.joda.time.Weeks weeks22 = weeks20.multipliedBy(8);
        org.joda.time.Weeks weeks24 = weeks22.plus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = weeks24.get(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = weeks24.getFieldType();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        org.joda.time.Weeks weeks31 = weeks29.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks33 = weeks29.dividedBy((int) 'a');
        org.joda.time.Weeks weeks35 = weeks33.multipliedBy((-60));
        org.joda.time.MutablePeriod mutablePeriod36 = weeks35.toMutablePeriod();
        org.joda.time.PeriodType periodType37 = weeks35.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) weeks24, periodType37);
        boolean boolean39 = weeks16.isGreaterThan(weeks24);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        boolean boolean41 = weeks16.isSupported(durationFieldType40);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalTo(readableInstant7);
        long long9 = duration4.getStandardMinutes();
        long long10 = duration4.getMillis();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Duration duration14 = seconds13.toStandardDuration();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        boolean boolean21 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Seconds seconds25 = seconds13.minus(seconds24);
        org.joda.time.Seconds seconds26 = seconds11.minus(seconds25);
        boolean boolean27 = duration4.equals((java.lang.Object) seconds25);
        org.joda.time.Duration duration29 = duration4.plus(60480000L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) -1, 32, (int) (short) 0, 32, (-1), (int) ' ', (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.toMutablePeriod();
        mutablePeriod9.addHours(32);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod9.copy();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DurationField durationField15 = durationFieldType13.getField(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType13.getField(chronology16);
        mutablePeriod12.add(durationFieldType13, (-672));
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType24 = periodType23.withMonthsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) 0, periodType24, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(4L, (long) 671, periodType24, chronology28);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, readableInstant40, periodType41);
        java.lang.String str43 = duration37.toString();
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration37.toIntervalFrom(readableInstant45);
        org.joda.time.Duration duration47 = duration37.toDuration();
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT60S" + "'", str43, "PT60S");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.joda.time.Period period8 = new org.joda.time.Period((-515), (-91), (-999), (-672), 2147482976, (-302), (-13), (-29));
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PeriodType[StandardNoYearsNoDays]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[StandardNoYearsNoDays]\" is malformed at \"eriodType[StandardNoYearsNoDays]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        mutablePeriod2.addMinutes(25);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.add((long) 32, chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withMinutesRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant17, periodType18);
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant9, (org.joda.time.ReadableDuration) duration14);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration23 = duration14.toDuration();
        java.lang.String str24 = duration14.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT60S" + "'", str24, "PT60S");
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((-515));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 1);
        org.joda.time.Duration duration3 = duration1.plus((long) 35);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.Period period9 = new org.joda.time.Period((-2), 3, 1, 100);
        org.joda.time.Period period11 = period9.minusHours(2);
        org.joda.time.Period period13 = period11.plusMinutes((int) 'a');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationTo(readableInstant14);
        boolean boolean16 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours4 = null;
        org.joda.time.Hours hours5 = hours2.minus(hours4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period9 = period7.withHours(32);
        org.joda.time.Hours hours10 = period7.toStandardHours();
        org.joda.time.Hours hours11 = hours10.negated();
        boolean boolean12 = hours5.isGreaterThan(hours10);
        int int13 = hours10.getHours();
        org.joda.time.Hours hours14 = hours10.negated();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) hours14, chronology15);
        boolean boolean18 = hours14.equals((java.lang.Object) "PT-2M");
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period8 = period3.withFields((org.joda.time.ReadablePeriod) minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        int int13 = minutes11.getMinutes();
        java.lang.String str14 = minutes11.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        java.lang.String str17 = minutes15.toString();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes19 = minutes11.negated();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((int) '#');
        org.joda.time.Minutes minutes24 = minutes11.minus(minutes21);
        boolean boolean25 = minutes10.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes26 = minutes7.minus(minutes21);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant32, readableDuration33);
        mutablePeriod34.setPeriod((long) ' ', (long) 52);
        mutablePeriod34.addDays(100);
        org.joda.time.PeriodType periodType40 = mutablePeriod34.getPeriodType();
        org.joda.time.Period period41 = new org.joda.time.Period((long) (short) 0, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType40);
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant27, readableInstant28, periodType40);
        org.joda.time.Period period45 = period43.plusMonths(13);
        org.joda.time.Duration duration46 = period43.toStandardDuration();
        org.joda.time.Period period47 = period43.negated();
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy(100);
        org.joda.time.Period period51 = minutes50.toPeriod();
        boolean boolean52 = minutes21.isLessThan(minutes50);
        org.joda.time.DurationFieldType durationFieldType53 = minutes21.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) durationFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2147483648M" + "'", str17, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        mutablePeriod2.addMinutes(25);
        int int6 = mutablePeriod2.getMinutes();
        mutablePeriod2.addYears(88500);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) ' ', (int) (byte) 10, 1, (int) (byte) 10, (int) (short) 100, (int) (short) 100, 52, (int) (byte) -1);
        mutablePeriod17.setHours(60);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        mutablePeriod17.setPeriod(readableInstant20, readableInstant21);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod2.addHours(8744020);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 25 + "'", int6 == 25);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 8, (long) (short) 0);
        org.joda.time.Duration duration3 = period2.toStandardDuration();
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType4.isSupported(chronology5);
        boolean boolean7 = period1.isSupported(durationFieldType4);
        org.joda.time.Period period9 = period1.withYears(97);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        boolean boolean17 = days12.isGreaterThan(days15);
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Days days21 = days15.minus(days20);
        int int22 = days15.size();
        org.joda.time.Days days23 = org.joda.time.Days.ZERO;
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Days days28 = days26.minus(10);
        boolean boolean29 = days23.isGreaterThan(days26);
        org.joda.time.Days days30 = days15.minus(days26);
        org.joda.time.Duration duration31 = days30.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType32 = days30.getFieldType();
        org.joda.time.Days days33 = org.joda.time.Days.ONE;
        boolean boolean34 = days30.isGreaterThan(days33);
        org.joda.time.Days days36 = days30.dividedBy(6);
        org.joda.time.Period period37 = period9.minus((org.joda.time.ReadablePeriod) days30);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.years();
        boolean boolean39 = days30.isSupported(durationFieldType38);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(3219999L, (long) 3, chronology2);
        mutablePeriod3.addSeconds((-8));
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        int int6 = period3.getWeeks();
        org.joda.time.Period period8 = period3.plusSeconds((int) (byte) 100);
        org.joda.time.Period period9 = period3.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) period3, chronology10);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Period period14 = period11.plusMonths(35);
        int int15 = period11.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        org.joda.time.Seconds seconds4 = seconds0.plus((int) (short) 1);
        int int5 = seconds4.getSeconds();
        org.joda.time.DurationFieldType durationFieldType6 = seconds4.getFieldType();
        org.joda.time.Seconds seconds8 = seconds4.multipliedBy(40);
        org.joda.time.Seconds seconds10 = seconds8.multipliedBy(0);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks17 = weeks6.minus(weeks16);
        org.joda.time.MutablePeriod mutablePeriod18 = weeks17.toMutablePeriod();
        org.joda.time.Duration duration19 = weeks17.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = duration19.toPeriodFrom(readableInstant20);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(900);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period9 = period4.normalizedStandard();
        org.joda.time.Period period10 = period4.negated();
        org.joda.time.Duration duration11 = period4.toStandardDuration();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.Seconds seconds16 = seconds14.plus(100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.standardSecondsIn(readablePeriod17);
        org.joda.time.Seconds seconds19 = seconds14.minus(seconds18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        java.lang.String str23 = seconds22.toString();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        boolean boolean25 = seconds22.isSupported(durationFieldType24);
        org.joda.time.Seconds seconds26 = null;
        org.joda.time.Seconds seconds27 = seconds22.minus(seconds26);
        boolean boolean28 = seconds18.equals((java.lang.Object) seconds26);
        org.joda.time.Period period29 = period4.plus((org.joda.time.ReadablePeriod) seconds26);
        int int30 = period29.getWeeks();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT60S" + "'", str23, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.Weeks weeks4 = weeks2.multipliedBy((int) (byte) 100);
        org.joda.time.PeriodType periodType5 = weeks2.getPeriodType();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(1000L, periodType5, chronology6);
        org.joda.time.PeriodType periodType8 = periodType5.withMinutesRemoved();
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 4, periodType2, chronology3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType2);
        mutablePeriod5.setPeriod((long) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutablePeriod5.setPeriod(readableInstant8, readableInstant9);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.joda.time.Period period4 = new org.joda.time.Period(10, 0, (int) (byte) 10, (int) (byte) 10);
        int int5 = period4.getHours();
        org.joda.time.PeriodType periodType6 = period4.getPeriodType();
        int int7 = period4.getMonths();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period4.toDurationFrom(readableInstant8);
        int int10 = period4.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT672H");
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("P-1D");
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = mutablePeriod1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration3 = new org.joda.time.Duration((java.lang.Object) durationFieldTypeArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.joda.time.Period period4 = new org.joda.time.Period((-97), (-672), 15120008, (-2));
        int int5 = period4.getYears();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(60099L);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks14 = weeks11.minus((int) (short) -1);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(0);
        org.joda.time.Weeks weeks17 = null;
        boolean boolean18 = weeks14.isLessThan(weeks17);
        int int20 = weeks14.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = durationFieldType21.isSupported(chronology22);
        boolean boolean24 = weeks14.isSupported(durationFieldType21);
        org.joda.time.DurationFieldType durationFieldType25 = weeks14.getFieldType();
        boolean boolean26 = periodType4.isSupported(durationFieldType25);
        org.joda.time.PeriodType periodType27 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType28 = periodType4.withMillisRemoved();
        int int29 = periodType28.size();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(126000000L, (-311040000L), periodType28, chronology30);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 25, (long) (-58), chronology2);
        java.lang.String str4 = mutablePeriod3.toString();
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (short) 1);
        org.joda.time.Period period7 = period6.negated();
        org.joda.time.Period period8 = period7.toPeriod();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period11 = period8.minusHours(194);
        org.joda.time.Period period13 = period11.plusYears(30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0.083S" + "'", str4, "PT0.083S");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(59959L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-539L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.addWeeks((int) (byte) 0);
        int int4 = mutablePeriod1.getWeeks();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 0, (long) 2, chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.copy();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        boolean boolean22 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration20.toIntervalFrom(readableInstant27);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Seconds seconds30 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval28);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval28);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        mutablePeriod1.setPeriod(readableInstant33, readableInstant34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = mutablePeriod1.getFieldType((-97));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(seconds30);
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes5 = minutes0.minus(minutes2);
        org.joda.time.Duration duration6 = minutes0.toStandardDuration();
        long long7 = duration6.getStandardMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType7);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 'a', 10L, periodType7);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(599990L, periodType7);
        org.joda.time.Duration duration12 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        boolean boolean22 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
        mutablePeriod29.setHours((int) (short) 100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33, chronology34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType39 = seconds38.getFieldType();
        mutablePeriod29.add(durationFieldType39, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant42, readableDuration43);
        mutablePeriod44.setHours((int) (short) 100);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        mutablePeriod44.setPeriod((org.joda.time.ReadableDuration) duration48, chronology49);
        org.joda.time.Chronology chronology51 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration48, chronology51);
        int int53 = duration20.compareTo((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration54 = duration48.toDuration();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays(0L);
        boolean boolean57 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration56);
        java.lang.String str58 = duration56.toString();
        long long59 = duration56.getMillis();
        boolean boolean60 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology61 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration56, chronology61);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.addHours(2147482976);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0S" + "'", str58, "PT0S");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.joda.time.Period period4 = new org.joda.time.Period(107, 1, 10, 88500);
        int int5 = period4.getYears();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(2147482976);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 10);
        org.joda.time.Duration duration3 = duration1.plus((-60001L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) 8);
        long long6 = duration5.getStandardMinutes();
        java.lang.String str7 = duration5.toString();
        boolean boolean8 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str11 = duration10.toString();
        org.joda.time.Duration duration13 = duration10.minus((long) (byte) 10);
        org.joda.time.Duration duration15 = duration10.withMillis((long) (short) -1);
        org.joda.time.Period period16 = duration10.toPeriod();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration10.toPeriodFrom(readableInstant17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withMinutesRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, readableInstant26, periodType27);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant30, readableDuration31);
        mutablePeriod32.setHours((int) (short) 100);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration36, chronology37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType42 = seconds41.getFieldType();
        mutablePeriod32.add(durationFieldType42, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableInstant45, readableDuration46);
        mutablePeriod47.setHours((int) (short) 100);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology52 = null;
        mutablePeriod47.setPeriod((org.joda.time.ReadableDuration) duration51, chronology52);
        org.joda.time.Chronology chronology54 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration51, chronology54);
        int int56 = duration23.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration57 = duration51.toDuration();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays(0L);
        boolean boolean60 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Period period61 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withMillis((-3600000L));
        boolean boolean64 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration65 = duration1.minus((org.joda.time.ReadableDuration) duration63);
        java.lang.String str66 = duration1.toString();
        org.joda.time.Seconds seconds67 = duration1.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 8L + "'", long6 == 8L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT480S" + "'", str7, "PT480S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT600S" + "'", str11, "PT600S");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT864000S" + "'", str66, "PT864000S");
        org.junit.Assert.assertNotNull(seconds67);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-5184000000L));
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setPeriod((long) ' ', (long) 52);
        mutablePeriod2.addDays(100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) mutablePeriod2, chronology8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant24, periodType25);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration21.toIntervalFrom(readableInstant28);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval29);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval29);
        mutablePeriod2.setSeconds((-302));
        mutablePeriod2.setMillis(21);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-2147483648), (-515), 13, 51, (-58), (-35), (-58), 59);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks10 = weeks1.negated();
        org.joda.time.Weeks weeks11 = weeks10.negated();
        int int12 = weeks10.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.TWO;
        boolean boolean3 = weeks1.equals((java.lang.Object) weeks2);
        org.joda.time.Weeks weeks5 = weeks1.minus(8);
        org.joda.time.Weeks weeks7 = weeks5.plus(2400);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks14 = weeks11.minus((int) (short) -1);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(0);
        org.joda.time.Weeks weeks17 = null;
        boolean boolean18 = weeks14.isLessThan(weeks17);
        java.lang.String str19 = weeks14.toString();
        org.joda.time.Weeks weeks21 = weeks14.minus((-1073741824));
        org.joda.time.PeriodType periodType22 = weeks21.getPeriodType();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksIn(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksIn(readableInterval25);
        boolean boolean27 = weeks24.isLessThan(weeks26);
        org.joda.time.Weeks weeks28 = weeks24.negated();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.weeksIn(readableInterval31);
        boolean boolean33 = weeks30.isLessThan(weeks32);
        org.joda.time.Weeks weeks34 = weeks30.negated();
        org.joda.time.Weeks weeks36 = weeks34.minus((int) (byte) 100);
        org.joda.time.Weeks weeks37 = weeks28.plus(weeks34);
        org.joda.time.DurationFieldType durationFieldType38 = weeks34.getFieldType();
        org.joda.time.Weeks weeks39 = weeks21.minus(weeks34);
        boolean boolean40 = weeks5.isLessThan(weeks39);
        org.joda.time.Weeks weeks42 = weeks39.dividedBy(67);
        java.lang.String str43 = weeks39.toString();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P1W" + "'", str19, "P1W");
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P1073741825W" + "'", str43, "P1073741825W");
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType5 = periodFormatter2.getParseType();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        boolean boolean17 = periodType11.equals((java.lang.Object) mutablePeriod14);
        org.joda.time.PeriodType periodType18 = periodType11.withYearsRemoved();
        int int19 = periodType18.size();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter7.withParseType(periodType18);
        org.joda.time.PeriodType periodType21 = periodFormatter20.getParseType();
        java.util.Locale locale22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter20.withLocale(locale22);
        java.util.Locale locale24 = periodFormatter20.getLocale();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withSecondsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter20.withParseType(periodType32);
        org.joda.time.format.PeriodParser periodParser34 = periodFormatter33.getParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNull(periodParser34);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) -1);
        org.joda.time.Period period3 = org.joda.time.Period.hours(10);
        org.joda.time.Period period4 = period1.plus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Hours hours5 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours7 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean8 = hours5.isGreaterThan(hours7);
        org.joda.time.Duration duration9 = hours7.toStandardDuration();
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration10);
        org.joda.time.Period period12 = period4.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.setMillis((-999));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod1.addSeconds(100);
        java.lang.Object obj4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(obj4);
        org.joda.time.Duration duration6 = duration5.toDuration();
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = duration6.toPeriodTo(readableInstant8, periodType10);
        org.joda.time.Hours hours13 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours14 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = hours14.getFieldType();
        boolean boolean16 = hours13.isGreaterThan(hours14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant17, readableDuration18);
        org.joda.time.Period period20 = mutablePeriod19.toPeriod();
        org.joda.time.Period period22 = period20.withHours(0);
        org.joda.time.Hours hours23 = period22.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType24 = hours23.getFieldType();
        int int25 = hours23.getHours();
        boolean boolean26 = hours14.isLessThan(hours23);
        org.joda.time.Hours hours28 = hours14.plus(10);
        boolean boolean29 = periodType10.equals((java.lang.Object) hours14);
        int int30 = hours14.getHours();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Period period10 = period8.plusWeeks((-32));
        int int11 = period10.getMonths();
        org.joda.time.Period period13 = period10.withMinutes((int) ' ');
        org.joda.time.Period period15 = period10.plusMonths((int) (short) 100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.minus(0);
        org.joda.time.Hours hours3 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean6 = hours3.isGreaterThan(hours5);
        boolean boolean7 = hours2.isLessThan(hours5);
        java.lang.String str8 = hours2.toString();
        java.lang.String str9 = hours2.toString();
        org.joda.time.Hours hours11 = hours2.plus(13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod16.get(durationFieldType17);
        org.joda.time.Hours hours19 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Hours hours21 = hours19.dividedBy(3);
        int int22 = hours11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) hours21);
        int int23 = hours21.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT4H" + "'", str8, "PT4H");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT4H" + "'", str9, "PT4H");
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11);
        mutablePeriod12.addMillis(600);
        mutablePeriod12.addWeeks(96);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 0, 52, (int) (short) -1, 52, (-1), (int) ' ', (int) '4', 8);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        int int11 = mutablePeriod9.getDays();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = duration13.minus((long) 3);
        org.joda.time.Duration duration21 = duration13.toDuration();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration21.toIntervalFrom(readableInstant22);
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval23);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant2, periodType3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setHours((int) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType28 = seconds27.getFieldType();
        mutablePeriod18.add(durationFieldType28, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration37, chronology40);
        int int42 = duration9.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration43 = duration37.toDuration();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays(0L);
        boolean boolean46 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration45);
        java.lang.String str47 = duration45.toString();
        long long48 = duration45.getMillis();
        boolean boolean49 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration45);
        long long50 = duration45.getMillis();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration45.toPeriod(chronology51);
        org.joda.time.format.PeriodPrinter periodPrinter55 = null;
        org.joda.time.format.PeriodParser periodParser56 = null;
        org.joda.time.format.PeriodFormatter periodFormatter57 = new org.joda.time.format.PeriodFormatter(periodPrinter55, periodParser56);
        org.joda.time.format.PeriodParser periodParser58 = periodFormatter57.getParser();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds61 = duration60.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType62 = seconds61.getFieldType();
        org.joda.time.Seconds seconds64 = seconds61.plus(25);
        org.joda.time.Seconds seconds65 = seconds61.negated();
        org.joda.time.PeriodType periodType66 = seconds65.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter57.withParseType(periodType66);
        org.joda.time.PeriodType periodType68 = periodType66.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) (byte) 1, (-60L), periodType66);
        org.joda.time.PeriodType periodType70 = periodType66.withMonthsRemoved();
        org.joda.time.Period period71 = duration45.toPeriod(periodType70);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0S" + "'", str47, "PT0S");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNull(periodParser58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        java.lang.String str5 = seconds4.toString();
        org.joda.time.PeriodType periodType6 = seconds4.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (-1), (long) 100, periodType7, chronology8);
        mutablePeriod9.setYears((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weeks();
        int int13 = mutablePeriod9.indexOf(durationFieldType12);
        java.lang.String str14 = durationFieldType12.toString();
        java.lang.String str15 = durationFieldType12.getName();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT60S" + "'", str5, "PT60S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "weeks" + "'", str14, "weeks");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weeks" + "'", str15, "weeks");
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Seconds seconds3 = duration1.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        boolean boolean10 = seconds3.isLessThan(seconds9);
        org.joda.time.Seconds seconds11 = seconds9.negated();
        org.joda.time.Duration duration12 = seconds9.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration12.toIntervalFrom(readableInstant13);
        java.lang.String str15 = duration12.toString();
        long long16 = duration12.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT85S" + "'", str15, "PT85S");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 85000L + "'", long16 == 85000L);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-1L), (long) ' ');
        mutablePeriod2.setPeriod(1L, (long) (-2));
        mutablePeriod2.setMinutes(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType9 = mutablePeriod2.getFieldType((-34));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        java.lang.String str5 = period4.toString();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period7 = period4.normalizedStandard(periodType6);
        org.joda.time.Period period9 = period4.minusHours(3);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType13 = seconds12.getFieldType();
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds16 = seconds12.minus(seconds15);
        org.joda.time.Seconds seconds17 = seconds12.negated();
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds20 = seconds17.minus(seconds19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str22 = durationFieldType21.getName();
        int int23 = seconds19.get(durationFieldType21);
        org.joda.time.Period period25 = period9.withFieldAdded(durationFieldType21, 0);
        org.joda.time.Period period27 = period25.minusDays((int) '4');
        int int28 = period25.getSeconds();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Period period30 = period25.plus(readablePeriod29);
        org.joda.time.Period period32 = period30.plusDays((-27));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyears" + "'", str22, "weekyears");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 10, (int) (short) 10, (-7), 27);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.joda.time.Period period2 = new org.joda.time.Period(84326400L, 780L);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod7 = weeks3.toMutablePeriod();
        java.lang.Object obj8 = mutablePeriod7.clone();
        mutablePeriod7.setPeriod(6, 4, 6, (-8), 0, 7, 5, (int) '#');
        mutablePeriod7.addMillis(40);
        org.joda.time.Period period20 = mutablePeriod7.toPeriod();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "P6Y4M6W-8DT7M5.075S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "P6Y4M6W-8DT7M5.075S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "P6Y4M6W-8DT7M5.075S");
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 13);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType5 = periodType3.getFieldType(2);
        org.joda.time.Period period6 = duration1.toPeriodTo(readableInstant2, periodType3);
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks12 = weeks8.negated();
        org.joda.time.Weeks weeks14 = weeks12.minus((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType15 = weeks14.getFieldType();
        boolean boolean16 = period6.equals((java.lang.Object) durationFieldType15);
        org.joda.time.Period period18 = period6.withMonths(1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant7, periodType8);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, readableDuration12);
        mutablePeriod13.setHours((int) (short) 100);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration17, chronology18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType23 = seconds22.getFieldType();
        mutablePeriod13.add(durationFieldType23, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
        mutablePeriod28.setHours((int) (short) 100);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration32, chronology35);
        int int37 = duration4.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration39 = duration32.minus(1L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = duration32.toPeriodTo(readableInstant40);
        org.joda.time.Period period43 = period41.plusMinutes(40);
        org.joda.time.Period period44 = period43.normalizedStandard();
        org.joda.time.Period period46 = period43.plusMinutes(59);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod48.addSeconds(100);
        java.lang.Object obj51 = null;
        org.joda.time.Duration duration52 = new org.joda.time.Duration(obj51);
        org.joda.time.Duration duration53 = duration52.toDuration();
        mutablePeriod48.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = duration53.toPeriod();
        org.joda.time.Period period57 = new org.joda.time.Period((-60001L));
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DurationField durationField60 = durationFieldType58.getField(chronology59);
        boolean boolean61 = period57.isSupported(durationFieldType58);
        int int62 = period55.indexOf(durationFieldType58);
        int int63 = period46.indexOf(durationFieldType58);
        org.joda.time.Chronology chronology64 = null;
        boolean boolean65 = durationFieldType58.isSupported(chronology64);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        org.joda.time.Period period5 = period3.multipliedBy(54);
        org.joda.time.Period period7 = period3.withDays((int) '#');
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.minus(10);
        boolean boolean7 = days1.isGreaterThan(days4);
        org.joda.time.Days days8 = org.joda.time.Days.ZERO;
        org.joda.time.Days days9 = org.joda.time.Days.ZERO;
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days14 = days12.minus(10);
        boolean boolean15 = days9.isGreaterThan(days12);
        org.joda.time.Days days16 = days8.minus(days9);
        org.joda.time.Days days17 = days1.plus(days8);
        org.joda.time.Days days18 = days0.minus(days1);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Days days20 = org.joda.time.Days.ZERO;
        int int21 = days20.getDays();
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        boolean boolean29 = days24.isGreaterThan(days27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Days days33 = days27.minus(days32);
        org.joda.time.Days days34 = days20.minus(days27);
        org.joda.time.Days days35 = org.joda.time.Days.ZERO;
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Days days40 = days38.minus(10);
        boolean boolean41 = days35.isGreaterThan(days38);
        org.joda.time.Days days42 = days27.minus(days35);
        org.joda.time.Days days43 = days42.negated();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.eras();
        int int49 = period47.get(durationFieldType48);
        org.joda.time.Days days50 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Days days52 = days50.dividedBy(7);
        org.joda.time.PeriodType periodType53 = days52.getPeriodType();
        boolean boolean54 = days43.isLessThan(days52);
        org.joda.time.Days days55 = days18.minus(days52);
        org.joda.time.Days days57 = days55.minus(2400);
        org.joda.time.Days days58 = org.joda.time.Days.ONE;
        org.joda.time.Days days59 = org.joda.time.Days.ZERO;
        org.joda.time.Period period61 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days62 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Days days64 = days62.minus(10);
        boolean boolean65 = days59.isGreaterThan(days62);
        org.joda.time.Days days66 = org.joda.time.Days.ZERO;
        org.joda.time.Days days67 = org.joda.time.Days.ZERO;
        org.joda.time.Period period69 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days70 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Days days72 = days70.minus(10);
        boolean boolean73 = days67.isGreaterThan(days70);
        org.joda.time.Days days74 = days66.minus(days67);
        org.joda.time.Days days75 = days59.plus(days66);
        org.joda.time.Days days76 = days58.minus(days59);
        org.joda.time.Days days78 = days58.multipliedBy((int) (byte) -1);
        java.lang.String str79 = days58.toString();
        boolean boolean80 = days57.isGreaterThan(days58);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "P1D" + "'", str79, "P1D");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.addWeeks((int) (byte) 0);
        mutablePeriod1.addHours((-672));
        int int6 = mutablePeriod1.getDays();
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks10 = weeks8.plus(3);
        org.joda.time.DurationFieldType durationFieldType11 = weeks10.getFieldType();
        mutablePeriod1.set(durationFieldType11, (-672));
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn(readableInterval16);
        boolean boolean18 = weeks15.isLessThan(weeks17);
        org.joda.time.Weeks weeks20 = weeks17.minus((int) (short) -1);
        org.joda.time.Weeks weeks22 = weeks20.multipliedBy(0);
        org.joda.time.Weeks weeks23 = null;
        boolean boolean24 = weeks20.isLessThan(weeks23);
        int int26 = weeks20.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = durationFieldType27.isSupported(chronology28);
        boolean boolean30 = weeks20.isSupported(durationFieldType27);
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = durationFieldType27.isSupported(chronology31);
        mutablePeriod1.set(durationFieldType27, (-8));
        java.lang.String str35 = durationFieldType27.getName();
        org.joda.time.Chronology chronology36 = null;
        boolean boolean37 = durationFieldType27.isSupported(chronology36);
        org.joda.time.Chronology chronology38 = null;
        boolean boolean39 = durationFieldType27.isSupported(chronology38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minutes" + "'", str35, "minutes");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 200);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds12.dividedBy(32);
        org.joda.time.PeriodType periodType15 = seconds12.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant8, readableInstant9, periodType15);
        org.joda.time.PeriodType periodType18 = periodType15.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-7), (int) ' ', 52, 107, (-2147483647), (-1073741824), (-21167965), (-2147483647), periodType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setPeriod((long) ' ', (long) 52);
        mutablePeriod2.addDays(100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) mutablePeriod2, chronology8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant24, periodType25);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration21.toIntervalFrom(readableInstant28);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval29);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant32, readableDuration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds37 = duration36.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType38 = seconds37.getFieldType();
        mutablePeriod34.add(durationFieldType38, 52);
        mutablePeriod34.add((long) (short) 1);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.addMillis(25);
        mutablePeriod34.setPeriod((long) (short) 1, (long) 'a');
        java.lang.Object obj49 = mutablePeriod34.clone();
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.096S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.096S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.096S");
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        org.joda.time.Period period5 = period3.withHours(2147483647);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        org.joda.time.Period period8 = period5.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = period8.multipliedBy((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -12");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy(54);
        org.joda.time.Minutes minutes12 = null;
        boolean boolean13 = minutes11.isGreaterThan(minutes12);
        org.joda.time.Duration duration14 = minutes11.toStandardDuration();
        org.joda.time.Minutes minutes15 = minutes11.negated();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((-86400000L), 60000L, chronology18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType21 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes23 = minutes20.plus(minutes22);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.ZERO;
        boolean boolean26 = minutes24.isLessThan(minutes25);
        boolean boolean27 = minutes20.isLessThan(minutes24);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutes(6);
        org.joda.time.Minutes minutes30 = minutes20.plus(minutes29);
        org.joda.time.Period period31 = period19.minus((org.joda.time.ReadablePeriod) minutes29);
        boolean boolean32 = minutes11.isLessThan(minutes29);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 108);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType3 = period1.getFieldType((int) (short) 1);
        org.joda.time.Period period5 = period1.withSeconds((-1));
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        java.lang.String str7 = period1.toString();
        org.joda.time.Period period9 = period1.plusHours(10);
        int[] intArray10 = period1.getValues();
        org.joda.time.Period period11 = period1.toPeriod();
        org.joda.time.Period period13 = period1.plusMonths((int) 'a');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType7);
        int int9 = period8.getMillis();
        org.joda.time.Period period11 = period8.plusDays((int) 'a');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        java.lang.String str15 = seconds14.toString();
        org.joda.time.PeriodType periodType16 = seconds14.getPeriodType();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withDaysRemoved();
        org.joda.time.Period period19 = period11.normalizedStandard(periodType18);
        org.joda.time.PeriodType periodType20 = periodType18.withMonthsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (-1073741824), (long) (byte) 100, periodType20);
        org.joda.time.PeriodType periodType23 = periodType20.withMonthsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2, periodType23);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT60S" + "'", str15, "PT60S");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 21168000);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        boolean boolean4 = seconds1.isGreaterThan(seconds2);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod7.addYears((int) '4');
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.add((long) 100, chronology11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        java.lang.String str16 = seconds15.toString();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        boolean boolean18 = seconds15.isSupported(durationFieldType17);
        int int19 = mutablePeriod7.get(durationFieldType17);
        boolean boolean20 = seconds2.isSupported(durationFieldType17);
        org.joda.time.Seconds seconds22 = seconds2.dividedBy((int) ' ');
        org.joda.time.Seconds seconds24 = seconds2.minus(658);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType30 = seconds29.getFieldType();
        org.joda.time.Seconds seconds32 = seconds29.plus(25);
        org.joda.time.Seconds seconds33 = seconds29.negated();
        org.joda.time.Seconds seconds35 = seconds29.dividedBy(10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType39 = seconds38.getFieldType();
        org.joda.time.Seconds seconds41 = seconds38.plus(25);
        org.joda.time.Seconds seconds42 = seconds35.plus(seconds38);
        org.joda.time.Seconds seconds44 = seconds42.plus((int) (byte) 1);
        org.joda.time.Seconds seconds46 = seconds42.minus((-1));
        org.joda.time.Seconds seconds47 = seconds26.minus(seconds46);
        boolean boolean48 = seconds24.isGreaterThan(seconds47);
        org.joda.time.Seconds seconds49 = null;
        org.joda.time.Seconds seconds50 = seconds24.minus(seconds49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds53 = duration52.toStandardSeconds();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds56 = duration55.toStandardSeconds();
        boolean boolean57 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Seconds seconds60 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Seconds seconds61 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Seconds seconds64 = seconds62.minus((int) (short) 100);
        org.joda.time.Seconds seconds65 = seconds24.minus(seconds64);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT60S" + "'", str16, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertNotNull(seconds65);
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-672), 0, 596, 7, 23, 125, (-60), 67);
        mutablePeriod8.setPeriod(280L);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(0L, (long) (short) -1, chronology2);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 10);
        mutablePeriod1.addMonths(100);
        mutablePeriod1.add(600, 0, 52, 2, 5, 13, (int) (short) 0, (int) (byte) 100);
        mutablePeriod1.addMillis(515);
        mutablePeriod1.setSeconds((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType20 = mutablePeriod1.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes14 = minutes10.minus((int) (short) 0);
        org.joda.time.Minutes minutes15 = minutes14.negated();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType17 = minutes16.getPeriodType();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes21 = minutes16.minus(minutes18);
        boolean boolean22 = minutes14.isGreaterThan(minutes16);
        org.joda.time.PeriodType periodType23 = minutes16.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.joda.time.Period period1 = org.joda.time.Period.years(7);
        int int2 = period1.getHours();
        org.joda.time.Period period4 = period1.plusHours((int) (short) 0);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType7, chronology8);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.Period period13 = period9.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Hours hours14 = period12.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType15 = hours14.getFieldType();
        int int16 = period1.get(durationFieldType15);
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType15.isSupported(chronology17);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period1.plusDays((int) (byte) -1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period8 = period5.minusWeeks((-1));
        org.joda.time.Period period10 = period5.multipliedBy(32);
        org.joda.time.Period period11 = period5.negated();
        org.joda.time.Period period13 = period11.plusSeconds((-100));
        org.joda.time.Minutes minutes14 = period11.toStandardMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P-1DT1M" + "'", str6, "P-1DT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-1073741824));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        org.joda.time.Period period5 = mutablePeriod4.toPeriod();
        int int6 = period5.size();
        org.joda.time.Period period8 = period5.plusDays(1);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period10 = period5.withFields((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType14 = minutes13.getPeriodType();
        int int15 = minutes13.getMinutes();
        java.lang.String str16 = minutes13.toString();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = minutes17.getFieldType();
        java.lang.String str19 = minutes17.toString();
        boolean boolean20 = minutes13.isLessThan(minutes17);
        org.joda.time.Minutes minutes21 = minutes13.negated();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes25 = minutes23.dividedBy((int) '#');
        org.joda.time.Minutes minutes26 = minutes13.minus(minutes23);
        boolean boolean27 = minutes12.isGreaterThan(minutes23);
        org.joda.time.Minutes minutes28 = minutes9.minus(minutes23);
        org.joda.time.Minutes minutes30 = minutes9.multipliedBy((int) 'a');
        boolean boolean31 = minutes1.isLessThan(minutes30);
        org.joda.time.Minutes minutes33 = minutes30.dividedBy(658);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0M" + "'", str16, "PT0M");
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT-2147483648M" + "'", str19, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(minutes33);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = duration2.toPeriod(chronology3);
        org.joda.time.Days days5 = duration2.toStandardDays();
        long long6 = duration2.getStandardMinutes();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        boolean boolean10 = duration2.isEqual((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = periodType14.indexOf(durationFieldType15);
        org.joda.time.PeriodType periodType17 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period19 = duration7.toPeriod(periodType17);
        org.joda.time.Period period20 = new org.joda.time.Period(84326400L, (-5184000L), periodType17);
        org.joda.time.Period period22 = period20.withDays(9);
        int int23 = period22.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period22.minusHours(688);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days16 = days7.plus((int) (byte) 1);
        org.joda.time.Days days18 = days7.multipliedBy((-2147483648));
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        boolean boolean26 = days21.isGreaterThan(days24);
        int int27 = days21.size();
        org.joda.time.Days days28 = days21.negated();
        org.joda.time.Days days29 = days21.negated();
        org.joda.time.Days days31 = days29.dividedBy((-8));
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period39 = period36.withSeconds((int) ' ');
        org.joda.time.Period period40 = period33.minus((org.joda.time.ReadablePeriod) period36);
        int int41 = period36.getDays();
        java.lang.String str42 = period36.toString();
        org.joda.time.Period period44 = period36.plusMillis(0);
        int int45 = period36.getMillis();
        org.joda.time.Period period47 = period36.minusWeeks((-97));
        org.joda.time.Days days48 = period36.toStandardDays();
        boolean boolean49 = days29.isLessThan(days48);
        java.lang.String str50 = days48.toString();
        int int51 = days48.getDays();
        org.joda.time.Days days52 = org.joda.time.Days.THREE;
        org.joda.time.Days days54 = days52.minus((-32));
        org.joda.time.Days days55 = days48.minus(days52);
        org.joda.time.Days days57 = days52.plus((-672));
        org.joda.time.Period period59 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days60 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period62 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days63 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period62);
        org.joda.time.PeriodType periodType64 = days63.getPeriodType();
        boolean boolean65 = days60.isGreaterThan(days63);
        org.joda.time.Period period67 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days68 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Days days69 = days63.minus(days68);
        int int70 = days63.size();
        org.joda.time.Days days72 = days63.dividedBy((-1));
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) days72);
        org.joda.time.Days days75 = days72.plus(40);
        org.joda.time.DurationFieldType durationFieldType76 = days75.getFieldType();
        org.joda.time.Days days78 = days75.dividedBy(54);
        boolean boolean79 = days52.isLessThan(days75);
        org.joda.time.Days days80 = days18.minus(days75);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "P0D" + "'", str50, "P0D");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(days80);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration16 = duration8.toDuration();
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Period period18 = period17.toPeriod();
        org.joda.time.Period period19 = period17.negated();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 0);
        boolean boolean22 = period19.equals((java.lang.Object) duration21);
        org.joda.time.Seconds seconds23 = period19.toStandardSeconds();
        java.lang.String str24 = seconds23.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT-60S" + "'", str24, "PT-60S");
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(2);
        org.joda.time.Duration duration2 = seconds1.toStandardDuration();
        org.joda.time.Seconds seconds3 = seconds1.negated();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) 100, 540000L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType10 = seconds9.getFieldType();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds13 = seconds9.minus(seconds12);
        org.joda.time.Seconds seconds14 = seconds9.negated();
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds17 = seconds14.minus(seconds16);
        boolean boolean18 = duration6.equals((java.lang.Object) seconds16);
        org.joda.time.Seconds seconds20 = seconds16.multipliedBy((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = seconds20.getPeriodType();
        org.joda.time.Seconds seconds22 = seconds1.plus(seconds20);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(seconds22);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        int int4 = period3.getMillis();
        org.joda.time.Days days5 = period3.toStandardDays();
        java.lang.String str6 = period3.toString();
        org.joda.time.Duration duration7 = period3.toStandardDuration();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.025S" + "'", str6, "PT0.025S");
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(9L, 599990L, chronology2);
        org.joda.time.Period period5 = period3.minusMinutes(108);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100, 60, (int) (short) 1, 0);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) 4);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration6);
        mutablePeriod4.setDays(10);
        int int10 = mutablePeriod4.getMillis();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DurationField durationField5 = durationFieldType3.getField(chronology4);
        boolean boolean6 = weeks0.isSupported(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType7 = weeks0.getFieldType();
        java.lang.String str8 = weeks0.toString();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "P-2147483648W" + "'", str8, "P-2147483648W");
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        java.lang.String str5 = periodType4.toString();
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PeriodType[Weeks]" + "'", str5, "PeriodType[Weeks]");
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        java.lang.String str4 = seconds3.toString();
        org.joda.time.PeriodType periodType5 = seconds3.getPeriodType();
        org.joda.time.PeriodType periodType6 = seconds3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 3, periodType6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration11 = duration9.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalFrom(readableInstant12);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval13);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.setPeriod((int) (short) 100, (int) (short) 100, 600, (-27), 596, 31, 8384459, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT60S" + "'", str4, "PT60S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        mutablePeriod4.setHours((int) (short) 100);
        mutablePeriod4.addMillis(1);
        int int9 = mutablePeriod4.getSeconds();
        mutablePeriod4.setYears(0);
        org.joda.time.PeriodType periodType12 = mutablePeriod4.getPeriodType();
        java.lang.String str13 = periodType12.getName();
        org.joda.time.PeriodType periodType14 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType12);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Standard" + "'", str13, "Standard");
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Seconds seconds4 = seconds2.plus(100);
        org.joda.time.Seconds seconds6 = seconds2.plus((-1));
        org.joda.time.Seconds seconds8 = seconds2.plus((int) (byte) -1);
        org.joda.time.Seconds seconds10 = seconds8.multipliedBy((-12));
        org.joda.time.DurationFieldType durationFieldType11 = seconds8.getFieldType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days2 = days0.minus(25);
        org.joda.time.DurationFieldType durationFieldType3 = days2.getFieldType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period7 = period2.minusHours(3);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 100);
        org.joda.time.Period period11 = period9.plusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period13 = period11.normalizedStandard();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) period11, chronology14);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        org.joda.time.Hours hours3 = duration0.toStandardHours();
        java.lang.Object obj4 = null;
        boolean boolean5 = hours3.equals(obj4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours8 = hours6.minus(10);
        org.joda.time.Hours hours9 = hours3.minus(hours8);
        org.joda.time.Hours hours11 = hours9.dividedBy(40);
        org.joda.time.Hours hours13 = hours11.multipliedBy((-3));
        int int14 = hours11.size();
        org.joda.time.Hours hours16 = hours11.multipliedBy(70);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(hours16);
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        int int4 = period3.getMillis();
        org.joda.time.Period period6 = period3.plusDays((int) 'a');
        org.joda.time.Period period8 = period3.minusMonths(40);
        java.lang.String str9 = period8.toString();
        org.joda.time.Period period11 = period8.minusYears((int) (byte) 10);
        org.joda.time.Period period13 = period11.minusDays((-1073741824));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P-40MT0.025S" + "'", str9, "P-40MT0.025S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.days(13);
        int int4 = period3.getMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period12 = duration6.toPeriod();
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.Seconds seconds14 = period13.toStandardSeconds();
        org.joda.time.Period period15 = period13.negated();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period13.toDurationTo(readableInstant16);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = period13.getFieldTypes();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.forFields(durationFieldTypeArray18);
        org.joda.time.PeriodType periodType20 = periodType19.withDaysRemoved();
        org.joda.time.Period period21 = period3.normalizedStandard(periodType19);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType19);
        mutablePeriod22.setWeeks((-39648));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours3 = hours1.multipliedBy((-1));
        org.joda.time.Hours hours5 = hours3.minus((int) (byte) 1);
        org.joda.time.Hours hours7 = hours5.dividedBy(7);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) hours7, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = mutablePeriod9.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        boolean boolean5 = weeks2.isLessThan(weeks4);
        org.joda.time.Weeks weeks6 = weeks2.negated();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks12 = weeks8.negated();
        org.joda.time.Weeks weeks14 = weeks12.minus((int) (byte) 100);
        org.joda.time.Weeks weeks15 = weeks6.plus(weeks12);
        boolean boolean16 = weeks0.isLessThan(weeks12);
        org.joda.time.Weeks weeks18 = weeks0.plus(25);
        org.joda.time.Weeks weeks20 = weeks18.minus((-1073741824));
        org.joda.time.Weeks weeks22 = weeks20.minus(54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds23 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) weeks20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 649399071484800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration16 = duration8.toDuration();
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = duration16.toPeriodFrom(readableInstant18);
        long long20 = duration16.getMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType25 = periodType24.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant23, periodType24);
        int int27 = mutablePeriod26.getWeeks();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((java.lang.Object) mutablePeriod26, chronology28);
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = period29.toDurationTo(readableInstant31);
        long long33 = duration32.getStandardDays();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        java.lang.Object obj36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(obj36);
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant35, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant34, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration40.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = duration40.toPeriod();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        java.lang.Object obj46 = null;
        org.joda.time.Duration duration47 = new org.joda.time.Duration(obj46);
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant45, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant44, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.toDuration();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        java.lang.Object obj53 = null;
        org.joda.time.Duration duration54 = new org.joda.time.Duration(obj53);
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant52, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant51, (org.joda.time.ReadableDuration) duration54);
        int int57 = duration47.compareTo((org.joda.time.ReadableDuration) duration54);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration54.toIntervalTo(readableInstant58);
        org.joda.time.Seconds seconds60 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.seconds(2);
        org.joda.time.Duration duration63 = seconds62.toStandardDuration();
        org.joda.time.Seconds seconds64 = seconds60.minus(seconds62);
        boolean boolean65 = duration40.equals((java.lang.Object) seconds60);
        int int66 = duration32.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration68 = duration40.minus((long) (-1073741824));
        org.joda.time.Duration duration69 = duration16.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration70 = duration16.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60000L + "'", long20 == 60000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = duration1.minus((long) (byte) 10);
        java.lang.String str5 = duration1.toString();
        long long6 = duration1.getStandardDays();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period18 = period16.normalizedStandard(periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.Period period21 = duration8.toPeriodTo(readableInstant9, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration8.toPeriodFrom(readableInstant22);
        long long24 = duration8.getStandardMinutes();
        boolean boolean25 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration8);
        long long26 = duration8.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT600S" + "'", str5, "PT600S");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(0);
        org.joda.time.Period period3 = period1.minusWeeks(32);
        org.joda.time.Period period5 = period3.minusHours(0);
        org.joda.time.Period period7 = period3.minusWeeks((int) (byte) 0);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period11 = period9.withMillis((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy(3);
        org.joda.time.DurationFieldType durationFieldType17 = minutes16.getFieldType();
        org.joda.time.Period period19 = period11.withField(durationFieldType17, 40);
        int int20 = period3.indexOf(durationFieldType17);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(600L, periodType14, chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (-1073741824), 600L, periodType14);
        org.joda.time.PeriodType periodType18 = periodType14.withYearsRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (-515), periodType18, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(71, (int) (short) 0, 160, (int) (byte) 100, (int) 'a', 60, (-3), 0, periodType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.Period period1 = hours0.toPeriod();
        int int2 = hours0.getHours();
        java.lang.String str3 = hours0.toString();
        org.joda.time.Hours hours5 = hours0.minus((-1073741824));
        org.joda.time.Hours hours7 = hours0.minus(600);
        org.joda.time.Hours hours9 = hours7.dividedBy(125);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT1H" + "'", str3, "PT1H");
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.joda.time.Period period1 = org.joda.time.Period.days(59);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        long long3 = duration2.getStandardDays();
        org.joda.time.Hours hours4 = duration2.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType5 = hours4.getFieldType();
        org.joda.time.Hours hours6 = null;
        org.joda.time.Hours hours7 = hours4.minus(hours6);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period11 = period9.withHours(32);
        org.joda.time.Hours hours12 = period9.toStandardHours();
        org.joda.time.Hours hours13 = hours12.negated();
        boolean boolean14 = hours7.isGreaterThan(hours12);
        int int15 = hours12.getHours();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        int int22 = mutablePeriod20.get(durationFieldType21);
        org.joda.time.Hours hours23 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Hours hours25 = hours23.dividedBy((int) (short) -1);
        org.joda.time.Hours hours26 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours28 = hours26.minus(0);
        org.joda.time.Hours hours29 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours31 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean32 = hours29.isGreaterThan(hours31);
        boolean boolean33 = hours28.isLessThan(hours31);
        java.lang.String str34 = hours28.toString();
        org.joda.time.Hours hours35 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours36 = hours28.plus(hours35);
        org.joda.time.Hours hours37 = hours23.minus(hours28);
        boolean boolean38 = hours12.isLessThan(hours23);
        org.joda.time.Hours hours40 = hours23.multipliedBy(107);
        org.joda.time.Hours hours42 = hours23.multipliedBy((-1073741824));
        org.joda.time.Hours hours43 = hours42.negated();
        org.joda.time.Period period44 = period1.minus((org.joda.time.ReadablePeriod) hours42);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = period1.getValue(2147482976);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2147482976");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT4H" + "'", str34, "PT4H");
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        org.joda.time.PeriodType periodType14 = periodFormatter2.getParseType();
        boolean boolean15 = periodFormatter2.isParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-311040000000L), 599L);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration18, chronology19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType24 = seconds23.getFieldType();
        mutablePeriod14.add(durationFieldType24, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
        mutablePeriod29.setHours((int) (short) 100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33, chronology34);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration33, chronology36);
        int int38 = duration5.compareTo((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration39 = duration33.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        long long41 = duration40.getMillis();
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration42);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 60000L + "'", long41 == 60000L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(25200000L, chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod8.get(durationFieldType9);
        org.joda.time.Hours hours11 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Hours hours13 = hours11.dividedBy((int) (short) -1);
        org.joda.time.Hours hours14 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours16 = hours14.minus(0);
        org.joda.time.Hours hours17 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours19 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean20 = hours17.isGreaterThan(hours19);
        boolean boolean21 = hours16.isLessThan(hours19);
        java.lang.String str22 = hours16.toString();
        org.joda.time.Hours hours23 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours24 = hours16.plus(hours23);
        org.joda.time.Hours hours25 = hours11.minus(hours16);
        org.joda.time.Hours hours26 = org.joda.time.Hours.TWO;
        int int27 = hours26.getHours();
        org.joda.time.Hours hours28 = hours26.negated();
        boolean boolean29 = hours16.isGreaterThan(hours28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) hours28, chronology30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        int int33 = mutablePeriod31.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT4H" + "'", str22, "PT4H");
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant9, readableDuration10);
        mutablePeriod11.setHours((int) (short) 100);
        boolean boolean14 = periodType8.equals((java.lang.Object) mutablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) duration4, periodType8, chronology15);
        boolean boolean17 = duration2.isEqual((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = duration4.toPeriodFrom(readableInstant18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.format.PeriodPrinter periodPrinter22 = null;
        org.joda.time.format.PeriodParser periodParser23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = new org.joda.time.format.PeriodFormatter(periodPrinter22, periodParser23);
        org.joda.time.format.PeriodParser periodParser25 = periodFormatter24.getParser();
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter24.withLocale(locale26);
        org.joda.time.format.PeriodPrinter periodPrinter28 = periodFormatter27.getPrinter();
        org.joda.time.PeriodType periodType29 = periodFormatter27.getParseType();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter27.withLocale(locale30);
        boolean boolean32 = periodFormatter31.isPrinter();
        org.joda.time.Days days34 = org.joda.time.Days.days(32);
        org.joda.time.Days days35 = org.joda.time.Days.ZERO;
        int int36 = days35.getDays();
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days39 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType43 = days42.getPeriodType();
        boolean boolean44 = days39.isGreaterThan(days42);
        org.joda.time.Period period46 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days47 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Days days48 = days42.minus(days47);
        org.joda.time.Days days49 = days35.minus(days42);
        java.lang.String str50 = days49.toString();
        org.joda.time.Days days51 = days34.minus(days49);
        org.joda.time.DurationFieldType durationFieldType52 = days34.getFieldType();
        org.joda.time.DurationFieldType durationFieldType53 = days34.getFieldType();
        org.joda.time.PeriodType periodType54 = days34.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter31.withParseType(periodType54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant21, periodType54);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNull(periodParser25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNull(periodPrinter28);
        org.junit.Assert.assertNull(periodType29);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "P0D" + "'", str50, "P0D");
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodFormatter55);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.Days days2 = duration1.toStandardDays();
        java.lang.String str3 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-86400S" + "'", str3, "PT-86400S");
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = seconds2.dividedBy(2);
        int int6 = seconds2.getSeconds();
        org.joda.time.Seconds seconds8 = seconds2.multipliedBy(27);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        boolean boolean15 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType18 = periodType17.withMinutesRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
        mutablePeriod22.setHours((int) (short) 100);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration26, chronology27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType32 = seconds31.getFieldType();
        mutablePeriod22.add(durationFieldType32, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableDuration36);
        mutablePeriod37.setHours((int) (short) 100);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration41, chronology42);
        org.joda.time.Chronology chronology44 = null;
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration41, chronology44);
        int int46 = duration13.compareTo((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period47 = duration41.toPeriod();
        org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
        org.joda.time.Seconds seconds49 = seconds8.minus(seconds48);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) 1);
        org.joda.time.Duration duration53 = duration51.plus((long) 35);
        org.joda.time.Seconds seconds54 = duration53.toStandardSeconds();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds57 = duration56.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType58 = seconds57.getFieldType();
        org.joda.time.Seconds seconds60 = seconds57.dividedBy(3);
        org.joda.time.Seconds seconds61 = seconds57.negated();
        org.joda.time.Seconds seconds63 = seconds57.plus((-1));
        org.joda.time.Seconds seconds65 = seconds57.minus((-12));
        org.joda.time.Duration duration66 = seconds65.toStandardDuration();
        org.joda.time.Seconds seconds67 = seconds54.minus(seconds65);
        boolean boolean68 = seconds49.isLessThan(seconds67);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 60 + "'", int6 == 60);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(seconds63);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 25, 60000L);
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        java.util.Locale locale7 = periodFormatter5.getLocale();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = minutes8.getFieldType();
        org.joda.time.PeriodType periodType10 = minutes8.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter5.withParseType(periodType10);
        boolean boolean12 = periodFormatter5.isPrinter();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withYearsRemoved();
        java.lang.String str16 = periodType15.toString();
        org.joda.time.PeriodType periodType17 = periodType15.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter5.withParseType(periodType15);
        boolean boolean19 = period2.equals((java.lang.Object) periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[Millis]" + "'", str16, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-2147483588));
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period10 = period8.normalizedStandard(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(600L, (long) (short) -1, periodType9, chronology12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod14.addHours((-25));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period10 = period8.normalizedStandard(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType9);
        org.joda.time.PeriodType periodType12 = periodType9.withYearsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((-1L), 60000L, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 21168000, (long) 13, chronology2);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        int int4 = period3.getMillis();
        org.joda.time.Period period6 = period3.plusYears(13);
        org.joda.time.Seconds seconds7 = period3.toStandardSeconds();
        int int8 = seconds7.size();
        org.joda.time.Seconds seconds10 = seconds7.multipliedBy(74);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(seconds10);
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 2400, (long) 600);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = period2.toDurationTo(readableInstant3);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 7, chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setPeriod((long) ' ', (long) 52);
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period14 = period12.withHours(32);
        org.joda.time.PeriodType periodType15 = period12.getPeriodType();
        org.joda.time.Period period17 = period12.withDays((int) (byte) -1);
        boolean boolean18 = mutablePeriod2.equals((java.lang.Object) (byte) -1);
        mutablePeriod2.setYears(5);
        mutablePeriod2.setDays((int) 'a');
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(100);
        org.joda.time.Period period3 = period1.withMinutes(4);
        int int4 = period1.size();
        int int5 = period1.getSeconds();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        boolean boolean8 = minutes6.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType10 = minutes9.getPeriodType();
        int int11 = minutes9.getMinutes();
        java.lang.String str12 = minutes9.toString();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = minutes13.getFieldType();
        java.lang.String str15 = minutes13.toString();
        boolean boolean16 = minutes9.isLessThan(minutes13);
        org.joda.time.Minutes minutes18 = minutes13.minus(0);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod20);
        boolean boolean22 = minutes13.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes23 = minutes6.minus(minutes21);
        org.joda.time.PeriodType periodType24 = minutes21.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod25 = minutes21.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType26 = minutes21.getFieldType();
        boolean boolean27 = period1.isSupported(durationFieldType26);
        org.joda.time.Period period29 = period1.minusMillis((-5));
        int int30 = period29.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0M" + "'", str12, "PT0M");
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT-2147483648M" + "'", str15, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Period period10 = duration2.toPeriodTo(readableInstant7, periodType9);
        org.joda.time.Minutes minutes11 = duration2.toStandardMinutes();
        org.joda.time.Minutes minutes13 = minutes11.multipliedBy((int) (short) -1);
        int int15 = minutes13.getValue((int) (byte) 0);
        org.joda.time.Minutes minutes17 = minutes13.minus(7);
        org.joda.time.Minutes minutes18 = null;
        org.joda.time.Minutes minutes19 = minutes17.minus(minutes18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes17);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType22 = minutes21.getPeriodType();
        int int23 = minutes21.getMinutes();
        java.lang.String str24 = minutes21.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType26 = minutes25.getFieldType();
        java.lang.String str27 = minutes25.toString();
        boolean boolean28 = minutes21.isLessThan(minutes25);
        org.joda.time.Minutes minutes30 = minutes25.minus(0);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod32);
        boolean boolean34 = minutes25.isGreaterThan(minutes33);
        org.joda.time.DurationFieldType durationFieldType35 = minutes33.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.ZERO;
        boolean boolean38 = minutes36.isLessThan(minutes37);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType40 = minutes39.getPeriodType();
        int int41 = minutes39.getMinutes();
        java.lang.String str42 = minutes39.toString();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType44 = minutes43.getFieldType();
        java.lang.String str45 = minutes43.toString();
        boolean boolean46 = minutes39.isLessThan(minutes43);
        int int47 = minutes39.size();
        org.joda.time.Minutes minutes48 = minutes36.plus(minutes39);
        org.joda.time.Minutes minutes49 = minutes36.negated();
        org.joda.time.Minutes minutes50 = minutes33.minus(minutes49);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType52 = minutes51.getPeriodType();
        int int53 = minutes51.getMinutes();
        java.lang.String str54 = minutes51.toString();
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType56 = minutes55.getFieldType();
        java.lang.String str57 = minutes55.toString();
        boolean boolean58 = minutes51.isLessThan(minutes55);
        org.joda.time.Duration duration59 = minutes51.toStandardDuration();
        org.joda.time.Minutes minutes61 = minutes51.dividedBy((-60));
        boolean boolean62 = minutes33.isGreaterThan(minutes61);
        org.joda.time.Minutes minutes64 = minutes33.minus((int) (short) 0);
        boolean boolean65 = minutes17.isGreaterThan(minutes64);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0M" + "'", str24, "PT0M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-2147483648M" + "'", str27, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0M" + "'", str42, "PT0M");
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT-2147483648M" + "'", str45, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0M" + "'", str54, "PT0M");
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT-2147483648M" + "'", str57, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withMillis((int) (byte) -1);
        org.joda.time.Period period5 = period1.minusMinutes(2);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant3, readableDuration4);
        mutablePeriod5.setPeriod((long) ' ', (long) 52);
        mutablePeriod5.addDays(100);
        org.joda.time.PeriodType periodType11 = mutablePeriod5.getPeriodType();
        org.joda.time.Period period12 = new org.joda.time.Period((long) (short) 0, periodType11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-60), (long) 3, periodType11);
        org.joda.time.Period period15 = period13.withSeconds(0);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(1);
        org.joda.time.Days days2 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days4 = days2.minus(25);
        org.joda.time.Period period5 = period1.plus((org.joda.time.ReadablePeriod) days4);
        java.lang.String str6 = days4.toString();
        org.joda.time.MutablePeriod mutablePeriod7 = days4.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P2147483622D" + "'", str6, "P2147483622D");
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod2.addSeconds(100);
        java.lang.Object obj5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(obj5);
        org.joda.time.Duration duration7 = duration6.toDuration();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.Period period13 = duration7.toPeriodTo(readableInstant9, periodType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (-2147483648), periodType11, chronology14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays(7200000L);
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration18.toPeriodTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        boolean boolean31 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, readableInstant32, periodType33);
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant24, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period38 = duration29.toPeriod(periodType37);
        boolean boolean39 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration29);
        int int40 = duration18.compareTo((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str43 = duration42.toString();
        org.joda.time.Duration duration45 = duration42.minus((long) (byte) 10);
        org.joda.time.Duration duration47 = duration42.withMillis((long) (short) -1);
        long long48 = duration42.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType52 = periodType51.withDaysRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period((-60L), periodType52);
        org.joda.time.Period period54 = duration42.toPeriodFrom(readableInstant49, periodType52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration29.toPeriod(periodType52, chronology55);
        mutablePeriod15.add((org.joda.time.ReadableDuration) duration29);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT600S" + "'", str43, "PT600S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours10 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = hours10.minus(0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours15 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean16 = hours13.isGreaterThan(hours15);
        boolean boolean17 = hours12.isLessThan(hours15);
        java.lang.String str18 = hours12.toString();
        org.joda.time.Hours hours19 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours20 = hours12.plus(hours19);
        org.joda.time.Hours hours21 = hours7.minus(hours12);
        org.joda.time.Duration duration22 = org.joda.time.Duration.ZERO;
        long long23 = duration22.getStandardDays();
        org.joda.time.Hours hours24 = duration22.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType25 = hours24.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod26 = hours24.toMutablePeriod();
        org.joda.time.Hours hours27 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = hours27.getFieldType();
        org.joda.time.Hours hours29 = hours24.plus(hours27);
        org.joda.time.Hours hours30 = hours12.plus(hours29);
        org.joda.time.PeriodType periodType31 = hours29.getPeriodType();
        org.joda.time.Hours hours32 = org.joda.time.Hours.ONE;
        org.joda.time.Period period33 = hours32.toPeriod();
        int int34 = hours32.getHours();
        org.joda.time.Hours hours36 = hours32.multipliedBy((-940));
        org.joda.time.Hours hours38 = org.joda.time.Hours.parseHours("PT0S");
        java.lang.String str39 = hours38.toString();
        org.joda.time.Hours hours40 = hours36.minus(hours38);
        boolean boolean41 = hours29.isGreaterThan(hours40);
        org.joda.time.Hours hours43 = hours29.multipliedBy((-20));
        org.joda.time.PeriodType periodType44 = hours29.getPeriodType();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT4H" + "'", str18, "PT4H");
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0H" + "'", str39, "PT0H");
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 0, 52, (int) (short) -1, 52, (-1), (int) ' ', (int) '4', 8);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        mutablePeriod9.setPeriod(1L, (long) (short) 10, chronology12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(540000L, (long) '4');
        java.lang.String str17 = mutablePeriod16.toString();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = mutablePeriod16.toDurationTo(readableInstant18);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant24, readableDuration25);
        mutablePeriod26.setHours((int) (short) 100);
        boolean boolean29 = periodType23.equals((java.lang.Object) mutablePeriod26);
        org.joda.time.PeriodType periodType30 = periodType23.withYearsRemoved();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration19.toPeriod(periodType23, chronology31);
        long long33 = duration19.getStandardMinutes();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration19);
        mutablePeriod9.setPeriod(84326400000L, (long) 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-8M-59.948S" + "'", str17, "PT-8M-59.948S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-8L) + "'", long33 == (-8L));
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalFrom(readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Interval interval7 = duration1.toIntervalFrom(readableInstant6);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        boolean boolean14 = weeks11.isLessThan(weeks13);
        org.joda.time.Weeks weeks15 = weeks11.negated();
        org.joda.time.MutablePeriod mutablePeriod16 = weeks15.toMutablePeriod();
        org.joda.time.Weeks weeks17 = weeks1.minus(weeks15);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks24 = weeks21.minus((int) (short) -1);
        org.joda.time.Weeks weeks26 = weeks24.multipliedBy(0);
        org.joda.time.Weeks weeks27 = null;
        boolean boolean28 = weeks24.isLessThan(weeks27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.weeksIn(readableInterval31);
        boolean boolean33 = weeks30.isLessThan(weeks32);
        org.joda.time.Weeks weeks34 = weeks30.negated();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) weeks30, chronology35);
        int[] intArray37 = period36.getValues();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = period36.getFieldTypes();
        boolean boolean39 = weeks24.equals((java.lang.Object) durationFieldTypeArray38);
        org.joda.time.Weeks weeks40 = weeks17.minus(weeks24);
        org.joda.time.PeriodType periodType41 = weeks17.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = periodType41.getFieldType((-609));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -609");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(4L);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (-2147483648), (long) (short) 10, chronology2);
        mutablePeriod3.addWeeks((int) 'a');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        boolean boolean10 = weeks7.isLessThan(weeks9);
        org.joda.time.Weeks weeks11 = weeks7.negated();
        org.joda.time.MutablePeriod mutablePeriod12 = weeks11.toMutablePeriod();
        int int13 = mutablePeriod12.getWeeks();
        mutablePeriod12.addHours(0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        java.lang.Object obj18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(obj18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant17, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant16, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        java.lang.Object obj25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(obj25);
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant24, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant23, (org.joda.time.ReadableDuration) duration26);
        int int29 = duration19.compareTo((org.joda.time.ReadableDuration) duration26);
        long long30 = duration19.getStandardSeconds();
        long long31 = duration19.getMillis();
        org.joda.time.Period period32 = duration19.toPeriod();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationTo(readableInstant33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration34.toIntervalTo(readableInstant35);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval36);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType40 = weeks39.getPeriodType();
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        boolean boolean12 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType15 = periodType14.withMinutesRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant13, periodType14);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant5, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period19 = duration10.toPeriod(periodType18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant21, readableDuration22);
        mutablePeriod23.setHours((int) (short) 100);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration27, chronology28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant20, (org.joda.time.ReadableDuration) duration27, periodType31);
        org.joda.time.Period period34 = duration10.toPeriod(periodType31);
        org.joda.time.format.PeriodFormatter periodFormatter35 = periodFormatter3.withParseType(periodType31);
        org.joda.time.format.PeriodParser periodParser36 = periodFormatter3.getParser();
        org.joda.time.PeriodType periodType37 = periodFormatter3.getParseType();
        boolean boolean38 = periodFormatter3.isParser();
        boolean boolean39 = periodFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = org.joda.time.MutablePeriod.parse("P-12D", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodFormatter35);
        org.junit.Assert.assertNull(periodParser36);
        org.junit.Assert.assertNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.joda.time.Period period1 = org.joda.time.Period.days(59);
        int[] intArray2 = period1.getValues();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 59, 0, 0, 0, 0]");
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours1 = hours0.negated();
        org.joda.time.Hours hours2 = org.joda.time.Hours.ONE;
        boolean boolean3 = hours1.isLessThan(hours2);
        org.joda.time.DurationFieldType durationFieldType4 = hours1.getFieldType();
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Hours hours8 = duration5.toStandardHours();
        org.joda.time.Hours hours9 = hours1.minus(hours8);
        int int10 = hours1.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-8) + "'", int10 == (-8));
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        int int3 = mutablePeriod2.getHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        long long5 = duration4.getStandardDays();
        org.joda.time.Hours hours6 = duration4.toStandardHours();
        long long7 = duration4.getStandardMinutes();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) 25);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((java.lang.Object) duration10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType16 = periodType15.withDaysRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((-60L), periodType16);
        org.joda.time.Period period18 = duration12.toPeriodFrom(readableInstant13, periodType16);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.Hours hours21 = hours19.minus(2147483647);
        org.joda.time.Hours hours23 = hours19.plus((-13));
        org.joda.time.Hours hours24 = hours23.negated();
        org.joda.time.Duration duration25 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.Hours hours28 = duration25.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType29 = hours28.getFieldType();
        org.joda.time.Hours hours30 = org.joda.time.Hours.ONE;
        org.joda.time.DurationFieldType durationFieldType31 = hours30.getFieldType();
        org.joda.time.Hours hours32 = hours28.plus(hours30);
        org.joda.time.Hours hours34 = org.joda.time.Hours.hours(25);
        org.joda.time.DurationFieldType durationFieldType35 = hours34.getFieldType();
        org.joda.time.Duration duration36 = org.joda.time.Duration.ZERO;
        long long37 = duration36.getStandardDays();
        org.joda.time.Hours hours38 = duration36.toStandardHours();
        boolean boolean39 = hours34.isLessThan(hours38);
        org.joda.time.Hours hours41 = hours34.dividedBy((int) (byte) 10);
        org.joda.time.Hours hours42 = hours28.minus(hours41);
        org.joda.time.Hours hours43 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours45 = hours43.minus(0);
        int int46 = hours43.getHours();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withDaysRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType51);
        org.joda.time.Hours hours53 = period52.toStandardHours();
        org.joda.time.Hours hours55 = hours53.minus((-1));
        boolean boolean56 = hours43.isLessThan(hours53);
        org.joda.time.Hours hours57 = hours41.minus(hours43);
        org.joda.time.Hours hours59 = hours57.minus(2);
        org.joda.time.Duration duration60 = hours59.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType61 = hours59.getFieldType();
        org.joda.time.Hours hours63 = hours59.plus(194);
        org.joda.time.Hours hours64 = hours23.plus(hours63);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(hours63);
        org.junit.Assert.assertNotNull(hours64);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours0.minus(10);
        org.joda.time.Hours hours3 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean6 = hours3.isGreaterThan(hours5);
        org.joda.time.Hours hours8 = hours3.minus((int) (byte) 0);
        org.joda.time.Hours hours10 = hours8.minus((int) '#');
        org.joda.time.Duration duration11 = hours10.toStandardDuration();
        org.joda.time.Hours hours12 = hours2.minus(hours10);
        org.joda.time.Hours hours14 = hours2.dividedBy((int) (byte) 1);
        java.lang.String str15 = hours14.toString();
        org.joda.time.PeriodType periodType16 = hours14.getPeriodType();
        org.joda.time.Hours hours17 = hours14.negated();
        org.joda.time.Hours hours19 = hours14.plus((-672));
        org.joda.time.Hours hours20 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) hours19);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT-7H" + "'", str15, "PT-7H");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType14 = minutes13.getPeriodType();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes16 = minutes13.plus(minutes15);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.ZERO;
        boolean boolean19 = minutes17.isLessThan(minutes18);
        boolean boolean20 = minutes13.isLessThan(minutes17);
        org.joda.time.Minutes minutes22 = minutes17.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType25 = minutes24.getPeriodType();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes27 = minutes24.plus(minutes26);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.ZERO;
        boolean boolean30 = minutes28.isLessThan(minutes29);
        boolean boolean31 = minutes24.isLessThan(minutes28);
        org.joda.time.Duration duration32 = minutes24.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        java.lang.Object obj35 = null;
        org.joda.time.Duration duration36 = new org.joda.time.Duration(obj35);
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant34, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant33, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType42 = periodType41.withWeeksRemoved();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration40.toPeriod(periodType41, chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType47 = periodType46.withMonthsRemoved();
        org.joda.time.Period period48 = duration40.toPeriodTo(readableInstant45, periodType47);
        org.joda.time.Period period49 = duration40.toPeriod();
        org.joda.time.Duration duration50 = duration36.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration52 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration40, 25);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration32.toIntervalFrom(readableInstant53);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Minutes minutes56 = minutes22.plus(minutes55);
        org.joda.time.Minutes minutes57 = minutes10.plus(minutes55);
        org.joda.time.Minutes minutes59 = minutes10.dividedBy((int) 'a');
        org.joda.time.PeriodType periodType60 = minutes10.getPeriodType();
        int int61 = minutes10.size();
        org.joda.time.Minutes minutes63 = minutes10.minus((int) (byte) 10);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType65 = minutes64.getPeriodType();
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes67 = minutes64.plus(minutes66);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.ZERO;
        boolean boolean70 = minutes68.isLessThan(minutes69);
        boolean boolean71 = minutes64.isLessThan(minutes68);
        org.joda.time.Minutes minutes73 = minutes68.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes75 = minutes73.multipliedBy(54);
        org.joda.time.Minutes minutes76 = null;
        boolean boolean77 = minutes75.isGreaterThan(minutes76);
        org.joda.time.Minutes minutes78 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType79 = minutes78.getPeriodType();
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes81 = minutes78.plus(minutes80);
        org.joda.time.Minutes minutes82 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes83 = org.joda.time.Minutes.ZERO;
        boolean boolean84 = minutes82.isLessThan(minutes83);
        boolean boolean85 = minutes78.isLessThan(minutes82);
        org.joda.time.DurationFieldType durationFieldType86 = minutes82.getFieldType();
        org.joda.time.Minutes minutes88 = minutes82.multipliedBy((int) (short) 10);
        boolean boolean89 = minutes75.isLessThan(minutes88);
        org.joda.time.PeriodType periodType90 = minutes88.getPeriodType();
        org.joda.time.ReadableInterval readableInterval91 = null;
        org.joda.time.Minutes minutes92 = org.joda.time.Minutes.minutesIn(readableInterval91);
        org.joda.time.Minutes minutes94 = minutes92.dividedBy((int) (byte) 1);
        org.joda.time.Minutes minutes95 = minutes88.plus(minutes94);
        org.joda.time.Minutes minutes97 = minutes94.minus((-637));
        boolean boolean98 = minutes10.isLessThan(minutes97);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(minutes92);
        org.junit.Assert.assertNotNull(minutes94);
        org.junit.Assert.assertNotNull(minutes95);
        org.junit.Assert.assertNotNull(minutes97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.minusWeeks(52);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        long long6 = duration5.getStandardHours();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) 88500, 515);
        org.joda.time.Duration duration11 = duration9.minus((long) 2);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(126000000L, chronology1);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration18, chronology19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType24 = seconds23.getFieldType();
        mutablePeriod14.add(durationFieldType24, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
        mutablePeriod29.setHours((int) (short) 100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33, chronology34);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration33, chronology36);
        int int38 = duration5.compareTo((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration39 = duration33.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = duration39.toPeriodTo(readableInstant43, periodType44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType50 = periodType49.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        java.lang.String str52 = periodType49.toString();
        org.joda.time.PeriodType periodType53 = periodType49.withDaysRemoved();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration39.toPeriod(periodType53, chronology54);
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PeriodType[YearWeekDay]" + "'", str52, "PeriodType[YearWeekDay]");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT1944000000S");
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks7 = weeks6.negated();
        org.joda.time.Weeks weeks9 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks11 = weeks9.multipliedBy(0);
        org.joda.time.Weeks weeks13 = weeks9.plus((int) '4');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) weeks9, chronology14);
        org.joda.time.MutablePeriod mutablePeriod16 = weeks9.toMutablePeriod();
        mutablePeriod16.setMonths(15120008);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(mutablePeriod16);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        java.util.Locale locale6 = periodFormatter2.getLocale();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter2.getParser();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, readableDuration12);
        org.joda.time.Period period14 = mutablePeriod13.toPeriod();
        int int15 = period14.size();
        org.joda.time.Period period17 = period14.plusDays(1);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period19 = period14.withFields((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType23 = minutes22.getPeriodType();
        int int24 = minutes22.getMinutes();
        java.lang.String str25 = minutes22.toString();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType27 = minutes26.getFieldType();
        java.lang.String str28 = minutes26.toString();
        boolean boolean29 = minutes22.isLessThan(minutes26);
        org.joda.time.Minutes minutes30 = minutes22.negated();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes34 = minutes32.dividedBy((int) '#');
        org.joda.time.Minutes minutes35 = minutes22.minus(minutes32);
        boolean boolean36 = minutes21.isGreaterThan(minutes32);
        org.joda.time.Minutes minutes37 = minutes18.minus(minutes32);
        org.joda.time.Duration duration38 = minutes18.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType44 = periodType43.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (-1), periodType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(10L, (long) 8, periodType44, chronology46);
        org.joda.time.PeriodType periodType48 = mutablePeriod47.getPeriodType();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType48);
        org.joda.time.PeriodType periodType51 = periodType48.withMillisRemoved();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) periodParser10, periodType48, chronology52);
        org.joda.time.PeriodType periodType54 = periodType48.withDaysRemoved();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0M" + "'", str25, "PT0M");
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-2147483648M" + "'", str28, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.minus(10);
        boolean boolean7 = days1.isGreaterThan(days4);
        org.joda.time.Days days8 = org.joda.time.Days.ZERO;
        org.joda.time.Days days9 = org.joda.time.Days.ZERO;
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days14 = days12.minus(10);
        boolean boolean15 = days9.isGreaterThan(days12);
        org.joda.time.Days days16 = days8.minus(days9);
        org.joda.time.Days days17 = days1.plus(days8);
        org.joda.time.Days days18 = days0.minus(days1);
        org.joda.time.Days days20 = days1.multipliedBy((-2));
        org.joda.time.Duration duration21 = days1.toStandardDuration();
        org.joda.time.Days days22 = days1.negated();
        org.joda.time.Days days24 = days22.multipliedBy(59);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.joda.time.Period period1 = org.joda.time.Period.days(21168000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Duration duration4 = hours2.toStandardDuration();
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Period period7 = period5.minusSeconds((int) (byte) 100);
        org.joda.time.Period period9 = period5.withWeeks(52);
        org.joda.time.Period period11 = period9.plusHours(135);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration16 = duration8.toDuration();
        org.joda.time.Period period17 = duration16.toPeriod();
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.minusDays((-2));
        org.joda.time.Period period21 = period17.toPeriod();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period32 = period30.normalizedStandard(periodType31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType31);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((-1L), 60000L, periodType34);
        org.joda.time.Chronology chronology36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) period21, periodType34, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant8, periodType9);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period13 = period12.negated();
        int int14 = period12.getWeeks();
        org.joda.time.Period period15 = period12.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusDays(97);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        org.joda.time.PeriodType periodType13 = periodFormatter10.getParseType();
        java.util.Locale locale14 = periodFormatter10.getLocale();
        boolean boolean15 = periodFormatter10.isParser();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter10.withLocale(locale16);
        boolean boolean18 = periodFormatter10.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter19 = periodFormatter10.getPrinter();
        org.joda.time.Days days20 = org.joda.time.Days.ZERO;
        org.joda.time.Period period22 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days23 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Days days25 = days23.minus(10);
        boolean boolean26 = days20.isGreaterThan(days23);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        boolean boolean34 = days29.isGreaterThan(days32);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Days days38 = days32.minus(days37);
        int int39 = days32.size();
        org.joda.time.Days days40 = org.joda.time.Days.ZERO;
        org.joda.time.Period period42 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Days days45 = days43.minus(10);
        boolean boolean46 = days40.isGreaterThan(days43);
        org.joda.time.Days days47 = days32.minus(days43);
        org.joda.time.Days days48 = days20.minus(days43);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = durationFieldType49.isSupported(chronology50);
        int int52 = days20.get(durationFieldType49);
        org.joda.time.PeriodType periodType53 = days20.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter10.withParseType(periodType53);
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodType13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(periodPrinter19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodFormatter54);
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.Days days8 = org.joda.time.Days.ZERO;
        int int9 = days8.getDays();
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        boolean boolean17 = days12.isGreaterThan(days15);
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Days days21 = days15.minus(days20);
        org.joda.time.Days days22 = days8.minus(days15);
        boolean boolean23 = duration3.equals((java.lang.Object) days15);
        org.joda.time.Period period24 = duration3.toPeriod();
        org.joda.time.Duration duration25 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant30, readableDuration31);
        mutablePeriod32.setPeriod((long) ' ', (long) 52);
        mutablePeriod32.addDays(100);
        org.joda.time.PeriodType periodType38 = mutablePeriod32.getPeriodType();
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) 0, periodType38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant26, periodType38);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((-2419200000L), 600052L, periodType38);
        mutablePeriod42.setMillis(600);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = mutablePeriod1.toDurationFrom(readableInstant3);
        mutablePeriod1.add((long) (-4));
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.withHours((int) (byte) 1);
        org.joda.time.Period period12 = period10.withHours((int) (short) -1);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period10);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Duration duration12 = duration9.minus((long) (byte) 10);
        java.lang.String str13 = duration9.toString();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        java.lang.Object obj16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(obj16);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant14, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.toDuration();
        int int21 = duration9.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period22 = duration9.toPeriod();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.parseWeeks("P1W");
        org.joda.time.PeriodType periodType25 = weeks24.getPeriodType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration9.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period31 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType33 = period31.getFieldType((int) (short) 1);
        org.joda.time.Period period35 = period31.plusDays(10);
        boolean boolean36 = periodType29.equals((java.lang.Object) 10);
        org.joda.time.Period period37 = new org.joda.time.Period((long) ' ', periodType29);
        java.lang.String str38 = periodType29.toString();
        org.joda.time.Period period39 = duration9.toPeriod(periodType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period(51840000, 6, 8384459, (int) (short) -1, 0, 54, (-637), 9, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT600S" + "'", str10, "PT600S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT600S" + "'", str13, "PT600S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearMonthDay]" + "'", str38, "PeriodType[YearMonthDay]");
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 60, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        org.joda.time.Duration duration9 = duration7.minus((long) 515);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        java.lang.String str16 = seconds15.toString();
        org.joda.time.PeriodType periodType17 = seconds15.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 3, 599990L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant2, (org.joda.time.ReadableDuration) duration9, periodType17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(41L, 1666L, periodType17, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period23.withYears(2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT60S" + "'", str16, "PT60S");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        org.joda.time.Period period4 = new org.joda.time.Period(10, 0, (int) (byte) 10, (int) (byte) 10);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Period period7 = period4.withHours((int) '#');
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        mutablePeriod8.setHours(671);
        java.lang.String str11 = mutablePeriod8.toString();
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT671H10.010S" + "'", str11, "PT671H10.010S");
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.joda.time.Days days1 = org.joda.time.Days.days(0);
        org.joda.time.Days days3 = days1.dividedBy(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = days1.getFieldType(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration9.toPeriod(periodType10, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType16 = periodType15.withMonthsRemoved();
        org.joda.time.Period period17 = duration9.toPeriodTo(readableInstant14, periodType16);
        org.joda.time.Minutes minutes18 = duration9.toStandardMinutes();
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = minutes18.minus((int) (short) 0);
        org.joda.time.PeriodType periodType23 = minutes18.getPeriodType();
        org.joda.time.PeriodType periodType24 = minutes18.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = new org.joda.time.Period(2147482976, (-141), (-21167965), 21168000, 9, 15120008, (-8), 671, periodType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        int int7 = days6.getDays();
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        boolean boolean15 = days10.isGreaterThan(days13);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days19 = days13.minus(days18);
        org.joda.time.Days days20 = days6.minus(days13);
        boolean boolean21 = duration1.equals((java.lang.Object) days13);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Days days26 = days24.minus(10);
        org.joda.time.Days days28 = days26.plus((int) (short) -1);
        org.joda.time.Days days29 = days13.plus(days26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant33, readableDuration34);
        mutablePeriod35.setPeriod((long) ' ', (long) 52);
        mutablePeriod35.addDays(100);
        org.joda.time.PeriodType periodType41 = mutablePeriod35.getPeriodType();
        org.joda.time.Period period42 = new org.joda.time.Period((long) (short) 0, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) days13, periodType41);
        java.lang.String str45 = mutablePeriod44.toString();
        int int46 = mutablePeriod44.getDays();
        mutablePeriod44.setPeriod(59959L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType7 = minutes6.getFieldType();
        org.joda.time.PeriodType periodType8 = minutes6.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withParseType(periodType8);
        org.joda.time.Period period10 = new org.joda.time.Period(100L, periodType8);
        org.joda.time.PeriodType periodType11 = periodType8.withMonthsRemoved();
        java.lang.String str12 = periodType11.getName();
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minutes" + "'", str12, "Minutes");
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        int int6 = period3.getWeeks();
        org.joda.time.Period period8 = period3.withMillis((int) 'a');
        int int9 = period3.size();
        org.joda.time.PeriodType periodType10 = period3.getPeriodType();
        org.joda.time.Period period12 = period3.withMinutes((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = period12.getFieldType(40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours9 = period7.toStandardHours();
        org.joda.time.Period period14 = new org.joda.time.Period(10, 0, (int) (byte) 10, (int) (byte) 10);
        org.joda.time.Period period15 = period7.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutablePeriod mutablePeriod16 = period7.toMutablePeriod();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        org.joda.time.Weeks weeks2 = null;
        boolean boolean3 = weeks0.isLessThan(weeks2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        boolean boolean8 = weeks5.isLessThan(weeks7);
        org.joda.time.Weeks weeks10 = weeks7.minus((int) (short) -1);
        org.joda.time.Weeks weeks12 = weeks10.multipliedBy(0);
        org.joda.time.Weeks weeks13 = null;
        boolean boolean14 = weeks10.isLessThan(weeks13);
        int int16 = weeks10.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn(readableInterval17);
        org.joda.time.Weeks weeks20 = weeks18.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks21 = weeks10.minus(weeks20);
        org.joda.time.MutablePeriod mutablePeriod22 = weeks21.toMutablePeriod();
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.ONE;
        org.joda.time.Weeks weeks24 = weeks21.minus(weeks23);
        boolean boolean25 = weeks0.isGreaterThan(weeks24);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period5 = period3.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Weeks weeks7 = weeks1.plus(weeks6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks13 = weeks9.negated();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) weeks9, chronology14);
        org.joda.time.Weeks weeks17 = weeks9.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks23 = weeks19.negated();
        org.joda.time.MutablePeriod mutablePeriod24 = weeks23.toMutablePeriod();
        org.joda.time.Weeks weeks25 = weeks9.minus(weeks23);
        org.joda.time.Weeks weeks26 = weeks1.plus(weeks23);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks32 = weeks28.negated();
        org.joda.time.Weeks weeks34 = weeks32.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeksIn(readableInterval37);
        boolean boolean39 = weeks36.isLessThan(weeks38);
        org.joda.time.Weeks weeks41 = weeks38.minus((int) (short) -1);
        org.joda.time.Weeks weeks43 = weeks41.multipliedBy(0);
        boolean boolean44 = weeks34.isGreaterThan(weeks43);
        org.joda.time.Period period49 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period51 = period49.withDays((int) 'a');
        org.joda.time.Weeks weeks52 = period51.toStandardWeeks();
        int int53 = weeks52.getWeeks();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Weeks weeks57 = org.joda.time.Weeks.weeksIn(readableInterval56);
        boolean boolean58 = weeks55.isLessThan(weeks57);
        org.joda.time.Weeks weeks60 = weeks57.minus((int) (short) -1);
        org.joda.time.Weeks weeks61 = weeks60.negated();
        org.joda.time.Weeks weeks63 = weeks60.multipliedBy(0);
        boolean boolean64 = weeks52.isGreaterThan(weeks63);
        org.joda.time.Weeks weeks65 = weeks43.minus(weeks52);
        org.joda.time.Weeks weeks66 = weeks23.minus(weeks43);
        org.joda.time.Weeks weeks68 = weeks43.multipliedBy((int) ' ');
        org.joda.time.Weeks weeks69 = weeks43.negated();
        org.joda.time.Period period74 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period76 = period74.withDays((int) 'a');
        org.joda.time.Weeks weeks77 = period76.toStandardWeeks();
        int int78 = weeks77.getWeeks();
        org.joda.time.Weeks weeks80 = weeks77.multipliedBy((int) ' ');
        org.joda.time.ReadableInterval readableInterval81 = null;
        org.joda.time.Weeks weeks82 = org.joda.time.Weeks.weeksIn(readableInterval81);
        org.joda.time.ReadableInterval readableInterval83 = null;
        org.joda.time.Weeks weeks84 = org.joda.time.Weeks.weeksIn(readableInterval83);
        boolean boolean85 = weeks82.isLessThan(weeks84);
        org.joda.time.Weeks weeks86 = weeks82.negated();
        org.joda.time.Weeks weeks88 = weeks86.minus((int) (byte) 100);
        org.joda.time.Weeks weeks90 = weeks86.minus((int) (short) 10);
        int int91 = weeks80.compareTo((org.joda.time.base.BaseSingleFieldPeriod) weeks86);
        org.joda.time.Weeks weeks92 = weeks86.negated();
        boolean boolean93 = weeks43.isGreaterThan(weeks92);
        org.joda.time.Weeks weeks95 = weeks92.dividedBy((-2147483647));
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 13 + "'", int53 == 13);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(weeks69);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 13 + "'", int78 == 13);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(weeks86);
        org.junit.Assert.assertNotNull(weeks88);
        org.junit.Assert.assertNotNull(weeks90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(weeks92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(weeks95);
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        java.util.Locale locale7 = periodFormatter5.getLocale();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = minutes8.getFieldType();
        org.joda.time.PeriodType periodType10 = minutes8.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter5.withParseType(periodType10);
        org.joda.time.Period period12 = new org.joda.time.Period(100L, periodType10);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType10);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period2 = new org.joda.time.Period((long) 8, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = period9.withSeconds((int) ' ');
        org.joda.time.Period period13 = period6.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType15 = periodType14.withMonthsRemoved();
        org.joda.time.Period period16 = period13.withPeriodType(periodType14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (short) 0, (-1L), periodType14);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (short) 1, periodType19, chronology20);
        boolean boolean22 = periodType14.equals((java.lang.Object) chronology20);
        org.joda.time.PeriodType periodType23 = periodType14.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant1, readableInstant2, periodType14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(16830730L, periodType14, chronology25);
        org.joda.time.PeriodType periodType27 = periodType14.withDaysRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withMillisRemoved();
        java.lang.String str29 = periodType27.toString();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[Weeks]" + "'", str29, "PeriodType[Weeks]");
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT0S");
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod1.setPeriod((long) 25, (long) (byte) 100, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 0, (long) 2, chronology8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration14 = seconds13.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType15 = seconds13.getFieldType();
        org.joda.time.Chronology chronology16 = null;
        boolean boolean17 = durationFieldType15.isSupported(chronology16);
        int int18 = periodType12.indexOf(durationFieldType15);
        mutablePeriod9.set(durationFieldType15, 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DurationField durationField22 = durationFieldType15.getField(chronology21);
        int int23 = mutablePeriod1.get(durationFieldType15);
        mutablePeriod1.setMillis((-32));
        mutablePeriod1.setDays((-2147483648));
        mutablePeriod1.setPeriod((long) 10, 38880L);
        mutablePeriod1.addMinutes((int) (short) 0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        boolean boolean4 = seconds1.isGreaterThan(seconds2);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod7.addYears((int) '4');
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.add((long) 100, chronology11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        java.lang.String str16 = seconds15.toString();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        boolean boolean18 = seconds15.isSupported(durationFieldType17);
        int int19 = mutablePeriod7.get(durationFieldType17);
        boolean boolean20 = seconds2.isSupported(durationFieldType17);
        org.joda.time.Seconds seconds22 = seconds2.dividedBy((int) ' ');
        org.joda.time.Seconds seconds24 = seconds2.minus(658);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.standardSecondsIn(readablePeriod25);
        org.joda.time.Seconds seconds27 = seconds26.negated();
        org.joda.time.Seconds seconds28 = seconds24.minus(seconds26);
        org.joda.time.PeriodType periodType29 = seconds26.getPeriodType();
        org.joda.time.PeriodType periodType30 = seconds26.getPeriodType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT60S" + "'", str16, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(obj0, chronology1);
        int int3 = period2.getSeconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Period period10 = period8.negated();
        int int11 = period10.getHours();
        org.joda.time.Period period13 = period10.minusDays(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        boolean boolean21 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, readableInstant22, periodType23);
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant14, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period28 = period26.withYears(10);
        org.joda.time.Period period30 = period26.plusMillis(100);
        org.joda.time.Period period31 = period10.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        java.lang.String str39 = seconds38.toString();
        org.joda.time.PeriodType periodType40 = seconds38.getPeriodType();
        org.joda.time.PeriodType periodType41 = seconds38.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant32, (org.joda.time.ReadableDuration) duration33, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod42.toMutablePeriod();
        org.joda.time.Period period44 = period26.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Seconds seconds45 = period26.toStandardSeconds();
        org.joda.time.Period period46 = period26.toPeriod();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = period26.toDurationFrom(readableInstant47);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT60S" + "'", str39, "PT60S");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
        mutablePeriod7.setPeriod((long) ' ', (long) 52);
        mutablePeriod7.addDays(100);
        org.joda.time.PeriodType periodType13 = mutablePeriod7.getPeriodType();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 0, periodType13);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType13);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType13);
        org.joda.time.Period period18 = period16.plusMonths(13);
        org.joda.time.Duration duration19 = period16.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period30 = period28.normalizedStandard(periodType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, 1L, periodType29, chronology31);
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant20, readableInstant21, periodType29);
        boolean boolean34 = duration19.equals((java.lang.Object) readableInstant21);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Duration duration37 = duration19.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant38);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        java.lang.String str2 = hours1.toString();
        org.joda.time.PeriodType periodType3 = hours1.getPeriodType();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration4.toPeriod(chronology5);
        org.joda.time.Hours hours7 = duration4.toStandardHours();
        java.lang.Object obj8 = null;
        boolean boolean9 = hours7.equals(obj8);
        boolean boolean10 = hours1.isLessThan(hours7);
        org.joda.time.Period period11 = hours7.toPeriod();
        org.joda.time.Duration duration12 = hours7.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType13 = hours7.getFieldType();
        org.joda.time.Hours hours15 = hours7.dividedBy((-672));
        org.joda.time.PeriodType periodType16 = hours7.getPeriodType();
        org.joda.time.Hours hours18 = hours7.multipliedBy((-8));
        org.joda.time.Hours hours20 = hours7.minus((-58));
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT-1H" + "'", str2, "PT-1H");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 10);
        mutablePeriod1.addMonths(100);
        mutablePeriod1.add(600, 0, 52, 2, 5, 13, (int) (short) 0, (int) (byte) 100);
        mutablePeriod1.addMillis(515);
        mutablePeriod1.add(688, 4, 70, (-87), 59, 0, 2400, 515);
        org.joda.time.Period period26 = mutablePeriod1.toPeriod();
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) 100, chronology6);
        mutablePeriod2.setMillis((int) (byte) 10);
        mutablePeriod2.setPeriod((long) '#');
        mutablePeriod2.clear();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod2);
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.joda.time.Period period4 = new org.joda.time.Period(10, 0, (int) (byte) 10, (int) (byte) 10);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Period period7 = period4.withHours((int) '#');
        org.joda.time.Period period9 = period7.plusWeeks((-999));
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        java.lang.String str3 = seconds0.toString();
        org.joda.time.Seconds seconds4 = null;
        org.joda.time.Seconds seconds5 = seconds0.minus(seconds4);
        org.joda.time.Seconds seconds7 = seconds5.plus((-672));
        org.joda.time.Seconds seconds8 = seconds7.negated();
        org.joda.time.DurationFieldType durationFieldType9 = seconds7.getFieldType();
        org.joda.time.Duration duration10 = seconds7.toStandardDuration();
        int int11 = seconds7.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-672) + "'", int11 == (-672));
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        org.joda.time.Period period7 = mutablePeriod6.toPeriod();
        org.joda.time.Period period9 = period7.withHours(0);
        int int10 = period7.getWeeks();
        org.joda.time.Period period12 = period7.withMillis((int) 'a');
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        boolean boolean17 = weeks14.isLessThan(weeks16);
        org.joda.time.Weeks weeks19 = weeks16.minus((int) (short) -1);
        org.joda.time.Weeks weeks21 = weeks19.multipliedBy(0);
        org.joda.time.Weeks weeks22 = null;
        boolean boolean23 = weeks19.isLessThan(weeks22);
        int int25 = weeks19.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        org.joda.time.Weeks weeks29 = weeks27.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks30 = weeks19.minus(weeks29);
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks33 = weeks31.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DurationField durationField36 = durationFieldType34.getField(chronology35);
        boolean boolean37 = weeks31.isSupported(durationFieldType34);
        org.joda.time.Weeks weeks38 = weeks30.plus(weeks31);
        org.joda.time.Period period39 = period7.minus((org.joda.time.ReadablePeriod) weeks30);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.Period period41 = new org.joda.time.Period(0L, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (-5), (long) '4', periodType40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (-73), periodType40, chronology43);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType13.isSupported(chronology14);
        boolean boolean16 = weeks6.isSupported(durationFieldType13);
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks23 = weeks19.negated();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.weeksIn(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        boolean boolean28 = weeks25.isLessThan(weeks27);
        org.joda.time.Weeks weeks29 = weeks25.negated();
        org.joda.time.Weeks weeks31 = weeks29.minus((int) (byte) 100);
        org.joda.time.Weeks weeks32 = weeks23.plus(weeks29);
        boolean boolean33 = weeks17.isLessThan(weeks29);
        org.joda.time.Weeks weeks34 = weeks6.minus(weeks29);
        org.joda.time.Weeks weeks36 = weeks34.plus((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeksIn(readableInterval37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn(readableInterval39);
        boolean boolean41 = weeks38.isLessThan(weeks40);
        org.joda.time.Weeks weeks42 = weeks38.negated();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((java.lang.Object) weeks38, chronology43);
        org.joda.time.Weeks weeks46 = weeks38.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks48 = weeks46.multipliedBy((int) (short) -1);
        org.joda.time.PeriodType periodType49 = weeks48.getPeriodType();
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.weeks(1);
        java.lang.String str52 = weeks51.toString();
        org.joda.time.Weeks weeks53 = weeks48.plus(weeks51);
        boolean boolean54 = weeks34.isGreaterThan(weeks51);
        org.joda.time.DurationFieldType durationFieldType55 = weeks34.getFieldType();
        org.joda.time.Chronology chronology56 = null;
        boolean boolean57 = durationFieldType55.isSupported(chronology56);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "P1W" + "'", str52, "P1W");
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 4);
        long long2 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 345600000L + "'", long2 == 345600000L);
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(60000L, (-1L));
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod4.addSeconds(100);
        java.lang.Object obj7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(obj7);
        org.joda.time.Duration duration9 = duration8.toDuration();
        mutablePeriod4.add((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration9.toPeriodTo(readableInstant13);
        org.joda.time.Period period15 = duration9.toPeriod();
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 7, chronology1);
        org.joda.time.Chronology chronology5 = null;
        mutablePeriod2.setPeriod((long) (byte) 100, (long) ' ', chronology5);
        mutablePeriod2.clear();
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period8 = period7.toPeriod();
        int int9 = period7.getSeconds();
        org.joda.time.Period period11 = period7.plusWeeks((int) '4');
        org.joda.time.Period period13 = period11.withMinutes(600);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.Seconds seconds19 = seconds17.dividedBy(32);
        org.joda.time.PeriodType periodType20 = seconds17.getPeriodType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-3600L), periodType20, chronology21);
        org.joda.time.Period period23 = period11.normalizedStandard(periodType20);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT0.032S");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        java.lang.Object obj5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(obj5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration10.toPeriod(periodType11, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType17 = periodType16.withMonthsRemoved();
        org.joda.time.Period period18 = duration10.toPeriodTo(readableInstant15, periodType17);
        org.joda.time.Period period19 = duration10.toPeriod();
        org.joda.time.Duration duration20 = duration6.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration6.toDuration();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType23 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration6, periodType24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str28 = duration27.toString();
        org.joda.time.Duration duration30 = duration27.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType43 = seconds42.getFieldType();
        mutablePeriod33.add(durationFieldType43, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableDuration47);
        mutablePeriod48.setHours((int) (short) 100);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration52, chronology53);
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration52, chronology55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration52.isEqual(readableDuration57);
        org.joda.time.Duration duration59 = duration27.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds62 = duration61.toStandardSeconds();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds65 = duration64.toStandardSeconds();
        boolean boolean66 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = duration61.minus((long) 3);
        org.joda.time.Duration duration69 = duration61.toDuration();
        boolean boolean70 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration73 = duration61.withDurationAdded(540000L, 32);
        int int74 = duration6.compareTo((org.joda.time.ReadableDuration) duration73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration6.toIntervalTo(readableInstant75);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval76);
        mutablePeriod1.setMonths(7);
        mutablePeriod1.setWeeks((-1));
        mutablePeriod1.setPeriod((long) 51840000, 4800002L);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT600S" + "'", str28, "PT600S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) -1);
        org.joda.time.Period period3 = org.joda.time.Period.hours(10);
        org.joda.time.Period period4 = period1.plus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Hours hours5 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours7 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean8 = hours5.isGreaterThan(hours7);
        org.joda.time.Duration duration9 = hours7.toStandardDuration();
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration10);
        org.joda.time.Period period12 = period4.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = period4.withPeriodType(periodType13);
        org.joda.time.Period period16 = period4.plusHours((-672));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withDaysRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType4);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        org.joda.time.Hours hours8 = hours6.minus((-1));
        org.joda.time.Hours hours10 = hours6.multipliedBy(2400);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period1.plusDays((int) (byte) -1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period8 = period5.minusWeeks((-1));
        org.joda.time.Period period10 = period5.multipliedBy(32);
        org.joda.time.Period period11 = period10.toPeriod();
        org.joda.time.Period period12 = period11.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P-1DT1M" + "'", str6, "P-1DT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(6240L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.joda.time.Days days1 = org.joda.time.Days.days(54);
        org.joda.time.Minutes minutes2 = days1.toStandardMinutes();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        java.lang.String str4 = periodType3.getName();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Minutes" + "'", str4, "Minutes");
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        boolean boolean14 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        boolean boolean21 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, readableInstant22, periodType23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
        mutablePeriod28.setHours((int) (short) 100);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration32, chronology33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds37 = duration36.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType38 = seconds37.getFieldType();
        mutablePeriod28.add(durationFieldType38, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant41, readableDuration42);
        mutablePeriod43.setHours((int) (short) 100);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod43.setPeriod((org.joda.time.ReadableDuration) duration47, chronology48);
        org.joda.time.Chronology chronology50 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration47, chronology50);
        int int52 = duration19.compareTo((org.joda.time.ReadableDuration) duration47);
        boolean boolean53 = duration12.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType56 = periodType55.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(periodType56);
        org.joda.time.Period period58 = duration12.toPeriodFrom(readableInstant54, periodType56);
        org.joda.time.Period period59 = duration1.toPeriodFrom(readableInstant7, periodType56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration1.toPeriod(chronology60);
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Seconds seconds64 = org.joda.time.Seconds.seconds(1);
        boolean boolean65 = seconds62.isGreaterThan(seconds64);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        int int2 = period1.getMonths();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        org.joda.time.Period period7 = mutablePeriod6.toPeriod();
        org.joda.time.Period period9 = period7.withHours(0);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        int int11 = period7.indexOf(durationFieldType10);
        int int12 = periodType3.indexOf(durationFieldType10);
        java.lang.String str13 = durationFieldType10.toString();
        org.joda.time.Period period15 = period1.withFieldAdded(durationFieldType10, 7);
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.seconds((int) '#');
        org.joda.time.DurationFieldType durationFieldType19 = seconds18.getFieldType();
        org.joda.time.DurationFieldType durationFieldType20 = seconds18.getFieldType();
        int int21 = period15.indexOf(durationFieldType20);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "days" + "'", str13, "days");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter3.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter3.withLocale(locale6);
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withLocale(locale10);
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter11.getParser();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter11.withLocale(locale13);
        java.util.Locale locale15 = null;
        org.joda.time.format.PeriodFormatter periodFormatter16 = periodFormatter11.withLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod17 = org.joda.time.MutablePeriod.parse("PT600S", periodFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(periodParser12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatter16);
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(4800002L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period6 = period4.withDays((int) 'a');
        org.joda.time.Weeks weeks7 = period6.toStandardWeeks();
        int int8 = weeks7.getWeeks();
        org.joda.time.Weeks weeks10 = weeks7.plus((int) (byte) 0);
        org.joda.time.Duration duration11 = weeks10.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration11.toIntervalTo(readableInstant12);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Period period9 = duration6.toPeriod();
        org.joda.time.Period period11 = period9.plusWeeks(0);
        org.joda.time.Period period12 = period11.toPeriod();
        org.joda.time.Period period14 = period12.plusMinutes(52);
        org.joda.time.Period period16 = period12.minusMinutes(2147483647);
        org.joda.time.Period period18 = period16.withWeeks((-5));
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.minus(0);
        org.joda.time.Minutes minutes11 = minutes4.dividedBy((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType12 = minutes11.getFieldType();
        org.joda.time.Minutes minutes14 = minutes11.multipliedBy(52);
        java.lang.String str15 = minutes14.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT-1116691472M" + "'", str15, "PT-1116691472M");
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) (byte) 1, chronology6);
        int int8 = mutablePeriod2.getDays();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration10.toPeriod(periodType11, chronology13);
        org.joda.time.Days days15 = org.joda.time.Days.ZERO;
        int int16 = days15.getDays();
        org.joda.time.Period period18 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days19 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        boolean boolean24 = days19.isGreaterThan(days22);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Days days28 = days22.minus(days27);
        org.joda.time.Days days29 = days15.minus(days22);
        boolean boolean30 = duration10.equals((java.lang.Object) days22);
        org.joda.time.Period period31 = duration10.toPeriod();
        org.joda.time.Duration duration32 = duration10.toDuration();
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration32, chronology33);
        mutablePeriod2.setYears(688);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration39.toPeriod(periodType40, chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType46 = periodType45.withMonthsRemoved();
        org.joda.time.Period period47 = duration39.toPeriodTo(readableInstant44, periodType46);
        org.joda.time.Duration duration48 = duration39.toDuration();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType54 = periodType53.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, readableInstant52, periodType53);
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant49, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration57 = duration39.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant37, (org.joda.time.ReadableDuration) duration51);
        java.lang.String str59 = duration51.toString();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration63 = duration61.plus((long) (byte) 1);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str66 = duration65.toString();
        boolean boolean68 = duration65.equals((java.lang.Object) 100.0d);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, readableInstant69);
        int int71 = duration63.compareTo((org.joda.time.ReadableDuration) duration65);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration65.toIntervalTo(readableInstant72);
        long long74 = duration65.getMillis();
        org.joda.time.Duration duration76 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration65, 107);
        org.joda.time.Chronology chronology77 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration76, chronology77);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT100S" + "'", str59, "PT100S");
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT600S" + "'", str66, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 600000L + "'", long74 == 600000L);
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-302), 40, (-5), 107, 5, (int) '4', 515, 52);
        mutablePeriod8.setHours(40);
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-940H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        boolean boolean5 = weeks2.isLessThan(weeks4);
        org.joda.time.Weeks weeks6 = weeks2.negated();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks12 = weeks8.negated();
        org.joda.time.Weeks weeks14 = weeks12.minus((int) (byte) 100);
        org.joda.time.Weeks weeks15 = weeks6.plus(weeks12);
        boolean boolean16 = weeks0.isLessThan(weeks12);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.parseWeeks("P1W");
        org.joda.time.PeriodType periodType19 = weeks18.getPeriodType();
        org.joda.time.Weeks weeks20 = weeks12.plus(weeks18);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksIn(readableInterval21);
        org.joda.time.Weeks weeks24 = weeks22.multipliedBy(8);
        org.joda.time.Weeks weeks26 = weeks24.minus(0);
        org.joda.time.Period period31 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period33 = period31.withDays((int) 'a');
        org.joda.time.Weeks weeks34 = period33.toStandardWeeks();
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.weeksIn(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeksIn(readableInterval38);
        boolean boolean40 = weeks37.isLessThan(weeks39);
        org.joda.time.Weeks weeks41 = weeks37.negated();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeksIn(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.weeksIn(readableInterval44);
        boolean boolean46 = weeks43.isLessThan(weeks45);
        org.joda.time.Weeks weeks47 = weeks43.negated();
        org.joda.time.Weeks weeks49 = weeks47.minus((int) (byte) 100);
        org.joda.time.Weeks weeks50 = weeks41.plus(weeks47);
        boolean boolean51 = weeks35.isLessThan(weeks47);
        org.joda.time.Weeks weeks53 = weeks35.multipliedBy((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn(readableInterval54);
        org.joda.time.Weeks weeks57 = weeks55.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks58 = weeks53.plus(weeks55);
        boolean boolean59 = weeks34.isGreaterThan(weeks58);
        boolean boolean60 = weeks24.isLessThan(weeks58);
        java.lang.String str61 = weeks24.toString();
        org.joda.time.Weeks weeks62 = weeks12.plus(weeks24);
        org.joda.time.Duration duration63 = weeks12.toStandardDuration();
        long long64 = duration63.getMillis();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "P0W" + "'", str61, "P0W");
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.withHours((-1));
        org.joda.time.Period period4 = period1.toPeriod();
        org.joda.time.Period period6 = period1.minusYears((-940));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn(readablePeriod1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.ZERO;
        boolean boolean5 = minutes3.isLessThan(minutes4);
        boolean boolean6 = minutes2.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes7 = minutes0.plus(minutes2);
        java.lang.String str8 = minutes2.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) (byte) 1, chronology11);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.ZERO;
        boolean boolean16 = minutes14.isLessThan(minutes15);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType18 = minutes17.getPeriodType();
        int int19 = minutes17.getMinutes();
        java.lang.String str20 = minutes17.toString();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType22 = minutes21.getFieldType();
        java.lang.String str23 = minutes21.toString();
        boolean boolean24 = minutes17.isLessThan(minutes21);
        int int25 = minutes17.size();
        org.joda.time.Minutes minutes26 = minutes14.plus(minutes17);
        org.joda.time.Minutes minutes27 = minutes14.negated();
        org.joda.time.Minutes minutes28 = minutes13.plus(minutes27);
        org.joda.time.Period period29 = minutes28.toPeriod();
        org.joda.time.Minutes minutes31 = minutes28.dividedBy(8);
        org.joda.time.Minutes minutes32 = minutes2.plus(minutes28);
        org.joda.time.Minutes minutes34 = minutes28.plus((-100));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0M" + "'", str8, "PT0M");
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0M" + "'", str20, "PT0M");
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT-2147483648M" + "'", str23, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        java.lang.String str4 = seconds3.toString();
        org.joda.time.PeriodType periodType5 = seconds3.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.PeriodType periodType9 = periodType7.withMonthsRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (-2147483648), periodType9, chronology10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType21 = periodType20.withMinutesRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, readableInstant19, periodType20);
        org.joda.time.Duration duration23 = period22.toStandardDuration();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = duration25.toPeriodFrom(readableInstant26);
        long long28 = duration25.getStandardMinutes();
        int int29 = duration23.compareTo((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis(8L);
        org.joda.time.Duration duration32 = duration23.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration35.toPeriod(periodType36, chronology38);
        org.joda.time.PeriodType periodType40 = periodType36.withMinutesRemoved();
        org.joda.time.Period period41 = duration23.toPeriodFrom(readableInstant33, periodType36);
        org.joda.time.Chronology chronology42 = null;
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration23, chronology42);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(144000L, (long) (-3));
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration48 = seconds47.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType49 = seconds47.getFieldType();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = durationFieldType49.isSupported(chronology50);
        boolean boolean52 = mutablePeriod46.isSupported(durationFieldType49);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.set(durationFieldType49, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT60S" + "'", str4, "PT60S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (-86400L));
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days16 = days7.plus((int) (byte) 1);
        org.joda.time.Days days18 = days7.multipliedBy((-2147483648));
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        boolean boolean26 = days21.isGreaterThan(days24);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Days days30 = days24.minus(days29);
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Days days35 = days33.minus(10);
        org.joda.time.Days days36 = days24.plus(days33);
        org.joda.time.Days days38 = days36.dividedBy(100);
        org.joda.time.Days days40 = days38.multipliedBy(13);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str43 = duration42.toString();
        boolean boolean44 = days38.equals((java.lang.Object) str43);
        boolean boolean45 = days7.isLessThan(days38);
        org.joda.time.Days days47 = days7.dividedBy(25);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = days7.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT600S" + "'", str43, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days47);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.joda.time.Period period2 = new org.joda.time.Period(1040400L, (long) 125);
        org.joda.time.Hours hours3 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours5 = hours3.multipliedBy(100);
        java.lang.String str6 = hours5.toString();
        org.joda.time.Period period7 = period2.plus((org.joda.time.ReadablePeriod) hours5);
        int int8 = hours5.getHours();
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT100H" + "'", str6, "PT100H");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withMillis((int) (byte) -1);
        org.joda.time.Period period5 = period1.withMillis(0);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period8 = period5.minusDays(0);
        org.joda.time.PeriodType periodType9 = period5.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = period5.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period7 = period2.minusHours(3);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 100);
        org.joda.time.Period period11 = period9.plusYears((int) (short) 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Seconds seconds17 = duration13.toStandardSeconds();
        org.joda.time.Period period18 = period9.minus((org.joda.time.ReadablePeriod) seconds17);
        org.joda.time.Period period19 = period9.normalizedStandard();
        org.joda.time.Period period21 = period19.withSeconds(88500);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (-672), (long) (-1073741824));
        mutablePeriod2.add(9, 107, (-12), 10, (-940), 125, 59, (int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(540000L, (long) '4');
        java.lang.String str15 = mutablePeriod14.toString();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = mutablePeriod14.toDurationTo(readableInstant16);
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType21 = days20.getPeriodType();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant22, readableDuration23);
        mutablePeriod24.setHours((int) (short) 100);
        boolean boolean27 = periodType21.equals((java.lang.Object) mutablePeriod24);
        org.joda.time.PeriodType periodType28 = periodType21.withYearsRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration17.toPeriod(periodType21, chronology29);
        long long31 = duration17.getStandardMinutes();
        long long32 = duration17.getStandardHours();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod2.setPeriod((long) 'a', (long) 50, chronology36);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT-8M-59.948S" + "'", str15, "PT-8M-59.948S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-8L) + "'", long31 == (-8L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.joda.time.Period period8 = new org.joda.time.Period((-1073741824), 10, 54, (int) (byte) 0, (int) (short) -1, (int) (short) 0, 54, (int) '#');
        int int9 = period8.getHours();
        org.joda.time.Period period10 = period8.normalizedStandard();
        org.joda.time.Duration duration11 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period17 = period15.withHours(32);
        org.joda.time.Period period18 = period15.normalizedStandard();
        java.lang.String str19 = period18.toString();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period21 = period18.normalizedStandard(periodType20);
        org.joda.time.Period period23 = period18.minusHours(3);
        int int24 = period23.getYears();
        org.joda.time.Period period25 = period13.withFields((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period23.withSeconds((int) (short) -1);
        org.joda.time.Period period29 = period27.withMillis((int) (short) 0);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period34 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days35 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period34);
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        boolean boolean37 = days32.isGreaterThan(days35);
        int int38 = days32.size();
        org.joda.time.Days days39 = days32.negated();
        org.joda.time.Days days41 = days39.minus(3);
        org.joda.time.Days days42 = days41.negated();
        java.lang.String str43 = days42.toString();
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period48 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days49 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period48);
        org.joda.time.PeriodType periodType50 = days49.getPeriodType();
        boolean boolean51 = days46.isGreaterThan(days49);
        org.joda.time.Days days53 = days46.minus(1);
        org.joda.time.Days days55 = days53.dividedBy(60);
        org.joda.time.Days days56 = days42.plus(days53);
        org.joda.time.DurationFieldType durationFieldType57 = days56.getFieldType();
        org.joda.time.Period period59 = period27.withField(durationFieldType57, (-8));
        java.lang.String str60 = durationFieldType57.toString();
        org.joda.time.Period period62 = period8.withField(durationFieldType57, 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = period8.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.052S" + "'", str19, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P3D" + "'", str43, "P3D");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT600S");
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT0.052S");
        org.joda.time.Duration duration5 = duration3.minus((long) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType11);
        org.joda.time.Period period13 = duration3.toPeriod(periodType11);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = periodType23.indexOf(durationFieldType24);
        org.joda.time.PeriodType periodType26 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', (long) 'a', periodType26);
        java.lang.String str28 = periodType26.getName();
        org.joda.time.PeriodType periodType29 = periodType26.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant15, (org.joda.time.ReadableDuration) duration17, periodType30);
        org.joda.time.Period period32 = duration17.toPeriod();
        org.joda.time.Duration duration34 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 0);
        long long35 = duration17.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Days" + "'", str28, "Days");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = period3.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period8 = period6.normalizedStandard(periodType7);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod9.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod9.copy();
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        java.lang.String str3 = seconds2.toString();
        org.joda.time.PeriodType periodType4 = seconds2.getPeriodType();
        org.joda.time.PeriodType periodType5 = seconds2.getPeriodType();
        org.joda.time.PeriodType periodType6 = seconds2.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT60S" + "'", str3, "PT60S");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) (short) 1, 1, (int) (byte) -1);
        org.joda.time.Period period6 = period4.minusMillis(8);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Duration duration9 = minutes7.toStandardDuration();
        org.joda.time.Seconds seconds10 = minutes7.toStandardSeconds();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant1, readableInstant2, periodType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(obj0, periodType3, chronology6);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Weeks weeks7 = weeks5.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks14 = weeks11.minus((int) (short) -1);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(0);
        boolean boolean17 = weeks7.isGreaterThan(weeks16);
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period24 = period22.withDays((int) 'a');
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        int int26 = weeks25.getWeeks();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks33 = weeks30.minus((int) (short) -1);
        org.joda.time.Weeks weeks34 = weeks33.negated();
        org.joda.time.Weeks weeks36 = weeks33.multipliedBy(0);
        boolean boolean37 = weeks25.isGreaterThan(weeks36);
        org.joda.time.Weeks weeks38 = weeks16.minus(weeks25);
        org.joda.time.Weeks weeks40 = weeks25.dividedBy(3);
        org.joda.time.PeriodType periodType41 = weeks25.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType42 = weeks25.getFieldType();
        org.joda.time.Weeks weeks44 = weeks25.plus(0);
        int int45 = weeks25.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 13 + "'", int45 == 13);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes14 = minutes10.minus((int) (short) 0);
        org.joda.time.PeriodType periodType15 = minutes10.getPeriodType();
        org.joda.time.Duration duration16 = minutes10.toStandardDuration();
        org.joda.time.Duration duration18 = duration16.withMillis(160L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        mutablePeriod4.setHours((int) (short) 100);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration8, chronology9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant1, (org.joda.time.ReadableDuration) duration8, periodType12);
        org.joda.time.Duration duration16 = duration8.withMillis((long) 10);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant24, readableDuration25);
        mutablePeriod26.setHours((int) (short) 100);
        boolean boolean29 = periodType23.equals((java.lang.Object) mutablePeriod26);
        org.joda.time.PeriodType periodType30 = periodType23.withYearsRemoved();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 60, periodType30, chronology31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant18, periodType30);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 8);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), (long) ' ');
        org.joda.time.Duration duration40 = duration38.withMillis((long) (-2147483648));
        org.joda.time.Duration duration42 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration40, (-60));
        org.joda.time.Duration duration43 = duration8.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period52 = new org.joda.time.Period(27, 8, (-672), 515, (int) (short) 1, 658, (int) (byte) 0, (-2147483638));
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationTo(readableInstant53);
        org.joda.time.Duration duration55 = duration8.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        java.lang.Object obj58 = null;
        org.joda.time.Duration duration59 = new org.joda.time.Duration(obj58);
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant57, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Period period61 = new org.joda.time.Period(readableInstant56, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration59.toDuration();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        java.lang.Object obj65 = null;
        org.joda.time.Duration duration66 = new org.joda.time.Duration(obj65);
        org.joda.time.Period period67 = new org.joda.time.Period(readableInstant64, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period68 = new org.joda.time.Period(readableInstant63, (org.joda.time.ReadableDuration) duration66);
        int int69 = duration59.compareTo((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Period period75 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days76 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period75);
        org.joda.time.PeriodType periodType77 = days76.getPeriodType();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant78, readableDuration79);
        mutablePeriod80.setHours((int) (short) 100);
        boolean boolean83 = periodType77.equals((java.lang.Object) mutablePeriod80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration73, periodType77, chronology84);
        boolean boolean86 = duration71.isEqual((org.joda.time.ReadableDuration) duration73);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration73, readableInstant87);
        java.lang.Object obj89 = null;
        boolean boolean90 = duration73.equals(obj89);
        java.lang.String str91 = duration73.toString();
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.Interval interval93 = duration73.toIntervalTo(readableInstant92);
        boolean boolean94 = duration66.isLongerThan((org.joda.time.ReadableDuration) duration73);
        boolean boolean95 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT6000S" + "'", str91, "PT6000S");
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days1 = days0.negated();
        int int2 = days0.size();
        org.joda.time.Duration duration3 = days0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod5.addSeconds(100);
        java.lang.Object obj8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(obj8);
        org.joda.time.Duration duration10 = duration9.toDuration();
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean12 = duration3.isEqual((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period13 = duration10.toPeriod();
        org.joda.time.Duration duration16 = duration10.withDurationAdded((long) (-160), 0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks17 = weeks6.minus(weeks16);
        org.joda.time.MutablePeriod mutablePeriod18 = weeks17.toMutablePeriod();
        org.joda.time.Duration duration19 = weeks17.toStandardDuration();
        org.joda.time.Weeks weeks21 = weeks17.minus(2400);
        int int22 = weeks21.size();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = days14.minus(10);
        org.joda.time.Days days17 = days5.plus(days14);
        org.joda.time.Days days19 = days17.dividedBy(100);
        org.joda.time.Days days21 = days19.multipliedBy(13);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Days days26 = days24.minus(10);
        org.joda.time.Days days28 = days26.plus((int) (short) -1);
        org.joda.time.Days days29 = days26.negated();
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period34 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days35 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period34);
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        boolean boolean37 = days32.isGreaterThan(days35);
        org.joda.time.Period period39 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days40 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Days days41 = days35.minus(days40);
        org.joda.time.Days days42 = null;
        boolean boolean43 = days41.isGreaterThan(days42);
        int int44 = days41.getDays();
        org.joda.time.Days days46 = days41.dividedBy(2);
        org.joda.time.Days days47 = days29.plus(days46);
        boolean boolean48 = days21.isGreaterThan(days46);
        org.joda.time.Days days50 = org.joda.time.Days.days(97);
        org.joda.time.Days days51 = days21.plus(days50);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        long long13 = duration10.getStandardMinutes();
        org.joda.time.Period period14 = duration10.toPeriod();
        org.joda.time.Period period16 = period14.plusMillis((-160));
        int int17 = period16.getMillis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-160) + "'", int17 == (-160));
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.Object obj4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(obj4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration5);
        long long8 = duration5.getMillis();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withMinutesRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant17, periodType18);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.Duration duration24 = duration21.withDurationAdded((-60L), (int) (short) 100);
        org.joda.time.Duration duration26 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) 0);
        long long30 = duration29.getMillis();
        org.joda.time.Duration duration32 = duration29.plus((-3600000L));
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        boolean boolean39 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, readableInstant40, periodType41);
        org.joda.time.Duration duration44 = period43.toStandardDuration();
        org.joda.time.Duration duration47 = duration44.withDurationAdded((-60L), (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        java.lang.String str52 = seconds51.toString();
        org.joda.time.PeriodType periodType53 = seconds51.getPeriodType();
        org.joda.time.PeriodType periodType54 = periodType53.withSecondsRemoved();
        org.joda.time.PeriodType periodType55 = periodType53.withMillisRemoved();
        org.joda.time.Period period56 = duration47.toPeriodFrom(readableInstant48, periodType55);
        org.joda.time.PeriodType periodType57 = periodType55.withMonthsRemoved();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration29.toPeriod(periodType57, chronology58);
        org.joda.time.Period period60 = duration26.toPeriodTo(readableInstant27, periodType57);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT60S" + "'", str52, "PT60S");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) ' ');
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration5.toPeriod(periodType6, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.joda.time.Period period13 = duration5.toPeriodTo(readableInstant10, periodType12);
        org.joda.time.Minutes minutes14 = duration5.toStandardMinutes();
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType18 = minutes17.getPeriodType();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes20 = minutes17.plus(minutes19);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.ZERO;
        boolean boolean23 = minutes21.isLessThan(minutes22);
        boolean boolean24 = minutes17.isLessThan(minutes21);
        org.joda.time.Minutes minutes26 = minutes21.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType29 = minutes28.getPeriodType();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes31 = minutes28.plus(minutes30);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.ZERO;
        boolean boolean34 = minutes32.isLessThan(minutes33);
        boolean boolean35 = minutes28.isLessThan(minutes32);
        org.joda.time.Duration duration36 = minutes28.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        java.lang.Object obj39 = null;
        org.joda.time.Duration duration40 = new org.joda.time.Duration(obj39);
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant38, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant37, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType46 = periodType45.withWeeksRemoved();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration44.toPeriod(periodType45, chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType51 = periodType50.withMonthsRemoved();
        org.joda.time.Period period52 = duration44.toPeriodTo(readableInstant49, periodType51);
        org.joda.time.Period period53 = duration44.toPeriod();
        org.joda.time.Duration duration54 = duration40.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration56 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration44, 25);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration36.toIntervalFrom(readableInstant57);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Minutes minutes60 = minutes26.plus(minutes59);
        org.joda.time.Minutes minutes61 = minutes14.plus(minutes59);
        org.joda.time.Minutes minutes63 = minutes14.dividedBy((int) 'a');
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes66 = minutes64.multipliedBy((int) ' ');
        java.lang.String str67 = minutes64.toString();
        org.joda.time.Minutes minutes68 = minutes64.negated();
        org.joda.time.Minutes minutes69 = minutes14.minus(minutes64);
        org.joda.time.Minutes minutes70 = minutes0.minus(minutes64);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT3M" + "'", str3, "PT3M");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT3M" + "'", str67, "PT3M");
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes70);
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 25);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) (short) 10, (long) '4');
        int int5 = duration1.compareTo((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration1.withMillis(120L);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(540000L, (long) '4');
        java.lang.String str11 = mutablePeriod10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = mutablePeriod10.toDurationTo(readableInstant12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableDuration19);
        mutablePeriod20.setHours((int) (short) 100);
        boolean boolean23 = periodType17.equals((java.lang.Object) mutablePeriod20);
        org.joda.time.PeriodType periodType24 = periodType17.withYearsRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration13.toPeriod(periodType17, chronology25);
        org.joda.time.Days days27 = org.joda.time.Days.ZERO;
        int int28 = days27.getDays();
        org.joda.time.Period period30 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days31 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.PeriodType periodType35 = days34.getPeriodType();
        boolean boolean36 = days31.isGreaterThan(days34);
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days39 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Days days40 = days34.minus(days39);
        org.joda.time.Days days41 = days27.minus(days34);
        org.joda.time.Period period43 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period46 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days47 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType48 = days47.getPeriodType();
        boolean boolean49 = days44.isGreaterThan(days47);
        org.joda.time.Period period51 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days52 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Days days53 = days47.minus(days52);
        org.joda.time.Days days54 = days27.plus(days53);
        org.joda.time.Days days56 = days53.minus(0);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.Days days59 = duration58.toStandardDays();
        java.lang.String str60 = days59.toString();
        org.joda.time.Days days61 = days53.plus(days59);
        org.joda.time.MutablePeriod mutablePeriod62 = days59.toMutablePeriod();
        org.joda.time.PeriodType periodType63 = days59.getPeriodType();
        boolean boolean64 = duration13.equals((java.lang.Object) days59);
        int int65 = duration7.compareTo((org.joda.time.ReadableDuration) duration13);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-8M-59.948S" + "'", str11, "PT-8M-59.948S");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "P-1D" + "'", str60, "P-1D");
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        int[] intArray8 = period7.getValues();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period7.getFieldTypes();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withYearsRemoved();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        int int7 = days6.getDays();
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        boolean boolean15 = days10.isGreaterThan(days13);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days19 = days13.minus(days18);
        org.joda.time.Days days20 = days6.minus(days13);
        boolean boolean21 = duration1.equals((java.lang.Object) days13);
        org.joda.time.Period period22 = duration1.toPeriod();
        org.joda.time.Period period24 = period22.withYears(3);
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = period22.getFieldTypes();
        org.joda.time.Period period27 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period29 = period27.withHours((-1));
        boolean boolean30 = period22.equals((java.lang.Object) period29);
        org.joda.time.DurationFieldType durationFieldType32 = period22.getFieldType(3);
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = durationFieldType32.isSupported(chronology33);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        int int3 = period1.getMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
        mutablePeriod9.setHours((int) (short) 100);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration13, chronology14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant6, (org.joda.time.ReadableDuration) duration13, periodType17);
        org.joda.time.Duration duration21 = duration13.withMillis((long) 10);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) 1, periodType25, chronology26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant23, periodType25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant4, (org.joda.time.ReadableDuration) duration13);
        mutablePeriod29.setDays((int) (short) -1);
        int int32 = mutablePeriod29.getHours();
        org.joda.time.Period period33 = period1.minus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Period period35 = period33.minusYears(11);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        boolean boolean5 = weeks2.isLessThan(weeks4);
        org.joda.time.Weeks weeks6 = weeks2.negated();
        org.joda.time.Weeks weeks8 = weeks6.minus((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = weeks8.getFieldType();
        boolean boolean10 = weeks0.isGreaterThan(weeks8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.Weeks weeks14 = weeks12.multipliedBy((int) (short) 10);
        org.joda.time.Period period19 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period21 = period19.withDays((int) 'a');
        org.joda.time.Weeks weeks22 = period21.toStandardWeeks();
        int int23 = weeks22.getWeeks();
        org.joda.time.Weeks weeks25 = weeks22.plus((int) (byte) 0);
        org.joda.time.Duration duration26 = weeks25.toStandardDuration();
        org.joda.time.Weeks weeks27 = weeks25.negated();
        org.joda.time.Weeks weeks28 = weeks14.minus(weeks25);
        org.joda.time.Weeks weeks30 = weeks28.minus(0);
        org.joda.time.Weeks weeks31 = weeks8.plus(weeks28);
        org.joda.time.Weeks weeks33 = weeks31.multipliedBy(0);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withMillis((int) (byte) -1);
        org.joda.time.Period period5 = period1.withMillis(0);
        org.joda.time.Period period7 = period1.withDays((int) '4');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period1.toDurationTo(readableInstant8);
        org.joda.time.Duration duration11 = duration9.plus((long) 135);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (-35), (long) 2, chronology2);
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        mutablePeriod4.setPeriod((long) ' ', (long) 52);
        mutablePeriod4.addDays(100);
        org.joda.time.PeriodType periodType10 = mutablePeriod4.getPeriodType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(10L, (long) 13, periodType10, chronology11);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        int int19 = mutablePeriod17.get(durationFieldType18);
        org.joda.time.Hours hours20 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Hours hours22 = hours20.dividedBy((int) (short) -1);
        org.joda.time.Hours hours23 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours25 = hours23.minus(0);
        org.joda.time.Hours hours26 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours28 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean29 = hours26.isGreaterThan(hours28);
        boolean boolean30 = hours25.isLessThan(hours28);
        java.lang.String str31 = hours25.toString();
        org.joda.time.Hours hours32 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours33 = hours25.plus(hours32);
        org.joda.time.Hours hours34 = hours20.minus(hours25);
        org.joda.time.Hours hours36 = hours25.dividedBy(1);
        org.joda.time.DurationFieldType durationFieldType37 = hours36.getFieldType();
        org.joda.time.Period period39 = period12.withField(durationFieldType37, (int) (byte) -1);
        int int40 = period39.getSeconds();
        org.joda.time.Period period42 = period39.withMinutes((-15));
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT4H" + "'", str31, "PT4H");
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks17 = weeks6.minus(weeks16);
        org.joda.time.DurationFieldType durationFieldType18 = weeks17.getFieldType();
        java.lang.String str19 = durationFieldType18.getName();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weeks" + "'", str19, "weeks");
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType7 = minutes6.getPeriodType();
        int int8 = minutes6.getMinutes();
        java.lang.String str9 = minutes6.toString();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = minutes10.getFieldType();
        java.lang.String str12 = minutes10.toString();
        boolean boolean13 = minutes6.isLessThan(minutes10);
        org.joda.time.Minutes minutes15 = minutes10.minus(0);
        org.joda.time.Minutes minutes17 = minutes15.dividedBy(2);
        org.joda.time.Period period18 = minutes17.toPeriod();
        boolean boolean19 = periodType4.equals((java.lang.Object) minutes17);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0M" + "'", str9, "PT0M");
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-2147483648M" + "'", str12, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Weeks weeks9 = period8.toStandardWeeks();
        org.joda.time.Weeks weeks11 = weeks9.multipliedBy(8);
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeks(27);
        org.joda.time.Weeks weeks15 = weeks13.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks17 = weeks15.multipliedBy(100);
        boolean boolean18 = weeks11.isLessThan(weeks17);
        int int19 = weeks17.getWeeks();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (-58), 4L, chronology2);
        int int4 = mutablePeriod3.getSeconds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) 100, chronology6);
        mutablePeriod2.add(1, 10, (int) 'a', 52, (int) (short) 100, 0, (int) (byte) 0, (int) (byte) 10);
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.seconds(0);
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) seconds18);
        org.joda.time.Seconds seconds21 = seconds18.multipliedBy((int) (byte) 1);
        org.joda.time.Seconds seconds23 = seconds21.multipliedBy((int) '#');
        org.joda.time.Seconds seconds25 = seconds23.minus((int) (short) -1);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.seconds(52);
        org.joda.time.Seconds seconds29 = seconds27.dividedBy(600);
        org.joda.time.Duration duration30 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        int int33 = period32.size();
        org.joda.time.Period period35 = period32.plusHours((int) (short) 1);
        org.joda.time.Period period36 = period32.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = period32.getFieldTypes();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds40 = duration39.toStandardSeconds();
        org.joda.time.Seconds seconds42 = seconds40.plus(100);
        boolean boolean43 = period32.equals((java.lang.Object) seconds42);
        org.joda.time.Seconds seconds44 = seconds42.negated();
        org.joda.time.Seconds seconds46 = seconds42.dividedBy((int) 'a');
        org.joda.time.Seconds seconds48 = seconds46.dividedBy((-2));
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType52 = seconds51.getFieldType();
        org.joda.time.Seconds seconds54 = seconds51.plus(25);
        org.joda.time.Seconds seconds55 = seconds51.negated();
        org.joda.time.Seconds seconds56 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds57 = seconds51.plus(seconds56);
        int int58 = seconds56.size();
        boolean boolean59 = seconds48.isLessThan(seconds56);
        org.joda.time.DurationFieldType durationFieldType60 = seconds48.getFieldType();
        org.joda.time.Seconds seconds61 = seconds29.plus(seconds48);
        boolean boolean62 = seconds25.isGreaterThan(seconds48);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds65 = duration64.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType66 = seconds65.getFieldType();
        org.joda.time.Seconds seconds68 = seconds65.dividedBy(2);
        int int69 = seconds65.getSeconds();
        org.joda.time.Seconds seconds71 = seconds65.multipliedBy(27);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds74 = duration73.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType75 = seconds74.getFieldType();
        org.joda.time.Seconds seconds77 = seconds74.dividedBy(2);
        int int78 = seconds74.getSeconds();
        org.joda.time.Seconds seconds80 = seconds74.minus(25);
        org.joda.time.Seconds seconds81 = seconds71.minus(seconds74);
        org.joda.time.PeriodType periodType82 = seconds74.getPeriodType();
        org.joda.time.Seconds seconds83 = seconds48.minus(seconds74);
        org.joda.time.PeriodType periodType84 = seconds74.getPeriodType();
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(seconds68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 60 + "'", int69 == 60);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 60 + "'", int78 == 60);
        org.junit.Assert.assertNotNull(seconds80);
        org.junit.Assert.assertNotNull(seconds81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(seconds83);
        org.junit.Assert.assertNotNull(periodType84);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P1073741851W");
        org.joda.time.Period period3 = period1.minusMillis((-596526));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.minusWeeks(52);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period6 = period1.plusDays((-999));
        org.joda.time.Period period8 = period6.minusMillis(59);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Period period10 = duration2.toPeriodTo(readableInstant7, periodType9);
        org.joda.time.Duration duration11 = duration2.toDuration();
        org.joda.time.Duration duration13 = duration11.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = duration13.toPeriodFrom(readableInstant14, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration21.toPeriod(periodType22, chronology24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        boolean boolean30 = weeks27.isLessThan(weeks29);
        org.joda.time.Weeks weeks32 = weeks29.minus((int) (short) -1);
        org.joda.time.Weeks weeks34 = weeks32.multipliedBy(0);
        org.joda.time.Weeks weeks35 = null;
        boolean boolean36 = weeks32.isLessThan(weeks35);
        int int38 = weeks32.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = durationFieldType39.isSupported(chronology40);
        boolean boolean42 = weeks32.isSupported(durationFieldType39);
        org.joda.time.DurationFieldType durationFieldType43 = weeks32.getFieldType();
        boolean boolean44 = periodType22.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType45 = periodType22.withSecondsRemoved();
        org.joda.time.PeriodType periodType46 = periodType22.withMinutesRemoved();
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant18, readableInstant19, periodType22);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant17, periodType22);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, periodType22);
        org.joda.time.PeriodType periodType50 = periodType22.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.joda.time.Period period2 = new org.joda.time.Period((-483243L), 540000L);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = period3.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period8 = period6.normalizedStandard(periodType7);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType7);
        mutablePeriod9.addMillis((int) '4');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = mutablePeriod9.toDurationTo(readableInstant12);
        long long14 = duration13.getStandardMinutes();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = seconds11.getFieldType();
        mutablePeriod2.add(durationFieldType12, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration21, chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration21, chronology24);
        mutablePeriod2.add((int) (short) 10, (int) '4', (int) ' ', 100, 1, (int) (short) 10, (int) (byte) 1, 100);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        mutablePeriod2.setPeriod(readableInstant35, readableInstant36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds40 = duration39.toStandardSeconds();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds43 = duration42.toStandardSeconds();
        boolean boolean44 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period45 = duration39.toPeriod();
        org.joda.time.Period period46 = period45.negated();
        org.joda.time.Seconds seconds47 = period46.toStandardSeconds();
        org.joda.time.Period period48 = period46.negated();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period46.toDurationTo(readableInstant49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        boolean boolean55 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration52);
        long long56 = duration52.getMillis();
        boolean boolean57 = mutablePeriod2.equals((java.lang.Object) long56);
        int int58 = mutablePeriod2.getWeeks();
        int int59 = mutablePeriod2.getYears();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 600000L + "'", long56 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        org.joda.time.Weeks weeks3 = weeks0.plus((int) (short) 10);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        boolean boolean8 = weeks5.isLessThan(weeks7);
        org.joda.time.Weeks weeks9 = weeks5.negated();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        boolean boolean14 = weeks11.isLessThan(weeks13);
        org.joda.time.Weeks weeks15 = weeks11.negated();
        org.joda.time.Weeks weeks17 = weeks15.minus((int) (byte) 100);
        org.joda.time.Weeks weeks18 = weeks9.plus(weeks15);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksIn(readableInterval21);
        boolean boolean23 = weeks20.isLessThan(weeks22);
        org.joda.time.Weeks weeks24 = weeks20.negated();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksIn(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        boolean boolean29 = weeks26.isLessThan(weeks28);
        org.joda.time.Weeks weeks30 = weeks26.negated();
        org.joda.time.Weeks weeks32 = weeks30.minus((int) (byte) 100);
        org.joda.time.Weeks weeks33 = weeks24.plus(weeks30);
        org.joda.time.DurationFieldType durationFieldType34 = weeks30.getFieldType();
        org.joda.time.Weeks weeks35 = weeks15.plus(weeks30);
        org.joda.time.Weeks weeks37 = weeks15.minus(0);
        org.joda.time.DurationFieldType durationFieldType38 = weeks37.getFieldType();
        boolean boolean39 = weeks0.isGreaterThan(weeks37);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Period period10 = period8.negated();
        org.joda.time.Period period12 = period8.plusMonths((-2));
        org.joda.time.Period period14 = period12.minusMinutes((-672));
        org.joda.time.Period period16 = period12.minusHours((-97));
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter6.getParser();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        java.lang.String str14 = seconds13.toString();
        org.joda.time.PeriodType periodType15 = seconds13.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withDaysRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 2, periodType17);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, (long) 4, periodType17);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter6.withParseType(periodType17);
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter22.withLocale(locale23);
        boolean boolean25 = periodFormatter24.isParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT60S" + "'", str14, "PT60S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, chronology1);
        org.joda.time.Period period4 = period2.plusMonths(32);
        org.joda.time.Period period6 = period4.minusMinutes((int) 'a');
        int int7 = period4.getMillis();
        org.joda.time.Period period9 = period4.minusMillis((int) 'a');
        org.joda.time.DurationFieldType durationFieldType11 = period4.getFieldType((int) (byte) 0);
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = durationFieldType11.isSupported(chronology12);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours11 = hours9.plus((int) (short) 10);
        org.joda.time.Hours hours13 = hours11.minus(13);
        org.joda.time.DurationFieldType durationFieldType14 = hours13.getFieldType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DurationField durationField16 = durationFieldType14.getField(chronology15);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 23, (long) (short) 100, periodType2);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        org.joda.time.Weeks weeks8 = weeks5.dividedBy(600);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType11, chronology12);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Weeks weeks18 = period17.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = weeks18.isSupported(durationFieldType19);
        boolean boolean21 = weeks5.isGreaterThan(weeks18);
        org.joda.time.Weeks weeks23 = weeks18.dividedBy(40);
        org.joda.time.Weeks weeks25 = weeks23.multipliedBy((int) (short) 100);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType30);
        org.joda.time.Hours hours32 = period31.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType33 = hours32.getFieldType();
        org.joda.time.Minutes minutes34 = hours32.toStandardMinutes();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = weeks25.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Weeks cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(minutes34);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((-60L), (long) 32, chronology2);
        org.joda.time.Period period5 = period3.withHours((int) (short) -1);
        int int6 = period3.size();
        org.joda.time.Period period8 = period3.plusSeconds(21);
        org.joda.time.Period period10 = period8.withHours(515);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Days days2 = days0.minus((-32));
        org.joda.time.Days days4 = days2.minus(600);
        org.joda.time.Days days6 = days4.plus(0);
        int int7 = days6.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-565) + "'", int7 == (-565));
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = days14.minus(10);
        org.joda.time.Days days17 = days5.plus(days14);
        org.joda.time.Days days18 = days14.negated();
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        boolean boolean26 = days21.isGreaterThan(days24);
        int int27 = days21.size();
        org.joda.time.Days days28 = days21.negated();
        org.joda.time.Days days30 = days28.minus(3);
        org.joda.time.Days days31 = days30.negated();
        org.joda.time.DurationFieldType durationFieldType32 = days30.getFieldType();
        boolean boolean33 = days18.isGreaterThan(days30);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        long long9 = duration8.getStandardDays();
        org.joda.time.Hours hours10 = duration8.toStandardHours();
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant12);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        long long15 = duration14.getStandardDays();
        org.joda.time.Hours hours16 = duration14.toStandardHours();
        org.joda.time.Duration duration18 = duration14.withMillis(0L);
        org.joda.time.Duration duration19 = duration14.toDuration();
        long long20 = duration19.getMillis();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration19.toIntervalTo(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((long) 25);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration24.toIntervalTo(readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant27, periodType28);
        org.joda.time.Duration duration30 = duration19.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology31 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant33, readableDuration34);
        mutablePeriod35.setHours((int) (short) 100);
        mutablePeriod35.addMillis(1);
        int int40 = mutablePeriod35.getSeconds();
        mutablePeriod35.setYears(0);
        org.joda.time.PeriodType periodType43 = mutablePeriod35.getPeriodType();
        org.joda.time.Period period44 = duration19.toPeriod(periodType43);
        org.joda.time.Period period45 = new org.joda.time.Period(5, (-22), 2400, (-91), (int) (byte) 10, 25, (-58), 0, periodType43);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Period period10 = duration2.toPeriodTo(readableInstant7, periodType9);
        org.joda.time.Duration duration11 = duration2.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType17 = periodType16.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration20 = duration2.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration14.toIntervalTo(readableInstant22);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = duration3.toPeriodTo(readableInstant4);
        org.joda.time.Duration duration7 = duration3.minus((-60L));
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        boolean boolean14 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = duration9.minus((long) 3);
        org.joda.time.Duration duration17 = duration9.toDuration();
        int int18 = duration3.compareTo((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration9.toIntervalFrom(readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant21);
        org.joda.time.Seconds seconds23 = duration9.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(seconds23);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        java.lang.Object obj15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(obj15);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.toDuration();
        int int20 = duration10.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration19.toIntervalTo(readableInstant21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', chronology24);
        int int26 = mutablePeriod25.getHours();
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        long long28 = duration27.getStandardDays();
        org.joda.time.Hours hours29 = duration27.toStandardHours();
        long long30 = duration27.getStandardMinutes();
        mutablePeriod25.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) 25);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration33);
        long long35 = duration33.getMillis();
        boolean boolean36 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration38.toPeriod(periodType39, chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType45 = periodType44.withMonthsRemoved();
        org.joda.time.Period period46 = duration38.toPeriodTo(readableInstant43, periodType45);
        org.joda.time.Duration duration47 = duration38.toDuration();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        java.lang.Object obj52 = null;
        org.joda.time.Duration duration53 = new org.joda.time.Duration(obj52);
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant51, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant50, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration53.toDuration();
        int int57 = duration47.compareTo((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Hours hours58 = duration56.toStandardHours();
        org.joda.time.Duration duration59 = duration33.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration61 = duration56.plus(0L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 90000000L + "'", long35 == 90000000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(hours58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMonths((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod1.toDurationTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        boolean boolean12 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        boolean boolean19 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period20 = duration14.toPeriod();
        boolean boolean21 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration10.toPeriodTo(readableInstant22);
        long long24 = duration10.getStandardDays();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period27 = duration26.toPeriod();
        long long28 = duration26.getStandardSeconds();
        boolean boolean29 = duration10.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds32 = duration31.toStandardSeconds();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        boolean boolean36 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType39 = periodType38.withMinutesRemoved();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, readableInstant37, periodType38);
        boolean boolean41 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Seconds seconds42 = duration34.toStandardSeconds();
        boolean boolean43 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.format.PeriodPrinter periodPrinter48 = null;
        org.joda.time.format.PeriodParser periodParser49 = null;
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter(periodPrinter48, periodParser49);
        org.joda.time.format.PeriodParser periodParser51 = periodFormatter50.getParser();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds54 = duration53.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType55 = seconds54.getFieldType();
        org.joda.time.Seconds seconds57 = seconds54.plus(25);
        org.joda.time.Seconds seconds58 = seconds54.negated();
        org.joda.time.PeriodType periodType59 = seconds58.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter50.withParseType(periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (byte) 1, (-60L), periodType59);
        org.joda.time.PeriodType periodType63 = periodType59.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant44, readableInstant45, periodType59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration5.toPeriod(periodType59, chronology65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(periodType59);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60L) + "'", long28 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(periodParser51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(27);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType8 = periodType7.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (-1), periodType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(10L, (long) 8, periodType8, chronology10);
        org.joda.time.PeriodType periodType12 = mutablePeriod11.getPeriodType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 658, (long) 194, periodType12, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = period1.withPeriodType(periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        org.joda.time.Period period5 = mutablePeriod4.toPeriod();
        org.joda.time.Period period7 = period5.withHours(0);
        int int8 = period5.getWeeks();
        org.joda.time.Period period10 = period5.withMillis((int) 'a');
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        boolean boolean15 = weeks12.isLessThan(weeks14);
        org.joda.time.Weeks weeks17 = weeks14.minus((int) (short) -1);
        org.joda.time.Weeks weeks19 = weeks17.multipliedBy(0);
        org.joda.time.Weeks weeks20 = null;
        boolean boolean21 = weeks17.isLessThan(weeks20);
        int int23 = weeks17.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.weeksIn(readableInterval24);
        org.joda.time.Weeks weeks27 = weeks25.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks28 = weeks17.minus(weeks27);
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks31 = weeks29.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DurationField durationField34 = durationFieldType32.getField(chronology33);
        boolean boolean35 = weeks29.isSupported(durationFieldType32);
        org.joda.time.Weeks weeks36 = weeks28.plus(weeks29);
        org.joda.time.Period period37 = period5.minus((org.joda.time.ReadablePeriod) weeks28);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.Period period39 = new org.joda.time.Period(0L, periodType38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(864000000L, periodType38);
        mutablePeriod40.addMillis((-1));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Period period2 = seconds1.toPeriod();
        org.joda.time.Period period3 = period2.toPeriod();
        org.joda.time.Period period5 = period2.plusHours((int) (byte) 1);
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        org.joda.time.Seconds seconds8 = seconds6.plus((-5));
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-32), 9L);
        org.joda.time.Period period4 = period2.plusDays((int) 'a');
        org.joda.time.Period period6 = period2.minusMinutes((-8));
        int int7 = period2.getDays();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(101L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        org.joda.time.Period period5 = mutablePeriod4.toPeriod();
        org.joda.time.Period period7 = period5.withHours(0);
        org.joda.time.Hours hours8 = period5.toStandardHours();
        boolean boolean9 = duration1.equals((java.lang.Object) period5);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 59);
        org.joda.time.Duration duration13 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration11, (-940));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = period1.withSeconds((int) ' ');
        int int5 = period4.getSeconds();
        org.joda.time.Period period7 = period4.minusMillis(0);
        org.joda.time.Days days8 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        boolean boolean16 = days11.isGreaterThan(days14);
        int int17 = days11.size();
        org.joda.time.Days days18 = days11.negated();
        org.joda.time.Days days20 = days18.minus(3);
        org.joda.time.Days days21 = days20.negated();
        java.lang.String str22 = days21.toString();
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType29 = days28.getPeriodType();
        boolean boolean30 = days25.isGreaterThan(days28);
        org.joda.time.Days days32 = days25.minus(1);
        org.joda.time.Days days34 = days32.dividedBy(60);
        org.joda.time.Days days35 = days21.plus(days32);
        org.joda.time.Days days36 = days8.minus(days35);
        java.lang.String str37 = days35.toString();
        java.lang.String str38 = days35.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P3D" + "'", str22, "P3D");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P2D" + "'", str37, "P2D");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "P2D" + "'", str38, "P2D");
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        org.joda.time.Seconds seconds4 = seconds0.plus((int) (short) 1);
        int int5 = seconds4.getSeconds();
        int int6 = seconds4.getSeconds();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType10 = seconds9.getFieldType();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds13 = seconds9.minus(seconds12);
        org.joda.time.Seconds seconds14 = seconds9.negated();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration18.toPeriod(periodType19, chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType25 = periodType24.withMonthsRemoved();
        org.joda.time.Period period26 = duration18.toPeriodTo(readableInstant23, periodType25);
        org.joda.time.Period period27 = duration18.toPeriod();
        boolean boolean28 = duration16.equals((java.lang.Object) period27);
        org.joda.time.Seconds seconds29 = duration16.toStandardSeconds();
        org.joda.time.Seconds seconds30 = seconds9.minus(seconds29);
        org.joda.time.Seconds seconds32 = seconds30.multipliedBy(6);
        org.joda.time.Seconds seconds33 = seconds4.plus(seconds30);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds36 = duration35.toStandardSeconds();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds39 = duration38.toStandardSeconds();
        boolean boolean40 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Seconds seconds43 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((java.lang.Object) interval42, chronology45);
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Seconds seconds48 = seconds33.minus(seconds47);
        org.joda.time.DurationFieldType durationFieldType49 = seconds47.getFieldType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(durationFieldType49);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Days days11 = days9.minus(3);
        org.joda.time.Days days12 = days11.negated();
        java.lang.String str13 = days12.toString();
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days19 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.PeriodType periodType20 = days19.getPeriodType();
        boolean boolean21 = days16.isGreaterThan(days19);
        org.joda.time.Days days23 = days16.minus(1);
        org.joda.time.Days days25 = days23.dividedBy(60);
        org.joda.time.Days days26 = days12.plus(days23);
        org.joda.time.DurationFieldType durationFieldType27 = days23.getFieldType();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration29.toPeriod(periodType30, chronology32);
        org.joda.time.Days days34 = org.joda.time.Days.ZERO;
        int int35 = days34.getDays();
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period40 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days41 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period40);
        org.joda.time.PeriodType periodType42 = days41.getPeriodType();
        boolean boolean43 = days38.isGreaterThan(days41);
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Days days47 = days41.minus(days46);
        org.joda.time.Days days48 = days34.minus(days41);
        boolean boolean49 = duration29.equals((java.lang.Object) days41);
        org.joda.time.Days days50 = days23.minus(days41);
        org.joda.time.Days days52 = days41.dividedBy(688);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P3D" + "'", str13, "P3D");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days52);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (-32), (long) 32, periodType2);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.toMutablePeriod();
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod((long) 3, chronology7);
        org.joda.time.Hours hours9 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Hours hours11 = hours9.plus(32);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days2 = days0.minus(25);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days8 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        boolean boolean10 = days5.isGreaterThan(days8);
        org.joda.time.Days days12 = days5.minus(1);
        org.joda.time.Days days14 = days12.dividedBy(60);
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        boolean boolean16 = days2.isGreaterThan(days12);
        org.joda.time.Days days18 = days2.plus((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days20 = days2.plus(99);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483622 + 99");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(days18);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.joda.time.Period period1 = org.joda.time.Period.years(52);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = duration2.toPeriod(chronology3);
        org.joda.time.Hours hours5 = duration2.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        int int7 = period1.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = period1.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType6 = seconds5.getFieldType();
        mutablePeriod2.add(durationFieldType6, 52);
        mutablePeriod2.add((long) (short) 1);
        int int11 = mutablePeriod2.size();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        java.lang.Object obj15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(obj15);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration20.toPeriod(periodType21, chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType27 = periodType26.withMonthsRemoved();
        org.joda.time.Period period28 = duration20.toPeriodTo(readableInstant25, periodType27);
        org.joda.time.Period period29 = duration20.toPeriod();
        org.joda.time.Duration duration30 = duration16.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration31 = duration16.toDuration();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType33 = periodType32.withMonthsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration16, periodType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str38 = duration37.toString();
        org.joda.time.Duration duration40 = duration37.minus((long) (byte) 10);
        java.lang.String str41 = duration37.toString();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        java.lang.Object obj44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(obj44);
        org.joda.time.Period period46 = new org.joda.time.Period(readableInstant43, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant42, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration45.toDuration();
        int int49 = duration37.compareTo((org.joda.time.ReadableDuration) duration45);
        boolean boolean50 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant53, readableDuration54);
        mutablePeriod55.setHours((int) (short) 100);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration59, chronology60);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType63 = periodType62.withWeeksRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant52, (org.joda.time.ReadableDuration) duration59, periodType63);
        org.joda.time.Duration duration67 = duration59.withMillis((long) 10);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant51, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) (short) 1, periodType71, chronology72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, readableInstant69, periodType71);
        boolean boolean75 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Chronology chronology76 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration16, chronology76);
        org.joda.time.Seconds seconds78 = duration16.toStandardSeconds();
        org.joda.time.Seconds seconds79 = duration16.toStandardSeconds();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration16.toPeriod(chronology80);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT600S" + "'", str38, "PT600S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT600S" + "'", str41, "PT600S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(seconds78);
        org.junit.Assert.assertNotNull(seconds79);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes(120L);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period5 = org.joda.time.Period.hours((-32));
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration9 = duration2.minus((org.joda.time.ReadableDuration) duration7);
        long long10 = duration9.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-115200000L) + "'", long8 == (-115200000L));
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2040L + "'", long10 == 2040L);
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod4 = hours2.toMutablePeriod();
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod4.setPeriod((long) 13, chronology6);
        org.joda.time.Chronology chronology10 = null;
        mutablePeriod4.setPeriod((long) (byte) -1, (long) 600, chronology10);
        mutablePeriod4.setPeriod((long) (byte) -1, (long) (-2147483588));
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT-31H");
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.getName();
        java.lang.String str2 = durationFieldType0.getName();
        java.lang.String str3 = durationFieldType0.toString();
        org.joda.time.Chronology chronology4 = null;
        boolean boolean5 = durationFieldType0.isSupported(chronology4);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyears" + "'", str2, "weekyears");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyears" + "'", str3, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((java.lang.Object) days2, chronology3);
        org.joda.time.MutablePeriod mutablePeriod5 = days2.toMutablePeriod();
        java.lang.String str6 = days2.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration11 = duration9.withMillis(0L);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setHours((int) (short) 100);
        boolean boolean21 = periodType15.equals((java.lang.Object) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.ZERO;
        long long23 = duration22.getStandardDays();
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration22);
        long long25 = duration22.getStandardMinutes();
        org.joda.time.Duration duration27 = duration22.withMillis((long) 0);
        boolean boolean28 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        org.joda.time.Period period32 = period29.minusDays(671);
        org.joda.time.Duration duration33 = period32.toStandardDuration();
        org.joda.time.Days days34 = duration33.toStandardDays();
        org.joda.time.Days days35 = days34.negated();
        boolean boolean36 = days2.isLessThan(days35);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P-1D" + "'", str6, "P-1D");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT0.163S");
        org.joda.time.Period period3 = period1.withSeconds(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 8);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType10 = periodType9.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-7L), periodType9, chronology12);
        org.joda.time.Period period14 = duration3.toPeriodFrom(readableInstant4, periodType9);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType16 = minutes15.getPeriodType();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes18 = minutes15.plus(minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.ZERO;
        boolean boolean21 = minutes19.isLessThan(minutes20);
        boolean boolean22 = minutes15.isLessThan(minutes19);
        org.joda.time.Duration duration23 = minutes15.toStandardDuration();
        org.joda.time.Minutes minutes25 = minutes15.dividedBy((int) (short) 100);
        org.joda.time.PeriodType periodType26 = minutes15.getPeriodType();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes30 = minutes27.plus(minutes29);
        org.joda.time.DurationFieldType durationFieldType31 = minutes27.getFieldType();
        int int32 = minutes15.get(durationFieldType31);
        int int33 = periodType9.indexOf(durationFieldType31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(6000000L, 0L, periodType9, chronology34);
        org.joda.time.Period period37 = period35.plusYears(51);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P0W");
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours(25);
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        long long8 = duration7.getStandardDays();
        org.joda.time.Hours hours9 = duration7.toStandardHours();
        boolean boolean10 = hours5.isLessThan(hours9);
        boolean boolean11 = periodType2.equals((java.lang.Object) boolean10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 120L, periodType2);
        mutablePeriod12.add((long) 2147483622);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) (short) 0, (long) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        java.lang.Object obj21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(obj21);
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant19, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration26.toPeriod(periodType27, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType33 = periodType32.withMonthsRemoved();
        org.joda.time.Period period34 = duration26.toPeriodTo(readableInstant31, periodType33);
        org.joda.time.Period period35 = duration26.toPeriod();
        org.joda.time.Duration duration36 = duration22.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration37 = duration22.toDuration();
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.joda.time.Duration duration39 = duration18.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant15, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology41 = null;
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration18, chronology41);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(8384460000L, chronology1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeksIn(readableInterval5);
        boolean boolean7 = weeks4.isLessThan(weeks6);
        org.joda.time.Weeks weeks8 = weeks4.negated();
        org.joda.time.Weeks weeks10 = weeks8.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        boolean boolean15 = weeks12.isLessThan(weeks14);
        org.joda.time.Weeks weeks17 = weeks14.minus((int) (short) -1);
        org.joda.time.Weeks weeks19 = weeks17.multipliedBy(0);
        boolean boolean20 = weeks10.isGreaterThan(weeks19);
        org.joda.time.DurationFieldType durationFieldType21 = weeks10.getFieldType();
        int int22 = period2.get(durationFieldType21);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.joda.time.Seconds seconds10 = seconds7.plus(25);
        org.joda.time.Seconds seconds11 = seconds7.negated();
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter3.withParseType(periodType12);
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter13.withLocale(locale14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period22 = duration21.toPeriod();
        long long23 = duration21.getStandardSeconds();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        java.lang.String str27 = seconds26.toString();
        org.joda.time.PeriodType periodType28 = seconds26.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant19, (org.joda.time.ReadableDuration) duration21, periodType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, 540000L, periodType28, chronology30);
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter15.withParseType(periodType28);
        boolean boolean33 = periodFormatter15.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod34 = org.joda.time.MutablePeriod.parse("PT4H", periodFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60L) + "'", long23 == (-60L));
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT60S" + "'", str27, "PT60S");
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        int int12 = days5.size();
        org.joda.time.Days days13 = org.joda.time.Days.ZERO;
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Days days18 = days16.minus(10);
        boolean boolean19 = days13.isGreaterThan(days16);
        org.joda.time.Days days20 = days5.minus(days16);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType22 = days20.getFieldType();
        org.joda.time.Days days23 = org.joda.time.Days.ONE;
        boolean boolean24 = days20.isGreaterThan(days23);
        org.joda.time.Days days26 = days20.dividedBy(6);
        org.joda.time.PeriodType periodType27 = days20.getPeriodType();
        org.joda.time.PeriodType periodType28 = periodType27.withMonthsRemoved();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-6));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (-1), periodType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(10L, (long) 8, periodType4, chronology6);
        org.joda.time.PeriodType periodType8 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod7.copy();
        mutablePeriod7.setPeriod(194400000L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.eras();
        int int5 = period3.get(durationFieldType4);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days7 = org.joda.time.Days.ZERO;
        org.joda.time.Days days8 = days7.negated();
        int int9 = days7.size();
        boolean boolean10 = days6.isGreaterThan(days7);
        org.joda.time.PeriodType periodType11 = days6.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = days6.getValue(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.joda.time.Period period4 = new org.joda.time.Period(10, 0, (int) (byte) 10, (int) (byte) 10);
        int int5 = period4.getHours();
        org.joda.time.PeriodType periodType6 = period4.getPeriodType();
        int int7 = period4.getMonths();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period4.toDurationFrom(readableInstant8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        int int16 = mutablePeriod15.getWeeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((java.lang.Object) mutablePeriod15, chronology17);
        org.joda.time.Period period19 = period18.normalizedStandard();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period18.toDurationTo(readableInstant20);
        org.joda.time.Duration duration22 = duration21.toDuration();
        boolean boolean23 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(8744033);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period6 = period2.toPeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        long long8 = duration7.getStandardDays();
        org.joda.time.Hours hours9 = duration7.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType10 = hours9.getFieldType();
        org.joda.time.Hours hours11 = null;
        org.joda.time.Hours hours12 = hours9.minus(hours11);
        org.joda.time.Period period13 = period6.plus((org.joda.time.ReadablePeriod) hours12);
        org.joda.time.PeriodType periodType14 = period6.getPeriodType();
        org.joda.time.Period period16 = period6.multipliedBy(27);
        org.joda.time.Period period18 = period16.withDays((-35));
        org.joda.time.Period period20 = period16.plusDays(88500);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = period9.withSeconds((int) ' ');
        org.joda.time.Period period13 = period6.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period15 = period13.minusMillis((int) (byte) -1);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant4, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType(0);
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DurationField durationField22 = durationFieldType19.getField(chronology21);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "years" + "'", str20, "years");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Weeks weeks7 = weeks5.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks14 = weeks11.minus((int) (short) -1);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(0);
        boolean boolean17 = weeks7.isGreaterThan(weeks16);
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period24 = period22.withDays((int) 'a');
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        int int26 = weeks25.getWeeks();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks33 = weeks30.minus((int) (short) -1);
        org.joda.time.Weeks weeks34 = weeks33.negated();
        org.joda.time.Weeks weeks36 = weeks33.multipliedBy(0);
        boolean boolean37 = weeks25.isGreaterThan(weeks36);
        org.joda.time.Weeks weeks38 = weeks16.minus(weeks25);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn(readableInterval39);
        org.joda.time.Weeks weeks42 = weeks40.multipliedBy((int) (byte) 100);
        org.joda.time.Weeks weeks43 = weeks25.plus(weeks42);
        org.joda.time.Weeks weeks45 = weeks42.multipliedBy((int) 'a');
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Weeks weeks47 = org.joda.time.Weeks.weeksIn(readableInterval46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Weeks weeks49 = org.joda.time.Weeks.weeksIn(readableInterval48);
        boolean boolean50 = weeks47.isLessThan(weeks49);
        org.joda.time.Weeks weeks51 = weeks47.negated();
        org.joda.time.Weeks weeks53 = weeks51.minus((int) (byte) 100);
        org.joda.time.Weeks weeks54 = weeks45.minus(weeks51);
        org.joda.time.Weeks weeks56 = weeks51.plus(13);
        org.joda.time.Duration duration57 = weeks51.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (short) 1, periodType62, chronology63);
        org.joda.time.PeriodType periodType65 = mutablePeriod64.getPeriodType();
        org.joda.time.PeriodType periodType66 = periodType65.withMillisRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period(readableInstant59, readableInstant60, periodType66);
        org.joda.time.PeriodType periodType68 = period67.getPeriodType();
        org.joda.time.PeriodType periodType69 = periodType68.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant58, periodType68);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period3 = period1.plusDays(27);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        boolean boolean14 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period15 = duration9.toPeriod();
        boolean boolean16 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration5.toPeriodTo(readableInstant17);
        long long19 = duration5.getStandardDays();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period22 = duration21.toPeriod();
        long long23 = duration21.getStandardSeconds();
        boolean boolean24 = duration5.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        java.lang.String str28 = seconds27.toString();
        org.joda.time.PeriodType periodType29 = seconds27.getPeriodType();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType29, chronology30);
        java.lang.String str32 = periodType29.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-128849018880000L), periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -128849018880");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60L) + "'", long23 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT60S" + "'", str28, "PT60S");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[Seconds]" + "'", str32, "PeriodType[Seconds]");
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.joda.time.Period period2 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withYearsRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(0L, periodType6, chronology7);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period1.plusDays((int) (byte) -1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period8 = period5.minusYears(27);
        org.joda.time.Period period10 = period8.withMinutes(8744020);
        org.joda.time.Period period12 = period8.minusMinutes((-31));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P-1DT1M" + "'", str6, "P-1DT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 3, (long) 97, periodType3);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.multipliedBy(600);
        int int8 = period4.getHours();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period4.toDurationTo(readableInstant9);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-100));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType4.isSupported(chronology5);
        boolean boolean7 = period1.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Period period9 = period1.minus(readablePeriod8);
        org.joda.time.Period period11 = period1.multipliedBy((int) (short) 0);
        org.joda.time.Period period13 = period1.minusHours((-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = period13.multipliedBy((-6));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -6");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        int int7 = period3.indexOf(durationFieldType6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Seconds seconds11 = duration9.toStandardSeconds();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType15 = seconds14.getFieldType();
        org.joda.time.Seconds seconds17 = seconds14.plus(25);
        boolean boolean18 = seconds11.isLessThan(seconds17);
        org.joda.time.Seconds seconds19 = seconds17.negated();
        org.joda.time.Duration duration20 = seconds17.toStandardDuration();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.PeriodType periodType22 = seconds21.getPeriodType();
        boolean boolean23 = seconds17.isLessThan(seconds21);
        int int24 = seconds21.getSeconds();
        org.joda.time.Period period25 = period3.withFields((org.joda.time.ReadablePeriod) seconds21);
        org.joda.time.Period period26 = seconds21.toPeriod();
        org.joda.time.Period period28 = period26.withHours(35);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(599L, chronology1);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType4 = seconds3.getPeriodType();
        java.lang.String str5 = seconds3.toString();
        java.lang.String str6 = seconds3.toString();
        org.joda.time.Seconds seconds7 = null;
        org.joda.time.Seconds seconds8 = seconds3.minus(seconds7);
        org.joda.time.Seconds seconds10 = seconds8.plus((-672));
        org.joda.time.Seconds seconds11 = seconds10.negated();
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.Period period13 = new org.joda.time.Period(6000000L, periodType12);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType16 = periodType15.withMonthsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withMinutesRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) 0, periodType16, chronology18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        boolean boolean26 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, readableInstant27, periodType28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType43 = seconds42.getFieldType();
        mutablePeriod33.add(durationFieldType43, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableDuration47);
        mutablePeriod48.setHours((int) (short) 100);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration52, chronology53);
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration52, chronology55);
        int int57 = duration24.compareTo((org.joda.time.ReadableDuration) duration52);
        java.lang.Object obj58 = null;
        boolean boolean59 = duration24.equals(obj58);
        org.joda.time.Seconds seconds61 = org.joda.time.Seconds.seconds(2);
        org.joda.time.Duration duration62 = seconds61.toStandardDuration();
        boolean boolean63 = duration24.equals((java.lang.Object) seconds61);
        int int64 = seconds61.getSeconds();
        org.joda.time.DurationFieldType durationFieldType65 = seconds61.getFieldType();
        boolean boolean66 = periodType16.isSupported(durationFieldType65);
        int int67 = periodType12.indexOf(durationFieldType65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1L, 6000000L, periodType12);
        org.joda.time.Chronology chronology71 = null;
        mutablePeriod68.setPeriod(100L, (long) (-25), chronology71);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.Period period1 = hours0.toPeriod();
        int int2 = hours0.getHours();
        java.lang.String str3 = hours0.toString();
        org.joda.time.Hours hours5 = hours0.minus((-1073741824));
        org.joda.time.Hours hours7 = hours0.minus(600);
        org.joda.time.Hours hours8 = org.joda.time.Hours.TWO;
        org.joda.time.Duration duration9 = hours8.toStandardDuration();
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours13 = hours11.multipliedBy((-1));
        org.joda.time.Hours hours15 = hours13.minus((int) (byte) 1);
        boolean boolean16 = hours8.isGreaterThan(hours13);
        org.joda.time.Hours hours17 = hours0.minus(hours13);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period21 = period19.withHours(32);
        org.joda.time.Hours hours22 = period19.toStandardHours();
        org.joda.time.Hours hours23 = hours22.negated();
        org.joda.time.Hours hours24 = hours22.negated();
        boolean boolean25 = hours0.isLessThan(hours22);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT1H" + "'", str3, "PT1H");
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(8L, (-3600L), chronology2);
        mutablePeriod3.addSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType6 = mutablePeriod3.getPeriodType();
        mutablePeriod3.addMillis(35);
        mutablePeriod3.setHours((int) '#');
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period9 = period4.normalizedStandard();
        org.joda.time.Days days10 = org.joda.time.Days.ZERO;
        org.joda.time.Days days11 = days10.negated();
        org.joda.time.Period period12 = period4.plus((org.joda.time.ReadablePeriod) days11);
        int int13 = days11.getDays();
        org.joda.time.Days days14 = org.joda.time.Days.FOUR;
        org.joda.time.Days days16 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.ZERO;
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Days days22 = days20.minus(10);
        boolean boolean23 = days17.isGreaterThan(days20);
        boolean boolean24 = days16.isLessThan(days17);
        org.joda.time.Days days25 = days14.plus(days17);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        boolean boolean34 = days29.isGreaterThan(days32);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Days days38 = days32.minus(days37);
        org.joda.time.Period period40 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days41 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period43);
        org.joda.time.PeriodType periodType45 = days44.getPeriodType();
        boolean boolean46 = days41.isGreaterThan(days44);
        org.joda.time.Days days48 = days41.minus(1);
        boolean boolean49 = days32.isGreaterThan(days48);
        int int50 = days32.getDays();
        org.joda.time.Period period52 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days53 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period55 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days56 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period55);
        org.joda.time.PeriodType periodType57 = days56.getPeriodType();
        boolean boolean58 = days53.isGreaterThan(days56);
        int int59 = days53.size();
        org.joda.time.Days days60 = days53.negated();
        org.joda.time.Days days62 = days60.minus(3);
        org.joda.time.Days days63 = days62.negated();
        boolean boolean64 = days32.isLessThan(days63);
        org.joda.time.Days days65 = days25.plus(days32);
        org.joda.time.Days days66 = days25.negated();
        boolean boolean67 = days11.isLessThan(days25);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes3.plus((-25));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -25");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutesIn(readableInterval0);
        java.lang.String str2 = minutes1.toString();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes8 = minutes3.minus(minutes5);
        boolean boolean9 = minutes1.isLessThan(minutes3);
        org.joda.time.Minutes minutes11 = minutes1.plus(3);
        org.joda.time.Minutes minutes12 = minutes1.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.ZERO;
        boolean boolean15 = minutes13.isLessThan(minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType17 = minutes16.getPeriodType();
        int int18 = minutes16.getMinutes();
        java.lang.String str19 = minutes16.toString();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType21 = minutes20.getFieldType();
        java.lang.String str22 = minutes20.toString();
        boolean boolean23 = minutes16.isLessThan(minutes20);
        int int24 = minutes16.size();
        org.joda.time.Minutes minutes25 = minutes13.plus(minutes16);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        boolean boolean28 = minutes26.isLessThan(minutes27);
        org.joda.time.Minutes minutes30 = minutes27.multipliedBy((int) (short) 10);
        org.joda.time.Minutes minutes31 = minutes16.plus(minutes30);
        org.joda.time.Minutes minutes33 = minutes16.plus(2147483647);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration35.toPeriod(periodType36, chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType42 = periodType41.withMonthsRemoved();
        org.joda.time.Period period43 = duration35.toPeriodTo(readableInstant40, periodType42);
        org.joda.time.Minutes minutes44 = duration35.toStandardMinutes();
        org.joda.time.Minutes minutes46 = minutes44.multipliedBy((int) (short) -1);
        int int48 = minutes46.getValue((int) (byte) 0);
        org.joda.time.Minutes minutes50 = minutes46.minus(7);
        org.joda.time.Minutes minutes51 = null;
        org.joda.time.Minutes minutes52 = minutes50.minus(minutes51);
        boolean boolean53 = minutes16.isGreaterThan(minutes51);
        boolean boolean54 = minutes1.isLessThan(minutes51);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0M" + "'", str2, "PT0M");
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0M" + "'", str19, "PT0M");
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-2147483648M" + "'", str22, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod3.addSeconds(100);
        java.lang.Object obj6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(obj6);
        org.joda.time.Duration duration8 = duration7.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMinutesRemoved();
        org.joda.time.Period period14 = duration8.toPeriodTo(readableInstant10, periodType12);
        org.joda.time.Hours hours15 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours16 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = hours16.getFieldType();
        boolean boolean18 = hours15.isGreaterThan(hours16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        org.joda.time.Period period22 = mutablePeriod21.toPeriod();
        org.joda.time.Period period24 = period22.withHours(0);
        org.joda.time.Hours hours25 = period24.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType26 = hours25.getFieldType();
        int int27 = hours25.getHours();
        boolean boolean28 = hours16.isLessThan(hours25);
        org.joda.time.Hours hours30 = hours16.plus(10);
        boolean boolean31 = periodType12.equals((java.lang.Object) hours16);
        org.joda.time.PeriodType periodType32 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        org.joda.time.Seconds seconds4 = seconds0.plus((int) (short) 1);
        org.joda.time.PeriodType periodType5 = seconds0.getPeriodType();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withMinutesRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant14, periodType15);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period20 = duration11.toPeriod(periodType19);
        org.joda.time.Period period22 = period20.withWeeks((int) ' ');
        org.joda.time.Period period23 = period20.toPeriod();
        org.joda.time.Seconds seconds24 = period20.toStandardSeconds();
        boolean boolean25 = seconds0.isGreaterThan(seconds24);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Duration duration28 = seconds27.toStandardDuration();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        boolean boolean35 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Seconds seconds39 = seconds27.minus(seconds38);
        org.joda.time.Seconds seconds41 = seconds38.multipliedBy(5);
        org.joda.time.Seconds seconds43 = org.joda.time.Seconds.parseSeconds("PT25S");
        boolean boolean44 = seconds38.isLessThan(seconds43);
        org.joda.time.Seconds seconds45 = seconds24.minus(seconds38);
        org.joda.time.Seconds seconds47 = seconds24.dividedBy(74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds49 = seconds24.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds47);
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant7, periodType8);
        org.joda.time.Duration duration11 = period10.toStandardDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((-60L), (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        java.lang.String str19 = seconds18.toString();
        org.joda.time.PeriodType periodType20 = seconds18.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withMillisRemoved();
        org.joda.time.Period period23 = duration14.toPeriodFrom(readableInstant15, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 100);
        boolean boolean26 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration25);
        long long27 = duration14.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT60S" + "'", str19, "PT60S");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 54000L + "'", long27 == 54000L);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType6);
        java.lang.String str9 = periodType6.getName();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Millis" + "'", str9, "Millis");
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(32, 160, (int) 'a', (-60));
        org.joda.time.Days days5 = org.joda.time.Days.ZERO;
        int int6 = days5.getDays();
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        boolean boolean14 = days9.isGreaterThan(days12);
        org.joda.time.Period period16 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Days days18 = days12.minus(days17);
        org.joda.time.Days days19 = days5.minus(days12);
        org.joda.time.Days days21 = days12.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType23 = days21.getFieldType((int) (short) 0);
        org.joda.time.Days days24 = org.joda.time.Days.ZERO;
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Days days29 = days27.minus(10);
        boolean boolean30 = days24.isGreaterThan(days27);
        org.joda.time.Days days31 = days21.plus(days24);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        long long33 = duration32.getStandardSeconds();
        mutablePeriod4.add((org.joda.time.ReadableDuration) duration32);
        long long35 = duration32.getMillis();
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400L + "'", long33 == 86400L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.joda.time.Period period1 = new org.joda.time.Period(2368800000L);
        int int2 = period1.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = period1.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(25, (int) 'a', (int) (short) 10, 4, 8, (int) (short) 100, (int) (short) 0, (int) 'a');
        mutablePeriod8.addMillis(200);
        mutablePeriod8.setWeeks(32);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period3.minusYears((int) (short) 10);
        org.joda.time.Period period7 = period3.withMinutes((int) (short) 10);
        org.joda.time.Period period9 = period3.plusMillis((int) (byte) 10);
        org.joda.time.Period period11 = period9.withMillis(10);
        org.joda.time.Period period13 = period11.plusMinutes(5);
        int int14 = period13.getSeconds();
        org.joda.time.Period period16 = period13.plusMonths(107);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period20 = period18.withHours(32);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = durationFieldType21.isSupported(chronology22);
        boolean boolean24 = period18.isSupported(durationFieldType21);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Period period26 = period18.minus(readablePeriod25);
        org.joda.time.Period period28 = period18.multipliedBy((int) (short) 0);
        org.joda.time.Period period30 = period18.minusHours((-2147483648));
        org.joda.time.Period period32 = period18.plusMinutes((-32));
        org.joda.time.DurationFieldType durationFieldType34 = period18.getFieldType(6);
        boolean boolean35 = period16.isSupported(durationFieldType34);
        org.joda.time.Chronology chronology36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) boolean35, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.joda.time.Days days1 = org.joda.time.Days.days((int) (byte) 10);
        int int2 = days1.getDays();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (-2), 27, (-34), (-1), (int) (byte) 1, 99, (int) '4');
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration18, chronology19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType24 = seconds23.getFieldType();
        mutablePeriod14.add(durationFieldType24, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
        mutablePeriod29.setHours((int) (short) 100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33, chronology34);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration33, chronology36);
        int int38 = duration5.compareTo((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration39 = duration33.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant41);
        org.joda.time.Duration duration44 = duration39.minus((long) (-1));
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration44);
        java.lang.String str46 = mutablePeriod45.toString();
        mutablePeriod45.setMinutes((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration49 = new org.joda.time.Duration((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M0.001S" + "'", str46, "PT1M0.001S");
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.joda.time.Period period4 = new org.joda.time.Period((-58), (-2147483638), 97, 2147483647);
        org.joda.time.Period period6 = period4.withMillis((-39648));
        org.joda.time.Period period7 = period6.negated();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes8 = minutes0.negated();
        org.joda.time.Minutes minutes9 = minutes8.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.Period period6 = period1.plusHours((int) (short) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        java.lang.String str10 = seconds9.toString();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = seconds9.isSupported(durationFieldType11);
        org.joda.time.Seconds seconds13 = null;
        org.joda.time.Seconds seconds14 = seconds9.minus(seconds13);
        org.joda.time.Period period15 = period1.withFields((org.joda.time.ReadablePeriod) seconds13);
        org.joda.time.Period period17 = period15.plusYears(100);
        org.joda.time.Period period19 = period15.withYears((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Period period21 = period15.withFields(readablePeriod20);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT60S" + "'", str10, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 0, 100000000L);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.joda.time.Days days1 = org.joda.time.Days.days((-2));
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes6 = minutes3.plus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.ZERO;
        boolean boolean9 = minutes7.isLessThan(minutes8);
        boolean boolean10 = minutes3.isLessThan(minutes7);
        org.joda.time.Minutes minutes12 = minutes7.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = minutes13.getFieldType();
        org.joda.time.PeriodType periodType15 = minutes13.getPeriodType();
        org.joda.time.Minutes minutes16 = minutes12.plus(minutes13);
        org.joda.time.PeriodType periodType17 = minutes12.getPeriodType();
        org.joda.time.PeriodType periodType18 = minutes12.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType19 = minutes12.getFieldType();
        org.joda.time.Minutes minutes20 = minutes12.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = days1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(minutes20);
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = duration1.minus((long) (byte) 10);
        org.joda.time.Duration duration6 = duration1.withMillis((long) (short) -1);
        java.lang.Object obj7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(obj7, periodType8);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        boolean boolean20 = periodType14.equals((java.lang.Object) mutablePeriod17);
        org.joda.time.PeriodType periodType21 = periodType14.withMonthsRemoved();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) mutablePeriod10, periodType14, chronology22);
        org.joda.time.PeriodType periodType24 = periodType14.withMillisRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration1.toPeriod(periodType14, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = period26.minusSeconds((-62));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-29), (-4), 21168000, 8744033, (-100), (-609), (-1), (-29), periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PT-60S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        boolean boolean5 = periodFormatter2.isParser();
        boolean boolean6 = periodFormatter2.isParser();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter2.getParser();
        java.util.Locale locale8 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter2.getParser();
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        java.lang.String str13 = seconds11.toString();
        org.joda.time.Seconds seconds15 = seconds11.plus((int) (short) 1);
        int int16 = seconds15.getSeconds();
        int int17 = seconds15.getSeconds();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType21 = seconds20.getFieldType();
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds24 = seconds20.minus(seconds23);
        org.joda.time.Seconds seconds25 = seconds20.negated();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration29.toPeriod(periodType30, chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType36 = periodType35.withMonthsRemoved();
        org.joda.time.Period period37 = duration29.toPeriodTo(readableInstant34, periodType36);
        org.joda.time.Period period38 = duration29.toPeriod();
        boolean boolean39 = duration27.equals((java.lang.Object) period38);
        org.joda.time.Seconds seconds40 = duration27.toStandardSeconds();
        org.joda.time.Seconds seconds41 = seconds20.minus(seconds40);
        org.joda.time.Seconds seconds43 = seconds41.multipliedBy(6);
        org.joda.time.Seconds seconds44 = seconds15.plus(seconds41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds47 = duration46.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType48 = seconds47.getFieldType();
        org.joda.time.Seconds seconds50 = seconds47.plus(25);
        org.joda.time.Seconds seconds51 = seconds47.negated();
        org.joda.time.Seconds seconds52 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds53 = seconds47.plus(seconds52);
        org.joda.time.Seconds seconds54 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType55 = seconds54.getPeriodType();
        java.lang.String str56 = seconds54.toString();
        org.joda.time.Seconds seconds58 = seconds54.plus((int) (short) 1);
        int int59 = seconds58.getSeconds();
        boolean boolean60 = seconds53.isLessThan(seconds58);
        org.joda.time.DurationFieldType durationFieldType61 = seconds58.getFieldType();
        org.joda.time.Seconds seconds62 = seconds41.minus(seconds58);
        org.joda.time.Seconds seconds64 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds65 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType66 = seconds65.getFieldType();
        boolean boolean67 = seconds64.isGreaterThan(seconds65);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod70.addYears((int) '4');
        org.joda.time.Chronology chronology74 = null;
        mutablePeriod70.add((long) 100, chronology74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        java.lang.String str79 = seconds78.toString();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.days();
        boolean boolean81 = seconds78.isSupported(durationFieldType80);
        int int82 = mutablePeriod70.get(durationFieldType80);
        boolean boolean83 = seconds65.isSupported(durationFieldType80);
        org.joda.time.Seconds seconds85 = seconds65.dividedBy((int) ' ');
        org.joda.time.DurationFieldType durationFieldType86 = seconds65.getFieldType();
        org.joda.time.Seconds seconds88 = seconds65.minus(35);
        org.joda.time.Seconds seconds90 = seconds88.plus((-1));
        org.joda.time.Seconds seconds92 = seconds90.multipliedBy((-60));
        org.joda.time.Seconds seconds93 = seconds58.plus(seconds92);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer10, (org.joda.time.ReadablePeriod) seconds93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNull(periodParser9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT60S" + "'", str79, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(seconds85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(seconds88);
        org.junit.Assert.assertNotNull(seconds90);
        org.junit.Assert.assertNotNull(seconds92);
        org.junit.Assert.assertNotNull(seconds93);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 100);
        int int3 = mutablePeriod2.size();
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod2.copy();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
        mutablePeriod7.setPeriod((long) ' ', (long) 52);
        mutablePeriod7.addDays(100);
        org.joda.time.PeriodType periodType13 = mutablePeriod7.getPeriodType();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration18.toIntervalFrom(readableInstant25);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod4.setYears((-940));
        org.joda.time.Chronology chronology32 = null;
        mutablePeriod4.setPeriod((long) (-637), chronology32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Seconds seconds3 = duration1.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        boolean boolean10 = seconds3.isLessThan(seconds9);
        org.joda.time.Seconds seconds11 = seconds9.negated();
        org.joda.time.Seconds seconds13 = seconds11.plus(600);
        org.joda.time.Seconds seconds15 = seconds13.plus((-100));
        org.joda.time.Seconds seconds17 = seconds15.multipliedBy((-6));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.joda.time.Period period1 = org.joda.time.Period.days((-609));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = period1.plusHours((-1));
        org.joda.time.Period period12 = period1.withDays((int) 'a');
        org.joda.time.Period period14 = period12.withSeconds(52);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant24, readableDuration25);
        mutablePeriod26.setHours((int) (short) 100);
        boolean boolean29 = periodType23.equals((java.lang.Object) mutablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) duration19, periodType23, chronology30);
        boolean boolean32 = duration17.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, readableInstant33);
        mutablePeriod15.add((org.joda.time.ReadableDuration) duration19);
        mutablePeriod15.setYears((int) (byte) 10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        boolean boolean14 = weeks11.isLessThan(weeks13);
        org.joda.time.Weeks weeks15 = weeks11.negated();
        org.joda.time.MutablePeriod mutablePeriod16 = weeks15.toMutablePeriod();
        org.joda.time.Weeks weeks17 = weeks1.minus(weeks15);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks24 = weeks21.minus((int) (short) -1);
        org.joda.time.Weeks weeks26 = weeks24.multipliedBy(0);
        org.joda.time.Weeks weeks27 = null;
        boolean boolean28 = weeks24.isLessThan(weeks27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.weeksIn(readableInterval31);
        boolean boolean33 = weeks30.isLessThan(weeks32);
        org.joda.time.Weeks weeks34 = weeks30.negated();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) weeks30, chronology35);
        int[] intArray37 = period36.getValues();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = period36.getFieldTypes();
        boolean boolean39 = weeks24.equals((java.lang.Object) durationFieldTypeArray38);
        org.joda.time.Weeks weeks40 = weeks17.minus(weeks24);
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeksIn(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.weeksIn(readableInterval44);
        boolean boolean46 = weeks43.isLessThan(weeks45);
        org.joda.time.Weeks weeks47 = weeks43.negated();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Weeks weeks49 = org.joda.time.Weeks.weeksIn(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.weeksIn(readableInterval50);
        boolean boolean52 = weeks49.isLessThan(weeks51);
        org.joda.time.Weeks weeks53 = weeks49.negated();
        org.joda.time.Weeks weeks55 = weeks53.minus((int) (byte) 100);
        org.joda.time.Weeks weeks56 = weeks47.plus(weeks53);
        boolean boolean57 = weeks41.isLessThan(weeks53);
        org.joda.time.Weeks weeks59 = weeks41.multipliedBy((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeksIn(readableInterval60);
        org.joda.time.Weeks weeks63 = weeks61.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks64 = weeks59.plus(weeks61);
        org.joda.time.Weeks weeks65 = weeks40.plus(weeks64);
        int int66 = weeks40.getWeeks();
        org.joda.time.Weeks weeks67 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks40);
        org.joda.time.Duration duration68 = weeks40.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes5 = minutes0.minus(minutes2);
        org.joda.time.Minutes minutes7 = minutes5.plus((int) '4');
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ZERO;
        boolean boolean10 = minutes8.isLessThan(minutes9);
        org.joda.time.Minutes minutes12 = minutes8.plus(52);
        org.joda.time.Minutes minutes13 = minutes7.plus(minutes8);
        org.joda.time.Minutes minutes15 = minutes7.minus(416);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours3 = hours1.multipliedBy((-1));
        org.joda.time.Hours hours5 = hours3.minus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
        mutablePeriod9.setSeconds(8);
        mutablePeriod9.setValue(1, 2);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), (long) ' ');
        mutablePeriod9.add((org.joda.time.ReadableDuration) duration17);
        mutablePeriod9.clear();
        boolean boolean20 = hours5.equals((java.lang.Object) mutablePeriod9);
        mutablePeriod9.addMinutes(52);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = mutablePeriod9.toDurationFrom(readableInstant23);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((int) ' ', (int) (byte) 10, 1, (int) (byte) 10, (int) (short) 100, (int) (short) 100, 52, (int) (byte) -1);
        boolean boolean34 = duration24.equals((java.lang.Object) 1);
        org.joda.time.Period period35 = duration24.toPeriod();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (short) 0, periodType37, chronology38);
        java.lang.String str40 = periodType37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) duration24, periodType37, chronology41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) 2147483647);
        mutablePeriod42.setPeriod((org.joda.time.ReadableDuration) duration44);
        int int46 = mutablePeriod42.getSeconds();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) 100, 540000L);
        org.joda.time.Hours hours50 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours51 = hours50.negated();
        org.joda.time.Duration duration52 = hours51.toStandardDuration();
        boolean boolean53 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod42.add((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PeriodType[YearMonthDay]" + "'", str40, "PeriodType[YearMonthDay]");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = minutes10.negated();
        org.joda.time.Minutes minutes15 = minutes13.minus((-7));
        org.joda.time.Minutes minutes17 = minutes13.dividedBy((-73));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT-0.515S");
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(214748364, (-6), 9, (-62));
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours3 = hours1.multipliedBy((-1));
        org.joda.time.Hours hours5 = hours3.minus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
        mutablePeriod9.setSeconds(8);
        mutablePeriod9.setValue(1, 2);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), (long) ' ');
        mutablePeriod9.add((org.joda.time.ReadableDuration) duration17);
        mutablePeriod9.clear();
        boolean boolean20 = hours5.equals((java.lang.Object) mutablePeriod9);
        mutablePeriod9.setWeeks((int) (byte) -1);
        java.lang.String str23 = mutablePeriod9.toString();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P-1W" + "'", str23, "P-1W");
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType13 = minutes10.getFieldType();
        java.lang.String str14 = durationFieldType13.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minutes" + "'", str14, "minutes");
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant12, periodType13);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period18 = duration9.toPeriod(periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
        mutablePeriod22.setHours((int) (short) 100);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration26, chronology27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant19, (org.joda.time.ReadableDuration) duration26, periodType30);
        org.joda.time.Period period33 = duration9.toPeriod(periodType30);
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter2.withParseType(periodType30);
        org.joda.time.format.PeriodParser periodParser35 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType36 = periodFormatter2.getParseType();
        boolean boolean37 = periodFormatter2.isParser();
        org.joda.time.PeriodType periodType38 = periodFormatter2.getParseType();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNull(periodParser35);
        org.junit.Assert.assertNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(periodType38);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.joda.time.Period period8 = new org.joda.time.Period((-112), (-515), 416, 88500, (-596526), 135, (-2147483638), 99);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant10, readableDuration11);
        org.joda.time.Period period13 = mutablePeriod12.toPeriod();
        org.joda.time.Period period15 = period13.withHours(0);
        org.joda.time.Hours hours16 = period15.toStandardHours();
        org.joda.time.Hours hours17 = hours9.minus(hours16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType22);
        org.joda.time.Hours hours24 = period23.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType25 = hours24.getFieldType();
        boolean boolean26 = hours16.isLessThan(hours24);
        org.joda.time.Hours hours27 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours28 = hours27.negated();
        org.joda.time.Hours hours29 = org.joda.time.Hours.ONE;
        boolean boolean30 = hours28.isLessThan(hours29);
        org.joda.time.DurationFieldType durationFieldType31 = hours28.getFieldType();
        org.joda.time.Hours hours32 = hours16.minus(hours28);
        org.joda.time.Period period33 = hours32.toPeriod();
        org.joda.time.Period period34 = period33.negated();
        int int35 = period33.size();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        int int4 = period3.getMillis();
        org.joda.time.Period period6 = period3.plusYears(13);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((java.lang.Object) period6, chronology7);
        org.joda.time.Period period10 = period6.minusSeconds(13);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = period6.toDurationFrom(readableInstant11);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period4);
        int int6 = period4.getWeeks();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period4.toDurationFrom(readableInstant7);
        org.joda.time.PeriodType periodType9 = period4.getPeriodType();
        org.joda.time.Seconds seconds10 = period4.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType11 = seconds10.getFieldType();
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Period period3 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType5 = period3.getFieldType((int) (short) 1);
        org.joda.time.Period period7 = period3.plusDays(10);
        org.joda.time.Seconds seconds8 = period3.toStandardSeconds();
        boolean boolean9 = seconds1.isLessThan(seconds8);
        int int10 = seconds8.getSeconds();
        java.lang.String str11 = seconds8.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.PeriodType periodType7 = periodType3.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (-3), periodType7);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType10 = days9.getPeriodType();
        boolean boolean11 = days6.isGreaterThan(days9);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days15 = days9.minus(days14);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days20 = days18.minus(10);
        org.joda.time.Days days21 = days9.plus(days18);
        org.joda.time.Days days23 = days21.dividedBy(100);
        org.joda.time.Days days24 = null;
        org.joda.time.Days days25 = days23.plus(days24);
        org.joda.time.Days days26 = days23.negated();
        boolean boolean27 = days2.isGreaterThan(days26);
        org.joda.time.DurationFieldType durationFieldType28 = days2.getFieldType();
        org.joda.time.PeriodType periodType29 = days2.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType30 = days2.getFieldType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        java.lang.String str5 = period4.toString();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = durationFieldType6.isSupported(chronology7);
        org.joda.time.Period period10 = period4.withFieldAdded(durationFieldType6, 13);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period4.withPeriodType(periodType11);
        org.joda.time.Period period13 = period12.toPeriod();
        org.joda.time.Period period15 = period12.minusMinutes(2);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) 100, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutablePeriod2.setPeriod(readableInstant8, readableInstant9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.withSeconds((int) ' ');
        org.joda.time.Period period19 = period12.minus((org.joda.time.ReadablePeriod) period15);
        int int20 = period15.getDays();
        java.lang.String str21 = period15.toString();
        org.joda.time.Period period23 = period15.plusMillis(0);
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = period23.normalizedStandard();
        org.joda.time.Period period27 = period23.withHours(59);
        org.joda.time.Period period29 = period27.plusDays(0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT1M" + "'", str21, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays(0L);
        java.lang.String str4 = duration3.toString();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType11 = period9.getFieldType((int) (short) 1);
        org.joda.time.Period period13 = period9.plusDays(10);
        boolean boolean14 = periodType7.equals((java.lang.Object) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) ' ', periodType7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 32, periodType7, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) str4, periodType7, chronology18);
        org.joda.time.PeriodType periodType20 = periodType7.withMonthsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period(84326400L, (long) 67, periodType20);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = seconds2.plus(25);
        org.joda.time.Seconds seconds6 = seconds2.negated();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds8 = seconds2.plus(seconds7);
        org.joda.time.Seconds seconds10 = seconds2.dividedBy(32);
        int int11 = seconds10.getSeconds();
        int int12 = seconds10.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(25, (-27), 9, 416);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration6.toIntervalTo(readableInstant7);
        org.joda.time.Period period9 = duration6.toPeriod();
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.format.PeriodPrinter periodPrinter11 = null;
        org.joda.time.format.PeriodParser periodParser12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = new org.joda.time.format.PeriodFormatter(periodPrinter11, periodParser12);
        java.util.Locale locale14 = periodFormatter13.getLocale();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType16 = minutes15.getPeriodType();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes18 = minutes15.plus(minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.ZERO;
        boolean boolean21 = minutes19.isLessThan(minutes20);
        boolean boolean22 = minutes15.isLessThan(minutes19);
        org.joda.time.PeriodType periodType23 = minutes15.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType26 = periodType23.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter13.withParseType(periodType26);
        org.joda.time.Period period28 = period10.withPeriodType(periodType26);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = seconds2.plus(25);
        org.joda.time.Seconds seconds6 = seconds2.negated();
        org.joda.time.Seconds seconds8 = seconds2.dividedBy(10);
        org.joda.time.MutablePeriod mutablePeriod9 = seconds8.toMutablePeriod();
        org.joda.time.Period period10 = mutablePeriod9.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period6 = period2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period2.getFieldTypes();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Seconds seconds12 = seconds10.plus(100);
        boolean boolean13 = period2.equals((java.lang.Object) seconds12);
        org.joda.time.Seconds seconds14 = seconds12.negated();
        org.joda.time.Seconds seconds16 = seconds12.dividedBy((int) 'a');
        org.joda.time.Seconds seconds18 = seconds12.minus((int) (short) -1);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType20 = minutes19.getPeriodType();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes24 = minutes19.minus(minutes21);
        org.joda.time.Minutes minutes25 = minutes24.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = seconds18.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Seconds cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.eras();
        int int5 = period3.get(durationFieldType4);
        int int6 = period3.getYears();
        org.joda.time.Period period8 = period3.withMonths((int) ' ');
        org.joda.time.Period period10 = period3.minusDays(658);
        org.joda.time.Period period12 = period3.plusWeeks((-609));
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (short) -1);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        int int7 = period6.getMinutes();
        org.joda.time.Weeks weeks8 = period6.toStandardWeeks();
        org.joda.time.Weeks weeks9 = weeks2.plus(weeks8);
        int int10 = weeks9.getWeeks();
        org.joda.time.Weeks weeks12 = weeks9.minus((-302));
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        boolean boolean17 = weeks14.isLessThan(weeks16);
        org.joda.time.Weeks weeks18 = weeks14.negated();
        org.joda.time.Weeks weeks20 = weeks18.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksIn(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksIn(readableInterval23);
        boolean boolean25 = weeks22.isLessThan(weeks24);
        org.joda.time.Weeks weeks27 = weeks24.minus((int) (short) -1);
        org.joda.time.Weeks weeks29 = weeks27.multipliedBy(0);
        boolean boolean30 = weeks20.isGreaterThan(weeks29);
        org.joda.time.Period period35 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period37 = period35.withDays((int) 'a');
        org.joda.time.Weeks weeks38 = period37.toStandardWeeks();
        int int39 = weeks38.getWeeks();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.weeksIn(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeksIn(readableInterval42);
        boolean boolean44 = weeks41.isLessThan(weeks43);
        org.joda.time.Weeks weeks46 = weeks43.minus((int) (short) -1);
        org.joda.time.Weeks weeks47 = weeks46.negated();
        org.joda.time.Weeks weeks49 = weeks46.multipliedBy(0);
        boolean boolean50 = weeks38.isGreaterThan(weeks49);
        org.joda.time.Weeks weeks51 = weeks29.minus(weeks38);
        org.joda.time.Duration duration52 = weeks29.toStandardDuration();
        org.joda.time.Weeks weeks54 = weeks29.dividedBy((int) '#');
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks57 = weeks55.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DurationField durationField60 = durationFieldType58.getField(chronology59);
        boolean boolean61 = weeks55.isSupported(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType62 = weeks55.getFieldType();
        org.joda.time.PeriodType periodType63 = weeks55.getPeriodType();
        org.joda.time.Weeks weeks64 = weeks29.plus(weeks55);
        org.joda.time.Weeks weeks66 = weeks64.minus((-672));
        java.lang.String str67 = weeks66.toString();
        org.joda.time.Weeks weeks68 = weeks66.negated();
        boolean boolean69 = weeks12.isGreaterThan(weeks66);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 13 + "'", int39 == 13);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "P-2147482976W" + "'", str67, "P-2147482976W");
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Period period8 = period6.plusMillis((int) '#');
        org.joda.time.Period period10 = period8.withDays(1);
        org.joda.time.Period period12 = period10.withMinutes(7);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) (short) 1, 1, (int) (byte) -1);
        org.joda.time.Period period6 = period4.minusMillis(8);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Duration duration9 = minutes7.toStandardDuration();
        long long10 = duration9.getStandardMinutes();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.joda.time.Period period1 = org.joda.time.Period.millis(13);
        org.joda.time.Period period3 = period1.minusMonths((int) (byte) -1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period7 = period5.plusYears((int) ' ');
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks13 = weeks9.negated();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) weeks9, chronology14);
        boolean boolean16 = period7.equals((java.lang.Object) period15);
        org.joda.time.Period period18 = period7.plusYears(10);
        org.joda.time.Period period20 = period7.plusMonths((int) (byte) 100);
        org.joda.time.Period period21 = period1.withFields((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = period1.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.joda.time.Period period8 = new org.joda.time.Period((-1), (-32), (-1), 0, (-32), (int) '4', (int) (short) -1, 25);
        int int9 = period8.size();
        int int10 = period8.getMonths();
        int int11 = period8.getHours();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-32) + "'", int10 == (-32));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-32) + "'", int11 == (-32));
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 1, periodType1, chronology2);
        org.joda.time.PeriodType periodType4 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        java.lang.String str9 = seconds8.toString();
        org.joda.time.PeriodType periodType10 = seconds8.getPeriodType();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType12.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 2, periodType12);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant3, readableInstant4, periodType12);
        org.joda.time.Period period17 = new org.joda.time.Period(10L, periodType12);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period18.withMonths(50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT60S" + "'", str9, "PT60S");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        int int9 = weeks6.getWeeks();
        org.joda.time.PeriodType periodType10 = weeks6.getPeriodType();
        org.joda.time.Weeks weeks12 = weeks6.multipliedBy((-940));
        java.lang.String str13 = weeks6.toString();
        org.joda.time.DurationFieldType durationFieldType14 = weeks6.getFieldType();
        org.joda.time.Weeks weeks16 = weeks6.minus(35);
        java.lang.String str17 = weeks6.toString();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P1W" + "'", str13, "P1W");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P1W" + "'", str17, "P1W");
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (-1), 100L, periodType2, chronology3);
        int int5 = period4.getSeconds();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Days days9 = days2.minus(1);
        org.joda.time.Days days11 = days9.dividedBy(60);
        org.joda.time.Days days12 = org.joda.time.Days.ZERO;
        int int13 = days12.getDays();
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days19 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.PeriodType periodType20 = days19.getPeriodType();
        boolean boolean21 = days16.isGreaterThan(days19);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Days days25 = days19.minus(days24);
        org.joda.time.Days days26 = days12.minus(days19);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        boolean boolean34 = days29.isGreaterThan(days32);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Days days38 = days32.minus(days37);
        org.joda.time.Days days39 = days12.plus(days38);
        boolean boolean40 = days11.isGreaterThan(days39);
        org.joda.time.Days days42 = days11.plus(88500);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = days42.getFieldType((-515));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -515");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(days42);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((-539948L), 0L, chronology2);
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 8744033, chronology1);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter3.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter3.withLocale(locale6);
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withLocale(locale10);
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withLocale(locale12);
        java.util.Locale locale14 = periodFormatter13.getLocale();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeks(1);
        java.lang.String str19 = weeks18.toString();
        org.joda.time.PeriodType periodType20 = weeks18.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType20);
        org.joda.time.PeriodType periodType22 = periodType20.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter13.withParseType(periodType22);
        org.joda.time.format.PeriodPrinter periodPrinter24 = periodFormatter23.getPrinter();
        org.joda.time.format.PeriodParser periodParser25 = periodFormatter23.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period26 = org.joda.time.Period.parse("PT3600S", periodFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P1W" + "'", str19, "P1W");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(periodPrinter24);
        org.junit.Assert.assertNull(periodParser25);
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.minus(10);
        boolean boolean7 = days1.isGreaterThan(days4);
        org.joda.time.Days days8 = days0.minus(days1);
        org.joda.time.Days days9 = org.joda.time.Days.THREE;
        org.joda.time.Days days11 = days9.minus((-32));
        boolean boolean12 = days0.isLessThan(days11);
        org.joda.time.Days days13 = days0.negated();
        org.joda.time.Days days14 = days13.negated();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-34), 779L);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatter12.getPrinter();
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter12.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter15 = periodFormatter12.getPrinter();
        boolean boolean16 = periodFormatter12.isParser();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((-60L), (long) 32, chronology19);
        org.joda.time.Period period22 = period20.withHours((int) (short) -1);
        org.joda.time.Period period24 = period20.plusSeconds(0);
        org.joda.time.Period period26 = period20.plusHours(0);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (byte) 0, 13, 8, 10);
        int int32 = period31.size();
        org.joda.time.Period period34 = period31.minusMillis((-2));
        org.joda.time.PeriodType periodType35 = period34.getPeriodType();
        org.joda.time.Period period36 = period20.normalizedStandard(periodType35);
        org.joda.time.PeriodType periodType37 = periodType35.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter12.withParseType(periodType35);
        boolean boolean39 = periodFormatter38.isPrinter();
        boolean boolean40 = periodFormatter38.isPrinter();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodPrinter13);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNull(periodPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days15 = days0.negated();
        int int16 = days0.getDays();
        int int17 = days0.getDays();
        java.lang.String str18 = days0.toString();
        org.joda.time.Days days20 = days0.minus(15120008);
        org.joda.time.Days days21 = days0.negated();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P0D" + "'", str18, "P0D");
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        long long14 = duration3.getStandardSeconds();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration17.toPeriodFrom(readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration17.toIntervalFrom(readableInstant21);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Period period3 = period2.toPeriod();
        org.joda.time.Period period5 = period3.plusMillis(0);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant7);
        java.lang.String str9 = period8.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-1M" + "'", str9, "PT-1M");
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1040400L, 360000000L);
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(6);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.standardSecondsIn(readablePeriod2);
        boolean boolean4 = seconds1.isGreaterThan(seconds3);
        int int5 = seconds1.getSeconds();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        java.lang.String str2 = seconds0.toString();
        org.joda.time.Seconds seconds4 = seconds0.plus((int) (short) 1);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        boolean boolean9 = seconds6.isGreaterThan(seconds7);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod12.addYears((int) '4');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod12.add((long) 100, chronology16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        java.lang.String str21 = seconds20.toString();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        boolean boolean23 = seconds20.isSupported(durationFieldType22);
        int int24 = mutablePeriod12.get(durationFieldType22);
        boolean boolean25 = seconds7.isSupported(durationFieldType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) seconds7, chronology26);
        boolean boolean28 = seconds0.isLessThan(seconds7);
        org.joda.time.Seconds seconds29 = seconds0.negated();
        org.joda.time.DurationFieldType durationFieldType30 = seconds0.getFieldType();
        org.joda.time.PeriodType periodType31 = seconds0.getPeriodType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT60S" + "'", str21, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType3 = period1.getFieldType((int) (short) 1);
        org.joda.time.Period period5 = period1.plusDays(10);
        org.joda.time.Seconds seconds6 = period1.toStandardSeconds();
        int int7 = period1.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(0L, 599903L, chronology2);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, (long) '#');
        int int7 = period6.getSeconds();
        org.joda.time.Period period8 = period6.toPeriod();
        org.joda.time.Period period10 = period6.plusWeeks(0);
        org.joda.time.Period period12 = period6.withSeconds(600);
        org.joda.time.Period period14 = period12.withMinutes((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period14.toDurationTo(readableInstant15);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration16);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.joda.time.Period period1 = org.joda.time.Period.years((-565));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Duration duration8 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes0.dividedBy((-60));
        int int11 = minutes10.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setSeconds(8);
        mutablePeriod2.setValue(1, 2);
        mutablePeriod2.add((long) '4');
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType12, chronology13);
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period19 = period14.normalizedStandard();
        org.joda.time.Period period21 = period19.plusDays((int) (short) 100);
        org.joda.time.Period period23 = period21.plusDays(35);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Hours hours25 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours26 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType27 = hours26.getFieldType();
        boolean boolean28 = hours25.isGreaterThan(hours26);
        org.joda.time.PeriodType periodType29 = hours26.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType30 = hours26.getFieldType();
        org.joda.time.Period period32 = period23.withFieldAdded(durationFieldType30, (-8));
        org.joda.time.Period period34 = period32.withHours((-2147483648));
        org.joda.time.Period period36 = period34.withMonths(2);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.PeriodType periodType38 = periodType37.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        int int2 = seconds1.getSeconds();
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType4 = seconds3.getPeriodType();
        java.lang.String str5 = seconds3.toString();
        org.joda.time.Seconds seconds7 = seconds3.plus((int) (short) 1);
        java.lang.String str8 = seconds7.toString();
        java.lang.String str9 = seconds7.toString();
        boolean boolean10 = seconds1.isGreaterThan(seconds7);
        org.joda.time.Seconds seconds12 = seconds7.minus(88500);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1S" + "'", str8, "PT1S");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1S" + "'", str9, "PT1S");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PeriodType[StandardNoYearsNoDays]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[StandardNoYearsNoDays]\" is malformed at \"eriodType[StandardNoYearsNoDays]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        boolean boolean2 = minutes0.isLessThan(minutes1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        int int5 = minutes3.getMinutes();
        java.lang.String str6 = minutes3.toString();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        java.lang.String str9 = minutes7.toString();
        boolean boolean10 = minutes3.isLessThan(minutes7);
        int int11 = minutes3.size();
        org.joda.time.Minutes minutes12 = minutes0.plus(minutes3);
        org.joda.time.Minutes minutes14 = minutes0.dividedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(3);
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy(4);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesIn(readableInterval22);
        java.lang.String str24 = minutes23.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType26 = minutes25.getPeriodType();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes29 = minutes27.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes30 = minutes25.minus(minutes27);
        boolean boolean31 = minutes23.isLessThan(minutes25);
        org.joda.time.Minutes minutes32 = minutes21.plus(minutes25);
        org.joda.time.Minutes minutes33 = minutes0.minus(minutes25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType35 = minutes25.getFieldType((-29));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -29");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0M" + "'", str6, "PT0M");
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2147483648M" + "'", str9, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0M" + "'", str24, "PT0M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) -1, 32, (int) (short) 0, 32, (-1), (int) ' ', (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.toMutablePeriod();
        mutablePeriod9.addHours(32);
        mutablePeriod9.addYears(42);
        org.joda.time.Period period14 = mutablePeriod9.toPeriod();
        int int15 = period14.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 97);
        mutablePeriod1.addWeeks((-100));
        int int4 = mutablePeriod1.getHours();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((-115200000L));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodTo(readableInstant2);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.plus((-2419200L));
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Interval interval7 = duration3.toIntervalTo(readableInstant6);
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval7);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(seconds8);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.clear();
        org.joda.time.Period period15 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType17 = period15.getFieldType((int) (short) 1);
        mutablePeriod6.set(durationFieldType17, (int) (short) -1);
        mutablePeriod6.setYears((int) '#');
        mutablePeriod6.setHours((-672));
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        int int27 = mutablePeriod6.getWeeks();
        mutablePeriod6.addMillis((int) ' ');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType3);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.plusDays((int) 'a');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        java.lang.String str11 = seconds10.toString();
        org.joda.time.PeriodType periodType12 = seconds10.getPeriodType();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.Period period15 = period7.normalizedStandard(periodType14);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 32, periodType14);
        int int17 = mutablePeriod16.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod16.setPeriod(1, 990, (-39648), 214748364, (-5), (-1073741764), 70, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT60S" + "'", str11, "PT60S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100000L);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant3);
        org.joda.time.Period period6 = period4.plusMinutes(35);
        int int7 = period4.getYears();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1666L + "'", long2 == 1666L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        boolean boolean2 = minutes0.isLessThan(minutes1);
        org.joda.time.Minutes minutes4 = minutes1.plus((int) (byte) 0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType6 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes5);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes11 = minutes9.dividedBy((int) '#');
        org.joda.time.Minutes minutes12 = minutes5.minus(minutes9);
        org.joda.time.Minutes minutes13 = minutes12.negated();
        java.lang.String str14 = minutes12.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 1, (-2), (-59), (int) (byte) -1);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks7 = weeks6.negated();
        org.joda.time.Weeks weeks9 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks11 = weeks9.multipliedBy(0);
        org.joda.time.Weeks weeks13 = weeks9.plus((int) '4');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) weeks9, chronology14);
        org.joda.time.MutablePeriod mutablePeriod16 = weeks9.toMutablePeriod();
        int int17 = weeks9.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter2.getParser();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = duration8.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType14 = minutes13.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Period period16 = duration11.toPeriodFrom(readableInstant12, periodType14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 0, (long) 3, periodType14);
        org.joda.time.PeriodType periodType18 = periodType14.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withParseType(periodType18);
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter2.withLocale(locale20);
        boolean boolean22 = periodFormatter21.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatter21.getPrinter();
        boolean boolean24 = periodFormatter21.isPrinter();
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT600S" + "'", str9, "PT600S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(periodPrinter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(25200000L, chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod8.get(durationFieldType9);
        org.joda.time.Hours hours11 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Hours hours13 = hours11.dividedBy((int) (short) -1);
        org.joda.time.Hours hours14 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours16 = hours14.minus(0);
        org.joda.time.Hours hours17 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours19 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean20 = hours17.isGreaterThan(hours19);
        boolean boolean21 = hours16.isLessThan(hours19);
        java.lang.String str22 = hours16.toString();
        org.joda.time.Hours hours23 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours24 = hours16.plus(hours23);
        org.joda.time.Hours hours25 = hours11.minus(hours16);
        org.joda.time.Hours hours26 = org.joda.time.Hours.TWO;
        int int27 = hours26.getHours();
        org.joda.time.Hours hours28 = hours26.negated();
        boolean boolean29 = hours16.isGreaterThan(hours28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) hours28, chronology30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod3.setDays(21168000);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT4H" + "'", str22, "PT4H");
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period5 = period3.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Weeks weeks7 = weeks1.plus(weeks6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks13 = weeks9.negated();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) weeks9, chronology14);
        org.joda.time.Weeks weeks17 = weeks9.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks23 = weeks19.negated();
        org.joda.time.MutablePeriod mutablePeriod24 = weeks23.toMutablePeriod();
        org.joda.time.Weeks weeks25 = weeks9.minus(weeks23);
        org.joda.time.Weeks weeks26 = weeks1.plus(weeks23);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks32 = weeks28.negated();
        org.joda.time.Weeks weeks34 = weeks32.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeksIn(readableInterval37);
        boolean boolean39 = weeks36.isLessThan(weeks38);
        org.joda.time.Weeks weeks41 = weeks38.minus((int) (short) -1);
        org.joda.time.Weeks weeks43 = weeks41.multipliedBy(0);
        boolean boolean44 = weeks34.isGreaterThan(weeks43);
        org.joda.time.Period period49 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period51 = period49.withDays((int) 'a');
        org.joda.time.Weeks weeks52 = period51.toStandardWeeks();
        int int53 = weeks52.getWeeks();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Weeks weeks57 = org.joda.time.Weeks.weeksIn(readableInterval56);
        boolean boolean58 = weeks55.isLessThan(weeks57);
        org.joda.time.Weeks weeks60 = weeks57.minus((int) (short) -1);
        org.joda.time.Weeks weeks61 = weeks60.negated();
        org.joda.time.Weeks weeks63 = weeks60.multipliedBy(0);
        boolean boolean64 = weeks52.isGreaterThan(weeks63);
        org.joda.time.Weeks weeks65 = weeks43.minus(weeks52);
        org.joda.time.Weeks weeks66 = weeks23.minus(weeks43);
        org.joda.time.DurationFieldType durationFieldType67 = weeks43.getFieldType();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 13 + "'", int53 == 13);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 0, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DurationField durationField5 = durationFieldType3.getField(chronology4);
        boolean boolean6 = mutablePeriod2.isSupported(durationFieldType3);
        org.joda.time.MutablePeriod mutablePeriod8 = org.joda.time.MutablePeriod.parse("PT1M");
        mutablePeriod8.addMillis((int) (short) 0);
        mutablePeriod8.setValue(0, 25);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn(readableInterval16);
        boolean boolean18 = weeks15.isLessThan(weeks17);
        org.joda.time.Weeks weeks19 = weeks15.negated();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) weeks15, chronology20);
        org.joda.time.Weeks weeks23 = weeks15.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration24 = weeks15.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration25.toIntervalTo(readableInstant26);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval27);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval27);
        mutablePeriod2.setWeeks(160);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(52, (-100));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval27);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Duration duration4 = hours2.toStandardDuration();
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Period period7 = period5.minusSeconds((int) (byte) 100);
        org.joda.time.Period period9 = period5.withWeeks(52);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod11.addWeeks((int) (byte) 0);
        mutablePeriod11.addHours((-672));
        mutablePeriod11.setPeriod((long) (-32), (long) (short) -1);
        mutablePeriod11.setPeriod((long) (byte) 100);
        org.joda.time.Period period21 = period9.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.setYears((int) (byte) -1);
        mutablePeriod11.addMillis((-637));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.joda.time.Period period1 = org.joda.time.Period.days((-2));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.joda.time.Period period8 = new org.joda.time.Period(100, 194, (int) (short) 100, 671, (-8), (-2), 25, 2147483622);
        org.joda.time.Period period10 = period8.plusMillis(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration11 = period10.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType3);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType3);
        java.lang.String str7 = periodType3.getName();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Weeks" + "'", str7, "Weeks");
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, (long) '#');
        int int3 = period2.getSeconds();
        org.joda.time.Period period4 = period2.toPeriod();
        org.joda.time.Period period6 = period2.plusWeeks(0);
        org.joda.time.Period period8 = period2.withSeconds(600);
        org.joda.time.Period period10 = period8.withMinutes((int) (byte) 100);
        org.joda.time.Period period12 = period10.multipliedBy(671);
        org.joda.time.Period period14 = period12.withWeeks((-4));
        org.joda.time.Period period16 = period14.multipliedBy(9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 2147483622);
        org.joda.time.Duration duration3 = duration1.minus((long) 60);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(52L, (long) 5, chronology2);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Days days11 = days9.minus(3);
        org.joda.time.DurationFieldType durationFieldType12 = days9.getFieldType();
        int int13 = days9.getDays();
        org.joda.time.Days days15 = days9.dividedBy((-20));
        org.joda.time.Days days16 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days18 = days16.minus(25);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration20.toPeriod(periodType21, chronology23);
        org.joda.time.Days days25 = org.joda.time.Days.ZERO;
        int int26 = days25.getDays();
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        boolean boolean34 = days29.isGreaterThan(days32);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Days days38 = days32.minus(days37);
        org.joda.time.Days days39 = days25.minus(days32);
        boolean boolean40 = duration20.equals((java.lang.Object) days32);
        org.joda.time.Period period42 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Days days45 = days43.minus(10);
        org.joda.time.Days days47 = days45.plus((int) (short) -1);
        org.joda.time.Days days48 = days32.plus(days45);
        org.joda.time.Days days50 = days45.minus((-32));
        org.joda.time.Days days51 = days18.plus(days50);
        org.joda.time.DurationFieldType durationFieldType52 = days50.getFieldType();
        org.joda.time.Days days53 = null;
        org.joda.time.Days days54 = days50.minus(days53);
        org.joda.time.Days days56 = days50.plus((-12));
        org.joda.time.Days days57 = days9.plus(days56);
        org.joda.time.Days days59 = days57.multipliedBy(8744020);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration60 = new org.joda.time.Duration((java.lang.Object) 8744020);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(days59);
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period9 = period4.normalizedStandard();
        org.joda.time.Period period11 = period9.plusDays((int) (short) 100);
        org.joda.time.Period period13 = period11.plusDays(35);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.minusWeeks(416);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(0L, (long) 31, chronology2);
        org.joda.time.Duration duration6 = new org.joda.time.Duration(60000L, (long) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = duration6.toPeriod(chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) 2147483647);
        org.joda.time.ReadableDuration readableDuration11 = null;
        boolean boolean12 = duration10.isLongerThan(readableDuration11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.withSeconds((int) ' ');
        int int19 = period18.getSeconds();
        org.joda.time.Period period21 = period18.withHours((int) '#');
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod24.addYears((int) '4');
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod24.add((long) 100, chronology28);
        mutablePeriod24.setMillis((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        mutablePeriod24.setPeriod(readableInstant32, readableInstant33);
        mutablePeriod24.clear();
        org.joda.time.Period period36 = period18.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.PeriodType periodType37 = mutablePeriod24.getPeriodType();
        org.joda.time.Period period38 = mutablePeriod24.toPeriod();
        org.joda.time.Days days39 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) days39, periodType40, chronology41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod24, periodType40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant13, periodType40);
        boolean boolean45 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration10);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        boolean boolean17 = minutes15.isLessThan(minutes16);
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Duration duration19 = minutes11.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        java.lang.Object obj22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(obj22);
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration27.toPeriod(periodType28, chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType34 = periodType33.withMonthsRemoved();
        org.joda.time.Period period35 = duration27.toPeriodTo(readableInstant32, periodType34);
        org.joda.time.Period period36 = duration27.toPeriod();
        org.joda.time.Duration duration37 = duration23.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration39 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration27, 25);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration19.toIntervalFrom(readableInstant40);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Minutes minutes43 = minutes9.plus(minutes42);
        org.joda.time.Minutes minutes45 = minutes42.multipliedBy(8);
        org.joda.time.Minutes minutes46 = minutes42.negated();
        org.joda.time.Duration duration47 = minutes46.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod48 = minutes46.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) (byte) 1, chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutablePeriod2.setPeriod(readableDuration8);
        org.joda.time.Chronology chronology12 = null;
        mutablePeriod2.setPeriod((long) (short) 10, (long) (short) 10, chronology12);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod2.add((long) (short) 100, chronology15);
        mutablePeriod2.add(0L);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = mutablePeriod2.getValue((-31));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period5 = period3.withHours(32);
        org.joda.time.Period period6 = period3.normalizedStandard();
        java.lang.String str7 = period6.toString();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = period6.normalizedStandard(periodType8);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType8);
        mutablePeriod10.setYears((int) '4');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationTo(readableInstant13);
        mutablePeriod10.setPeriod(4L, (long) 97);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.052S" + "'", str7, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration14);
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-6048000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks13 = weeks9.negated();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn(readableInterval16);
        boolean boolean18 = weeks15.isLessThan(weeks17);
        org.joda.time.Weeks weeks19 = weeks15.negated();
        org.joda.time.Weeks weeks21 = weeks19.minus((int) (byte) 100);
        org.joda.time.Weeks weeks22 = weeks13.plus(weeks19);
        boolean boolean23 = weeks7.isLessThan(weeks19);
        boolean boolean24 = weeks5.isGreaterThan(weeks7);
        org.joda.time.Weeks weeks26 = weeks7.multipliedBy(70);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(weeks26);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.joda.time.Period period4 = new org.joda.time.Period((-1), (-62), 21168000, (-8));
        org.joda.time.Period period5 = period4.negated();
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = minutes10.getFieldType();
        org.joda.time.PeriodType periodType12 = minutes10.getPeriodType();
        org.joda.time.Minutes minutes13 = minutes9.plus(minutes10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes16 = minutes14.dividedBy(7);
        org.joda.time.Duration duration17 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        boolean boolean20 = minutes18.isLessThan(minutes19);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType22 = minutes21.getPeriodType();
        int int23 = minutes21.getMinutes();
        java.lang.String str24 = minutes21.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType26 = minutes25.getFieldType();
        java.lang.String str27 = minutes25.toString();
        boolean boolean28 = minutes21.isLessThan(minutes25);
        org.joda.time.Minutes minutes30 = minutes25.minus(0);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod32);
        boolean boolean34 = minutes25.isGreaterThan(minutes33);
        org.joda.time.Minutes minutes35 = minutes18.minus(minutes33);
        org.joda.time.PeriodType periodType36 = minutes33.getPeriodType();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType38 = minutes37.getPeriodType();
        int int39 = minutes37.getMinutes();
        java.lang.String str40 = minutes37.toString();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = minutes41.getFieldType();
        java.lang.String str43 = minutes41.toString();
        boolean boolean44 = minutes37.isLessThan(minutes41);
        org.joda.time.Duration duration45 = minutes37.toStandardDuration();
        boolean boolean46 = minutes33.isGreaterThan(minutes37);
        boolean boolean47 = minutes14.isGreaterThan(minutes37);
        org.joda.time.Minutes minutes48 = minutes13.minus(minutes14);
        org.joda.time.Minutes minutes49 = minutes14.negated();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) minutes14, chronology50);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0M" + "'", str24, "PT0M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-2147483648M" + "'", str27, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0M" + "'", str40, "PT0M");
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT-2147483648M" + "'", str43, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("Weeks");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Weeks\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-160), (long) 8);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        boolean boolean9 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        long long12 = duration7.getStandardMinutes();
        long long13 = duration7.getMillis();
        java.lang.String str14 = duration7.toString();
        org.joda.time.Duration duration15 = duration2.plus((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT60S" + "'", str14, "PT60S");
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.format.PeriodFormatter periodFormatter3 = null;
        java.lang.String str4 = mutablePeriod2.toString(periodFormatter3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeksIn(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        boolean boolean9 = weeks6.isLessThan(weeks8);
        org.joda.time.Weeks weeks10 = weeks6.negated();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        boolean boolean15 = weeks12.isLessThan(weeks14);
        org.joda.time.Weeks weeks16 = weeks12.negated();
        org.joda.time.Weeks weeks18 = weeks16.minus((int) (byte) 100);
        org.joda.time.Weeks weeks19 = weeks10.plus(weeks16);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        int int21 = weeks19.get(durationFieldType20);
        int int22 = mutablePeriod2.get(durationFieldType20);
        mutablePeriod2.addMonths((int) (short) 0);
        mutablePeriod2.clear();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(59, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.minus(0);
        org.joda.time.Hours hours4 = hours2.multipliedBy((int) (byte) 10);
        org.joda.time.Hours hours6 = hours4.dividedBy((int) 'a');
        org.joda.time.Hours hours8 = hours6.multipliedBy(60);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period12 = period10.withHours(32);
        org.joda.time.Period period13 = period10.normalizedStandard();
        org.joda.time.Period period15 = period10.plusHours((int) (short) 1);
        org.joda.time.Period period16 = period10.toPeriod();
        org.joda.time.Hours hours17 = period10.toStandardHours();
        org.joda.time.Hours hours18 = hours6.plus(hours17);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.minusWeeks(52);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration8.toPeriod(periodType9, chronology11);
        org.joda.time.Days days13 = org.joda.time.Days.ZERO;
        int int14 = days13.getDays();
        org.joda.time.Period period16 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType21 = days20.getPeriodType();
        boolean boolean22 = days17.isGreaterThan(days20);
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Days days26 = days20.minus(days25);
        org.joda.time.Days days27 = days13.minus(days20);
        boolean boolean28 = duration8.equals((java.lang.Object) days20);
        java.lang.String str29 = days20.toString();
        org.joda.time.Days days30 = days4.plus(days20);
        org.joda.time.Days days32 = days30.plus(5940);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P0D" + "'", str29, "P0D");
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours4 = null;
        org.joda.time.Hours hours5 = hours2.minus(hours4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period9 = period7.withHours(32);
        org.joda.time.Hours hours10 = period7.toStandardHours();
        org.joda.time.Hours hours11 = hours10.negated();
        boolean boolean12 = hours5.isGreaterThan(hours10);
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Duration duration14 = hours13.toStandardDuration();
        org.joda.time.Hours hours16 = hours13.dividedBy((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        int int23 = mutablePeriod21.get(durationFieldType22);
        org.joda.time.Hours hours24 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Hours hours26 = hours24.dividedBy((int) (short) -1);
        org.joda.time.Hours hours28 = hours26.plus((int) (short) 10);
        boolean boolean29 = hours16.isGreaterThan(hours28);
        org.joda.time.Hours hours30 = hours5.plus(hours28);
        org.joda.time.Hours hours32 = hours5.minus(13);
        int int33 = hours5.getHours();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.clear();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod16.addYears((int) '4');
        int int19 = mutablePeriod16.getYears();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        int int21 = mutablePeriod6.getHours();
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period25 = period23.minusWeeks(52);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period23.toPeriod();
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) period27);
        mutablePeriod6.addMillis((-2147483648));
        mutablePeriod6.setPeriod((int) (short) 1, 7, 0, 25, (int) '#', (-1), (-1), (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        mutablePeriod6.setPeriod((-311040000000L), chronology41);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.joda.time.Period period8 = new org.joda.time.Period((-32), 54, 0, (-97), 4, 51, 900, 60);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.add((long) 100, chronology6);
        mutablePeriod2.add(1, 10, (int) 'a', 52, (int) (short) 100, 0, (int) (byte) 0, (int) (byte) 10);
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.seconds(0);
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) seconds18);
        int int20 = mutablePeriod2.getMonths();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod2);
        mutablePeriod2.addDays(5);
        mutablePeriod2.addDays(21168000);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod4 = hours2.toMutablePeriod();
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod4.setPeriod((long) 13, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutablePeriod4.setPeriod(readableInstant8, readableInstant9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutablePeriod4.setPeriod(readableInstant11, readableInstant12);
        int int14 = mutablePeriod4.getMonths();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        int int2 = periodType1.size();
        org.joda.time.PeriodType periodType3 = periodType1.withYearsRemoved();
        java.lang.String str4 = periodType1.getName();
        org.joda.time.PeriodType periodType5 = periodType1.withYearsRemoved();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Seconds" + "'", str4, "Seconds");
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(35, 100, 600, (int) ' ', 60, 10, (-1073741824), 8);
        int int9 = mutablePeriod8.getMinutes();
        mutablePeriod8.addDays(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType14, chronology15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        int int23 = mutablePeriod21.get(durationFieldType22);
        boolean boolean24 = periodType14.isSupported(durationFieldType22);
        org.joda.time.Chronology chronology25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) 0, periodType14, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.clear();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod16.addYears((int) '4');
        int int19 = mutablePeriod16.getYears();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.PeriodType periodType21 = mutablePeriod6.getPeriodType();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod6.setPeriod(180000L, 17340L, chronology24);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 100, (int) '#', 100);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        java.lang.String str7 = duration6.toString();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        boolean boolean14 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType17 = periodType16.withMinutesRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant15, periodType16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        mutablePeriod21.setHours((int) (short) 100);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType31 = seconds30.getFieldType();
        mutablePeriod21.add(durationFieldType31, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant34, readableDuration35);
        mutablePeriod36.setHours((int) (short) 100);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration40, chronology41);
        org.joda.time.Chronology chronology43 = null;
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration40, chronology43);
        int int45 = duration12.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration46 = duration40.toDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.Duration duration49 = duration46.withMillis((long) (byte) 100);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds52 = duration51.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType53 = seconds52.getFieldType();
        org.joda.time.Seconds seconds55 = seconds52.plus(25);
        org.joda.time.Seconds seconds56 = seconds52.negated();
        org.joda.time.Seconds seconds58 = seconds52.dividedBy(10);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds61 = duration60.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType62 = seconds61.getFieldType();
        org.joda.time.Seconds seconds64 = seconds61.plus(25);
        org.joda.time.Seconds seconds65 = seconds58.plus(seconds61);
        org.joda.time.Seconds seconds66 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType67 = seconds66.getPeriodType();
        java.lang.String str68 = seconds66.toString();
        org.joda.time.Seconds seconds69 = seconds65.plus(seconds66);
        org.joda.time.PeriodType periodType70 = seconds65.getPeriodType();
        boolean boolean71 = duration46.equals((java.lang.Object) periodType70);
        org.joda.time.Duration duration72 = duration6.plus((org.joda.time.ReadableDuration) duration46);
        java.lang.String str73 = duration46.toString();
        org.joda.time.Duration duration74 = duration46.toDuration();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT6035.100S" + "'", str7, "PT6035.100S");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(seconds66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT0S" + "'", str68, "PT0S");
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT60S" + "'", str73, "PT60S");
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        long long2 = duration1.getStandardDays();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        long long4 = duration1.getStandardMinutes();
        long long5 = duration1.getStandardDays();
        org.joda.time.Hours hours6 = duration1.toStandardHours();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration9 = duration1.withDurationAdded(readableDuration7, 4);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration1);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod12.addMonths((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = mutablePeriod12.toDurationTo(readableInstant15);
        org.joda.time.Hours hours17 = duration16.toStandardHours();
        org.joda.time.Duration duration18 = hours17.toStandardDuration();
        org.joda.time.Duration duration19 = hours17.toStandardDuration();
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration19);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.MutablePeriod mutablePeriod8 = days2.toMutablePeriod();
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        boolean boolean17 = days12.isGreaterThan(days15);
        org.joda.time.Days days19 = days12.minus(1);
        org.joda.time.Days days21 = days19.dividedBy(60);
        org.joda.time.Duration duration22 = days19.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod24.addMonths((int) (byte) -1);
        mutablePeriod24.addYears(8);
        boolean boolean29 = duration22.equals((java.lang.Object) mutablePeriod24);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType34 = days33.getPeriodType();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableDuration36);
        mutablePeriod37.setHours((int) (short) 100);
        boolean boolean40 = periodType34.equals((java.lang.Object) mutablePeriod37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.ZERO;
        long long42 = duration41.getStandardDays();
        mutablePeriod37.add((org.joda.time.ReadableDuration) duration41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType46 = periodType45.withWeeksRemoved();
        org.joda.time.PeriodType periodType47 = periodType46.withDaysRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, readableInstant44, periodType46);
        org.joda.time.PeriodType periodType49 = periodType46.withMonthsRemoved();
        org.joda.time.Period period50 = duration22.toPeriodTo(readableInstant30, periodType49);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration22);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period5 = period3.toPeriod();
        org.joda.time.Period period7 = period5.minusDays((int) (short) -1);
        org.joda.time.Period period9 = period7.minusSeconds(3);
        org.joda.time.Period period11 = period9.plusMonths(2147483647);
        org.joda.time.Period period13 = period9.minusYears((-2147483648));
        org.joda.time.Period period15 = period13.plusYears(0);
        int int16 = period13.getWeeks();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 25);
        mutablePeriod1.setSeconds(0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
        mutablePeriod10.setHours((int) (short) 100);
        boolean boolean13 = periodType7.equals((java.lang.Object) mutablePeriod10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        long long15 = duration14.getStandardDays();
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration14);
        mutablePeriod10.clear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod20.addYears((int) '4');
        int int23 = mutablePeriod20.getYears();
        mutablePeriod10.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant25, readableDuration26);
        mutablePeriod27.setSeconds(8);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod27.toMutablePeriod();
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.setPeriod(1, (int) 'a', (-2147483648), (int) 'a', 54, 1, 35, 60);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        mutablePeriod30.setPeriod(readableInstant42, readableInstant43);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusHours((int) (short) 1);
        org.joda.time.Period period8 = period3.plusMonths(32);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period3.toDurationFrom(readableInstant9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration10);
        long long12 = duration10.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(671);
        org.joda.time.PeriodType periodType2 = seconds1.getPeriodType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.joda.time.Period period8 = new org.joda.time.Period(4, 2, 2, (int) (byte) -1, (int) (short) 10, (-672), (int) (short) 10, (-60));
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter11.getParser();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType16 = seconds15.getFieldType();
        org.joda.time.Seconds seconds18 = seconds15.plus(25);
        org.joda.time.Seconds seconds19 = seconds15.negated();
        org.joda.time.PeriodType periodType20 = seconds19.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter11.withParseType(periodType20);
        boolean boolean22 = periodFormatter11.isParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter11.withLocale(locale23);
        org.joda.time.format.PeriodParser periodParser25 = periodFormatter11.getParser();
        org.joda.time.PeriodType periodType26 = periodFormatter11.getParseType();
        boolean boolean27 = periodFormatter11.isParser();
        java.util.Locale locale28 = null;
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter11.withLocale(locale28);
        boolean boolean30 = periodFormatter11.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = period8.toString(periodFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNull(periodParser25);
        org.junit.Assert.assertNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(3, 35, 100, 25);
        mutablePeriod4.setWeeks(13);
        mutablePeriod4.setMinutes(990);
        org.joda.time.PeriodType periodType9 = mutablePeriod4.getPeriodType();
        mutablePeriod4.addHours(21);
        mutablePeriod4.addYears((-1));
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, chronology1);
        org.joda.time.Period period4 = period2.minusMonths((-8));
        org.joda.time.Period period6 = period4.minusWeeks((int) '#');
        java.lang.Class<?> wildcardClass7 = period4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration8 = new org.joda.time.Duration((java.lang.Object) period4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        int int3 = mutablePeriod2.getHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        long long5 = duration4.getStandardDays();
        org.joda.time.Hours hours6 = duration4.toStandardHours();
        long long7 = duration4.getStandardMinutes();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod2.copy();
        mutablePeriod9.addYears(515);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-3600000L));
        mutablePeriod9.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        int int15 = mutablePeriod9.size();
        mutablePeriod9.add(0, (-2147483647), 214748364, (int) (short) 10, 10, (-1073741764), 200, 596);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.joda.time.Period period2 = new org.joda.time.Period(60000L, (long) '#');
        org.joda.time.Period period4 = period2.plusYears(13);
        org.joda.time.Period period6 = period2.plusDays(13);
        org.joda.time.Period period7 = period6.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest27 {

    public static boolean debug = false;

    @Test
    public void test13501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13501");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours4 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean7 = hours4.isGreaterThan(hours6);
        org.joda.time.Hours hours9 = hours4.minus((int) (byte) 0);
        org.joda.time.Hours hours10 = hours2.minus(hours4);
        int int11 = hours10.size();
        org.joda.time.Hours hours13 = hours10.dividedBy(35);
        org.joda.time.Hours hours14 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours15 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType16 = hours15.getFieldType();
        boolean boolean17 = hours14.isGreaterThan(hours15);
        org.joda.time.Hours hours18 = org.joda.time.Hours.TWO;
        int int19 = hours18.getHours();
        boolean boolean20 = hours15.isLessThan(hours18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        long long22 = duration21.getStandardDays();
        org.joda.time.Hours hours23 = duration21.toStandardHours();
        org.joda.time.Hours hours24 = hours23.negated();
        org.joda.time.Hours hours25 = hours15.plus(hours24);
        org.joda.time.Hours hours27 = hours25.dividedBy((-515));
        boolean boolean28 = hours10.isLessThan(hours27);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test13502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13502");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Interval interval3 = duration1.toIntervalFrom(readableInstant2);
        org.joda.time.Days days4 = duration1.toStandardDays();
        org.joda.time.Period period5 = duration1.toPeriod();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        boolean boolean17 = periodType11.equals((java.lang.Object) mutablePeriod14);
        org.joda.time.PeriodType periodType18 = periodType11.withMinutesRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (short) 10, periodType11, chronology19);
        org.joda.time.PeriodType periodType21 = periodType11.withMinutesRemoved();
        java.lang.String str22 = periodType11.toString();
        org.joda.time.PeriodType periodType23 = periodType11.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant6, periodType23);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod24.addWeeks(2147482976);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PeriodType[Days]" + "'", str22, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test13503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13503");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Period period10 = period8.negated();
        org.joda.time.Period period12 = period8.plusMonths((-2));
        org.joda.time.Period period14 = period12.minusMinutes((-672));
        int int15 = period14.getYears();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test13504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13504");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 3, (-60L), chronology2);
        org.joda.time.Period period4 = period3.toPeriod();
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        boolean boolean12 = days7.isGreaterThan(days10);
        int int13 = days7.size();
        org.joda.time.Days days14 = days7.negated();
        org.joda.time.Days days16 = days14.minus(3);
        org.joda.time.Days days17 = days16.negated();
        java.lang.String str18 = days17.toString();
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        boolean boolean26 = days21.isGreaterThan(days24);
        org.joda.time.Days days28 = days21.minus(1);
        org.joda.time.Days days30 = days28.dividedBy(60);
        org.joda.time.Days days31 = days17.plus(days28);
        org.joda.time.DurationFieldType durationFieldType32 = days31.getFieldType();
        java.lang.String str33 = durationFieldType32.getName();
        java.lang.String str34 = durationFieldType32.getName();
        org.joda.time.Period period36 = period3.withField(durationFieldType32, (-3));
        int int37 = period3.getMonths();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P3D" + "'", str18, "P3D");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "days" + "'", str33, "days");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "days" + "'", str34, "days");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test13505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13505");
        org.joda.time.Period period1 = org.joda.time.Period.millis(15120008);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13506");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 100, 4, (-160), 135, (-12), (-5), 0, 658);
    }

    @Test
    public void test13507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13507");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        org.joda.time.Days days4 = duration1.toStandardDays();
        org.joda.time.Period period5 = duration1.toPeriod();
        long long6 = duration1.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test13508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13508");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType11 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMinutesRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withMillisRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period((-91), 0, (-59), (-100), 515, 51, (-91), 515, periodType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test13509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13509");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType8, chronology9);
        org.joda.time.Duration duration11 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Weeks weeks15 = period14.toStandardWeeks();
        org.joda.time.Weeks weeks16 = weeks1.plus(weeks15);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = weeks16.get(durationFieldType17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period22 = period20.withHours(32);
        org.joda.time.Period period23 = period20.normalizedStandard();
        java.lang.String str24 = period23.toString();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = durationFieldType25.isSupported(chronology26);
        org.joda.time.Period period29 = period23.withFieldAdded(durationFieldType25, 13);
        boolean boolean30 = weeks16.isSupported(durationFieldType25);
        org.joda.time.PeriodType periodType31 = weeks16.getPeriodType();
        org.joda.time.Weeks weeks33 = weeks16.plus(6);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(weeks33);
    }

    @Test
    public void test13510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13510");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours4 = null;
        org.joda.time.Hours hours5 = hours2.minus(hours4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period9 = period7.withHours(32);
        org.joda.time.Hours hours10 = period7.toStandardHours();
        org.joda.time.Hours hours11 = hours10.negated();
        boolean boolean12 = hours5.isGreaterThan(hours10);
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Duration duration14 = hours13.toStandardDuration();
        org.joda.time.Hours hours16 = hours13.dividedBy((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        int int23 = mutablePeriod21.get(durationFieldType22);
        org.joda.time.Hours hours24 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Hours hours26 = hours24.dividedBy((int) (short) -1);
        org.joda.time.Hours hours28 = hours26.plus((int) (short) 10);
        boolean boolean29 = hours16.isGreaterThan(hours28);
        org.joda.time.Hours hours30 = hours5.plus(hours28);
        org.joda.time.Hours hours32 = hours5.minus(13);
        org.joda.time.Duration duration33 = org.joda.time.Duration.ZERO;
        long long34 = duration33.getStandardDays();
        org.joda.time.Hours hours35 = duration33.toStandardHours();
        long long36 = duration33.getStandardMinutes();
        org.joda.time.Hours hours37 = duration33.toStandardHours();
        org.joda.time.Hours hours38 = null;
        boolean boolean39 = hours37.isGreaterThan(hours38);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod44.get(durationFieldType45);
        org.joda.time.Hours hours47 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Hours hours49 = hours47.dividedBy((int) (short) -1);
        org.joda.time.Hours hours50 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours52 = hours50.minus(0);
        org.joda.time.Hours hours53 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours55 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean56 = hours53.isGreaterThan(hours55);
        boolean boolean57 = hours52.isLessThan(hours55);
        java.lang.String str58 = hours52.toString();
        org.joda.time.Hours hours59 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours60 = hours52.plus(hours59);
        org.joda.time.Hours hours61 = hours47.minus(hours52);
        org.joda.time.Hours hours62 = org.joda.time.Hours.TWO;
        int int63 = hours62.getHours();
        org.joda.time.Hours hours64 = hours62.negated();
        boolean boolean65 = hours52.isGreaterThan(hours64);
        java.lang.String str66 = hours52.toString();
        boolean boolean67 = hours37.isLessThan(hours52);
        org.joda.time.Hours hours68 = hours32.minus(hours37);
        org.joda.time.Hours hours69 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours70 = hours69.negated();
        org.joda.time.Hours hours71 = org.joda.time.Hours.ONE;
        boolean boolean72 = hours70.isLessThan(hours71);
        org.joda.time.Hours hours73 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours75 = hours73.minus(10);
        org.joda.time.Hours hours76 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours78 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean79 = hours76.isGreaterThan(hours78);
        org.joda.time.Hours hours81 = hours76.minus((int) (byte) 0);
        org.joda.time.Hours hours83 = hours81.minus((int) '#');
        org.joda.time.Duration duration84 = hours83.toStandardDuration();
        org.joda.time.Hours hours85 = hours75.minus(hours83);
        org.joda.time.Hours hours87 = hours75.dividedBy((int) (byte) 1);
        java.lang.String str88 = hours87.toString();
        org.joda.time.PeriodType periodType89 = hours87.getPeriodType();
        org.joda.time.Hours hours90 = hours71.plus(hours87);
        org.joda.time.Hours hours91 = hours37.plus(hours90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((java.lang.Object) hours90);
        org.joda.time.Hours hours94 = hours90.multipliedBy((int) (byte) 100);
        org.joda.time.Hours hours96 = hours90.plus((-3));
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT4H" + "'", str58, "PT4H");
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT4H" + "'", str66, "PT4H");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertNotNull(hours71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(hours75);
        org.junit.Assert.assertNotNull(hours76);
        org.junit.Assert.assertNotNull(hours78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertNotNull(hours83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(hours85);
        org.junit.Assert.assertNotNull(hours87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT-7H" + "'", str88, "PT-7H");
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(hours90);
        org.junit.Assert.assertNotNull(hours91);
        org.junit.Assert.assertNotNull(hours94);
        org.junit.Assert.assertNotNull(hours96);
    }

    @Test
    public void test13511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13511");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        java.util.Locale locale13 = periodFormatter12.getLocale();
        boolean boolean14 = periodFormatter12.isPrinter();
        org.joda.time.PeriodType periodType15 = periodFormatter12.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter12.getPrinter();
        org.joda.time.PeriodType periodType17 = periodFormatter12.getParseType();
        boolean boolean18 = periodFormatter12.isPrinter();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-13), 40, (int) ' ', 13);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod28.get(durationFieldType29);
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = durationFieldType29.isSupported(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DurationField durationField34 = durationFieldType29.getField(chronology33);
        java.lang.String str35 = durationFieldType29.getName();
        boolean boolean36 = mutablePeriod23.isSupported(durationFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = periodFormatter12.print((org.joda.time.ReadablePeriod) mutablePeriod23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(periodType15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "days" + "'", str35, "days");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test13512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13512");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(360000000L);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) 32000, 10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test13513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13513");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (-62));
    }

    @Test
    public void test13514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13514");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period3.minusYears((int) (short) 10);
        org.joda.time.Period period7 = period3.withMinutes((int) (short) 10);
        int int8 = period7.getWeeks();
        org.joda.time.Period period10 = period7.minusHours(2147483647);
        org.joda.time.Period period12 = period10.plusYears(100);
        org.joda.time.Period period14 = period12.plusWeeks((-8));
        int int15 = period14.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-8) + "'", int15 == (-8));
    }

    @Test
    public void test13515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13515");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT0.002S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13516");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Duration duration4 = hours2.toStandardDuration();
        org.joda.time.Duration duration5 = duration4.toDuration();
        long long6 = duration5.getStandardMinutes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration8.toPeriod(periodType9, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType15 = periodType14.withMonthsRemoved();
        org.joda.time.Period period16 = duration8.toPeriodTo(readableInstant13, periodType15);
        org.joda.time.Duration duration17 = duration8.toDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        java.lang.Object obj22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(obj22);
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration23.toDuration();
        int int27 = duration17.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Hours hours28 = duration26.toStandardHours();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration26.toPeriodFrom(readableInstant29);
        boolean boolean31 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration5.toPeriod(chronology32);
        org.joda.time.Hours hours34 = duration5.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod36.addMonths((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationTo(readableInstant39);
        org.joda.time.Hours hours41 = duration40.toStandardHours();
        org.joda.time.Duration duration42 = hours41.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, readableInstant43);
        int int45 = duration5.compareTo((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) (-160));
        int int48 = duration42.compareTo((org.joda.time.ReadableDuration) duration47);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60L) + "'", long6 == (-60L));
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test13517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13517");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) days9, chronology10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        int int14 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod12.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod15.setSeconds(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P0D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P0D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P0D");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test13518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13518");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        org.joda.time.Days days3 = duration0.toStandardDays();
        long long4 = duration0.getStandardSeconds();
        org.joda.time.Days days5 = duration0.toStandardDays();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(days5);
    }

    @Test
    public void test13519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13519");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (short) 1, periodType12, chronology13);
        org.joda.time.PeriodType periodType15 = mutablePeriod14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType16);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.Period period21 = duration6.toPeriod(periodType20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType23 = periodType20.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test13520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13520");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.clear();
        org.joda.time.Period period15 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType17 = period15.getFieldType((int) (short) 1);
        mutablePeriod6.set(durationFieldType17, (int) (short) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        mutablePeriod6.setPeriod(readableInstant20, readableInstant21);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test13521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13521");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Minutes minutes4 = duration1.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        org.joda.time.DurationFieldType durationFieldType6 = minutes4.getFieldType();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
    }

    @Test
    public void test13522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13522");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(8726400L, 1000L, periodType2, chronology3);
    }

    @Test
    public void test13523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13523");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(2, (int) '4', 10, (int) (short) 1);
        org.joda.time.Period period9 = period7.minusMillis(1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType13 = minutes12.getPeriodType();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = minutes12.plus(minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.ZERO;
        boolean boolean18 = minutes16.isLessThan(minutes17);
        boolean boolean19 = minutes12.isLessThan(minutes16);
        org.joda.time.PeriodType periodType20 = minutes12.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType21);
        org.joda.time.Period period23 = period7.normalizedStandard(periodType21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 8, periodType21, chronology24);
        org.joda.time.PeriodType periodType26 = periodType21.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test13524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13524");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 214748364);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test13525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13525");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT1944000000S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13526");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        int int11 = mutablePeriod9.get(durationFieldType10);
        boolean boolean12 = periodType2.isSupported(durationFieldType10);
        java.lang.String str13 = periodType2.getName();
        org.joda.time.PeriodType periodType14 = periodType2.withMinutesRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Years" + "'", str13, "Years");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test13527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13527");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) '4');
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        boolean boolean8 = minutes6.isLessThan(minutes7);
        boolean boolean9 = minutes2.isLessThan(minutes6);
        org.joda.time.PeriodType periodType10 = minutes2.getPeriodType();
        java.lang.String str11 = minutes2.toString();
        org.joda.time.Minutes minutes12 = null;
        boolean boolean13 = minutes2.isLessThan(minutes12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutesIn(readableInterval14);
        java.lang.String str16 = minutes15.toString();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType18 = minutes17.getPeriodType();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes22 = minutes17.minus(minutes19);
        boolean boolean23 = minutes15.isLessThan(minutes17);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType25 = minutes24.getPeriodType();
        int int26 = minutes24.getMinutes();
        java.lang.String str27 = minutes24.toString();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = minutes28.getFieldType();
        java.lang.String str30 = minutes28.toString();
        boolean boolean31 = minutes24.isLessThan(minutes28);
        org.joda.time.Minutes minutes33 = minutes28.minus(0);
        boolean boolean34 = minutes15.isLessThan(minutes28);
        org.joda.time.Minutes minutes35 = minutes2.minus(minutes15);
        boolean boolean36 = minutes1.isLessThan(minutes2);
        org.joda.time.Minutes minutes38 = minutes2.multipliedBy((int) '4');
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0M" + "'", str11, "PT0M");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0M" + "'", str16, "PT0M");
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0M" + "'", str27, "PT0M");
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT-2147483648M" + "'", str30, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes38);
    }

    @Test
    public void test13528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13528");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType14 = minutes13.getPeriodType();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes16 = minutes13.plus(minutes15);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.ZERO;
        boolean boolean19 = minutes17.isLessThan(minutes18);
        boolean boolean20 = minutes13.isLessThan(minutes17);
        org.joda.time.Minutes minutes22 = minutes17.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = minutes23.getFieldType();
        org.joda.time.PeriodType periodType25 = minutes23.getPeriodType();
        org.joda.time.Minutes minutes26 = minutes22.plus(minutes23);
        org.joda.time.PeriodType periodType27 = minutes22.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter10.withParseType(periodType27);
        java.util.Locale locale29 = null;
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter10.withLocale(locale29);
        boolean boolean31 = periodFormatter30.isPrinter();
        org.joda.time.PeriodType periodType32 = periodFormatter30.getParseType();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(periodType32);
    }

    @Test
    public void test13529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13529");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-2147483638), 100, (-21167965), 0, (-58), (int) ' ', (int) (byte) 1, (int) (short) 10);
    }

    @Test
    public void test13530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13530");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days16 = days7.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType18 = days16.getFieldType((int) (short) 0);
        org.joda.time.Period period19 = days16.toPeriod();
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        boolean boolean31 = days26.isGreaterThan(days29);
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Days days35 = days29.minus(days34);
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Days days40 = days38.minus(10);
        org.joda.time.Days days41 = days29.plus(days38);
        org.joda.time.Days days43 = days41.dividedBy(100);
        org.joda.time.Days days44 = null;
        org.joda.time.Days days45 = days43.plus(days44);
        org.joda.time.Days days46 = days43.negated();
        boolean boolean47 = days22.isGreaterThan(days46);
        org.joda.time.Days days49 = org.joda.time.Days.days(100);
        org.joda.time.Days days50 = org.joda.time.Days.TWO;
        boolean boolean51 = days49.isLessThan(days50);
        org.joda.time.Days days52 = days46.minus(days50);
        org.joda.time.Days days53 = org.joda.time.Days.ZERO;
        org.joda.time.Days days54 = org.joda.time.Days.ZERO;
        org.joda.time.Period period56 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days57 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Days days59 = days57.minus(10);
        boolean boolean60 = days54.isGreaterThan(days57);
        org.joda.time.Days days61 = days53.minus(days54);
        org.joda.time.Days days62 = org.joda.time.Days.ZERO;
        int int63 = days62.getDays();
        org.joda.time.Period period65 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days66 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period68 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days69 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period68);
        org.joda.time.PeriodType periodType70 = days69.getPeriodType();
        boolean boolean71 = days66.isGreaterThan(days69);
        org.joda.time.Period period73 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days74 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Days days75 = days69.minus(days74);
        org.joda.time.Days days76 = days62.minus(days69);
        org.joda.time.Period period78 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days79 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days82 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period81);
        org.joda.time.PeriodType periodType83 = days82.getPeriodType();
        boolean boolean84 = days79.isGreaterThan(days82);
        org.joda.time.Period period86 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days87 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Days days88 = days82.minus(days87);
        org.joda.time.Days days89 = days62.plus(days88);
        org.joda.time.Days days90 = days54.minus(days89);
        org.joda.time.Days days91 = days46.minus(days90);
        org.joda.time.Days days92 = days16.minus(days91);
        org.joda.time.Days days94 = days92.dividedBy(60);
        org.joda.time.Duration duration95 = days94.toStandardDuration();
        org.joda.time.Days days97 = days94.multipliedBy(70);
        org.joda.time.Days days99 = days97.minus((int) 'a');
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(days79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(days88);
        org.junit.Assert.assertNotNull(days89);
        org.junit.Assert.assertNotNull(days90);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertNotNull(days92);
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(days97);
        org.junit.Assert.assertNotNull(days99);
    }

    @Test
    public void test13531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13531");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Days days11 = days9.minus(3);
        org.joda.time.Days days12 = org.joda.time.Days.ZERO;
        org.joda.time.Days days13 = org.joda.time.Days.ZERO;
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Days days18 = days16.minus(10);
        boolean boolean19 = days13.isGreaterThan(days16);
        org.joda.time.Days days20 = days12.minus(days13);
        org.joda.time.Days days21 = org.joda.time.Days.ZERO;
        int int22 = days21.getDays();
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType29 = days28.getPeriodType();
        boolean boolean30 = days25.isGreaterThan(days28);
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Days days34 = days28.minus(days33);
        org.joda.time.Days days35 = days21.minus(days28);
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period40 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days41 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period40);
        org.joda.time.PeriodType periodType42 = days41.getPeriodType();
        boolean boolean43 = days38.isGreaterThan(days41);
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Days days47 = days41.minus(days46);
        org.joda.time.Days days48 = days21.plus(days47);
        org.joda.time.Days days49 = days13.minus(days48);
        org.joda.time.Days days51 = days49.multipliedBy((-32));
        org.joda.time.Days days52 = days9.minus(days49);
        org.joda.time.Days days54 = days49.multipliedBy((int) (byte) -1);
        org.joda.time.Days days56 = days54.multipliedBy(671);
        java.lang.String str57 = days54.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "P0D" + "'", str57, "P0D");
    }

    @Test
    public void test13532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13532");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatter12.getPrinter();
        boolean boolean14 = periodFormatter12.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter15 = periodFormatter12.getPrinter();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter12.withLocale(locale16);
        java.io.Writer writer18 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, (long) '#');
        org.joda.time.Period period23 = period21.minusWeeks(7);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.weeksIn(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        boolean boolean28 = weeks25.isLessThan(weeks27);
        org.joda.time.Weeks weeks29 = weeks25.negated();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.weeksIn(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        boolean boolean34 = weeks31.isLessThan(weeks33);
        org.joda.time.Weeks weeks35 = weeks31.negated();
        org.joda.time.Weeks weeks37 = weeks35.minus((int) (byte) 100);
        org.joda.time.Weeks weeks38 = weeks29.plus(weeks35);
        org.joda.time.DurationFieldType durationFieldType39 = weeks35.getFieldType();
        boolean boolean40 = period23.equals((java.lang.Object) weeks35);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn(readableInterval41);
        org.joda.time.Weeks weeks44 = weeks42.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks46 = weeks42.dividedBy((int) 'a');
        org.joda.time.Weeks weeks48 = weeks46.minus(8);
        boolean boolean49 = weeks35.isGreaterThan(weeks48);
        org.joda.time.Weeks weeks51 = weeks48.minus(0);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter12.printTo(writer18, (org.joda.time.ReadablePeriod) weeks51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodPrinter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(periodPrinter15);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(weeks51);
    }

    @Test
    public void test13533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, chronology1);
        org.joda.time.Period period4 = period2.minusMonths((-8));
        org.joda.time.Period period6 = period2.withHours((int) ' ');
        org.joda.time.Period period8 = period2.withMonths((-302));
        org.joda.time.Period period10 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType12 = period10.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = durationFieldType12.isSupported(chronology13);
        java.lang.String str15 = durationFieldType12.getName();
        org.joda.time.Period period17 = period8.withField(durationFieldType12, (-596526));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "months" + "'", str15, "months");
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test13534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13534");
        org.joda.time.Period period4 = new org.joda.time.Period(40, 658, (-8), (-672));
        org.joda.time.Period period6 = period4.minusMinutes((int) (short) 0);
        org.joda.time.Period period8 = period4.withHours(515);
        org.joda.time.Hours hours9 = period4.toStandardHours();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
    }

    @Test
    public void test13535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13535");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        java.lang.String str5 = period4.toString();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period7 = period4.normalizedStandard(periodType6);
        org.joda.time.Period period9 = period4.minusHours(3);
        org.joda.time.Period period11 = period9.withSeconds((-2147483648));
        org.joda.time.Hours hours12 = period11.toStandardHours();
        org.joda.time.Hours hours14 = hours12.plus(40);
        org.joda.time.Hours hours16 = hours12.plus((-1073741824));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
    }

    @Test
    public void test13536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13536");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        java.lang.String str4 = seconds3.toString();
        org.joda.time.PeriodType periodType5 = seconds3.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 52, periodType8, chronology9);
        mutablePeriod10.setWeeks((int) (byte) 0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT60S" + "'", str4, "PT60S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test13537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13537");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 0);
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((-32));
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test13538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13538");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setPeriod((long) ' ', (long) 52);
        mutablePeriod2.setPeriod((long) (short) -1);
        mutablePeriod2.add(59, 194, 160, (int) (short) 1, (-97), (-2), (-160), 25);
        mutablePeriod2.setSeconds(2);
        mutablePeriod2.addMonths((-97));
    }

    @Test
    public void test13539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13539");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 8, chronology1);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod2.setPeriod(780L, 0L, chronology6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13540");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) 'a');
        org.joda.time.Period period3 = period1.plusMillis(100);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(32, 5, (int) ' ', (-3));
        org.joda.time.Days days9 = org.joda.time.Days.ZERO;
        int int10 = days9.getDays();
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        boolean boolean18 = days13.isGreaterThan(days16);
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Days days22 = days16.minus(days21);
        org.joda.time.Days days23 = days9.minus(days16);
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        boolean boolean31 = days26.isGreaterThan(days29);
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Days days35 = days29.minus(days34);
        org.joda.time.Days days36 = days9.plus(days35);
        org.joda.time.DurationFieldType durationFieldType37 = days35.getFieldType();
        int int38 = mutablePeriod8.get(durationFieldType37);
        boolean boolean39 = period1.isSupported(durationFieldType37);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test13541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13541");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        int int5 = period3.get(durationFieldType4);
        org.joda.time.Period period7 = period3.withMillis((int) (byte) -1);
        org.joda.time.Period period9 = period7.plusHours((int) (short) -1);
        org.joda.time.Seconds seconds10 = period9.toStandardSeconds();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
    }

    @Test
    public void test13542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13542");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds6 = seconds2.minus(seconds5);
        org.joda.time.Seconds seconds7 = seconds2.negated();
        java.lang.String str8 = seconds7.toString();
        org.joda.time.Seconds seconds9 = seconds7.negated();
        org.joda.time.Seconds seconds11 = seconds7.minus(8);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-60S" + "'", str8, "PT-60S");
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
    }

    @Test
    public void test13543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13543");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) (-1), (long) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration3.toIntervalFrom(readableInstant4);
        org.joda.time.Duration duration7 = duration3.minus((long) 32);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant14, readableDuration15);
        mutablePeriod16.setHours((int) (short) 100);
        boolean boolean19 = periodType13.equals((java.lang.Object) mutablePeriod16);
        org.joda.time.PeriodType periodType20 = periodType13.withMinutesRemoved();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (short) 10, periodType13, chronology21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType13);
        org.joda.time.Period period24 = new org.joda.time.Period(2879L, periodType13);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test13544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13544");
        org.joda.time.Period period4 = new org.joda.time.Period((-32), (int) (short) 1, 11, 9);
        org.joda.time.Period period6 = period4.withMinutes((-2147483647));
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test13545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13545");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 35);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Days days3 = hours2.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test13546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13546");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.dividedBy((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds4 = seconds2.negated();
        org.joda.time.Seconds seconds6 = seconds4.plus(990);
        org.joda.time.Duration duration7 = seconds4.toStandardDuration();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) 1);
        org.joda.time.Duration duration11 = duration9.plus((long) 35);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType16 = seconds15.getFieldType();
        org.joda.time.Seconds seconds18 = seconds15.dividedBy(3);
        org.joda.time.Seconds seconds19 = seconds15.negated();
        org.joda.time.Seconds seconds21 = seconds15.plus((-1));
        org.joda.time.Seconds seconds23 = seconds15.minus((-12));
        org.joda.time.Duration duration24 = seconds23.toStandardDuration();
        org.joda.time.Seconds seconds25 = seconds12.minus(seconds23);
        boolean boolean26 = seconds4.isLessThan(seconds12);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test13547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13547");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (short) 0);
        org.joda.time.Period period2 = period1.negated();
        org.joda.time.Period period4 = period1.minusMillis(2);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test13548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13548");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.Seconds seconds7 = seconds5.dividedBy(32);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-3600L), periodType8, chronology9);
        org.joda.time.Period period11 = new org.joda.time.Period(90000000L, (long) 13, periodType8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType8);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test13549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13549");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        long long3 = duration0.getStandardMinutes();
        org.joda.time.Hours hours4 = duration0.toStandardHours();
        org.joda.time.Hours hours5 = null;
        boolean boolean6 = hours4.isGreaterThan(hours5);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        int int13 = mutablePeriod11.get(durationFieldType12);
        org.joda.time.Hours hours14 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Hours hours16 = hours14.dividedBy((int) (short) -1);
        org.joda.time.Hours hours17 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours19 = hours17.minus(0);
        org.joda.time.Hours hours20 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours22 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean23 = hours20.isGreaterThan(hours22);
        boolean boolean24 = hours19.isLessThan(hours22);
        java.lang.String str25 = hours19.toString();
        org.joda.time.Hours hours26 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours27 = hours19.plus(hours26);
        org.joda.time.Hours hours28 = hours14.minus(hours19);
        org.joda.time.Hours hours29 = org.joda.time.Hours.TWO;
        int int30 = hours29.getHours();
        org.joda.time.Hours hours31 = hours29.negated();
        boolean boolean32 = hours19.isGreaterThan(hours31);
        java.lang.String str33 = hours19.toString();
        boolean boolean34 = hours4.isLessThan(hours19);
        org.joda.time.Hours hours35 = hours19.negated();
        java.lang.String str36 = hours19.toString();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT4H" + "'", str25, "PT4H");
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT4H" + "'", str33, "PT4H");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT4H" + "'", str36, "PT4H");
    }

    @Test
    public void test13550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13550");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period8 = duration2.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        boolean boolean13 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.copy();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test13551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13551");
        org.joda.time.Period period2 = new org.joda.time.Period(1666L, (-115200000L));
        org.joda.time.Period period4 = period2.minusMillis(2);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = period2.getValue((-160));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -160");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test13552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13552");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Days days8 = org.joda.time.Days.FOUR;
        org.joda.time.Days days10 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.ZERO;
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = days14.minus(10);
        boolean boolean17 = days11.isGreaterThan(days14);
        boolean boolean18 = days10.isLessThan(days11);
        org.joda.time.Days days19 = days8.plus(days11);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.PeriodType periodType21 = days19.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter7.withParseType(periodType21);
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatter22.getPrinter();
        java.io.Writer writer24 = null;
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Duration duration33 = duration30.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType36 = minutes35.getPeriodType();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.Period period38 = duration33.toPeriodFrom(readableInstant34, periodType36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 0, (long) 3, periodType36);
        org.joda.time.PeriodType periodType40 = periodType36.withMonthsRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (-32), (-1L), periodType36, chronology41);
        mutablePeriod42.setMinutes(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter22.printTo(writer24, (org.joda.time.ReadablePeriod) mutablePeriod42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(periodPrinter23);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT600S" + "'", str31, "PT600S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test13553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13553");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(100000000L);
        org.joda.time.Duration duration3 = duration1.minus((long) 67);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType6 = seconds5.getPeriodType();
        java.lang.String str7 = seconds5.toString();
        org.joda.time.Seconds seconds9 = seconds5.plus((int) (short) 1);
        int int10 = seconds9.getSeconds();
        org.joda.time.PeriodType periodType11 = seconds9.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = duration1.toPeriodTo(readableInstant4, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6000000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test13554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13554");
        org.joda.time.Period period8 = new org.joda.time.Period(60, (-160), 75, (-1), (-2147483638), (-1073741824), (int) (byte) 100, 30);
    }

    @Test
    public void test13555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13555");
        org.joda.time.ReadableInstant readableInstant0 = null;
        java.lang.Object obj1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(obj1);
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.joda.time.Duration duration4 = duration2.toDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        java.lang.String str9 = seconds8.toString();
        org.joda.time.PeriodType periodType10 = seconds8.getPeriodType();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.Period period13 = duration4.toPeriodTo(readableInstant5, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = period13.withYears(27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT60S" + "'", str9, "PT60S");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13556");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Period period2 = hours0.toPeriod();
        org.joda.time.Period period4 = period2.withSeconds(54);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test13557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13557");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        java.util.Locale locale13 = periodFormatter12.getLocale();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeks(1);
        java.lang.String str18 = weeks17.toString();
        org.joda.time.PeriodType periodType19 = weeks17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType19);
        org.joda.time.PeriodType periodType21 = periodType19.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter12.withParseType(periodType21);
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatter22.getPrinter();
        org.joda.time.format.PeriodParser periodParser24 = periodFormatter22.getParser();
        java.io.Writer writer25 = null;
        org.joda.time.Period period27 = org.joda.time.Period.hours((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableDuration29);
        org.joda.time.Period period31 = mutablePeriod30.toPeriod();
        org.joda.time.Period period33 = period31.withHours(0);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        int int35 = period31.indexOf(durationFieldType34);
        org.joda.time.Period period37 = period27.withField(durationFieldType34, (-1));
        org.joda.time.Period period39 = period37.plusMonths(60);
        org.joda.time.Period period41 = period39.plusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weekyears();
        int int47 = period45.get(durationFieldType46);
        org.joda.time.Period period49 = period45.withMillis((int) (byte) -1);
        org.joda.time.Period period51 = period45.plusMinutes(52);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType53 = minutes52.getPeriodType();
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes55 = minutes52.plus(minutes54);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.ZERO;
        boolean boolean58 = minutes56.isLessThan(minutes57);
        boolean boolean59 = minutes52.isLessThan(minutes56);
        org.joda.time.Minutes minutes61 = minutes56.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType63 = minutes62.getFieldType();
        org.joda.time.PeriodType periodType64 = minutes62.getPeriodType();
        org.joda.time.Minutes minutes65 = minutes61.plus(minutes62);
        org.joda.time.DurationFieldType durationFieldType66 = minutes65.getFieldType();
        boolean boolean67 = period45.isSupported(durationFieldType66);
        org.joda.time.Period period69 = period39.withField(durationFieldType66, 59);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter22.printTo(writer25, (org.joda.time.ReadablePeriod) period69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P1W" + "'", str18, "P1W");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(periodPrinter23);
        org.junit.Assert.assertNull(periodParser24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test13558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13558");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter3.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter3.withLocale(locale6);
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withLocale(locale10);
        boolean boolean12 = periodFormatter11.isPrinter();
        boolean boolean13 = periodFormatter11.isParser();
        boolean boolean14 = periodFormatter11.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod15 = org.joda.time.MutablePeriod.parse("P-575D", periodFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13559");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 8, (long) 10);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ZERO;
        org.joda.time.Duration duration4 = seconds3.toStandardDuration();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), (long) ' ');
        boolean boolean8 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration7);
        long long9 = duration4.getStandardDays();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = duration2.plus((long) 4);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, readableInstant13);
        org.joda.time.Period period16 = period14.withMinutes(52);
        org.joda.time.Period period17 = period14.normalizedStandard();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test13560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13560");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 10, (long) 990);
    }

    @Test
    public void test13561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13561");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = period1.plusHours((-1));
        org.joda.time.Period period12 = period1.withDays((int) 'a');
        org.joda.time.Period period14 = period12.withSeconds(52);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        mutablePeriod15.setDays((-672));
        int int18 = mutablePeriod15.getMinutes();
        mutablePeriod15.setValue(4, (-2147483647));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test13562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13562");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = duration15.toPeriod();
        boolean boolean22 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant26);
        org.joda.time.Duration duration28 = period27.toStandardDuration();
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration30 = duration15.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        boolean boolean42 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType45 = periodType44.withMinutesRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration40, readableInstant43, periodType44);
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant35, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period49 = duration40.toPeriod(periodType48);
        boolean boolean50 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period55 = duration54.toPeriod();
        long long56 = duration54.getStandardSeconds();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds59 = duration58.toStandardSeconds();
        java.lang.String str60 = seconds59.toString();
        org.joda.time.PeriodType periodType61 = seconds59.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant52, (org.joda.time.ReadableDuration) duration54, periodType61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, readableInstant51, periodType61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant31, periodType61);
        org.joda.time.format.PeriodFormatter periodFormatter65 = periodFormatter2.withParseType(periodType61);
        java.util.Locale locale66 = null;
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter2.withLocale(locale66);
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60L) + "'", long56 == (-60L));
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT60S" + "'", str60, "PT60S");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodFormatter65);
        org.junit.Assert.assertNotNull(periodFormatter67);
    }

    @Test
    public void test13563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13563");
        org.joda.time.Period period8 = new org.joda.time.Period(13, 70, (-1073741824), (-87), 25, (-13), 107, (-35));
    }

    @Test
    public void test13564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13564");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks17 = weeks6.minus(weeks16);
        org.joda.time.MutablePeriod mutablePeriod18 = weeks17.toMutablePeriod();
        mutablePeriod18.setMinutes((int) (byte) -1);
        mutablePeriod18.setPeriod(0, (-672), (int) (byte) 0, (-672), (int) (short) 1, (int) (short) -1, 25, 1);
        int int30 = mutablePeriod18.getHours();
        mutablePeriod18.setMillis((-2147483638));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType34 = mutablePeriod18.getFieldType((-8));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test13565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13565");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period3.minusYears((int) (short) 10);
        org.joda.time.Period period7 = period3.withMinutes((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationTo(readableInstant8);
        long long10 = duration9.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration9.toPeriodFrom(readableInstant11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration9.minus(readableDuration13);
        long long15 = duration14.getStandardDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16830730L + "'", long10 == 16830730L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 11688L + "'", long15 == 11688L);
    }

    @Test
    public void test13566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13566");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours9 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean12 = hours9.isGreaterThan(hours11);
        org.joda.time.Period period13 = period7.withFields((org.joda.time.ReadablePeriod) hours11);
        org.joda.time.Period period15 = period7.plusDays(8);
        org.joda.time.Period period17 = period15.minusWeeks((-2));
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationTo(readableInstant18);
        org.joda.time.Period period21 = period17.minusMinutes(6);
        org.joda.time.Period period22 = period17.toPeriod();
        org.joda.time.Period period24 = period17.minusSeconds(2);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test13567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13567");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period5 = period3.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Weeks weeks7 = weeks1.plus(weeks6);
        org.joda.time.Weeks weeks9 = weeks1.plus((int) (byte) 10);
        org.joda.time.Weeks weeks11 = weeks1.multipliedBy((-2147483648));
        org.joda.time.Weeks weeks12 = weeks1.negated();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks14 = weeks12.plus(weeks13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn(readableInterval17);
        boolean boolean19 = weeks16.isLessThan(weeks18);
        org.joda.time.Weeks weeks20 = weeks16.negated();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((java.lang.Object) weeks16, chronology21);
        org.joda.time.Weeks weeks23 = weeks14.plus(weeks16);
        org.joda.time.Period period28 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period30 = period28.withDays((int) 'a');
        org.joda.time.Weeks weeks31 = period30.toStandardWeeks();
        int int32 = weeks31.getWeeks();
        org.joda.time.Weeks weeks34 = weeks31.plus((int) (byte) 0);
        org.joda.time.Duration duration35 = weeks34.toStandardDuration();
        org.joda.time.Weeks weeks36 = weeks34.negated();
        org.joda.time.Period period41 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period43 = period41.withDays((int) 'a');
        org.joda.time.Weeks weeks44 = period43.toStandardWeeks();
        int int45 = weeks44.getWeeks();
        org.joda.time.DurationFieldType durationFieldType46 = weeks44.getFieldType();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeksIn(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.weeksIn(readableInterval49);
        boolean boolean51 = weeks48.isLessThan(weeks50);
        org.joda.time.Weeks weeks52 = weeks48.negated();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((java.lang.Object) weeks48, chronology53);
        org.joda.time.Weeks weeks56 = weeks48.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks57 = weeks48.negated();
        org.joda.time.Weeks weeks58 = weeks44.minus(weeks48);
        org.joda.time.Weeks weeks59 = weeks34.minus(weeks48);
        org.joda.time.PeriodType periodType60 = weeks34.getPeriodType();
        boolean boolean61 = weeks16.isLessThan(weeks34);
        java.lang.String str62 = weeks16.toString();
        org.joda.time.Weeks weeks64 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks66 = weeks64.plus((int) (short) 0);
        org.joda.time.Weeks weeks67 = weeks66.negated();
        boolean boolean68 = weeks16.isLessThan(weeks66);
        org.joda.time.Period period70 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period72 = period70.withHours(32);
        org.joda.time.Period period73 = period70.normalizedStandard();
        org.joda.time.Period period75 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days76 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period75);
        org.joda.time.PeriodType periodType77 = days76.getPeriodType();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant78, readableDuration79);
        mutablePeriod80.setHours((int) (short) 100);
        boolean boolean83 = periodType77.equals((java.lang.Object) mutablePeriod80);
        org.joda.time.Duration duration84 = org.joda.time.Duration.ZERO;
        long long85 = duration84.getStandardDays();
        mutablePeriod80.add((org.joda.time.ReadableDuration) duration84);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType89 = periodType88.withWeeksRemoved();
        org.joda.time.PeriodType periodType90 = periodType89.withDaysRemoved();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration84, readableInstant87, periodType89);
        org.joda.time.Period period92 = period73.withPeriodType(periodType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period93 = new org.joda.time.Period((java.lang.Object) boolean68, periodType89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 13 + "'", int45 == 13);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "P0W" + "'", str62, "P0W");
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    public void test13568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13568");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Weeks weeks7 = weeks5.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks14 = weeks11.minus((int) (short) -1);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(0);
        boolean boolean17 = weeks7.isGreaterThan(weeks16);
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period24 = period22.withDays((int) 'a');
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        int int26 = weeks25.getWeeks();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks33 = weeks30.minus((int) (short) -1);
        org.joda.time.Weeks weeks34 = weeks33.negated();
        org.joda.time.Weeks weeks36 = weeks33.multipliedBy(0);
        boolean boolean37 = weeks25.isGreaterThan(weeks36);
        org.joda.time.Weeks weeks38 = weeks16.minus(weeks25);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksIn(readableInterval39);
        org.joda.time.Weeks weeks42 = weeks40.multipliedBy((int) (byte) 100);
        org.joda.time.Weeks weeks43 = weeks25.plus(weeks42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType46);
        int int48 = period47.getMillis();
        org.joda.time.Period period50 = period47.plusDays((int) 'a');
        org.joda.time.Period period52 = period47.minusMillis((-32));
        org.joda.time.Period period53 = period47.toPeriod();
        org.joda.time.Weeks weeks54 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Weeks weeks55 = weeks25.plus(weeks54);
        org.joda.time.Period period56 = weeks55.toPeriod();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 25 + "'", int48 == 25);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test13569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13569");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-7L), periodType4, chronology7);
        java.lang.String str9 = periodType4.toString();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearWeekDay]" + "'", str9, "PeriodType[YearWeekDay]");
    }

    @Test
    public void test13570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13570");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(obj3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        long long9 = duration8.getStandardDays();
        org.joda.time.Hours hours10 = duration8.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType11 = hours10.getFieldType();
        boolean boolean12 = periodType7.isSupported(durationFieldType11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration4, periodType7);
        mutablePeriod13.setSeconds((int) '4');
        mutablePeriod13.addMillis(4);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        mutablePeriod13.setPeriod(readableInstant18, readableInstant19);
        java.lang.String str21 = mutablePeriod13.toString();
        mutablePeriod13.add((long) 135);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
    }

    @Test
    public void test13571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13571");
        org.joda.time.Period period1 = org.joda.time.Period.hours(31);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13572");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale14);
        boolean boolean16 = periodFormatter15.isParser();
        boolean boolean17 = periodFormatter15.isParser();
        java.util.Locale locale18 = periodFormatter15.getLocale();
        org.joda.time.Period period20 = org.joda.time.Period.parse("PT-52M");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = periodFormatter15.print((org.joda.time.ReadablePeriod) period20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test13573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13573");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((-672));
        org.joda.time.Period period3 = period1.plusSeconds(100);
        org.joda.time.Period period5 = period3.withHours(2);
        int int6 = period3.getHours();
        int int7 = period3.getMillis();
        org.joda.time.Period period9 = period3.plusMillis(71);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test13574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13574");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds6 = seconds2.minus(seconds5);
        org.joda.time.Seconds seconds7 = seconds2.negated();
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds10 = seconds7.minus(seconds9);
        java.lang.String str11 = seconds9.toString();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        java.lang.String str14 = seconds12.toString();
        org.joda.time.Seconds seconds16 = seconds12.plus((int) (short) 1);
        boolean boolean17 = seconds9.isGreaterThan(seconds12);
        org.joda.time.Seconds seconds19 = seconds9.multipliedBy((-672));
        org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) seconds9);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds19);
    }

    @Test
    public void test13575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13575");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodFrom(readableInstant2);
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = period3.getFieldType(688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
    }

    @Test
    public void test13576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13576");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy(7);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = duration4.toPeriod(periodType5, chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType11 = periodType10.withMonthsRemoved();
        org.joda.time.Period period12 = duration4.toPeriodTo(readableInstant9, periodType11);
        org.joda.time.Minutes minutes13 = duration4.toStandardMinutes();
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType17 = minutes16.getPeriodType();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = minutes16.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.ZERO;
        boolean boolean22 = minutes20.isLessThan(minutes21);
        boolean boolean23 = minutes16.isLessThan(minutes20);
        org.joda.time.Minutes minutes25 = minutes20.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes26 = minutes25.negated();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes30 = minutes27.plus(minutes29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.ZERO;
        boolean boolean33 = minutes31.isLessThan(minutes32);
        boolean boolean34 = minutes27.isLessThan(minutes31);
        org.joda.time.Duration duration35 = minutes27.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        java.lang.Object obj38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(obj38);
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant37, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant36, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration43.toPeriod(periodType44, chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType50 = periodType49.withMonthsRemoved();
        org.joda.time.Period period51 = duration43.toPeriodTo(readableInstant48, periodType50);
        org.joda.time.Period period52 = duration43.toPeriod();
        org.joda.time.Duration duration53 = duration39.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration55 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration43, 25);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration35.toIntervalFrom(readableInstant56);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Minutes minutes59 = minutes25.plus(minutes58);
        org.joda.time.Minutes minutes60 = minutes13.plus(minutes58);
        org.joda.time.Minutes minutes61 = minutes0.plus(minutes58);
        org.joda.time.Minutes minutes63 = minutes58.dividedBy(13);
        org.joda.time.Minutes minutes65 = minutes58.dividedBy(8744020);
        org.joda.time.Minutes minutes67 = minutes58.minus(0);
        int int68 = minutes58.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test13577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13577");
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType8 = null;
        int int9 = periodType7.indexOf(durationFieldType8);
        org.joda.time.PeriodType periodType10 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', (long) 'a', periodType10);
        java.lang.String str12 = periodType10.getName();
        org.joda.time.PeriodType periodType13 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 9, 4320L, periodType15);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.toMutablePeriod();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Days" + "'", str12, "Days");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test13578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13578");
        org.joda.time.Period period1 = org.joda.time.Period.hours((-22));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13579");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.Days days2 = days0.multipliedBy((int) (short) -1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(600000L, (-24L), chronology5);
        boolean boolean7 = days0.equals((java.lang.Object) chronology5);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13580");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 600, chronology1);
        org.joda.time.Period period4 = period2.minusWeeks((-31));
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test13581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13581");
        org.joda.time.Period period1 = org.joda.time.Period.hours(4);
        org.joda.time.Period period3 = period1.minusHours((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod4 = period1.toMutablePeriod();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((-3600L), 172800000L, chronology7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.forFields(durationFieldTypeArray9);
        org.joda.time.Period period12 = period1.withPeriodType(periodType11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 100);
        mutablePeriod15.addMinutes(10);
        java.lang.Object obj18 = mutablePeriod15.clone();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        boolean boolean32 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period33 = duration27.toPeriod();
        boolean boolean34 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration35 = duration27.toDuration();
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Period period37 = period36.toPeriod();
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) period37);
        mutablePeriod15.addSeconds((int) (short) 1);
        org.joda.time.Period period41 = mutablePeriod15.toPeriod();
        org.joda.time.Period period42 = period1.minus((org.joda.time.ReadablePeriod) period41);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT1M1S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT1M1S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT1M1S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test13582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13582");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours(25);
        org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
        int int4 = hours1.getValue(0);
        org.joda.time.Hours hours5 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) hours1);
        int int6 = hours5.size();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test13583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13583");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) 0, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 2147483647, periodType4);
        org.joda.time.PeriodType periodType7 = periodType4.withYearsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test13584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13584");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Seconds seconds4 = seconds2.dividedBy(32);
        org.joda.time.Seconds seconds5 = seconds4.negated();
        org.joda.time.Duration duration6 = seconds5.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType10 = seconds9.getFieldType();
        org.joda.time.Seconds seconds12 = seconds9.plus(25);
        org.joda.time.Seconds seconds13 = seconds9.negated();
        boolean boolean14 = seconds5.isLessThan(seconds13);
        org.joda.time.Period period15 = seconds5.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13585");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        boolean boolean20 = periodType14.equals((java.lang.Object) mutablePeriod17);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        long long22 = duration21.getStandardDays();
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withDaysRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant24, periodType26);
        boolean boolean29 = duration1.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration21.toPeriod(chronology30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, periodType32, chronology33);
        org.joda.time.Duration duration37 = duration21.withDurationAdded(0L, 25);
        org.joda.time.Duration duration39 = duration21.withMillis((-483243L));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test13586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13586");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = seconds11.getFieldType();
        mutablePeriod2.add(durationFieldType12, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration21, chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration21, chronology24);
        mutablePeriod2.add((int) (short) 10, (int) '4', (int) ' ', 100, 1, (int) (short) 10, (int) (byte) 1, 100);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        mutablePeriod2.setPeriod(readableInstant35, readableInstant36);
        mutablePeriod2.addDays(52);
        mutablePeriod2.setValue((int) (short) 1, (-2147483638));
        mutablePeriod2.clear();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test13587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13587");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 10);
        mutablePeriod1.addMonths(100);
        mutablePeriod1.addMinutes(13);
        org.joda.time.Period period8 = new org.joda.time.Period((java.lang.Object) mutablePeriod1);
    }

    @Test
    public void test13588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13588");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(135);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13589");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-1));
        org.joda.time.Seconds seconds2 = seconds1.negated();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.parseSeconds("PT-86400S");
        org.joda.time.Seconds seconds6 = seconds4.minus(658);
        org.joda.time.Seconds seconds7 = seconds1.minus(seconds6);
        org.joda.time.MutablePeriod mutablePeriod8 = seconds7.toMutablePeriod();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test13590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13590");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType7 = minutes6.getPeriodType();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes9 = minutes6.plus(minutes8);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        boolean boolean12 = minutes10.isLessThan(minutes11);
        boolean boolean13 = minutes6.isLessThan(minutes10);
        org.joda.time.PeriodType periodType14 = minutes6.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter3.withParseType(periodType14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        org.joda.time.Period period19 = mutablePeriod18.toPeriod();
        org.joda.time.Period period21 = period19.withHours(0);
        int int22 = period19.getWeeks();
        org.joda.time.Period period24 = period19.plusSeconds((int) (byte) 100);
        org.joda.time.Period period26 = period19.withWeeks((int) '#');
        org.joda.time.PeriodType periodType27 = period19.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter3.withParseType(periodType27);
        java.util.Locale locale29 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = org.joda.time.Period.parse("PT-98H", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNull(locale29);
    }

    @Test
    public void test13591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        mutablePeriod2.setHours((int) (byte) 1);
        mutablePeriod2.setPeriod((long) (short) 100, (long) '4');
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod2.copy();
        mutablePeriod2.setPeriod((long) 25);
        org.joda.time.Period period11 = mutablePeriod2.toPeriod();
        org.joda.time.Period period13 = period11.withWeeks(52);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Period period15 = period11.plus(readablePeriod14);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13592");
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = duration2.toPeriod(chronology3);
        org.joda.time.Days days5 = duration2.toStandardDays();
        long long6 = duration2.getStandardMinutes();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        boolean boolean10 = duration2.isEqual((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = periodType14.indexOf(durationFieldType15);
        org.joda.time.PeriodType periodType17 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period19 = duration7.toPeriod(periodType17);
        org.joda.time.Period period20 = new org.joda.time.Period(84326400L, (-5184000L), periodType17);
        org.joda.time.Period period22 = period20.withDays(9);
        int int23 = period22.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period22.minusYears((-60));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test13593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13593");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType6 = seconds5.getFieldType();
        mutablePeriod2.add(durationFieldType6, 52);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod2.add(readableInterval9);
        mutablePeriod2.setYears(0);
        int int13 = mutablePeriod2.getYears();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 100, 60L);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration16);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test13594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13594");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) days0, periodType1, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        int int5 = mutablePeriod3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant12, readableDuration13);
        mutablePeriod14.setHours((int) (short) 100);
        boolean boolean17 = periodType11.equals((java.lang.Object) mutablePeriod14);
        org.joda.time.Duration duration18 = org.joda.time.Duration.ZERO;
        long long19 = duration18.getStandardDays();
        mutablePeriod14.add((org.joda.time.ReadableDuration) duration18);
        mutablePeriod14.clear();
        org.joda.time.Period period23 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType25 = period23.getFieldType((int) (short) 1);
        mutablePeriod14.set(durationFieldType25, (int) (short) -1);
        mutablePeriod7.set(durationFieldType25, 32);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = mutablePeriod7.toDurationTo(readableInstant30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        java.lang.Object obj34 = null;
        org.joda.time.Duration duration35 = new org.joda.time.Duration(obj34);
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration35);
        boolean boolean38 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology39 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration31, chronology39);
        long long41 = duration31.getMillis();
        org.joda.time.Days days45 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) days45, periodType46, chronology47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 52, periodType46);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 7, (-60L), periodType46);
        org.joda.time.PeriodType periodType51 = periodType46.withDaysRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withMillisRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration31.toPeriod(periodType52, chronology53);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 84326400000L + "'", long41 == 84326400000L);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test13595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13595");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter4.getParser();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType9 = seconds8.getFieldType();
        org.joda.time.Seconds seconds11 = seconds8.plus(25);
        org.joda.time.Seconds seconds12 = seconds8.negated();
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter4.withParseType(periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) 1, (-60L), periodType13);
        org.joda.time.PeriodType periodType17 = periodType13.withMonthsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.Period period20 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType22 = period20.getFieldType((int) (short) 1);
        org.joda.time.Period period24 = period20.plusDays(10);
        org.joda.time.Seconds seconds25 = period20.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType26 = seconds25.getFieldType();
        org.joda.time.Seconds seconds28 = seconds25.dividedBy((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType29 = seconds28.getFieldType();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds32 = duration31.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType33 = seconds32.getFieldType();
        org.joda.time.Seconds seconds35 = seconds32.dividedBy(3);
        org.joda.time.Seconds seconds36 = seconds32.negated();
        org.joda.time.Seconds seconds38 = seconds32.plus((-1));
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType42 = seconds41.getFieldType();
        org.joda.time.Seconds seconds44 = seconds41.dividedBy(2);
        boolean boolean45 = seconds32.isGreaterThan(seconds44);
        boolean boolean46 = seconds28.isGreaterThan(seconds32);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((java.lang.Object) seconds32, chronology47);
        boolean boolean49 = periodType18.equals((java.lang.Object) seconds32);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test13596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13596");
        org.joda.time.Period period2 = new org.joda.time.Period((long) ' ', (long) 54);
        int[] intArray3 = period2.getValues();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 22]");
    }

    @Test
    public void test13597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13597");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(3);
        org.joda.time.Period period2 = period1.negated();
        int int3 = period1.size();
        org.joda.time.Period period5 = period1.plusMillis(2147483622);
        org.joda.time.Weeks weeks6 = period1.toStandardWeeks();
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy((-34));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
    }

    @Test
    public void test13598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13598");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodFrom(readableInstant2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', chronology5);
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        long long8 = duration7.getStandardDays();
        org.joda.time.Hours hours9 = duration7.toStandardHours();
        long long10 = duration7.getStandardMinutes();
        long long11 = duration7.getStandardDays();
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration7.toPeriod(chronology13);
        boolean boolean15 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period20 = new org.joda.time.Period(0, 100, (int) '#', 100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod27.get(durationFieldType28);
        org.joda.time.Hours hours30 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Hours hours32 = hours30.dividedBy(3);
        org.joda.time.Hours hours33 = hours32.negated();
        org.joda.time.Hours hours35 = hours33.plus(25);
        org.joda.time.Duration duration36 = hours33.toStandardDuration();
        org.joda.time.Duration duration37 = duration22.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((long) (byte) 0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (byte) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.Duration duration44 = duration39.minus((org.joda.time.ReadableDuration) duration41);
        int int45 = duration22.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.PeriodType periodType49 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withDaysRemoved();
        org.joda.time.PeriodType periodType51 = periodType49.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant46, periodType49);
        boolean boolean53 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test13599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13599");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = duration3.toPeriodTo(readableInstant4);
        org.joda.time.Duration duration7 = duration3.minus((-60L));
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Duration duration12 = duration9.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, readableDuration14);
        mutablePeriod15.setHours((int) (short) 100);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration19, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType25 = seconds24.getFieldType();
        mutablePeriod15.add(durationFieldType25, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableDuration29);
        mutablePeriod30.setHours((int) (short) 100);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration34, chronology35);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration34, chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        boolean boolean40 = duration34.isEqual(readableDuration39);
        org.joda.time.Duration duration41 = duration9.minus((org.joda.time.ReadableDuration) duration34);
        long long42 = duration9.getStandardSeconds();
        boolean boolean43 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, readableInstant44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str48 = duration47.toString();
        org.joda.time.Duration duration50 = duration47.minus((long) (byte) 10);
        org.joda.time.Duration duration52 = duration47.withMillis((long) (short) -1);
        org.joda.time.Period period53 = duration47.toPeriod();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Period period55 = duration47.toPeriodFrom(readableInstant54);
        long long56 = duration47.getStandardMinutes();
        org.joda.time.Duration duration58 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-13));
        java.lang.Object obj59 = null;
        boolean boolean60 = duration47.equals(obj59);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT600S" + "'", str10, "PT600S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 600L + "'", long42 == 600L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT600S" + "'", str48, "PT600S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test13600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13600");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-20), 990, 0, 2147483622, (-302), (int) (byte) 0, (-1073741824), 59);
        int int9 = mutablePeriod8.getSeconds();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1073741824) + "'", int9 == (-1073741824));
    }

    @Test
    public void test13601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13601");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.months(25);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withHoursRemoved();
        java.lang.String str7 = periodType4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PeriodType[Standard]" + "'", str7, "PeriodType[Standard]");
    }

    @Test
    public void test13602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13602");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(obj0, periodType1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
        mutablePeriod10.setHours((int) (short) 100);
        boolean boolean13 = periodType7.equals((java.lang.Object) mutablePeriod10);
        org.joda.time.PeriodType periodType14 = periodType7.withMonthsRemoved();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((java.lang.Object) mutablePeriod3, periodType7, chronology15);
        int int17 = mutablePeriod3.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = mutablePeriod3.getFieldTypes();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
    }

    @Test
    public void test13603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13603");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-40320L), (long) (-302), periodType6, chronology7);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test13604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13604");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 100, (int) '#', 100);
        org.joda.time.Period period5 = period4.negated();
        org.joda.time.Period period7 = period5.withWeeks((int) '#');
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Seconds seconds9 = period7.toStandardSeconds();
        int int10 = period7.getHours();
        org.joda.time.Period period12 = org.joda.time.Period.years((-1073741824));
        org.joda.time.Period period13 = period7.plus((org.joda.time.ReadablePeriod) period12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds14 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-1073741824Y35WT-100M-35.100S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13605");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-3600L));
        long long2 = duration1.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-86400L) + "'", long2 == (-86400L));
    }

    @Test
    public void test13606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13606");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DurationField durationField5 = durationFieldType3.getField(chronology4);
        boolean boolean6 = weeks0.isSupported(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType7 = weeks0.getFieldType();
        org.joda.time.PeriodType periodType8 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        boolean boolean14 = weeks11.isLessThan(weeks13);
        org.joda.time.Weeks weeks15 = weeks11.negated();
        org.joda.time.Weeks weeks17 = weeks15.minus((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType18 = weeks17.getFieldType();
        boolean boolean19 = weeks9.isGreaterThan(weeks17);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        boolean boolean24 = weeks21.isLessThan(weeks23);
        org.joda.time.Weeks weeks26 = weeks23.minus((int) (short) -1);
        org.joda.time.Weeks weeks28 = weeks26.multipliedBy(0);
        org.joda.time.Weeks weeks29 = weeks17.minus(weeks26);
        boolean boolean30 = weeks0.isLessThan(weeks26);
        org.joda.time.Period period31 = weeks0.toPeriod();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test13607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13607");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks5 = weeks1.dividedBy((int) 'a');
        org.joda.time.Weeks weeks7 = weeks5.multipliedBy((-60));
        org.joda.time.MutablePeriod mutablePeriod8 = weeks7.toMutablePeriod();
        org.joda.time.Chronology chronology10 = null;
        mutablePeriod8.add(11688L, chronology10);
        mutablePeriod8.addHours((int) (short) -1);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test13608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13608");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy(54);
        org.joda.time.Minutes minutes12 = null;
        boolean boolean13 = minutes11.isGreaterThan(minutes12);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) '#');
        java.lang.String str18 = minutes17.toString();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType20 = minutes19.getPeriodType();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes22 = minutes19.plus(minutes21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.ZERO;
        boolean boolean25 = minutes23.isLessThan(minutes24);
        boolean boolean26 = minutes19.isLessThan(minutes23);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        int int29 = minutes27.getMinutes();
        java.lang.String str30 = minutes27.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = minutes31.getFieldType();
        java.lang.String str33 = minutes31.toString();
        boolean boolean34 = minutes27.isLessThan(minutes31);
        org.joda.time.Minutes minutes36 = minutes31.minus(0);
        int int37 = minutes36.getMinutes();
        org.joda.time.Minutes minutes38 = minutes23.plus(minutes36);
        org.joda.time.Duration duration39 = minutes23.toStandardDuration();
        org.joda.time.Minutes minutes40 = minutes23.negated();
        org.joda.time.Minutes minutes41 = minutes17.minus(minutes23);
        boolean boolean42 = minutes11.isGreaterThan(minutes23);
        java.lang.String str43 = minutes23.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0M" + "'", str18, "PT0M");
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0M" + "'", str30, "PT0M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT-2147483648M" + "'", str33, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-2147483648) + "'", int37 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT2M" + "'", str43, "PT2M");
    }

    @Test
    public void test13609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13609");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT85S");
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13610");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ZERO;
        boolean boolean10 = minutes8.isLessThan(minutes9);
        boolean boolean11 = minutes4.isLessThan(minutes8);
        org.joda.time.PeriodType periodType12 = minutes4.getPeriodType();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType12);
        org.joda.time.Period period15 = new org.joda.time.Period(194400000L, 0L, periodType12);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13611");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(6000000L);
        org.joda.time.Days days3 = org.joda.time.Days.ZERO;
        int int4 = days3.getDays();
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        boolean boolean12 = days7.isGreaterThan(days10);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Days days16 = days10.minus(days15);
        org.joda.time.Days days17 = days3.minus(days10);
        org.joda.time.Days days19 = days10.plus((int) (byte) 1);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.Days days21 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days23 = days21.minus(25);
        org.joda.time.Days days24 = days23.negated();
        org.joda.time.Days days25 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days27 = days25.minus(25);
        org.joda.time.Days days28 = days27.negated();
        org.joda.time.Days days29 = days23.plus(days28);
        java.lang.String str30 = days29.toString();
        boolean boolean31 = days19.isLessThan(days29);
        org.joda.time.Duration duration32 = days19.toStandardDuration();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((-1L));
        long long35 = duration34.getMillis();
        long long36 = duration34.getMillis();
        boolean boolean37 = duration32.isEqual((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration39.toPeriod(periodType40, chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType46 = periodType45.withMonthsRemoved();
        org.joda.time.Period period47 = duration39.toPeriodTo(readableInstant44, periodType46);
        org.joda.time.Duration duration48 = duration39.toDuration();
        org.joda.time.Period period50 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days51 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType52 = days51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant53, readableDuration54);
        mutablePeriod55.setHours((int) (short) 100);
        boolean boolean58 = periodType52.equals((java.lang.Object) mutablePeriod55);
        org.joda.time.Duration duration59 = org.joda.time.Duration.ZERO;
        long long60 = duration59.getStandardDays();
        mutablePeriod55.add((org.joda.time.ReadableDuration) duration59);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.PeriodType periodType65 = periodType64.withDaysRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, readableInstant62, periodType64);
        boolean boolean67 = duration39.isEqual((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration59.toPeriod(chronology68);
        long long70 = duration59.getStandardSeconds();
        org.joda.time.Duration duration72 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration59, (-2147483648));
        org.joda.time.Duration duration75 = new org.joda.time.Duration((long) 3, (long) 97);
        boolean boolean76 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration75);
        boolean boolean77 = duration2.isEqual((org.joda.time.ReadableDuration) duration75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((-1), (int) (byte) 1, (int) (byte) 1, (int) (short) -1, 7, 8, 60, 100);
        org.joda.time.Period period90 = org.joda.time.Period.months(25);
        org.joda.time.PeriodType periodType91 = period90.getPeriodType();
        org.joda.time.Period period92 = period88.withPeriodType(periodType91);
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod(readableInstant78, readableInstant79, periodType91);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration75, periodType91);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P0D" + "'", str30, "P0D");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-86400000L) + "'", long35 == (-86400000L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-86400000L) + "'", long36 == (-86400000L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    public void test13612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13612");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 10, (long) 1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks5 = weeks3.dividedBy(52);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DurationField durationField8 = durationFieldType6.getField(chronology7);
        boolean boolean9 = weeks3.isSupported(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType10 = weeks3.getFieldType();
        org.joda.time.Period period12 = period2.withFieldAdded(durationFieldType10, 10);
        java.lang.String str13 = durationFieldType10.getName();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType10.isSupported(chronology14);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weeks" + "'", str13, "weeks");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test13613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13613");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 25, chronology1);
        org.joda.time.Chronology chronology5 = null;
        mutablePeriod2.setPeriod((long) (-2147483588), (long) 54, chronology5);
    }

    @Test
    public void test13614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13614");
        org.joda.time.Period period4 = new org.joda.time.Period(8, 2, (-1), (int) (short) 0);
        org.joda.time.Period period6 = period4.minusWeeks((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod12.get(durationFieldType13);
        org.joda.time.Hours hours15 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Hours hours17 = hours15.dividedBy(3);
        org.joda.time.Hours hours18 = hours17.negated();
        org.joda.time.Hours hours20 = hours18.plus(13);
        org.joda.time.Hours hours22 = hours18.minus((int) (byte) -1);
        org.joda.time.Hours hours24 = hours18.dividedBy(3);
        org.joda.time.Period period25 = period6.minus((org.joda.time.ReadablePeriod) hours24);
        org.joda.time.Period period27 = period25.minusSeconds(5);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = period27.getValue(600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 600");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test13615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13615");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(25200000L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant2);
        mutablePeriod3.setDays(40);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.setPeriod(33L, chronology7);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13616");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType16 = periodType15.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant11, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration19 = duration1.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period20 = duration1.toPeriod();
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant22, readableDuration23);
        mutablePeriod24.setSeconds(8);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod24.toMutablePeriod();
        int int28 = mutablePeriod27.getDays();
        mutablePeriod27.addWeeks(40);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) mutablePeriod27, chronology31);
        org.joda.time.Period period33 = period20.withFields((org.joda.time.ReadablePeriod) period32);
        int int34 = period32.getWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
    }

    @Test
    public void test13617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13617");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setMonths((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test13618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13618");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((-1L), periodType1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration10, chronology11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType16 = seconds15.getFieldType();
        mutablePeriod6.add(durationFieldType16, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        mutablePeriod21.setHours((int) (short) 100);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration25, chronology28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        boolean boolean31 = duration25.isEqual(readableDuration30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant32);
        boolean boolean34 = period3.equals((java.lang.Object) duration25);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 13, (-60L), chronology37);
        org.joda.time.Period period39 = period3.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = period38.withMillis(20);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test13619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13619");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = seconds11.getFieldType();
        mutablePeriod2.add(durationFieldType12, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration21, chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration21, chronology24);
        mutablePeriod2.add((int) (short) 10, (int) '4', (int) ' ', 100, 1, (int) (short) 10, (int) (byte) 1, 100);
        mutablePeriod2.setPeriod((-60001L), (-60L));
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod2.copy();
        int int39 = mutablePeriod38.getMinutes();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test13620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13620");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        mutablePeriod4.setYears((int) (byte) 0);
        mutablePeriod4.setPeriod((int) '4', 21168000, (int) (short) 100, 21168000, (-91), (int) (byte) 10, (-2147483647), 515);
    }

    @Test
    public void test13621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13621");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.eras();
        int int5 = period3.get(durationFieldType4);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days8 = days6.dividedBy(7);
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        int int15 = period13.get(durationFieldType14);
        int int16 = period13.getYears();
        java.lang.String str17 = period13.toString();
        org.joda.time.Period period18 = period13.normalizedStandard();
        org.joda.time.Period period20 = period13.plusMinutes((int) (short) 1);
        org.joda.time.Days days21 = period13.toStandardDays();
        org.joda.time.Period period23 = period13.plusMillis(3);
        org.joda.time.Days days24 = period13.toStandardDays();
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        org.joda.time.Days days26 = org.joda.time.Days.ZERO;
        int int27 = days26.getDays();
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType34 = days33.getPeriodType();
        boolean boolean35 = days30.isGreaterThan(days33);
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Days days39 = days33.minus(days38);
        org.joda.time.Days days40 = days26.minus(days33);
        org.joda.time.Period period42 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.PeriodType periodType47 = days46.getPeriodType();
        boolean boolean48 = days43.isGreaterThan(days46);
        org.joda.time.Period period50 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days51 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Days days52 = days46.minus(days51);
        org.joda.time.Days days53 = days26.plus(days52);
        boolean boolean54 = days24.isLessThan(days26);
        org.joda.time.Days days55 = days8.minus(days26);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days55);
    }

    @Test
    public void test13622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13622");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        mutablePeriod2.setHours((int) (byte) 1);
        mutablePeriod2.setPeriod((long) (short) 100, (long) '4');
        mutablePeriod2.add(13, (-2147483638), 35, (int) 'a', 108, 88500, 671, (int) (short) 100);
    }

    @Test
    public void test13623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13623");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-73), (-940), 20, 194);
    }

    @Test
    public void test13624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13624");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        boolean boolean7 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Interval interval9 = duration5.toIntervalTo(readableInstant8);
        long long10 = duration5.getStandardMinutes();
        org.joda.time.Duration duration11 = duration5.toDuration();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration11);
        mutablePeriod12.addWeeks((-8));
        java.lang.Object obj15 = mutablePeriod12.clone();
        int int16 = mutablePeriod12.getMinutes();
        mutablePeriod12.setMonths(27);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P27M-8WT1M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P27M-8WT1M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P27M-8WT1M");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test13625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13625");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Duration duration4 = hours2.toStandardDuration();
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Period period7 = period5.minusSeconds((int) (byte) 100);
        org.joda.time.Period period9 = period5.plusMinutes((int) ' ');
        org.joda.time.Period period11 = period5.plusMinutes(97);
        org.joda.time.Period period13 = period5.withYears((-100));
        org.joda.time.Period period15 = period5.withDays((-609));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13626");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(90000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13627");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (short) -1);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        int int7 = period6.getMinutes();
        org.joda.time.Weeks weeks8 = period6.toStandardWeeks();
        org.joda.time.Weeks weeks9 = weeks2.plus(weeks8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        boolean boolean14 = weeks11.isLessThan(weeks13);
        org.joda.time.Weeks weeks16 = weeks11.plus(0);
        org.joda.time.Weeks weeks18 = weeks11.plus((-160));
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksIn(readableInterval21);
        boolean boolean23 = weeks20.isLessThan(weeks22);
        org.joda.time.Weeks weeks24 = weeks20.negated();
        org.joda.time.Weeks weeks26 = weeks24.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks33 = weeks30.minus((int) (short) -1);
        org.joda.time.Weeks weeks35 = weeks33.multipliedBy(0);
        boolean boolean36 = weeks26.isGreaterThan(weeks35);
        boolean boolean37 = weeks11.isLessThan(weeks26);
        boolean boolean38 = weeks9.isGreaterThan(weeks26);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType41, chronology42);
        org.joda.time.Duration duration44 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.Period period47 = period43.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Weeks weeks48 = period47.toStandardWeeks();
        org.joda.time.Weeks weeks50 = weeks48.multipliedBy((int) (short) 1);
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period54 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period56 = period54.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks57 = period56.toStandardWeeks();
        org.joda.time.Weeks weeks58 = weeks52.plus(weeks57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((java.lang.Object) weeks57, chronology59);
        boolean boolean61 = weeks50.isLessThan(weeks57);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeksIn(readableInterval62);
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.Weeks weeks65 = org.joda.time.Weeks.weeksIn(readableInterval64);
        boolean boolean66 = weeks63.isLessThan(weeks65);
        org.joda.time.Weeks weeks67 = weeks63.negated();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((java.lang.Object) weeks63, chronology68);
        org.joda.time.Weeks weeks71 = weeks63.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks72 = weeks63.negated();
        boolean boolean73 = weeks50.isLessThan(weeks72);
        org.joda.time.Period period74 = weeks50.toPeriod();
        org.joda.time.Weeks weeks75 = weeks9.plus(weeks50);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(weeks71);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(weeks75);
    }

    @Test
    public void test13628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13628");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 2);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = duration3.toPeriodTo(readableInstant8, periodType10);
        org.joda.time.Duration duration12 = duration3.toDuration();
        org.joda.time.Duration duration13 = duration1.plus((org.joda.time.ReadableDuration) duration12);
        long long14 = duration1.getMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.Days days18 = duration15.toStandardDays();
        boolean boolean19 = duration1.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration21 = duration15.minus((long) 658);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 172800000L + "'", long14 == 172800000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test13629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13629");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        java.lang.String str4 = period3.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P3550W5DT3H14M7S" + "'", str4, "P3550W5DT3H14M7S");
    }

    @Test
    public void test13630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13630");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter14.isParser();
        boolean boolean16 = periodFormatter14.isPrinter();
        java.util.Locale locale17 = null;
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter14.withLocale(locale17);
        boolean boolean19 = periodFormatter14.isPrinter();
        java.io.Writer writer20 = null;
        org.joda.time.Period period22 = org.joda.time.Period.weeks((int) (byte) -1);
        org.joda.time.Period period24 = period22.plusYears((int) (byte) 100);
        org.joda.time.Period period26 = period24.plusMonths(32000);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter14.printTo(writer20, (org.joda.time.ReadablePeriod) period26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test13631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13631");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.Object obj4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(obj4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration5);
        long long8 = duration5.getMillis();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days10 = duration1.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) days10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setHours((int) (short) 100);
        boolean boolean21 = periodType15.equals((java.lang.Object) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.ZERO;
        long long23 = duration22.getStandardDays();
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration22);
        long long25 = duration22.getStandardMinutes();
        org.joda.time.Duration duration27 = duration22.withMillis((long) 0);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant34, readableDuration35);
        mutablePeriod36.setHours((int) (short) 100);
        boolean boolean39 = periodType33.equals((java.lang.Object) mutablePeriod36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.ZERO;
        long long41 = duration40.getStandardDays();
        mutablePeriod36.add((org.joda.time.ReadableDuration) duration40);
        mutablePeriod36.clear();
        org.joda.time.Period period45 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType47 = period45.getFieldType((int) (short) 1);
        mutablePeriod36.set(durationFieldType47, (int) (short) -1);
        mutablePeriod29.set(durationFieldType47, 32);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Duration duration53 = mutablePeriod29.toDurationTo(readableInstant52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        java.lang.Object obj56 = null;
        org.joda.time.Duration duration57 = new org.joda.time.Duration(obj56);
        org.joda.time.Period period58 = new org.joda.time.Period(readableInstant55, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = new org.joda.time.Period(readableInstant54, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.toDuration();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        java.lang.Object obj63 = null;
        org.joda.time.Duration duration64 = new org.joda.time.Duration(obj63);
        org.joda.time.Period period65 = new org.joda.time.Period(readableInstant62, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period(readableInstant61, (org.joda.time.ReadableDuration) duration64);
        int int67 = duration57.compareTo((org.joda.time.ReadableDuration) duration64);
        long long68 = duration57.getStandardSeconds();
        mutablePeriod29.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration70 = duration57.toDuration();
        boolean boolean71 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((-1L));
        long long74 = duration73.getMillis();
        long long75 = duration73.getMillis();
        boolean boolean76 = duration70.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.ReadableDuration readableDuration77 = null;
        boolean boolean78 = duration73.isShorterThan(readableDuration77);
        org.joda.time.Duration duration79 = duration73.toDuration();
        org.joda.time.Chronology chronology80 = null;
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration73, chronology80);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-86400000L) + "'", long74 == (-86400000L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-86400000L) + "'", long75 == (-86400000L));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    public void test13632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13632");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatter12.getPrinter();
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter12.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter15 = periodFormatter12.getPrinter();
        boolean boolean16 = periodFormatter12.isPrinter();
        boolean boolean17 = periodFormatter12.isPrinter();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        org.joda.time.PeriodType periodType20 = periodType18.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter12.withParseType(periodType18);
        java.util.Locale locale22 = periodFormatter21.getLocale();
        boolean boolean23 = periodFormatter21.isParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodPrinter13);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNull(periodPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13633");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 0, periodType1, chronology2);
        mutablePeriod3.setMonths((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setSeconds(75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test13634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13634");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = period1.withSeconds((int) ' ');
        java.lang.String str5 = period1.toString();
        org.joda.time.Period period7 = period1.withYears(0);
        org.joda.time.Period period9 = period1.withYears((int) (byte) -1);
        org.joda.time.Period period11 = period9.plusMinutes(60);
        org.joda.time.Period period13 = period11.plusDays(1);
        org.joda.time.Period period14 = period11.normalizedStandard();
        org.joda.time.Period period16 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.PeriodType periodType18 = days17.getPeriodType();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        mutablePeriod21.setHours((int) (short) 100);
        boolean boolean24 = periodType18.equals((java.lang.Object) mutablePeriod21);
        org.joda.time.Duration duration25 = org.joda.time.Duration.ZERO;
        long long26 = duration25.getStandardDays();
        mutablePeriod21.add((org.joda.time.ReadableDuration) duration25);
        long long28 = duration25.getStandardMinutes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) duration25, chronology29);
        org.joda.time.Period period31 = period11.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period33 = period31.plusMinutes((int) (short) 1);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test13635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13635");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(600L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        boolean boolean8 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant9, periodType10);
        org.joda.time.Duration duration13 = period12.toStandardDuration();
        org.joda.time.Duration duration16 = duration13.withDurationAdded((-60L), (int) (short) 100);
        org.joda.time.Duration duration18 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration13, (-17));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test13636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13636");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeksIn(readableInterval5);
        boolean boolean7 = weeks4.isLessThan(weeks6);
        org.joda.time.Weeks weeks8 = weeks4.negated();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((java.lang.Object) weeks4, chronology9);
        org.joda.time.Weeks weeks12 = weeks4.multipliedBy((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType14 = weeks4.getFieldType(0);
        mutablePeriod2.set(durationFieldType14, (-2));
        mutablePeriod2.add(40, (int) '4', 54, 0, (int) ' ', 13, 25, (int) 'a');
        java.lang.String str26 = mutablePeriod2.toString();
        int int27 = mutablePeriod2.getMillis();
        mutablePeriod2.add(100L);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P40Y52M52WT32H13M25.097S" + "'", str26, "P40Y52M52WT32H13M25.097S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test13637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13637");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatter12.getPrinter();
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter12.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter15 = periodFormatter12.getPrinter();
        boolean boolean16 = periodFormatter12.isPrinter();
        boolean boolean17 = periodFormatter12.isPrinter();
        boolean boolean18 = periodFormatter12.isPrinter();
        java.util.Locale locale19 = periodFormatter12.getLocale();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodPrinter13);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNull(periodPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(locale19);
    }

    @Test
    public void test13638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13638");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Days days11 = days9.minus(3);
        org.joda.time.DurationFieldType durationFieldType12 = days9.getFieldType();
        int int13 = days9.getDays();
        org.joda.time.Days days15 = days9.dividedBy((-20));
        org.joda.time.Period period17 = org.joda.time.Period.weeks(1);
        org.joda.time.Days days18 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days20 = days18.minus(25);
        org.joda.time.Period period21 = period17.plus((org.joda.time.ReadablePeriod) days20);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        boolean boolean29 = days24.isGreaterThan(days27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Days days33 = days27.minus(days32);
        org.joda.time.Period period35 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days36 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Days days38 = days36.minus(10);
        org.joda.time.Days days39 = days27.plus(days36);
        org.joda.time.Days days41 = days39.dividedBy(100);
        org.joda.time.Days days43 = days41.plus((int) (short) 0);
        boolean boolean44 = days20.isLessThan(days43);
        boolean boolean45 = days9.isLessThan(days43);
        org.joda.time.Period period47 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days48 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period50 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days51 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType52 = days51.getPeriodType();
        boolean boolean53 = days48.isGreaterThan(days51);
        int int54 = days48.size();
        org.joda.time.Days days55 = days48.negated();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((java.lang.Object) days55, chronology56);
        org.joda.time.MutablePeriod mutablePeriod58 = period57.toMutablePeriod();
        org.joda.time.Period period59 = period57.normalizedStandard();
        org.joda.time.Period period61 = period57.multipliedBy(8);
        org.joda.time.Days days62 = period61.toStandardDays();
        org.joda.time.Days days63 = org.joda.time.Days.ZERO;
        org.joda.time.Period period65 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days66 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Days days68 = days66.minus(10);
        boolean boolean69 = days63.isGreaterThan(days66);
        org.joda.time.Days days71 = days66.multipliedBy((int) '4');
        org.joda.time.Days days72 = days62.plus(days71);
        boolean boolean73 = days9.isLessThan(days71);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test13639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13639");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 0, 120L);
        int int3 = period2.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
    }

    @Test
    public void test13640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13640");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale14);
        boolean boolean16 = periodFormatter2.isPrinter();
        java.util.Locale locale17 = periodFormatter2.getLocale();
        boolean boolean18 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter19 = periodFormatter2.getPrinter();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(periodPrinter19);
    }

    @Test
    public void test13641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13641");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (-8));
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        boolean boolean8 = minutes6.isLessThan(minutes7);
        boolean boolean9 = minutes2.isLessThan(minutes6);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType11 = minutes10.getPeriodType();
        int int12 = minutes10.getMinutes();
        java.lang.String str13 = minutes10.toString();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType15 = minutes14.getFieldType();
        java.lang.String str16 = minutes14.toString();
        boolean boolean17 = minutes10.isLessThan(minutes14);
        org.joda.time.Minutes minutes19 = minutes14.minus(0);
        int int20 = minutes19.getMinutes();
        org.joda.time.Minutes minutes21 = minutes6.plus(minutes19);
        org.joda.time.Duration duration22 = minutes6.toStandardDuration();
        org.joda.time.Minutes minutes23 = duration22.toStandardMinutes();
        long long24 = duration22.getStandardMinutes();
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration22, chronology25);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0M" + "'", str13, "PT0M");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT-2147483648M" + "'", str16, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2147483648) + "'", int20 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
    }

    @Test
    public void test13642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13642");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.minus(0);
        org.joda.time.Hours hours4 = hours2.multipliedBy((int) (byte) 10);
        org.joda.time.Hours hours6 = hours4.dividedBy((int) 'a');
        int int7 = hours4.getHours();
        org.joda.time.Period period8 = new org.joda.time.Period((java.lang.Object) hours4);
        java.lang.String str9 = hours4.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT40H" + "'", str9, "PT40H");
    }

    @Test
    public void test13643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13643");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("years");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"years\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13644");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy(54);
        org.joda.time.Minutes minutes12 = null;
        boolean boolean13 = minutes11.isGreaterThan(minutes12);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) '#');
        java.lang.String str18 = minutes17.toString();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType20 = minutes19.getPeriodType();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes22 = minutes19.plus(minutes21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.ZERO;
        boolean boolean25 = minutes23.isLessThan(minutes24);
        boolean boolean26 = minutes19.isLessThan(minutes23);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        int int29 = minutes27.getMinutes();
        java.lang.String str30 = minutes27.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = minutes31.getFieldType();
        java.lang.String str33 = minutes31.toString();
        boolean boolean34 = minutes27.isLessThan(minutes31);
        org.joda.time.Minutes minutes36 = minutes31.minus(0);
        int int37 = minutes36.getMinutes();
        org.joda.time.Minutes minutes38 = minutes23.plus(minutes36);
        org.joda.time.Duration duration39 = minutes23.toStandardDuration();
        org.joda.time.Minutes minutes40 = minutes23.negated();
        org.joda.time.Minutes minutes41 = minutes17.minus(minutes23);
        boolean boolean42 = minutes11.isGreaterThan(minutes23);
        org.joda.time.Minutes minutes43 = null;
        org.joda.time.Minutes minutes44 = minutes11.minus(minutes43);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0M" + "'", str18, "PT0M");
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0M" + "'", str30, "PT0M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT-2147483648M" + "'", str33, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-2147483648) + "'", int37 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(minutes44);
    }

    @Test
    public void test13645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13645");
        org.joda.time.Days days0 = org.joda.time.Days.FOUR;
        org.joda.time.Days days2 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.ZERO;
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Days days8 = days6.minus(10);
        boolean boolean9 = days3.isGreaterThan(days6);
        boolean boolean10 = days2.isLessThan(days3);
        org.joda.time.Days days11 = days0.plus(days3);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType19 = days18.getPeriodType();
        boolean boolean20 = days15.isGreaterThan(days18);
        org.joda.time.Period period22 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days23 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Days days24 = days18.minus(days23);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.PeriodType periodType31 = days30.getPeriodType();
        boolean boolean32 = days27.isGreaterThan(days30);
        org.joda.time.Days days34 = days27.minus(1);
        boolean boolean35 = days18.isGreaterThan(days34);
        int int36 = days18.getDays();
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days39 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType43 = days42.getPeriodType();
        boolean boolean44 = days39.isGreaterThan(days42);
        int int45 = days39.size();
        org.joda.time.Days days46 = days39.negated();
        org.joda.time.Days days48 = days46.minus(3);
        org.joda.time.Days days49 = days48.negated();
        boolean boolean50 = days18.isLessThan(days49);
        org.joda.time.Days days51 = days11.plus(days18);
        org.joda.time.Period period52 = days11.toPeriod();
        org.joda.time.Period period54 = period52.minusDays(7);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test13646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13646");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 54, periodType1, chronology2);
        mutablePeriod3.add((-100), (-1), (int) (byte) 10, (int) (byte) -1, 2147482976, 97, 5, (-29));
    }

    @Test
    public void test13647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13647");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) -1, 32, (int) (short) 0, 32, (-1), (int) ' ', (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.toMutablePeriod();
        mutablePeriod9.addHours(32);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod9.copy();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DurationField durationField15 = durationFieldType13.getField(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType13.getField(chronology16);
        mutablePeriod12.add(durationFieldType13, (-672));
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType24 = periodType23.withMonthsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) 0, periodType24, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(4L, (long) 671, periodType24, chronology28);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, readableInstant40, periodType41);
        java.lang.String str43 = duration37.toString();
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration37);
        mutablePeriod12.addWeeks((-32));
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT60S" + "'", str43, "PT60S");
    }

    @Test
    public void test13648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13648");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-2147483648));
        org.joda.time.Period period3 = period1.withMonths(7);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test13649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13649");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Period period10 = duration2.toPeriodTo(readableInstant7, periodType9);
        org.joda.time.Duration duration11 = duration2.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType17 = periodType16.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration20 = duration2.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.toMutablePeriod();
        mutablePeriod22.setPeriod((long) (-2), (long) 3);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutablePeriod22);
    }

    @Test
    public void test13650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13650");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 74);
    }

    @Test
    public void test13651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13651");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.setWeeks((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod6.copy();
        int[] intArray16 = mutablePeriod6.getValues();
        mutablePeriod6.addDays(1);
        int int19 = mutablePeriod6.getMinutes();
        mutablePeriod6.setDays((-2147483648));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 10, 0, 100, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13652");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
        mutablePeriod3.setHours((int) (short) 100);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration7, periodType11);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant14, readableDuration15);
        mutablePeriod16.setHours((int) (short) 100);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration20, chronology21);
        mutablePeriod16.addHours((int) 'a');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        java.lang.Object obj27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(obj27);
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant26, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant25, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.toDuration();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        java.lang.Object obj34 = null;
        org.joda.time.Duration duration35 = new org.joda.time.Duration(obj34);
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration35);
        int int38 = duration28.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration35.toIntervalTo(readableInstant39);
        org.joda.time.Seconds seconds41 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval40);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) interval40);
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval40);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds44);
    }

    @Test
    public void test13653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13653");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) ' ');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodFrom(readableInstant2);
        int int4 = period3.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test13654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13654");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (short) 10);
        org.joda.time.Period period3 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period5 = period3.withHours(32);
        org.joda.time.Period period6 = period3.normalizedStandard();
        org.joda.time.Period period8 = period3.plusHours((int) (short) 1);
        org.joda.time.Period period10 = period3.withYears(52);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setHours((int) (short) 100);
        boolean boolean20 = periodType14.equals((java.lang.Object) mutablePeriod17);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        long long22 = duration21.getStandardDays();
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.PeriodType periodType27 = days26.getPeriodType();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableDuration29);
        mutablePeriod30.setHours((int) (short) 100);
        boolean boolean33 = periodType27.equals((java.lang.Object) mutablePeriod30);
        org.joda.time.Duration duration34 = org.joda.time.Duration.ZERO;
        long long35 = duration34.getStandardDays();
        mutablePeriod30.add((org.joda.time.ReadableDuration) duration34);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weekyears();
        int int42 = period40.get(durationFieldType41);
        int int43 = mutablePeriod30.get(durationFieldType41);
        int int44 = mutablePeriod17.get(durationFieldType41);
        mutablePeriod17.setSeconds(100);
        org.joda.time.PeriodType periodType47 = mutablePeriod17.getPeriodType();
        org.joda.time.Period period48 = period10.normalizedStandard(periodType47);
        org.joda.time.Period period49 = period1.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period51 = period49.plusSeconds(15120008);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test13655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13655");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.seconds(35);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDayTime();
        int int5 = periodType4.size();
        org.joda.time.Period period6 = period3.normalizedStandard(periodType4);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType4);
        mutablePeriod7.setPeriod((long) 15120008);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test13656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13656");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds6 = seconds2.minus(seconds5);
        org.joda.time.Seconds seconds7 = seconds2.negated();
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds10 = seconds7.minus(seconds9);
        java.lang.String str11 = seconds9.toString();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        java.lang.String str14 = seconds12.toString();
        org.joda.time.Seconds seconds16 = seconds12.plus((int) (short) 1);
        boolean boolean17 = seconds9.isGreaterThan(seconds12);
        org.joda.time.Seconds seconds19 = seconds9.multipliedBy((-672));
        org.joda.time.PeriodType periodType20 = seconds19.getPeriodType();
        org.joda.time.Seconds seconds22 = seconds19.dividedBy(10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(seconds22);
    }

    @Test
    public void test13657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13657");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period7 = duration6.toPeriod();
        long long8 = duration6.getStandardSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        java.lang.String str12 = seconds11.toString();
        org.joda.time.PeriodType periodType13 = seconds11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant4, (org.joda.time.ReadableDuration) duration6, periodType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 540000L, periodType13, chronology15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(100L, 2L, periodType13);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod17.setMillis((-940));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60L) + "'", long8 == (-60L));
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT60S" + "'", str12, "PT60S");
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13658");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes2 = minutes0.plus((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes2.plus((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType6 = minutes5.getPeriodType();
        int int7 = minutes5.getMinutes();
        java.lang.String str8 = minutes5.toString();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = minutes9.getFieldType();
        java.lang.String str11 = minutes9.toString();
        boolean boolean12 = minutes5.isLessThan(minutes9);
        int int13 = minutes5.size();
        org.joda.time.Duration duration14 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes15 = minutes5.negated();
        boolean boolean16 = minutes4.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.ZERO;
        boolean boolean19 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes21 = minutes18.plus((int) (byte) 0);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType23 = minutes22.getPeriodType();
        org.joda.time.Minutes minutes24 = minutes21.plus(minutes22);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes28 = minutes26.dividedBy((int) '#');
        org.joda.time.Minutes minutes29 = minutes22.minus(minutes26);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType31 = minutes30.getPeriodType();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes33 = minutes30.plus(minutes32);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        boolean boolean36 = minutes34.isLessThan(minutes35);
        boolean boolean37 = minutes30.isLessThan(minutes34);
        int int38 = minutes30.getMinutes();
        org.joda.time.Minutes minutes39 = minutes29.minus(minutes30);
        org.joda.time.Minutes minutes41 = minutes30.plus((-87));
        boolean boolean42 = minutes4.isGreaterThan(minutes41);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0M" + "'", str8, "PT0M");
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-2147483648M" + "'", str11, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test13659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13659");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setSeconds(8);
        mutablePeriod2.setValue(1, 2);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), (long) ' ');
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        boolean boolean16 = weeks13.isLessThan(weeks15);
        org.joda.time.Weeks weeks17 = weeks13.negated();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) weeks13, chronology18);
        org.joda.time.Weeks weeks21 = weeks13.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration22 = weeks13.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        boolean boolean24 = duration10.equals((java.lang.Object) duration22);
        long long25 = duration22.getStandardDays();
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13660");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period5 = period3.withHours(32);
        org.joda.time.Period period6 = period3.normalizedStandard();
        java.lang.String str7 = period6.toString();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = period6.normalizedStandard(periodType8);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType8);
        mutablePeriod10.setYears((int) '4');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationTo(readableInstant13);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.setWeeks((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.052S" + "'", str7, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration14);
    }

    @Test
    public void test13661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13661");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
        mutablePeriod3.setHours((int) (short) 100);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType13 = seconds12.getFieldType();
        mutablePeriod3.add(durationFieldType13, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setHours((int) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration22, chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        boolean boolean28 = duration22.isEqual(readableDuration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds33 = duration32.toStandardSeconds();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds36 = duration35.toStandardSeconds();
        boolean boolean37 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, readableInstant38, periodType39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration35.toIntervalFrom(readableInstant42);
        org.joda.time.Duration duration44 = duration22.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period46 = duration22.toPeriod();
        org.joda.time.Period period48 = period46.minusDays(75);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test13662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13662");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period2 = org.joda.time.Period.hours((int) 'a');
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period2);
        java.lang.String str4 = period2.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period2.toDurationTo(readableInstant5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration6.toPeriodTo(readableInstant8);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT97H" + "'", str4, "PT97H");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test13663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13663");
        org.joda.time.Period period1 = org.joda.time.Period.hours((-15));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13664");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = minutes10.getFieldType();
        org.joda.time.PeriodType periodType12 = minutes10.getPeriodType();
        org.joda.time.Minutes minutes13 = minutes9.plus(minutes10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes16 = minutes14.dividedBy(7);
        org.joda.time.Duration duration17 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        boolean boolean20 = minutes18.isLessThan(minutes19);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType22 = minutes21.getPeriodType();
        int int23 = minutes21.getMinutes();
        java.lang.String str24 = minutes21.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType26 = minutes25.getFieldType();
        java.lang.String str27 = minutes25.toString();
        boolean boolean28 = minutes21.isLessThan(minutes25);
        org.joda.time.Minutes minutes30 = minutes25.minus(0);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod32);
        boolean boolean34 = minutes25.isGreaterThan(minutes33);
        org.joda.time.Minutes minutes35 = minutes18.minus(minutes33);
        org.joda.time.PeriodType periodType36 = minutes33.getPeriodType();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType38 = minutes37.getPeriodType();
        int int39 = minutes37.getMinutes();
        java.lang.String str40 = minutes37.toString();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = minutes41.getFieldType();
        java.lang.String str43 = minutes41.toString();
        boolean boolean44 = minutes37.isLessThan(minutes41);
        org.joda.time.Duration duration45 = minutes37.toStandardDuration();
        boolean boolean46 = minutes33.isGreaterThan(minutes37);
        boolean boolean47 = minutes14.isGreaterThan(minutes37);
        org.joda.time.Minutes minutes48 = minutes13.minus(minutes14);
        org.joda.time.Duration duration49 = minutes14.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0M" + "'", str24, "PT0M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-2147483648M" + "'", str27, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0M" + "'", str40, "PT0M");
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT-2147483648M" + "'", str43, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test13665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13665");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        long long14 = duration3.getStandardSeconds();
        long long15 = duration3.getMillis();
        org.joda.time.Period period16 = duration3.toPeriod();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Period period20 = period16.withMillis(0);
        org.joda.time.Period period22 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period24 = period22.withMillis((int) (byte) -1);
        org.joda.time.Period period26 = period22.withMillis(0);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period29 = period26.minusDays(0);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withMinutesRemoved();
        org.joda.time.PeriodType periodType32 = periodType30.withYearsRemoved();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType36 = periodType35.withWeeksRemoved();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration34.toPeriod(periodType35, chronology37);
        org.joda.time.Days days39 = org.joda.time.Days.ZERO;
        int int40 = days39.getDays();
        org.joda.time.Period period42 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.PeriodType periodType47 = days46.getPeriodType();
        boolean boolean48 = days43.isGreaterThan(days46);
        org.joda.time.Period period50 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days51 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Days days52 = days46.minus(days51);
        org.joda.time.Days days53 = days39.minus(days46);
        boolean boolean54 = duration34.equals((java.lang.Object) days46);
        org.joda.time.DurationFieldType durationFieldType55 = days46.getFieldType();
        boolean boolean56 = periodType30.isSupported(durationFieldType55);
        org.joda.time.Period period58 = period29.withFieldAdded(durationFieldType55, (int) '4');
        java.lang.String str59 = durationFieldType55.toString();
        org.joda.time.Period period61 = period16.withFieldAdded(durationFieldType55, (int) '4');
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "days" + "'", str59, "days");
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test13666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13666");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration3 = duration1.withMillis(0L);
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
        mutablePeriod10.setHours((int) (short) 100);
        boolean boolean13 = periodType7.equals((java.lang.Object) mutablePeriod10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        long long15 = duration14.getStandardDays();
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration14);
        long long17 = duration14.getStandardMinutes();
        org.joda.time.Duration duration19 = duration14.withMillis((long) 0);
        boolean boolean20 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant21);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13667");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(60000L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Duration duration4 = duration1.withMillis((long) 59);
        long long5 = duration4.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test13668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13668");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType6);
        org.joda.time.PeriodType periodType8 = periodType6.withYearsRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((-2419200L), (long) 4, periodType8, chronology9);
        int[] intArray11 = period10.getValues();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2419204]");
    }

    @Test
    public void test13669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13669");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours3 = hours1.multipliedBy((-1));
        org.joda.time.Hours hours5 = hours3.minus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) hours5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = period7.withDays((-112));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
    }

    @Test
    public void test13670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13670");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        java.lang.String str3 = seconds2.toString();
        org.joda.time.PeriodType periodType4 = seconds2.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.joda.time.PeriodType periodType8 = periodType6.withMinutesRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT60S" + "'", str3, "PT60S");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test13671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13671");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
        org.joda.time.Period period8 = mutablePeriod7.toPeriod();
        org.joda.time.Period period10 = period8.withHours(0);
        int int11 = period8.getWeeks();
        org.joda.time.Period period13 = period8.plusSeconds((int) (byte) 100);
        org.joda.time.Period period15 = period8.withWeeks((int) '#');
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period17 = period8.withPeriodType(periodType16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        org.joda.time.Period period22 = mutablePeriod21.toPeriod();
        org.joda.time.Period period24 = period22.withHours(0);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        int int26 = period22.indexOf(durationFieldType25);
        int int27 = periodType18.indexOf(durationFieldType25);
        boolean boolean28 = periodType16.isSupported(durationFieldType25);
        int int29 = minutes0.get(durationFieldType25);
        java.lang.String str30 = minutes0.toString();
        org.joda.time.Minutes minutes32 = minutes0.multipliedBy(11);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0M" + "'", str30, "PT0M");
        org.junit.Assert.assertNotNull(minutes32);
    }

    @Test
    public void test13672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13672");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration7.toPeriod(periodType8, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.Period period15 = duration7.toPeriodTo(readableInstant12, periodType14);
        org.joda.time.Period period16 = duration7.toPeriod();
        org.joda.time.Duration duration17 = duration3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period18 = duration17.toPeriod();
        long long19 = duration17.getStandardHours();
        org.joda.time.Duration duration21 = org.joda.time.Duration.parse("PT0.052S");
        org.joda.time.Duration duration23 = duration21.minus((long) 'a');
        org.joda.time.Hours hours24 = duration21.toStandardHours();
        int int25 = duration17.compareTo((org.joda.time.ReadableDuration) duration21);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test13673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13673");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(35, (int) '#', (int) (byte) 100, (int) (byte) 0);
        mutablePeriod4.addMonths((int) (byte) 1);
    }

    @Test
    public void test13674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13674");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(2147483647, (int) (byte) 0, 0, 2);
        int int5 = mutablePeriod4.getMillis();
        mutablePeriod4.setDays(75);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test13675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13675");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) '#', 0L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        java.lang.Object obj5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(obj5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration10.toPeriod(periodType11, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType17 = periodType16.withMonthsRemoved();
        org.joda.time.Period period18 = duration10.toPeriodTo(readableInstant15, periodType17);
        org.joda.time.Period period19 = duration10.toPeriod();
        org.joda.time.Duration duration20 = duration6.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration6.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) duration6, chronology22);
        org.joda.time.Period period25 = period23.plusWeeks((int) '4');
        boolean boolean26 = duration2.equals((java.lang.Object) period25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds32 = duration31.toStandardSeconds();
        boolean boolean33 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType36 = periodType35.withMinutesRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, readableInstant34, periodType35);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant38, readableDuration39);
        mutablePeriod40.setHours((int) (short) 100);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration44, chronology45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds49 = duration48.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType50 = seconds49.getFieldType();
        mutablePeriod40.add(durationFieldType50, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant53, readableDuration54);
        mutablePeriod55.setHours((int) (short) 100);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration59, chronology60);
        org.joda.time.Chronology chronology62 = null;
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration59, chronology62);
        int int64 = duration31.compareTo((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration66 = duration59.minus(1L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Duration duration71 = duration68.minus((long) (byte) 10);
        org.joda.time.Duration duration73 = duration68.withMillis((long) (short) -1);
        org.joda.time.Period period74 = duration68.toPeriod();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds77 = duration76.toStandardSeconds();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds80 = duration79.toStandardSeconds();
        boolean boolean81 = duration76.isLongerThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds84 = duration83.toStandardSeconds();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds87 = duration86.toStandardSeconds();
        boolean boolean88 = duration83.isLongerThan((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period89 = duration83.toPeriod();
        boolean boolean90 = duration79.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration91 = duration83.toDuration();
        org.joda.time.Period period92 = duration91.toPeriod();
        boolean boolean93 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration91);
        org.joda.time.Duration duration95 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) '#');
        long long96 = duration68.getStandardDays();
        boolean boolean97 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period98 = duration2.toPeriod();
        org.joda.time.Period period99 = period98.negated();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT600S" + "'", str69, "PT600S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(seconds80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(seconds84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(seconds87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test13676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13676");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        boolean boolean4 = duration1.equals((java.lang.Object) 100.0d);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        boolean boolean15 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        boolean boolean30 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period31 = duration25.toPeriod();
        boolean boolean32 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = duration34.toPeriodTo(readableInstant36);
        org.joda.time.Duration duration38 = period37.toStandardDuration();
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration40 = duration25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType43);
        int int45 = period44.getMillis();
        org.joda.time.Period period47 = period44.plusDays((int) 'a');
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds50 = duration49.toStandardSeconds();
        java.lang.String str51 = seconds50.toString();
        org.joda.time.PeriodType periodType52 = seconds50.getPeriodType();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.PeriodType periodType54 = periodType53.withDaysRemoved();
        org.joda.time.Period period55 = period47.normalizedStandard(periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant16, (org.joda.time.ReadableDuration) duration25, periodType54);
        long long57 = duration25.getStandardDays();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant58);
        boolean boolean60 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 25 + "'", int45 == 25);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT60S" + "'", str51, "PT60S");
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test13677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13677");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (-39648));
        long long2 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-2378880000L) + "'", long2 == (-2378880000L));
    }

    @Test
    public void test13678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13678");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 0, periodType1, chronology2);
        mutablePeriod3.add(2L);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.add((long) (-999), chronology7);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test13679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13679");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter6.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter10 = null;
        org.joda.time.format.PeriodParser periodParser11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = new org.joda.time.format.PeriodFormatter(periodPrinter10, periodParser11);
        org.joda.time.format.PeriodParser periodParser13 = periodFormatter12.getParser();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType17 = seconds16.getFieldType();
        org.joda.time.Seconds seconds19 = seconds16.plus(25);
        org.joda.time.Seconds seconds20 = seconds16.negated();
        org.joda.time.PeriodType periodType21 = seconds20.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter12.withParseType(periodType21);
        org.joda.time.PeriodType periodType23 = periodType21.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter6.withParseType(periodType21);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = period29.withSeconds((int) ' ');
        org.joda.time.Period period33 = period26.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period35 = period26.plusHours((-1));
        org.joda.time.Period period37 = period26.withDays((int) 'a');
        org.joda.time.Period period39 = period37.withSeconds(52);
        int int40 = period37.getMillis();
        org.joda.time.Period period42 = period37.minusYears(0);
        int int43 = period37.getYears();
        org.joda.time.Period period45 = period37.plusMinutes(60);
        org.joda.time.Period period47 = period45.plusMillis((int) (byte) 10);
        org.joda.time.Duration duration48 = period45.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = periodFormatter6.print((org.joda.time.ReadablePeriod) period45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNull(periodParser13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test13680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13680");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMonths((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod1.toDurationTo(readableInstant4);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(periodType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration5.toPeriod(periodType6, chronology8);
        java.lang.String str10 = period9.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period14 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType16 = period14.getFieldType((int) (short) 1);
        org.joda.time.Period period18 = period14.plusDays(10);
        boolean boolean19 = periodType12.equals((java.lang.Object) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) ' ', periodType12);
        org.joda.time.PeriodType periodType21 = periodType12.withMinutesRemoved();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period9, periodType21, chronology22);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P-28D" + "'", str10, "P-28D");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test13681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13681");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        java.lang.Object obj7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(obj7);
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableDuration) duration8);
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant5, (org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration11);
        boolean boolean13 = duration1.equals((java.lang.Object) readableInstant4);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration16 = seconds15.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType17 = seconds15.getFieldType();
        org.joda.time.PeriodType periodType18 = seconds15.getPeriodType();
        org.joda.time.Period period19 = duration1.toPeriodTo(readableInstant14, periodType18);
        org.joda.time.Seconds seconds20 = duration1.toStandardSeconds();
        long long21 = duration1.getStandardHours();
        org.joda.time.Duration duration23 = duration1.minus((long) 100);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Seconds seconds27 = duration25.toStandardSeconds();
        java.lang.String str28 = duration25.toString();
        int int29 = duration1.compareTo((org.joda.time.ReadableDuration) duration25);
        long long30 = duration25.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-60S" + "'", str28, "PT-60S");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60000L) + "'", long30 == (-60000L));
    }

    @Test
    public void test13682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13682");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 1, 596, 990, (-8), 15120008, 52, (-39648), 2);
        org.joda.time.Period period10 = period8.minusMonths(107);
        org.joda.time.Period period12 = period10.minusYears(23);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test13683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13683");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration2.toPeriod(periodType3, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Period period10 = duration2.toPeriodTo(readableInstant7, periodType9);
        org.joda.time.Minutes minutes11 = duration2.toStandardMinutes();
        java.lang.String str12 = duration2.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        mutablePeriod13.addSeconds((-1));
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-60S" + "'", str12, "PT-60S");
    }

    @Test
    public void test13684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13684");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant12, periodType13);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period18 = duration9.toPeriod(periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
        mutablePeriod22.setHours((int) (short) 100);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration26, chronology27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant19, (org.joda.time.ReadableDuration) duration26, periodType30);
        org.joda.time.Period period33 = duration9.toPeriod(periodType30);
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter2.withParseType(periodType30);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType37 = periodType36.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withMinutesRemoved();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (short) 0, periodType37, chronology39);
        org.joda.time.PeriodType periodType41 = periodType37.withMinutesRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter2.withParseType(periodType42);
        java.util.Locale locale44 = null;
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter43.withLocale(locale44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = periodFormatter45.parsePeriod("PT-3180S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodFormatter45);
    }

    @Test
    public void test13685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13685");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        boolean boolean2 = minutes0.isLessThan(minutes1);
        org.joda.time.Minutes minutes4 = minutes1.multipliedBy((int) (short) 10);
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        org.joda.time.Duration duration6 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes7 = minutes4.negated();
        org.joda.time.Minutes minutes9 = minutes4.dividedBy(2400);
        org.joda.time.Minutes minutes10 = null;
        boolean boolean11 = minutes9.isLessThan(minutes10);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13686");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, 864000000L);
        org.joda.time.Period period4 = period2.minusHours(5);
        org.joda.time.Hours hours5 = period4.toStandardHours();
        java.lang.String str6 = hours5.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT234H" + "'", str6, "PT234H");
    }

    @Test
    public void test13687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13687");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) days9, chronology10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period13 = period11.normalizedStandard();
        org.joda.time.Period period15 = period11.multipliedBy(8);
        org.joda.time.Days days16 = period15.toStandardDays();
        org.joda.time.Days days18 = days16.multipliedBy(40);
        int int19 = days18.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13688");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (short) 0);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13689");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        long long14 = duration3.getStandardSeconds();
        long long15 = duration3.getMillis();
        org.joda.time.Period period16 = duration3.toPeriod();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant17, readableDuration18);
        org.joda.time.Period period20 = mutablePeriod19.toPeriod();
        org.joda.time.Period period22 = period20.withHours(0);
        int int23 = period20.getWeeks();
        org.joda.time.Period period25 = period20.plusSeconds((int) (byte) 100);
        org.joda.time.Period period27 = period20.withWeeks((int) '#');
        org.joda.time.PeriodType periodType28 = period20.getPeriodType();
        int int29 = periodType28.size();
        org.joda.time.Period period30 = period16.withPeriodType(periodType28);
        org.joda.time.Period period32 = period16.plusHours(54);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test13690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13690");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period7 = period2.minusHours(3);
        org.joda.time.Period period9 = period7.withMonths((int) (byte) 0);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test13691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13691");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.joda.time.Seconds seconds10 = seconds7.plus(25);
        org.joda.time.Seconds seconds11 = seconds7.negated();
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter3.withParseType(periodType12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        boolean boolean15 = periodFormatter13.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter13.getPrinter();
        boolean boolean17 = periodFormatter13.isParser();
        org.joda.time.PeriodType periodType18 = periodFormatter13.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod19 = org.joda.time.MutablePeriod.parse("PT3M60S", periodFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(periodPrinter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test13692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13692");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        long long2 = duration1.getStandardDays();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        org.joda.time.Duration duration5 = duration1.withMillis(0L);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration1);
        org.joda.time.Period period8 = period6.withDays((int) (short) 0);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 671, (-539000L));
        boolean boolean12 = period8.equals((java.lang.Object) 671);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13693");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(obj3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration4.toDuration();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        java.lang.Object obj10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(obj10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration11);
        int int14 = duration4.compareTo((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration11.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = duration11.toPeriod();
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.parseWeeks("P1W");
        org.joda.time.PeriodType periodType20 = weeks19.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration11, periodType20);
        mutablePeriod22.setWeeks(59);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.setMinutes((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test13694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13694");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.joda.time.Seconds seconds10 = seconds7.plus(25);
        org.joda.time.Seconds seconds11 = seconds7.negated();
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter3.withParseType(periodType12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodParser periodParser15 = periodFormatter13.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter13.getPrinter();
        boolean boolean17 = periodFormatter13.isParser();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((-60L), (long) 32, chronology20);
        org.joda.time.Period period23 = period21.withHours((int) (short) -1);
        org.joda.time.Period period25 = period21.plusSeconds(0);
        org.joda.time.Period period27 = period21.plusHours(0);
        org.joda.time.Period period32 = new org.joda.time.Period((int) (byte) 0, 13, 8, 10);
        int int33 = period32.size();
        org.joda.time.Period period35 = period32.minusMillis((-2));
        org.joda.time.PeriodType periodType36 = period35.getPeriodType();
        org.joda.time.Period period37 = period21.normalizedStandard(periodType36);
        org.joda.time.PeriodType periodType38 = periodType36.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter13.withParseType(periodType36);
        org.joda.time.PeriodType periodType40 = periodType36.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period(360000000L, periodType36);
        org.joda.time.Period period43 = period41.minusMonths(900);
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(periodPrinter14);
        org.junit.Assert.assertNull(periodParser15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test13695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13695");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusHours((int) (short) 1);
        org.joda.time.Period period8 = period3.plusMonths(32);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period3.toDurationFrom(readableInstant9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration10.toPeriodTo(readableInstant12);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13696");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(21168000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = weeks1.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 21168000 * 10080");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test13697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13697");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter2.getParser();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = duration8.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType14 = minutes13.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Period period16 = duration11.toPeriodFrom(readableInstant12, periodType14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 0, (long) 3, periodType14);
        org.joda.time.PeriodType periodType18 = periodType14.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withParseType(periodType18);
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter2.withLocale(locale20);
        boolean boolean22 = periodFormatter21.isParser();
        java.lang.Object obj23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType25 = periodType24.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj23, periodType24);
        mutablePeriod26.add((-84326300L));
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        boolean boolean35 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        boolean boolean42 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period43 = duration37.toPeriod();
        boolean boolean44 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = duration33.toPeriodTo(readableInstant45);
        long long47 = duration33.getStandardDays();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period50 = duration49.toPeriod();
        long long51 = duration49.getStandardSeconds();
        boolean boolean52 = duration33.isEqual((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str55 = duration54.toString();
        org.joda.time.Duration duration57 = duration54.minus((long) (byte) 10);
        boolean boolean58 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, readableInstant59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration57.isEqual(readableDuration61);
        java.lang.String str63 = duration57.toString();
        mutablePeriod26.add((org.joda.time.ReadableDuration) duration57);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = periodFormatter21.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod26, "Seconds", (-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT600S" + "'", str9, "PT600S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60L) + "'", long51 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT600S" + "'", str55, "PT600S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT599.990S" + "'", str63, "PT599.990S");
    }

    @Test
    public void test13698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13698");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant10, readableDuration11);
        org.joda.time.Period period13 = mutablePeriod12.toPeriod();
        org.joda.time.Period period15 = period13.withHours(0);
        org.joda.time.Hours hours16 = period15.toStandardHours();
        org.joda.time.Hours hours17 = hours9.minus(hours16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType22);
        org.joda.time.Hours hours24 = period23.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType25 = hours24.getFieldType();
        boolean boolean26 = hours16.isLessThan(hours24);
        org.joda.time.Hours hours27 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours28 = hours27.negated();
        org.joda.time.Hours hours29 = org.joda.time.Hours.ONE;
        boolean boolean30 = hours28.isLessThan(hours29);
        org.joda.time.DurationFieldType durationFieldType31 = hours28.getFieldType();
        org.joda.time.Hours hours32 = hours16.minus(hours28);
        org.joda.time.Hours hours34 = hours16.minus(0);
        org.joda.time.Hours hours36 = hours16.dividedBy((-20));
        org.joda.time.Hours hours38 = hours36.minus((-2147483647));
        // The following exception was thrown during execution in test generation
        try {
            int int40 = hours38.getValue((-29));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -29");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(hours38);
    }

    @Test
    public void test13699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13699");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("P2W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P2W\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13700");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks2 = weeks0.plus(2);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test13701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13701");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        java.lang.String str5 = seconds4.toString();
        org.joda.time.PeriodType periodType6 = seconds4.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withDaysRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        java.lang.String str11 = periodType9.toString();
        org.joda.time.PeriodType periodType12 = periodType9.withDaysRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 11, 600000L, periodType9);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT60S" + "'", str5, "PT60S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PeriodType[SecondsNoSeconds]" + "'", str11, "PeriodType[SecondsNoSeconds]");
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test13702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13702");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withYearsRemoved();
        java.lang.String str4 = periodType3.toString();
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(60000L, periodType3, chronology6);
        int int8 = mutablePeriod7.getYears();
        mutablePeriod7.add(1040400L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Millis]" + "'", str4, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13703");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days2 = days0.minus(25);
        org.joda.time.Days days3 = days2.negated();
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        org.joda.time.Days days5 = org.joda.time.Days.ZERO;
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Days days11 = days9.minus(10);
        boolean boolean12 = days6.isGreaterThan(days9);
        org.joda.time.Days days13 = days5.minus(days6);
        org.joda.time.Days days15 = days13.plus(658);
        org.joda.time.Days days17 = days13.dividedBy((-1073741824));
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period22 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days23 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType24 = days23.getPeriodType();
        boolean boolean25 = days20.isGreaterThan(days23);
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Days days29 = days23.minus(days28);
        org.joda.time.Period period31 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days32 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period34 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days35 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period34);
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        boolean boolean37 = days32.isGreaterThan(days35);
        org.joda.time.Days days39 = days32.minus(1);
        boolean boolean40 = days23.isGreaterThan(days39);
        int int41 = days23.getDays();
        org.joda.time.Period period43 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period46 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days47 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType48 = days47.getPeriodType();
        boolean boolean49 = days44.isGreaterThan(days47);
        int int50 = days44.size();
        org.joda.time.Days days51 = days44.negated();
        org.joda.time.Days days53 = days51.minus(3);
        org.joda.time.Days days54 = days53.negated();
        boolean boolean55 = days23.isLessThan(days54);
        org.joda.time.Period period57 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days58 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days61 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period60);
        org.joda.time.PeriodType periodType62 = days61.getPeriodType();
        boolean boolean63 = days58.isGreaterThan(days61);
        org.joda.time.Period period65 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days66 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Days days67 = days61.minus(days66);
        int int68 = days61.size();
        org.joda.time.Days days69 = org.joda.time.Days.ZERO;
        org.joda.time.Period period71 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days72 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Days days74 = days72.minus(10);
        boolean boolean75 = days69.isGreaterThan(days72);
        org.joda.time.Days days76 = days61.minus(days72);
        org.joda.time.Days days77 = days54.plus(days72);
        org.joda.time.Days days78 = days13.plus(days54);
        org.joda.time.Days days79 = null;
        org.joda.time.Days days80 = days54.minus(days79);
        boolean boolean81 = days3.isGreaterThan(days80);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(days77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test13704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13704");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        boolean boolean4 = duration1.equals((java.lang.Object) 100.0d);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        boolean boolean15 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration9);
        java.lang.String str16 = duration1.toString();
        long long17 = duration1.getMillis();
        java.lang.String str18 = duration1.toString();
        java.lang.String str19 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT600S" + "'", str16, "PT600S");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 600000L + "'", long17 == 600000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT600S" + "'", str18, "PT600S");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT600S" + "'", str19, "PT600S");
    }

    @Test
    public void test13705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13705");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT100H");
        org.joda.time.Period period3 = period1.multipliedBy((int) '4');
        org.joda.time.Period period5 = period3.minusMillis((-12));
        int int6 = period3.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test13706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13706");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration4 = duration2.withMillis(0L);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period8 = period6.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks9 = period8.toStandardWeeks();
        org.joda.time.Duration duration10 = weeks9.toStandardDuration();
        org.joda.time.Period period11 = duration10.toPeriod();
        long long12 = duration10.getStandardMinutes();
        boolean boolean13 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration10);
        mutablePeriod14.addMonths(3);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test13707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13707");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesIn(readableInterval1);
        java.lang.String str3 = minutes2.toString();
        org.joda.time.Minutes minutes5 = minutes2.plus(2);
        org.joda.time.Minutes minutes7 = minutes2.multipliedBy(4);
        org.joda.time.Minutes minutes8 = null;
        org.joda.time.Minutes minutes9 = minutes7.minus(minutes8);
        org.joda.time.PeriodType periodType10 = minutes9.getPeriodType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(780L, periodType10, chronology11);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test13708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13708");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours11 = hours9.plus((int) (short) 10);
        org.joda.time.Hours hours12 = hours9.negated();
        org.joda.time.Duration duration13 = hours9.toStandardDuration();
        org.joda.time.Hours hours15 = org.joda.time.Hours.parseHours("PT0H");
        boolean boolean16 = hours9.isGreaterThan(hours15);
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        long long18 = duration17.getStandardDays();
        org.joda.time.Hours hours19 = duration17.toStandardHours();
        org.joda.time.Hours hours20 = hours19.negated();
        org.joda.time.Hours hours22 = hours20.plus((int) '#');
        org.joda.time.Duration duration23 = hours22.toStandardDuration();
        org.joda.time.Hours hours24 = hours15.minus(hours22);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
    }

    @Test
    public void test13709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13709");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        java.lang.String str6 = seconds5.toString();
        org.joda.time.PeriodType periodType7 = seconds5.getPeriodType();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 2, periodType9);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType9);
        org.joda.time.Duration duration14 = period13.toStandardDuration();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT60S" + "'", str6, "PT60S");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration14);
    }

    @Test
    public void test13710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13710");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter6.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter10 = null;
        org.joda.time.format.PeriodParser periodParser11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = new org.joda.time.format.PeriodFormatter(periodPrinter10, periodParser11);
        org.joda.time.format.PeriodParser periodParser13 = periodFormatter12.getParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.PeriodType periodType17 = periodFormatter15.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter18 = periodFormatter15.getPrinter();
        java.util.Locale locale19 = periodFormatter15.getLocale();
        org.joda.time.PeriodType periodType20 = periodFormatter15.getParseType();
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.Hours hours24 = duration21.toStandardHours();
        java.lang.Object obj25 = null;
        boolean boolean26 = hours24.equals(obj25);
        org.joda.time.PeriodType periodType27 = hours24.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter15.withParseType(periodType27);
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter6.withParseType(periodType27);
        java.lang.StringBuffer stringBuffer30 = null;
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType32 = minutes31.getPeriodType();
        int int33 = minutes31.getMinutes();
        java.lang.String str34 = minutes31.toString();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType36 = minutes35.getFieldType();
        java.lang.String str37 = minutes35.toString();
        boolean boolean38 = minutes31.isLessThan(minutes35);
        org.joda.time.Minutes minutes39 = minutes31.negated();
        org.joda.time.DurationFieldType durationFieldType40 = minutes31.getFieldType();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesIn(readableInterval41);
        java.lang.String str43 = minutes42.toString();
        boolean boolean44 = minutes31.isLessThan(minutes42);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        org.joda.time.Minutes minutes47 = minutes45.plus(13);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter6.printTo(stringBuffer30, (org.joda.time.ReadablePeriod) minutes45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodParser9);
        org.junit.Assert.assertNull(periodParser13);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNull(periodType17);
        org.junit.Assert.assertNull(periodPrinter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNull(periodType20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0M" + "'", str34, "PT0M");
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT-2147483648M" + "'", str37, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0M" + "'", str43, "PT0M");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
    }

    @Test
    public void test13711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13711");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        org.joda.time.Hours hours6 = period3.toStandardHours();
        org.joda.time.Period period8 = period3.minusMinutes((int) (short) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration13.toPeriod(periodType14, chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType20 = periodType19.withMonthsRemoved();
        org.joda.time.Period period21 = duration13.toPeriodTo(readableInstant18, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        java.lang.Object obj26 = null;
        org.joda.time.Duration duration27 = new org.joda.time.Duration(obj26);
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant24, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Duration duration31 = org.joda.time.Duration.ZERO;
        long long32 = duration31.getStandardDays();
        org.joda.time.Hours hours33 = duration31.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType34 = hours33.getFieldType();
        boolean boolean35 = periodType30.isSupported(durationFieldType34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant23, (org.joda.time.ReadableDuration) duration27, periodType30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant22, periodType30);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(84326400L, periodType30);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(10L, (-3600L), periodType30, chronology39);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) period3, periodType30);
        org.joda.time.Hours hours42 = period41.toStandardHours();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(hours42);
    }

    @Test
    public void test13712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13712");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = days14.minus(10);
        org.joda.time.Days days17 = days5.plus(days14);
        org.joda.time.Days days19 = days17.dividedBy(100);
        org.joda.time.Days days21 = days19.multipliedBy(13);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period26.withSeconds((int) ' ');
        org.joda.time.Period period30 = period23.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType32 = periodType31.withMonthsRemoved();
        org.joda.time.Period period33 = period30.withPeriodType(periodType31);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Days days35 = days21.plus(days34);
        org.joda.time.PeriodType periodType36 = days34.getPeriodType();
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days39 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType43 = days42.getPeriodType();
        boolean boolean44 = days39.isGreaterThan(days42);
        org.joda.time.MutablePeriod mutablePeriod45 = days39.toMutablePeriod();
        org.joda.time.Days days47 = org.joda.time.Days.days(32);
        org.joda.time.Days days48 = org.joda.time.Days.ZERO;
        int int49 = days48.getDays();
        org.joda.time.Period period51 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days52 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period54 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days55 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period54);
        org.joda.time.PeriodType periodType56 = days55.getPeriodType();
        boolean boolean57 = days52.isGreaterThan(days55);
        org.joda.time.Period period59 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days60 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Days days61 = days55.minus(days60);
        org.joda.time.Days days62 = days48.minus(days55);
        java.lang.String str63 = days62.toString();
        org.joda.time.Days days64 = days47.minus(days62);
        org.joda.time.Days days66 = days64.dividedBy(60);
        org.joda.time.Days days68 = days64.minus(8);
        org.joda.time.Days days70 = days68.dividedBy((-87));
        org.joda.time.Days days71 = days39.minus(days68);
        org.joda.time.Days days72 = days71.negated();
        org.joda.time.Days days73 = days34.plus(days72);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P0D" + "'", str63, "P0D");
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(days73);
    }

    @Test
    public void test13713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13713");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType6 = periodType4.getFieldType(2);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.Period period8 = new org.joda.time.Period((-539000L), 194400000L, periodType4);
        int int9 = period8.getMonths();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13714");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withMonthsRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((-60001L), periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(100000L, periodType3, chronology7);
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        org.joda.time.Period period10 = period8.negated();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Seconds seconds14 = duration12.toStandardSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = seconds17.getFieldType();
        org.joda.time.Seconds seconds20 = seconds17.plus(25);
        boolean boolean21 = seconds14.isLessThan(seconds20);
        org.joda.time.Seconds seconds22 = seconds20.negated();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        java.lang.String str26 = seconds25.toString();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType30 = seconds29.getFieldType();
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds33 = seconds29.minus(seconds32);
        org.joda.time.Seconds seconds34 = seconds29.negated();
        java.lang.String str35 = seconds34.toString();
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) seconds34);
        org.joda.time.Duration duration37 = seconds36.toStandardDuration();
        boolean boolean38 = seconds25.isGreaterThan(seconds36);
        org.joda.time.Seconds seconds39 = seconds22.minus(seconds25);
        org.joda.time.Seconds seconds40 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType41 = seconds40.getPeriodType();
        java.lang.String str42 = seconds40.toString();
        org.joda.time.Seconds seconds44 = seconds40.plus((int) (short) 1);
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType48 = seconds47.getFieldType();
        boolean boolean49 = seconds46.isGreaterThan(seconds47);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod52.addYears((int) '4');
        org.joda.time.Chronology chronology56 = null;
        mutablePeriod52.add((long) 100, chronology56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds60 = duration59.toStandardSeconds();
        java.lang.String str61 = seconds60.toString();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        boolean boolean63 = seconds60.isSupported(durationFieldType62);
        int int64 = mutablePeriod52.get(durationFieldType62);
        boolean boolean65 = seconds47.isSupported(durationFieldType62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) seconds47, chronology66);
        boolean boolean68 = seconds40.isLessThan(seconds47);
        org.joda.time.PeriodType periodType69 = seconds40.getPeriodType();
        org.joda.time.Seconds seconds70 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration71 = seconds70.toStandardDuration();
        boolean boolean72 = seconds40.isLessThan(seconds70);
        org.joda.time.Seconds seconds73 = seconds25.plus(seconds40);
        org.joda.time.PeriodType periodType74 = seconds40.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period75 = new org.joda.time.Period((java.lang.Object) period10, periodType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT60S" + "'", str26, "PT60S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT-60S" + "'", str35, "PT-60S");
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT60S" + "'", str61, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(seconds70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(seconds73);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test13715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13715");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(obj0, periodType1, chronology2);
        mutablePeriod3.addMinutes(10);
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        int int7 = days6.getDays();
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        boolean boolean15 = days10.isGreaterThan(days13);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days19 = days13.minus(days18);
        org.joda.time.Days days20 = days6.minus(days13);
        org.joda.time.Days days22 = days13.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType24 = days22.getFieldType((int) (short) 0);
        org.joda.time.Days days25 = org.joda.time.Days.ZERO;
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Days days30 = days28.minus(10);
        boolean boolean31 = days25.isGreaterThan(days28);
        org.joda.time.Days days32 = days22.plus(days25);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType34 = days32.getFieldType();
        mutablePeriod3.add(durationFieldType34, 416);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(durationFieldType34);
    }

    @Test
    public void test13716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13716");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Duration duration4 = period3.toStandardDuration();
        org.joda.time.Duration duration7 = duration4.withDurationAdded((long) 2, (int) (short) 10);
        org.joda.time.Duration duration8 = duration4.toDuration();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test13717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13717");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 0, (long) 2, chronology2);
        mutablePeriod3.add((long) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutablePeriod3.setPeriod(readableInstant6, readableInstant7);
        mutablePeriod3.setMillis((int) (byte) 1);
        java.lang.Object obj11 = mutablePeriod3.clone();
        org.joda.time.format.PeriodPrinter periodPrinter12 = null;
        org.joda.time.format.PeriodParser periodParser13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = new org.joda.time.format.PeriodFormatter(periodPrinter12, periodParser13);
        org.joda.time.format.PeriodParser periodParser15 = periodFormatter14.getParser();
        java.util.Locale locale16 = periodFormatter14.getLocale();
        org.joda.time.PeriodType periodType17 = periodFormatter14.getParseType();
        java.util.Locale locale18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter14.withLocale(locale18);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant24, readableDuration25);
        mutablePeriod26.setHours((int) (short) 100);
        boolean boolean29 = periodType23.equals((java.lang.Object) mutablePeriod26);
        org.joda.time.PeriodType periodType30 = periodType23.withYearsRemoved();
        int int31 = periodType30.size();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter19.withParseType(periodType30);
        org.joda.time.Days days33 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days35 = days33.minus(25);
        org.joda.time.Days days36 = days35.negated();
        org.joda.time.Days days37 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days39 = days37.minus(25);
        org.joda.time.Days days40 = days39.negated();
        org.joda.time.Days days41 = days35.plus(days40);
        java.lang.String str42 = days41.toString();
        org.joda.time.DurationFieldType durationFieldType43 = days41.getFieldType();
        boolean boolean44 = periodType30.isSupported(durationFieldType43);
        int int45 = mutablePeriod3.indexOf(durationFieldType43);
        java.lang.String str46 = durationFieldType43.toString();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.001S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.001S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.001S");
        org.junit.Assert.assertNull(periodParser15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNull(periodType17);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "P0D" + "'", str42, "P0D");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "days" + "'", str46, "days");
    }

    @Test
    public void test13718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13718");
        org.joda.time.Period period1 = org.joda.time.Period.millis(600);
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType3 = seconds2.getPeriodType();
        java.lang.String str4 = seconds2.toString();
        java.lang.String str5 = seconds2.toString();
        org.joda.time.Seconds seconds6 = null;
        org.joda.time.Seconds seconds7 = seconds2.minus(seconds6);
        org.joda.time.Seconds seconds9 = seconds7.plus((-672));
        org.joda.time.Seconds seconds10 = seconds9.negated();
        org.joda.time.DurationFieldType durationFieldType11 = seconds9.getFieldType();
        org.joda.time.Period period13 = period1.withFieldAdded(durationFieldType11, (-4));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13719");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Days days2 = days0.minus((-32));
        org.joda.time.Days days4 = days2.minus(600);
        org.joda.time.Days days5 = days4.negated();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
    }

    @Test
    public void test13720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13720");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks11 = weeks9.multipliedBy((int) (short) -1);
        org.joda.time.PeriodType periodType12 = weeks11.getPeriodType();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        boolean boolean17 = weeks14.isLessThan(weeks16);
        org.joda.time.Weeks weeks18 = weeks14.negated();
        org.joda.time.Weeks weeks20 = weeks18.minus((int) (byte) 100);
        org.joda.time.Weeks weeks22 = weeks18.minus((int) (short) 10);
        boolean boolean23 = weeks11.isLessThan(weeks22);
        int int24 = weeks22.size();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test13721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13721");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, (-24L));
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        org.joda.time.Period period7 = period4.normalizedStandard();
        java.lang.String str8 = period7.toString();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = durationFieldType9.isSupported(chronology10);
        org.joda.time.Period period13 = period7.withFieldAdded(durationFieldType9, 13);
        org.joda.time.Period period15 = period7.minusMillis(658);
        int int16 = period7.getWeeks();
        mutablePeriod2.add((org.joda.time.ReadablePeriod) period7);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.052S" + "'", str8, "PT0.052S");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test13722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13722");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        mutablePeriod4.setMinutes(8);
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        boolean boolean13 = weeks10.isLessThan(weeks12);
        org.joda.time.Weeks weeks14 = weeks10.negated();
        org.joda.time.MutablePeriod mutablePeriod15 = weeks14.toMutablePeriod();
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod15.setPeriod((long) 13, 0L, chronology18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        boolean boolean24 = weeks21.isLessThan(weeks23);
        org.joda.time.Weeks weeks25 = weeks21.negated();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) weeks21, chronology26);
        org.joda.time.Weeks weeks29 = weeks21.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration30 = weeks21.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.Chronology chronology32 = null;
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration30, chronology32);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration30);
        int int35 = mutablePeriod4.getSeconds();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test13723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13723");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 0, (long) 2, chronology2);
        mutablePeriod3.add((long) (byte) -1);
        java.lang.String str6 = mutablePeriod3.toString();
        java.lang.Object obj7 = mutablePeriod3.clone();
        int int8 = mutablePeriod3.getSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.parse("PT0.052S");
        org.joda.time.Duration duration12 = duration10.minus((long) 'a');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod14.addMonths((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationTo(readableInstant17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        boolean boolean32 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period33 = duration27.toPeriod();
        boolean boolean34 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = duration23.toPeriodTo(readableInstant35);
        long long37 = duration23.getStandardDays();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period40 = duration39.toPeriod();
        long long41 = duration39.getStandardSeconds();
        boolean boolean42 = duration23.isEqual((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds45 = duration44.toStandardSeconds();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds48 = duration47.toStandardSeconds();
        boolean boolean49 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType52 = periodType51.withMinutesRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration47, readableInstant50, periodType51);
        boolean boolean54 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Seconds seconds55 = duration47.toStandardSeconds();
        boolean boolean56 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration47);
        long long57 = duration18.getStandardSeconds();
        boolean boolean58 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.001S" + "'", str6, "PT0.001S");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.044S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.044S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.044S");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60L) + "'", long41 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-2419200L) + "'", long57 == (-2419200L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13724");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, 864000000L);
        org.joda.time.Period period4 = period2.minusHours(5);
        org.joda.time.Hours hours5 = period4.toStandardHours();
        org.joda.time.Period period7 = period4.withYears((-302));
        org.joda.time.Period period9 = period4.withWeeks(8744020);
        int int10 = period4.getMonths();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13725");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = period8.withPeriodType(periodType9);
        org.joda.time.Period period13 = period11.plusWeeks((int) (byte) 0);
        org.joda.time.Period period15 = period11.multipliedBy((int) (short) 0);
        int int16 = period11.getMonths();
        org.joda.time.Period period18 = period11.minusMonths((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period18.withMillis((-609));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test13726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13726");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 100, (int) '#', 100);
        org.joda.time.Period period6 = period4.plusSeconds(13);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period4.toDurationFrom(readableInstant7);
        int int9 = period4.getMillis();
        org.joda.time.Period period11 = period4.plusDays((-58));
        org.joda.time.Period period13 = period11.withSeconds(38);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13727");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(32);
        org.joda.time.PeriodType periodType2 = seconds1.getPeriodType();
        org.joda.time.Seconds seconds4 = seconds1.minus(7);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(seconds4);
    }

    @Test
    public void test13728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13728");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(52);
        org.joda.time.Period period3 = period1.withHours(0);
        org.joda.time.Period period5 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period7 = period5.minusMinutes(32);
        org.joda.time.Period period9 = period5.minusMonths((int) (short) 0);
        org.joda.time.Period period10 = period9.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = period10.getValue(125);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 125");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test13729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13729");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Days days11 = days5.minus(days10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.PeriodType periodType18 = days17.getPeriodType();
        boolean boolean19 = days14.isGreaterThan(days17);
        org.joda.time.Days days21 = days14.minus(1);
        boolean boolean22 = days5.isGreaterThan(days21);
        org.joda.time.Days days24 = org.joda.time.Days.days(32);
        boolean boolean25 = days21.isLessThan(days24);
        org.joda.time.Period period27 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days28 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days31 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType32 = days31.getPeriodType();
        boolean boolean33 = days28.isGreaterThan(days31);
        org.joda.time.Period period35 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days36 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Days days37 = days31.minus(days36);
        int int38 = days31.size();
        org.joda.time.Days days39 = org.joda.time.Days.ZERO;
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Days days44 = days42.minus(10);
        boolean boolean45 = days39.isGreaterThan(days42);
        org.joda.time.Days days46 = days31.minus(days42);
        org.joda.time.Duration duration47 = days31.toStandardDuration();
        boolean boolean48 = days21.isGreaterThan(days31);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13730");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (long) 96);
        mutablePeriod2.addMinutes((-12));
    }

    @Test
    public void test13731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13731");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 60, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Duration duration7 = duration5.minus((long) 515);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        java.lang.String str14 = seconds13.toString();
        org.joda.time.PeriodType periodType15 = seconds13.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 3, 599990L, periodType15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration7, periodType15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period26 = period24.withHours(32);
        org.joda.time.Period period27 = period24.normalizedStandard();
        java.lang.String str28 = period27.toString();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period30 = period27.normalizedStandard(periodType29);
        org.joda.time.Period period32 = period27.minusHours(3);
        org.joda.time.Period period34 = period32.withSeconds((-2147483648));
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period34.toDurationFrom(readableInstant35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType43 = days42.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType44 = null;
        int int45 = periodType43.indexOf(durationFieldType44);
        org.joda.time.PeriodType periodType46 = periodType43.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', (long) 'a', periodType46);
        java.lang.String str48 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType46);
        org.joda.time.PeriodType periodType50 = periodType46.withDaysRemoved();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((java.lang.Object) duration21, periodType50, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) periodType15, periodType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT60S" + "'", str14, "PT60S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0.052S" + "'", str28, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Days" + "'", str48, "Days");
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test13732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13732");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours3 = hours1.multipliedBy((-1));
        org.joda.time.Hours hours5 = hours3.minus((int) (byte) 1);
        org.joda.time.Duration duration6 = hours5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test13733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13733");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(600);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod10.addYears((int) '4');
        org.joda.time.Chronology chronology14 = null;
        mutablePeriod10.add((long) 100, chronology14);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType19 = days18.getPeriodType();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
        mutablePeriod22.setHours((int) (short) 100);
        boolean boolean25 = periodType19.equals((java.lang.Object) mutablePeriod22);
        org.joda.time.Duration duration26 = org.joda.time.Duration.ZERO;
        long long27 = duration26.getStandardDays();
        mutablePeriod22.add((org.joda.time.ReadableDuration) duration26);
        long long29 = duration26.getStandardMinutes();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration33 = duration26.withDurationAdded((long) (byte) -1, (int) (byte) 100);
        boolean boolean34 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration33);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test13734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13734");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = duration1.minus((long) 3);
        org.joda.time.Duration duration9 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration9.toIntervalFrom(readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        boolean boolean19 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period20 = duration14.toPeriod();
        org.joda.time.Period period21 = period20.negated();
        org.joda.time.Seconds seconds22 = period21.toStandardSeconds();
        org.joda.time.Period period23 = period21.negated();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = period21.toDurationTo(readableInstant24);
        org.joda.time.DurationFieldType[] durationFieldTypeArray26 = period21.getFieldTypes();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.forFields(durationFieldTypeArray26);
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant12, periodType27);
        org.joda.time.Duration duration32 = duration9.withDurationAdded(41L, (int) (short) -1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds37 = duration36.toStandardSeconds();
        java.lang.String str38 = seconds37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        boolean boolean40 = seconds37.isSupported(durationFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = seconds37.getFieldType();
        org.joda.time.Period period43 = period34.withFieldAdded(durationFieldType41, 75);
        int int44 = period43.getHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(durationFieldTypeArray26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT60S" + "'", str38, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test13735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13735");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        int int6 = period3.getWeeks();
        org.joda.time.Period period8 = period3.plusSeconds((int) (byte) 100);
        org.joda.time.Weeks weeks9 = period3.toStandardWeeks();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        org.joda.time.Weeks weeks13 = weeks11.multipliedBy((int) (byte) 100);
        boolean boolean14 = weeks9.isGreaterThan(weeks11);
        org.joda.time.DurationFieldType durationFieldType15 = weeks11.getFieldType();
        org.joda.time.Duration duration16 = weeks11.toStandardDuration();
        org.joda.time.Weeks weeks18 = weeks11.multipliedBy(15120008);
        org.joda.time.Period period19 = weeks11.toPeriod();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test13736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13736");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = duration4.toPeriodTo(readableInstant16);
        long long18 = duration4.getStandardDays();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period21 = duration20.toPeriod();
        long long22 = duration20.getStandardSeconds();
        boolean boolean23 = duration4.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        boolean boolean30 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, readableInstant31, periodType32);
        boolean boolean35 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Seconds seconds36 = duration28.toStandardSeconds();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration38.toPeriod(periodType39, chronology41);
        int int43 = duration28.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration28.toIntervalTo(readableInstant44);
        org.joda.time.Period period46 = duration28.toPeriod();
        org.joda.time.Period period48 = period46.minusWeeks((int) '#');
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Period period50 = period48.plus(readablePeriod49);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60L) + "'", long22 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test13737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13737");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test13738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13738");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant7, periodType8);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, readableDuration12);
        mutablePeriod13.setHours((int) (short) 100);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration17, chronology18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType23 = seconds22.getFieldType();
        mutablePeriod13.add(durationFieldType23, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
        mutablePeriod28.setHours((int) (short) 100);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration32, chronology35);
        int int37 = duration4.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration38 = duration32.toDuration();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays(0L);
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration42 = duration32.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test13739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13739");
        org.joda.time.Days days6 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) days6, periodType7, chronology8);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 52, periodType7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 7, (-60L), periodType7);
        org.joda.time.PeriodType periodType12 = periodType7.withDaysRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period(6000L, 9L, periodType13);
        org.joda.time.Period period15 = new org.joda.time.Period((long) (-940), periodType13);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13740");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("P13YT-32M0.025S");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = duration3.toPeriodTo(readableInstant8, periodType10);
        org.joda.time.Duration duration12 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        java.lang.Object obj17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(obj17);
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant15, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.toDuration();
        int int22 = duration12.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration21.toIntervalTo(readableInstant23);
        org.joda.time.Hours hours25 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Hours hours26 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval24);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval24);
        mutablePeriod1.addYears(671);
        int int30 = mutablePeriod1.getMonths();
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test13741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13741");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = duration4.toPeriodTo(readableInstant16);
        long long18 = duration4.getStandardDays();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration4.toPeriodTo(readableInstant19);
        org.joda.time.Period period21 = duration4.toPeriod();
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.seconds((int) (byte) 10);
        org.joda.time.Duration duration24 = seconds23.toStandardDuration();
        int int25 = duration4.compareTo((org.joda.time.ReadableDuration) duration24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant26);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test13742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13742");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((-8));
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.Period period3 = period1.negated();
        int int4 = period3.getHours();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period3.toDurationFrom(readableInstant5);
        org.joda.time.Period period8 = period3.withDays(54);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test13743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13743");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours3 = hours1.dividedBy((-2));
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours(25);
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        long long8 = duration7.getStandardDays();
        org.joda.time.Hours hours9 = duration7.toStandardHours();
        boolean boolean10 = hours5.isLessThan(hours9);
        org.joda.time.Hours hours11 = hours1.plus(hours5);
        org.joda.time.Duration duration12 = hours5.toStandardDuration();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration14.toPeriod(periodType15, chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        org.joda.time.Period period22 = duration14.toPeriodTo(readableInstant19, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = period22.getFieldType((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period22.toDurationFrom(readableInstant25);
        org.joda.time.Duration duration27 = period22.toStandardDuration();
        boolean boolean28 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test13744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13744");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 100, (int) '#', 100);
        org.joda.time.Period period5 = period4.negated();
        org.joda.time.Period period7 = period5.withWeeks((int) '#');
        org.joda.time.Days days8 = period5.toStandardDays();
        int int9 = days8.size();
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        boolean boolean17 = days12.isGreaterThan(days15);
        org.joda.time.Days days19 = days12.minus(1);
        org.joda.time.Days days21 = days19.dividedBy(60);
        org.joda.time.Days days23 = days19.plus((int) (short) 100);
        org.joda.time.Days days25 = days19.minus((int) (byte) 10);
        boolean boolean26 = days8.isLessThan(days19);
        org.joda.time.Duration duration27 = days8.toStandardDuration();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test13745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13745");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours11 = hours9.plus((int) (short) 10);
        org.joda.time.Hours hours13 = hours9.dividedBy((int) '4');
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period17 = period15.plusYears((int) ' ');
        org.joda.time.Period period19 = period17.minusYears((int) (short) 10);
        org.joda.time.Period period21 = period17.withMinutes((int) (short) 10);
        boolean boolean22 = hours9.equals((java.lang.Object) period17);
        int int23 = period17.getDays();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test13746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13746");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours10 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = hours10.minus(0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours15 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean16 = hours13.isGreaterThan(hours15);
        boolean boolean17 = hours12.isLessThan(hours15);
        java.lang.String str18 = hours12.toString();
        org.joda.time.Hours hours19 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours20 = hours12.plus(hours19);
        org.joda.time.Hours hours21 = hours7.minus(hours12);
        org.joda.time.DurationFieldType durationFieldType22 = hours21.getFieldType();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT4H" + "'", str18, "PT4H");
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(durationFieldType22);
    }

    @Test
    public void test13747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13747");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 11);
    }

    @Test
    public void test13748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13748");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(10L, (long) (-940));
    }

    @Test
    public void test13749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13749");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(3120000L, (long) (-2147483648));
    }

    @Test
    public void test13750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13750");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 100);
        mutablePeriod2.addMinutes(10);
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        boolean boolean12 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        boolean boolean19 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period20 = duration14.toPeriod();
        boolean boolean21 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration22 = duration14.toDuration();
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Period period24 = period23.toPeriod();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod2.add(readablePeriod26);
        mutablePeriod2.setPeriod((long) 135, (long) 100);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.035S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test13751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13751");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours10 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = hours10.minus(0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours15 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean16 = hours13.isGreaterThan(hours15);
        boolean boolean17 = hours12.isLessThan(hours15);
        java.lang.String str18 = hours12.toString();
        org.joda.time.Hours hours19 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours20 = hours12.plus(hours19);
        org.joda.time.Hours hours21 = hours7.minus(hours12);
        org.joda.time.Hours hours23 = hours12.dividedBy(1);
        org.joda.time.Hours hours24 = null;
        org.joda.time.Hours hours25 = hours12.minus(hours24);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT4H" + "'", str18, "PT4H");
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
    }

    @Test
    public void test13752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13752");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Period period8 = period3.plusWeeks(0);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType10 = weeks9.getPeriodType();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        boolean boolean15 = weeks12.isLessThan(weeks14);
        org.joda.time.Weeks weeks16 = weeks12.negated();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn(readableInterval17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn(readableInterval19);
        boolean boolean21 = weeks18.isLessThan(weeks20);
        org.joda.time.Weeks weeks22 = weeks18.negated();
        org.joda.time.Weeks weeks24 = weeks22.minus((int) (byte) 100);
        org.joda.time.Weeks weeks25 = weeks16.plus(weeks22);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        boolean boolean30 = weeks27.isLessThan(weeks29);
        org.joda.time.Weeks weeks31 = weeks27.negated();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksIn(readableInterval34);
        boolean boolean36 = weeks33.isLessThan(weeks35);
        org.joda.time.Weeks weeks37 = weeks33.negated();
        org.joda.time.Weeks weeks39 = weeks37.minus((int) (byte) 100);
        org.joda.time.Weeks weeks40 = weeks31.plus(weeks37);
        org.joda.time.DurationFieldType durationFieldType41 = weeks37.getFieldType();
        org.joda.time.Weeks weeks42 = weeks22.plus(weeks37);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.weeksIn(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Weeks weeks46 = org.joda.time.Weeks.weeksIn(readableInterval45);
        boolean boolean47 = weeks44.isLessThan(weeks46);
        org.joda.time.Weeks weeks49 = weeks46.minus((int) (short) -1);
        org.joda.time.Weeks weeks50 = weeks49.negated();
        org.joda.time.Weeks weeks52 = weeks49.multipliedBy(0);
        boolean boolean53 = weeks37.isLessThan(weeks52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Weeks weeks57 = org.joda.time.Weeks.weeksIn(readableInterval56);
        boolean boolean58 = weeks55.isLessThan(weeks57);
        org.joda.time.Weeks weeks59 = weeks55.negated();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeksIn(readableInterval60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeksIn(readableInterval62);
        boolean boolean64 = weeks61.isLessThan(weeks63);
        org.joda.time.Weeks weeks65 = weeks61.negated();
        org.joda.time.Weeks weeks67 = weeks65.minus((int) (byte) 100);
        org.joda.time.Weeks weeks68 = weeks59.plus(weeks65);
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.Weeks weeks70 = org.joda.time.Weeks.weeksIn(readableInterval69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.Weeks weeks72 = org.joda.time.Weeks.weeksIn(readableInterval71);
        boolean boolean73 = weeks70.isLessThan(weeks72);
        org.joda.time.Weeks weeks74 = weeks70.negated();
        org.joda.time.ReadableInterval readableInterval75 = null;
        org.joda.time.Weeks weeks76 = org.joda.time.Weeks.weeksIn(readableInterval75);
        org.joda.time.ReadableInterval readableInterval77 = null;
        org.joda.time.Weeks weeks78 = org.joda.time.Weeks.weeksIn(readableInterval77);
        boolean boolean79 = weeks76.isLessThan(weeks78);
        org.joda.time.Weeks weeks80 = weeks76.negated();
        org.joda.time.Weeks weeks82 = weeks80.minus((int) (byte) 100);
        org.joda.time.Weeks weeks83 = weeks74.plus(weeks80);
        org.joda.time.DurationFieldType durationFieldType84 = weeks80.getFieldType();
        org.joda.time.Weeks weeks85 = weeks65.plus(weeks80);
        org.joda.time.Weeks weeks86 = weeks52.minus(weeks65);
        boolean boolean87 = weeks9.isGreaterThan(weeks52);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(weeks74);
        org.junit.Assert.assertNotNull(weeks76);
        org.junit.Assert.assertNotNull(weeks78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(weeks85);
        org.junit.Assert.assertNotNull(weeks86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test13753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13753");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale14);
        boolean boolean16 = periodFormatter2.isPrinter();
        java.util.Locale locale17 = null;
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter2.withLocale(locale17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withMinutesRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, readableInstant26, periodType27);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant30, readableDuration31);
        mutablePeriod32.setHours((int) (short) 100);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration36, chronology37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType42 = seconds41.getFieldType();
        mutablePeriod32.add(durationFieldType42, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableInstant45, readableDuration46);
        mutablePeriod47.setHours((int) (short) 100);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology52 = null;
        mutablePeriod47.setPeriod((org.joda.time.ReadableDuration) duration51, chronology52);
        org.joda.time.Chronology chronology54 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration51, chronology54);
        int int56 = duration23.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration57 = duration51.toDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant59);
        org.joda.time.Duration duration62 = duration57.minus((long) (-1));
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64);
        org.joda.time.format.PeriodFormatter periodFormatter66 = null;
        java.lang.String str67 = mutablePeriod65.toString(periodFormatter66);
        int int68 = mutablePeriod65.getMillis();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Duration duration70 = mutablePeriod65.toDurationFrom(readableInstant69);
        boolean boolean71 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        org.joda.time.Seconds seconds80 = seconds78.dividedBy(32);
        org.joda.time.PeriodType periodType81 = seconds78.getPeriodType();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType81, chronology82);
        org.joda.time.DurationFieldType durationFieldType85 = periodType81.getFieldType(0);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = new org.joda.time.Period((long) (-32), (long) 7, periodType81, chronology86);
        int int88 = periodType81.size();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, readableInstant72, periodType81);
        org.joda.time.PeriodType periodType90 = periodType81.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter91 = periodFormatter18.withParseType(periodType90);
        boolean boolean92 = periodFormatter18.isPrinter();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT0S" + "'", str67, "PT0S");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
        org.junit.Assert.assertNotNull(seconds80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodFormatter91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test13754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13754");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        java.util.Locale locale7 = periodFormatter2.getLocale();
        boolean boolean8 = periodFormatter2.isParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13755");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType5 = seconds4.getFieldType();
        org.joda.time.Seconds seconds7 = seconds4.plus(25);
        org.joda.time.Seconds seconds8 = seconds4.negated();
        org.joda.time.Seconds seconds10 = seconds4.dividedBy(10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType14 = seconds13.getFieldType();
        org.joda.time.Seconds seconds16 = seconds13.plus(25);
        org.joda.time.Seconds seconds17 = seconds10.plus(seconds13);
        org.joda.time.Seconds seconds19 = seconds17.plus((int) (byte) 1);
        org.joda.time.Seconds seconds21 = seconds17.minus((-1));
        org.joda.time.Seconds seconds22 = seconds1.minus(seconds21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        java.lang.String str26 = seconds25.toString();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = seconds25.isSupported(durationFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = seconds25.getFieldType();
        boolean boolean30 = seconds22.isSupported(durationFieldType29);
        org.joda.time.Seconds seconds32 = seconds22.dividedBy(52);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType36 = seconds35.getFieldType();
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds39 = seconds35.minus(seconds38);
        int int40 = seconds39.getSeconds();
        org.joda.time.Seconds seconds42 = seconds39.multipliedBy((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType43 = seconds39.getFieldType();
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.seconds(100);
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType47 = seconds46.getFieldType();
        boolean boolean48 = seconds45.isGreaterThan(seconds46);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod51.addYears((int) '4');
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod51.add((long) 100, chronology55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds59 = duration58.toStandardSeconds();
        java.lang.String str60 = seconds59.toString();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        boolean boolean62 = seconds59.isSupported(durationFieldType61);
        int int63 = mutablePeriod51.get(durationFieldType61);
        boolean boolean64 = seconds46.isSupported(durationFieldType61);
        org.joda.time.Seconds seconds66 = seconds46.dividedBy((int) ' ');
        org.joda.time.DurationFieldType durationFieldType67 = seconds66.getFieldType();
        boolean boolean68 = seconds39.isLessThan(seconds66);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds71 = duration70.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType72 = seconds71.getFieldType();
        org.joda.time.Seconds seconds74 = seconds71.plus(25);
        org.joda.time.Seconds seconds75 = seconds71.negated();
        org.joda.time.Seconds seconds77 = seconds71.dividedBy(10);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds80 = duration79.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType81 = seconds80.getFieldType();
        org.joda.time.Seconds seconds83 = seconds80.plus(25);
        org.joda.time.Seconds seconds84 = seconds77.plus(seconds80);
        org.joda.time.DurationFieldType durationFieldType85 = seconds80.getFieldType();
        org.joda.time.Seconds seconds86 = null;
        org.joda.time.Seconds seconds87 = seconds80.plus(seconds86);
        org.joda.time.Seconds seconds88 = seconds66.minus(seconds80);
        boolean boolean89 = seconds22.isLessThan(seconds66);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT60S" + "'", str26, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 60 + "'", int40 == 60);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT60S" + "'", str60, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(seconds66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertNotNull(seconds75);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(seconds80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(seconds83);
        org.junit.Assert.assertNotNull(seconds84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(seconds87);
        org.junit.Assert.assertNotNull(seconds88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test13756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13756");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod4.addYears((int) '4');
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod4.add((long) 100, chronology8);
        mutablePeriod4.add(1, 10, (int) 'a', 52, (int) (short) 100, 0, (int) (byte) 0, (int) (byte) 10);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.seconds(0);
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) seconds20);
        org.joda.time.Seconds seconds23 = seconds20.multipliedBy((int) (byte) 1);
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType25 = seconds24.getPeriodType();
        java.lang.String str26 = seconds24.toString();
        java.lang.String str27 = seconds24.toString();
        org.joda.time.Seconds seconds28 = null;
        org.joda.time.Seconds seconds29 = seconds24.minus(seconds28);
        org.joda.time.Seconds seconds30 = seconds23.minus(seconds29);
        boolean boolean31 = seconds0.isLessThan(seconds30);
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Duration duration35 = seconds34.toStandardDuration();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        boolean boolean42 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Seconds seconds46 = seconds34.minus(seconds45);
        org.joda.time.Seconds seconds47 = seconds32.minus(seconds46);
        org.joda.time.Seconds seconds48 = seconds30.plus(seconds46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType50 = seconds48.getFieldType(2400);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2400");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0S" + "'", str26, "PT0S");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds48);
    }

    @Test
    public void test13757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13757");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-4));
        org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
        org.joda.time.Minutes minutes3 = hours1.toStandardMinutes();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test13758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13758");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isPrinter();
        boolean boolean12 = periodFormatter10.isParser();
        boolean boolean13 = periodFormatter10.isPrinter();
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter10.getParser();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType18 = periodType17.withMonthsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withMinutesRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (short) 0, periodType18, chronology20);
        org.joda.time.PeriodType periodType22 = periodType18.withMinutesRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (short) -1, periodType18, chronology23);
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter10.withParseType(periodType18);
        org.joda.time.format.PeriodParser periodParser26 = periodFormatter10.getParser();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNull(periodParser26);
    }

    @Test
    public void test13759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13759");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setSeconds(8);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod2.toMutablePeriod();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod5.toMutablePeriod();
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test13760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13760");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (byte) 0, 13, 8, 10);
        org.joda.time.Period period6 = period4.plusYears((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration7 = period6.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test13761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13761");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Days days8 = org.joda.time.Days.FOUR;
        org.joda.time.Days days10 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.ZERO;
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = days14.minus(10);
        boolean boolean17 = days11.isGreaterThan(days14);
        boolean boolean18 = days10.isLessThan(days11);
        org.joda.time.Days days19 = days8.plus(days11);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.PeriodType periodType21 = days19.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter7.withParseType(periodType21);
        org.joda.time.PeriodType periodType23 = periodFormatter22.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter24 = periodFormatter22.getPrinter();
        org.joda.time.PeriodType periodType25 = periodFormatter22.getParseType();
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter22.withLocale(locale26);
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNull(periodPrinter24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter27);
    }

    @Test
    public void test13762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13762");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.setPeriod((long) 10, (long) (byte) -1);
        mutablePeriod6.addYears((-97));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test13763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13763");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = duration1.minus((long) (byte) 10);
        java.lang.String str5 = duration1.toString();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        java.lang.Object obj8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(obj8);
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.toDuration();
        int int13 = duration1.compareTo((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeks(25);
        org.joda.time.Duration duration16 = weeks15.toStandardDuration();
        boolean boolean17 = duration1.equals((java.lang.Object) weeks15);
        org.joda.time.PeriodType periodType18 = weeks15.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT600S" + "'", str5, "PT600S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test13764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13764");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 0, periodType1, chronology2);
        mutablePeriod3.setMonths((int) (byte) 100);
        mutablePeriod3.addHours(0);
        org.joda.time.Hours hours9 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours11 = hours9.multipliedBy((-1));
        org.joda.time.Hours hours13 = hours11.minus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType14 = hours13.getFieldType();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant15, readableDuration16);
        mutablePeriod17.setSeconds(8);
        mutablePeriod17.setValue(1, 2);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), (long) ' ');
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration25);
        mutablePeriod17.clear();
        boolean boolean28 = hours13.equals((java.lang.Object) mutablePeriod17);
        mutablePeriod17.addMinutes(52);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = mutablePeriod17.toDurationFrom(readableInstant31);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) ' ', (int) (byte) 10, 1, (int) (byte) 10, (int) (short) 100, (int) (short) 100, 52, (int) (byte) -1);
        boolean boolean42 = duration32.equals((java.lang.Object) 1);
        org.joda.time.Period period43 = duration32.toPeriod();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) 0, periodType45, chronology46);
        java.lang.String str48 = periodType45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, periodType45, chronology49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) 2147483647);
        mutablePeriod50.setPeriod((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) (-31));
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[YearMonthDay]" + "'", str48, "PeriodType[YearMonthDay]");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test13765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13765");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = days0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = null;
        int int3 = days0.get(durationFieldType2);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13766");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (short) 0, (int) (short) -1, (int) ' ', 3, 2, 25, (int) ' ', (int) (short) 100);
        int int11 = mutablePeriod10.getHours();
        mutablePeriod10.setMillis((int) 'a');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod10.setPeriod((-24L), (long) 25, chronology16);
        org.joda.time.PeriodType periodType18 = mutablePeriod10.getPeriodType();
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant0, readableDuration1, periodType18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test13767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13767");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-13), 5940, (int) ' ', (int) (short) 1, (-59), (-31), 900, (-100));
    }

    @Test
    public void test13768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13768");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        mutablePeriod2.setHours((int) (byte) 1);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType9);
        org.joda.time.Hours hours11 = period10.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType12 = hours11.getFieldType();
        mutablePeriod2.add(durationFieldType12, (int) (short) -1);
        mutablePeriod2.setPeriod((-672), 7, (-2147483648), (int) (byte) 0, 13, 4, (int) (short) 10, 8);
        org.joda.time.Hours hours24 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = hours24.minus(0);
        org.joda.time.Hours hours28 = hours26.multipliedBy((int) (byte) 10);
        org.joda.time.Duration duration29 = hours26.toStandardDuration();
        long long30 = duration29.getStandardMinutes();
        org.joda.time.Chronology chronology31 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration29, chronology31);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = duration34.toPeriodFrom(readableInstant35);
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = period36.getFieldTypes();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.forFields(durationFieldTypeArray37);
        org.joda.time.PeriodType periodType39 = periodType38.withMonthsRemoved();
        org.joda.time.PeriodType periodType40 = periodType38.withMinutesRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration29.toPeriod(periodType38, chronology41);
        org.joda.time.PeriodType periodType43 = period42.getPeriodType();
        org.joda.time.Period period45 = period42.withMonths(7);
        org.joda.time.Period period47 = period42.withMonths(6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 240L + "'", long30 == 240L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test13769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13769");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks10 = weeks1.negated();
        org.joda.time.Weeks weeks11 = weeks1.negated();
        org.joda.time.Weeks weeks13 = weeks11.multipliedBy(658);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        org.joda.time.Weeks weeks17 = weeks15.plus(0);
        org.joda.time.Weeks weeks19 = weeks17.plus(97);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeks(1);
        java.lang.String str22 = weeks21.toString();
        int int23 = weeks21.size();
        org.joda.time.Weeks weeks24 = weeks17.plus(weeks21);
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        boolean boolean30 = weeks27.isLessThan(weeks29);
        org.joda.time.Weeks weeks31 = weeks27.negated();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksIn(readableInterval34);
        boolean boolean36 = weeks33.isLessThan(weeks35);
        org.joda.time.Weeks weeks37 = weeks33.negated();
        org.joda.time.Weeks weeks39 = weeks37.minus((int) (byte) 100);
        org.joda.time.Weeks weeks40 = weeks31.plus(weeks37);
        boolean boolean41 = weeks25.isLessThan(weeks37);
        org.joda.time.Weeks weeks43 = weeks25.multipliedBy((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.weeksIn(readableInterval44);
        org.joda.time.Weeks weeks47 = weeks45.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks48 = weeks43.plus(weeks45);
        org.joda.time.Period period50 = org.joda.time.Period.hours((int) (short) -1);
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Weeks weeks53 = weeks51.plus((int) (short) -1);
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period57 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period59 = period57.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks60 = period59.toStandardWeeks();
        org.joda.time.Weeks weeks61 = weeks55.plus(weeks60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeksIn(readableInterval62);
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.Weeks weeks65 = org.joda.time.Weeks.weeksIn(readableInterval64);
        boolean boolean66 = weeks63.isLessThan(weeks65);
        org.joda.time.Weeks weeks67 = weeks63.negated();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((java.lang.Object) weeks63, chronology68);
        org.joda.time.Weeks weeks71 = weeks63.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.Weeks weeks73 = org.joda.time.Weeks.weeksIn(readableInterval72);
        org.joda.time.ReadableInterval readableInterval74 = null;
        org.joda.time.Weeks weeks75 = org.joda.time.Weeks.weeksIn(readableInterval74);
        boolean boolean76 = weeks73.isLessThan(weeks75);
        org.joda.time.Weeks weeks77 = weeks73.negated();
        org.joda.time.MutablePeriod mutablePeriod78 = weeks77.toMutablePeriod();
        org.joda.time.Weeks weeks79 = weeks63.minus(weeks77);
        org.joda.time.Weeks weeks80 = weeks55.plus(weeks77);
        org.joda.time.Weeks weeks81 = weeks53.minus(weeks80);
        org.joda.time.Weeks weeks82 = weeks43.plus(weeks80);
        org.joda.time.Weeks weeks83 = weeks21.plus(weeks80);
        boolean boolean84 = weeks13.isLessThan(weeks21);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P1W" + "'", str22, "P1W");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(weeks71);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test13770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13770");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        int int6 = period3.getWeeks();
        org.joda.time.Period period8 = period3.plusSeconds((int) (byte) 100);
        org.joda.time.Period period10 = period3.withWeeks((int) '#');
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = seconds11.getSeconds();
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.seconds(52);
        org.joda.time.Seconds seconds16 = seconds14.dividedBy(600);
        org.joda.time.Seconds seconds17 = seconds11.plus(seconds16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        java.lang.Object obj20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(obj20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant19, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant18, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration25.toPeriod(periodType26, chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType32 = periodType31.withMonthsRemoved();
        org.joda.time.Period period33 = duration25.toPeriodTo(readableInstant30, periodType32);
        org.joda.time.Period period34 = duration25.toPeriod();
        org.joda.time.Duration duration35 = duration21.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration21.toIntervalFrom(readableInstant36);
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Seconds seconds40 = seconds38.multipliedBy((int) '#');
        boolean boolean41 = seconds11.isLessThan(seconds38);
        org.joda.time.DurationFieldType durationFieldType42 = seconds38.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21168000 + "'", int12 == 21168000);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationFieldType42);
    }

    @Test
    public void test13771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13771");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType6 = seconds5.getFieldType();
        mutablePeriod2.add(durationFieldType6, 52);
        int int9 = mutablePeriod2.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod2.copy();
        int int11 = mutablePeriod2.getWeeks();
        mutablePeriod2.setMonths(3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test13772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13772");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(obj3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        long long9 = duration8.getStandardDays();
        org.joda.time.Hours hours10 = duration8.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType11 = hours10.getFieldType();
        boolean boolean12 = periodType7.isSupported(durationFieldType11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration4, periodType7);
        java.lang.String str14 = periodType7.toString();
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[YearDayTime]" + "'", str14, "PeriodType[YearDayTime]");
    }

    @Test
    public void test13773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13773");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', (long) 4, periodType5);
        int int8 = periodType5.size();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test13774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13774");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(100L);
        long long2 = duration1.getStandardHours();
        long long3 = duration1.getMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = duration1.toPeriodTo(readableInstant4);
        org.joda.time.Duration duration8 = duration1.withDurationAdded((long) 32, 0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 6000000L + "'", long3 == 6000000L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test13775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13775");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        mutablePeriod6.clear();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod16.addYears((int) '4');
        int int19 = mutablePeriod16.getYears();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.PeriodType periodType21 = mutablePeriod6.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType23 = periodType21.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test13776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13776");
        org.joda.time.Period period8 = new org.joda.time.Period((-1), (-32), (-1), 0, (-32), (int) '4', (int) (short) -1, 25);
        java.lang.String str9 = period8.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P-1Y-32M-1WT-32H52M0.975S" + "'", str9, "P-1Y-32M-1WT-32H52M0.975S");
    }

    @Test
    public void test13777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13777");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period8 = period3.withFields((org.joda.time.ReadablePeriod) minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        int int13 = minutes11.getMinutes();
        java.lang.String str14 = minutes11.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        java.lang.String str17 = minutes15.toString();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes19 = minutes11.negated();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((int) '#');
        org.joda.time.Minutes minutes24 = minutes11.minus(minutes21);
        boolean boolean25 = minutes10.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes26 = minutes7.minus(minutes21);
        org.joda.time.MutablePeriod mutablePeriod27 = minutes26.toMutablePeriod();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2147483648M" + "'", str17, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
    }

    @Test
    public void test13778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13778");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 600);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType4 = seconds3.getPeriodType();
        java.lang.String str5 = seconds3.toString();
        java.lang.String str6 = seconds3.toString();
        org.joda.time.Seconds seconds7 = null;
        org.joda.time.Seconds seconds8 = seconds3.minus(seconds7);
        java.lang.String str9 = seconds3.toString();
        org.joda.time.Seconds seconds10 = seconds2.minus(seconds3);
        int int11 = seconds2.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0S" + "'", str9, "PT0S");
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51840000 + "'", int11 == 51840000);
    }

    @Test
    public void test13779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13779");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withMinutesRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant14, periodType15);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableDuration19);
        mutablePeriod20.setHours((int) (short) 100);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType30 = seconds29.getFieldType();
        mutablePeriod20.add(durationFieldType30, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant33, readableDuration34);
        mutablePeriod35.setHours((int) (short) 100);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration39, chronology40);
        org.joda.time.Chronology chronology42 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration39, chronology42);
        int int44 = duration11.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period45 = duration39.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds48 = duration47.toStandardSeconds();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        boolean boolean52 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds55 = duration54.toStandardSeconds();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds58 = duration57.toStandardSeconds();
        boolean boolean59 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period60 = duration54.toPeriod();
        boolean boolean61 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = duration50.toPeriodTo(readableInstant62);
        long long64 = duration50.getStandardDays();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period67 = duration66.toPeriod();
        long long68 = duration66.getStandardSeconds();
        boolean boolean69 = duration50.isEqual((org.joda.time.ReadableDuration) duration66);
        int int70 = duration39.compareTo((org.joda.time.ReadableDuration) duration50);
        int int71 = duration6.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Seconds seconds72 = duration6.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) duration6);
        long long74 = duration6.getStandardDays();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-60L) + "'", long68 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test13780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13780");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(780L);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        int int4 = minutes2.getMinutes();
        java.lang.String str5 = minutes2.toString();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType7 = minutes6.getFieldType();
        java.lang.String str8 = minutes6.toString();
        boolean boolean9 = minutes2.isLessThan(minutes6);
        org.joda.time.Minutes minutes11 = minutes6.minus(0);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod13);
        boolean boolean15 = minutes6.isGreaterThan(minutes14);
        org.joda.time.Duration duration16 = minutes6.toStandardDuration();
        int int17 = duration1.compareTo((org.joda.time.ReadableDuration) duration16);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0M" + "'", str5, "PT0M");
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-2147483648M" + "'", str8, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test13781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13781");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1920L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test13782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13782");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days15 = org.joda.time.Days.ZERO;
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days20 = days18.minus(10);
        boolean boolean21 = days15.isGreaterThan(days18);
        org.joda.time.Days days22 = days7.minus(days15);
        int int23 = days7.getDays();
        org.joda.time.Duration duration24 = days7.toStandardDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test13783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13783");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("P13YT-32M0.025S");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = duration3.toPeriodTo(readableInstant8, periodType10);
        org.joda.time.Duration duration12 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        java.lang.Object obj17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(obj17);
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant15, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.toDuration();
        int int22 = duration12.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration21.toIntervalTo(readableInstant23);
        org.joda.time.Hours hours25 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Hours hours26 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval24);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval24);
        mutablePeriod1.addYears(671);
        mutablePeriod1.addWeeks(67);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
    }

    @Test
    public void test13784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13784");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = period8.withPeriodType(periodType9);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period14 = period8.plusDays((-141));
        org.joda.time.Period period16 = period8.withWeeks(23);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test13785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13785");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period8 = period3.withFields((org.joda.time.ReadablePeriod) minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        int int13 = minutes11.getMinutes();
        java.lang.String str14 = minutes11.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        java.lang.String str17 = minutes15.toString();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes19 = minutes11.negated();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((int) '#');
        org.joda.time.Minutes minutes24 = minutes11.minus(minutes21);
        boolean boolean25 = minutes10.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes26 = minutes7.minus(minutes21);
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy(52);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType30 = minutes29.getPeriodType();
        int int31 = minutes29.getMinutes();
        java.lang.String str32 = minutes29.toString();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType34 = minutes33.getFieldType();
        java.lang.String str35 = minutes33.toString();
        boolean boolean36 = minutes29.isLessThan(minutes33);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes39 = minutes37.plus((int) (short) -1);
        org.joda.time.Minutes minutes40 = minutes37.negated();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableDuration47);
        mutablePeriod48.setPeriod((long) ' ', (long) 52);
        mutablePeriod48.addDays(100);
        org.joda.time.PeriodType periodType54 = mutablePeriod48.getPeriodType();
        org.joda.time.Period period55 = new org.joda.time.Period((long) (short) 0, periodType54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType54);
        org.joda.time.Period period57 = new org.joda.time.Period(readableInstant41, readableInstant42, periodType54);
        org.joda.time.Period period59 = period57.plusMonths(13);
        org.joda.time.Duration duration60 = period57.toStandardDuration();
        org.joda.time.Period period61 = period57.negated();
        org.joda.time.Minutes minutes62 = period61.toStandardMinutes();
        org.joda.time.Minutes minutes64 = minutes62.multipliedBy(100);
        org.joda.time.Minutes minutes65 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.ZERO;
        boolean boolean67 = minutes65.isLessThan(minutes66);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType69 = minutes68.getPeriodType();
        int int70 = minutes68.getMinutes();
        java.lang.String str71 = minutes68.toString();
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType73 = minutes72.getFieldType();
        java.lang.String str74 = minutes72.toString();
        boolean boolean75 = minutes68.isLessThan(minutes72);
        int int76 = minutes68.size();
        org.joda.time.Minutes minutes77 = minutes65.plus(minutes68);
        org.joda.time.Minutes minutes78 = minutes65.negated();
        org.joda.time.Minutes minutes79 = minutes64.minus(minutes65);
        org.joda.time.Minutes minutes81 = minutes64.dividedBy((-100));
        org.joda.time.Minutes minutes82 = minutes40.minus(minutes64);
        org.joda.time.Minutes minutes83 = minutes29.plus(minutes82);
        org.joda.time.Minutes minutes84 = minutes28.plus(minutes83);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2147483648M" + "'", str17, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0M" + "'", str32, "PT0M");
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT-2147483648M" + "'", str35, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0M" + "'", str71, "PT0M");
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT-2147483648M" + "'", str74, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes83);
        org.junit.Assert.assertNotNull(minutes84);
    }

    @Test
    public void test13786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13786");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter2.getParser();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = periodFormatter2.parsePeriod("P-10M52WT-32M");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodPrinter7);
    }

    @Test
    public void test13787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13787");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Hours hours5 = hours0.plus(596);
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = duration6.toPeriod(chronology7);
        int int9 = period8.size();
        org.joda.time.Period period11 = period8.plusHours((int) (short) 1);
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.ZERO;
        long long14 = duration13.getStandardDays();
        org.joda.time.Hours hours15 = duration13.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType16 = hours15.getFieldType();
        org.joda.time.Hours hours17 = null;
        org.joda.time.Hours hours18 = hours15.minus(hours17);
        org.joda.time.Period period19 = period12.plus((org.joda.time.ReadablePeriod) hours18);
        org.joda.time.Hours hours20 = hours0.minus(hours18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = hours0.getFieldType(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(hours20);
    }

    @Test
    public void test13788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13788");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = period6.plusMonths(25);
        org.joda.time.Period period11 = period9.minusMinutes((int) (byte) -1);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period9.withPeriodType(periodType12);
        org.joda.time.Period period15 = period9.withMinutes((-34));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13789");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType4 = periodType3.withMonthsRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 596, periodType4, chronology6);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test13790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13790");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours1 = hours0.negated();
        org.joda.time.Hours hours2 = org.joda.time.Hours.ONE;
        boolean boolean3 = hours1.isLessThan(hours2);
        org.joda.time.DurationFieldType durationFieldType4 = hours1.getFieldType();
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Hours hours8 = duration5.toStandardHours();
        org.joda.time.Hours hours9 = hours1.minus(hours8);
        org.joda.time.PeriodType periodType10 = hours9.getPeriodType();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType11);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test13791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13791");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (short) 0);
        org.joda.time.Duration duration2 = hours1.toStandardDuration();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test13792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13792");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours9 = period7.toStandardHours();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) hours9, periodType10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod16.get(durationFieldType17);
        org.joda.time.Hours hours19 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Hours hours21 = hours19.dividedBy((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant22, readableDuration23);
        org.joda.time.Period period25 = mutablePeriod24.toPeriod();
        org.joda.time.Period period27 = period25.withHours(0);
        org.joda.time.Hours hours28 = period27.toStandardHours();
        org.joda.time.Hours hours29 = hours21.minus(hours28);
        boolean boolean30 = hours9.isGreaterThan(hours28);
        java.lang.String str31 = hours9.toString();
        org.joda.time.Hours hours33 = hours9.minus((-60));
        org.joda.time.Hours hours34 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) hours33);
        org.joda.time.Duration duration35 = hours33.toStandardDuration();
        org.joda.time.Hours hours37 = hours33.plus(416);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        int int44 = mutablePeriod42.get(durationFieldType43);
        org.joda.time.Hours hours45 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Hours hours47 = hours45.dividedBy((int) (short) -1);
        org.joda.time.Hours hours49 = hours47.plus((int) (short) 10);
        org.joda.time.Hours hours50 = hours47.negated();
        org.joda.time.Duration duration51 = hours47.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        int int58 = mutablePeriod56.get(durationFieldType57);
        org.joda.time.Hours hours59 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.Hours hours61 = hours59.dividedBy((int) (short) -1);
        org.joda.time.Hours hours62 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours64 = hours62.minus(0);
        org.joda.time.Hours hours65 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours67 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean68 = hours65.isGreaterThan(hours67);
        boolean boolean69 = hours64.isLessThan(hours67);
        java.lang.String str70 = hours64.toString();
        org.joda.time.Hours hours71 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours72 = hours64.plus(hours71);
        org.joda.time.Hours hours73 = hours59.minus(hours64);
        boolean boolean74 = hours47.isGreaterThan(hours59);
        org.joda.time.PeriodType periodType75 = hours59.getPeriodType();
        org.joda.time.Hours hours76 = hours33.minus(hours59);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0H" + "'", str31, "PT0H");
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(hours65);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT4H" + "'", str70, "PT4H");
        org.junit.Assert.assertNotNull(hours71);
        org.junit.Assert.assertNotNull(hours72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(hours76);
    }

    @Test
    public void test13793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13793");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (-29), periodType1);
    }

    @Test
    public void test13794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13794");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 4, 7200000L);
    }

    @Test
    public void test13795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13795");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks6 = weeks3.minus((int) (short) -1);
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy(0);
        org.joda.time.Weeks weeks9 = null;
        boolean boolean10 = weeks6.isLessThan(weeks9);
        int int12 = weeks6.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType13.isSupported(chronology14);
        boolean boolean16 = weeks6.isSupported(durationFieldType13);
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks23 = weeks19.negated();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.weeksIn(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksIn(readableInterval26);
        boolean boolean28 = weeks25.isLessThan(weeks27);
        org.joda.time.Weeks weeks29 = weeks25.negated();
        org.joda.time.Weeks weeks31 = weeks29.minus((int) (byte) 100);
        org.joda.time.Weeks weeks32 = weeks23.plus(weeks29);
        boolean boolean33 = weeks17.isLessThan(weeks29);
        org.joda.time.Weeks weeks34 = weeks6.minus(weeks29);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn(readableInterval35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeksIn(readableInterval37);
        boolean boolean39 = weeks36.isLessThan(weeks38);
        org.joda.time.Weeks weeks41 = weeks38.minus((int) (short) -1);
        org.joda.time.Weeks weeks43 = weeks41.multipliedBy(0);
        int int44 = weeks41.getWeeks();
        org.joda.time.Duration duration45 = weeks41.toStandardDuration();
        org.joda.time.Weeks weeks47 = weeks41.dividedBy(2147483647);
        boolean boolean48 = weeks29.isLessThan(weeks41);
        org.joda.time.Weeks weeks50 = weeks29.minus(15120008);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds51 = weeks50.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -15120008 * 604800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(weeks50);
    }

    @Test
    public void test13796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13796");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = seconds11.getFieldType();
        mutablePeriod2.add(durationFieldType12, (int) (short) 0);
        mutablePeriod2.setDays((int) (short) -1);
        mutablePeriod2.addHours(35);
        org.joda.time.PeriodType periodType19 = mutablePeriod2.getPeriodType();
        java.lang.String str20 = periodType19.toString();
        org.joda.time.PeriodType periodType21 = periodType19.withYearsRemoved();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Standard]" + "'", str20, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test13797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13797");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        int int3 = mutablePeriod2.getHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        long long5 = duration4.getStandardDays();
        org.joda.time.Hours hours6 = duration4.toStandardHours();
        long long7 = duration4.getStandardMinutes();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod2.copy();
        int int10 = mutablePeriod9.getDays();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        mutablePeriod9.add(durationFieldType11, (-1));
        mutablePeriod9.addYears((int) (byte) 100);
        org.joda.time.Hours hours16 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours17 = hours16.negated();
        org.joda.time.Hours hours18 = org.joda.time.Hours.ONE;
        boolean boolean19 = hours17.isLessThan(hours18);
        org.joda.time.DurationFieldType durationFieldType20 = hours17.getFieldType();
        mutablePeriod9.set(durationFieldType20, 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationFieldType20);
    }

    @Test
    public void test13798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13798");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT5M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT5M\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13799");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days16 = days7.plus((int) (byte) 1);
        org.joda.time.Days days18 = days7.multipliedBy((-2147483648));
        org.joda.time.Days days20 = days7.multipliedBy((int) (byte) 0);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.Days days23 = duration22.toStandardDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
    }

    @Test
    public void test13800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4', chronology1);
        mutablePeriod2.setPeriod(25, 51, (int) (short) 100, 5, 600, 200, (-58), (-29));
    }

    @Test
    public void test13801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13801");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Period period3 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType5 = period3.getFieldType((int) (short) 1);
        org.joda.time.Period period7 = period3.plusDays(10);
        org.joda.time.Seconds seconds8 = period3.toStandardSeconds();
        boolean boolean9 = seconds1.isLessThan(seconds8);
        int int10 = seconds1.getSeconds();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration12 = seconds11.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType13 = seconds11.getFieldType();
        org.joda.time.PeriodType periodType14 = seconds11.getPeriodType();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds17 = duration16.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = seconds17.getFieldType();
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds21 = seconds17.minus(seconds20);
        boolean boolean22 = seconds11.isLessThan(seconds21);
        org.joda.time.Seconds seconds23 = seconds1.plus(seconds21);
        org.joda.time.Seconds seconds25 = seconds1.minus((-32));
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType29 = seconds28.getFieldType();
        org.joda.time.Seconds seconds31 = seconds28.plus(25);
        org.joda.time.Seconds seconds32 = seconds28.negated();
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds34 = seconds28.plus(seconds33);
        org.joda.time.Seconds seconds35 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType36 = seconds35.getPeriodType();
        java.lang.String str37 = seconds35.toString();
        org.joda.time.Seconds seconds39 = seconds35.plus((int) (short) 1);
        int int40 = seconds39.getSeconds();
        boolean boolean41 = seconds34.isLessThan(seconds39);
        boolean boolean42 = seconds1.isGreaterThan(seconds34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = seconds34.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 8");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test13802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13802");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 100);
        mutablePeriod2.addMinutes(10);
        java.lang.Object obj5 = mutablePeriod2.clone();
        mutablePeriod2.addMinutes(10);
        int int8 = mutablePeriod2.getMillis();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT20M0.099S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT20M0.099S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT20M0.099S");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 99 + "'", int8 == 99);
    }

    @Test
    public void test13803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13803");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(4L, periodType1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        java.lang.String str11 = seconds10.toString();
        org.joda.time.PeriodType periodType12 = seconds10.getPeriodType();
        org.joda.time.PeriodType periodType13 = seconds10.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant4, (org.joda.time.ReadableDuration) duration5, periodType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationFrom(readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration18.toIntervalTo(readableInstant19);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval20);
        int int22 = mutablePeriod3.size();
        mutablePeriod3.add(599L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT60S" + "'", str11, "PT60S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test13804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13804");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeksIn(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        boolean boolean9 = weeks6.isLessThan(weeks8);
        org.joda.time.Weeks weeks10 = weeks6.negated();
        org.joda.time.Weeks weeks12 = weeks10.minus((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeksIn(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        boolean boolean17 = weeks14.isLessThan(weeks16);
        org.joda.time.Weeks weeks19 = weeks16.minus((int) (short) -1);
        org.joda.time.Weeks weeks21 = weeks19.multipliedBy(0);
        boolean boolean22 = weeks12.isGreaterThan(weeks21);
        org.joda.time.Period period27 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period29 = period27.withDays((int) 'a');
        org.joda.time.Weeks weeks30 = period29.toStandardWeeks();
        int int31 = weeks30.getWeeks();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksIn(readableInterval34);
        boolean boolean36 = weeks33.isLessThan(weeks35);
        org.joda.time.Weeks weeks38 = weeks35.minus((int) (short) -1);
        org.joda.time.Weeks weeks39 = weeks38.negated();
        org.joda.time.Weeks weeks41 = weeks38.multipliedBy(0);
        boolean boolean42 = weeks30.isGreaterThan(weeks41);
        org.joda.time.Weeks weeks43 = weeks21.minus(weeks30);
        org.joda.time.Weeks weeks45 = weeks30.dividedBy(3);
        org.joda.time.Period period46 = period3.withFields((org.joda.time.ReadablePeriod) weeks45);
        org.joda.time.Period period47 = new org.joda.time.Period((java.lang.Object) weeks45);
        int int48 = weeks45.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 13 + "'", int31 == 13);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
    }

    @Test
    public void test13805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13805");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        org.joda.time.format.PeriodParser periodParser13 = periodFormatter10.getParser();
        boolean boolean14 = periodFormatter10.isParser();
        boolean boolean15 = periodFormatter10.isPrinter();
        boolean boolean16 = periodFormatter10.isPrinter();
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodParser13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13806");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(obj3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration8.toPeriod(periodType9, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType15 = periodType14.withMonthsRemoved();
        org.joda.time.Period period16 = duration8.toPeriodTo(readableInstant13, periodType15);
        org.joda.time.Period period17 = duration8.toPeriod();
        org.joda.time.Duration duration18 = duration4.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration19 = duration4.toDuration();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withMinutesRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration4, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Duration duration28 = duration25.minus((long) (byte) 10);
        java.lang.String str29 = duration25.toString();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        java.lang.Object obj32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(obj32);
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant31, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period(readableInstant30, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.toDuration();
        int int37 = duration25.compareTo((org.joda.time.ReadableDuration) duration33);
        boolean boolean38 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration33);
        long long39 = duration33.getStandardMinutes();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str42 = duration41.toString();
        org.joda.time.Duration duration44 = duration41.minus((long) (byte) 10);
        org.joda.time.Duration duration46 = duration41.withMillis((long) (short) -1);
        org.joda.time.Period period47 = duration41.toPeriod();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Period period49 = duration41.toPeriodFrom(readableInstant48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds52 = duration51.toStandardSeconds();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds55 = duration54.toStandardSeconds();
        boolean boolean56 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType59 = periodType58.withMinutesRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, readableInstant57, periodType58);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant61, readableDuration62);
        mutablePeriod63.setHours((int) (short) 100);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod63.setPeriod((org.joda.time.ReadableDuration) duration67, chronology68);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds72 = duration71.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType73 = seconds72.getFieldType();
        mutablePeriod63.add(durationFieldType73, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant76, readableDuration77);
        mutablePeriod78.setHours((int) (short) 100);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology83 = null;
        mutablePeriod78.setPeriod((org.joda.time.ReadableDuration) duration82, chronology83);
        org.joda.time.Chronology chronology85 = null;
        mutablePeriod63.setPeriod((org.joda.time.ReadableDuration) duration82, chronology85);
        int int87 = duration54.compareTo((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration88 = duration82.toDuration();
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardDays(0L);
        boolean boolean91 = duration82.isLongerThan((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Period period92 = duration90.toPeriod();
        org.joda.time.Duration duration94 = duration90.withMillis((-3600000L));
        boolean boolean95 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration94);
        int int96 = duration33.compareTo((org.joda.time.ReadableDuration) duration94);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT600S" + "'", str26, "PT600S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT600S" + "'", str29, "PT600S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT600S" + "'", str42, "PT600S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test13807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13807");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = duration3.toPeriodTo(readableInstant4);
        org.joda.time.Period period7 = period5.withYears((int) '#');
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period5);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test13808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13808");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = period1.plusHours((-1));
        org.joda.time.Period period12 = period1.withDays((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod14 = org.joda.time.MutablePeriod.parse("PT60S");
        org.joda.time.Period period15 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        java.lang.String str16 = mutablePeriod14.toString();
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod14.setPeriod(60000L, (long) 52, chronology19);
        mutablePeriod14.addDays(54);
        int int23 = mutablePeriod14.getMinutes();
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.PeriodType periodType27 = days26.getPeriodType();
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType34 = days33.getPeriodType();
        boolean boolean35 = days30.isGreaterThan(days33);
        org.joda.time.Period period37 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days38 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Days days39 = days33.minus(days38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Days days44 = days42.minus(10);
        org.joda.time.Days days45 = days33.plus(days42);
        org.joda.time.Days days47 = days45.dividedBy(100);
        org.joda.time.Days days48 = null;
        org.joda.time.Days days49 = days47.plus(days48);
        org.joda.time.Days days50 = days47.negated();
        boolean boolean51 = days26.isGreaterThan(days50);
        org.joda.time.DurationFieldType durationFieldType52 = days26.getFieldType();
        int int53 = mutablePeriod14.indexOf(durationFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod14.setValue((-13), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT60S" + "'", str16, "PT60S");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
    }

    @Test
    public void test13809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13809");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration10.toIntervalTo(readableInstant14);
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval15);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
    }

    @Test
    public void test13810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13810");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatter12.getPrinter();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.PeriodType periodType16 = periodFormatter15.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod18 = periodFormatter15.parseMutablePeriod("PT0.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodPrinter13);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodType16);
    }

    @Test
    public void test13811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13811");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = seconds2.dividedBy(3);
        org.joda.time.Seconds seconds6 = seconds2.negated();
        org.joda.time.Seconds seconds8 = seconds2.plus((-1));
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.seconds((-1));
        org.joda.time.Seconds seconds11 = seconds10.negated();
        org.joda.time.Seconds seconds12 = seconds2.minus(seconds11);
        int int13 = seconds2.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60 + "'", int13 == 60);
    }

    @Test
    public void test13812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13812");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType3 = period1.getFieldType((int) (short) 1);
        org.joda.time.Period period5 = period1.withSeconds((-1));
        org.joda.time.Period period6 = period1.negated();
        org.joda.time.Period period8 = period6.plusDays(515);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) 515);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test13813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13813");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        long long14 = duration10.getStandardHours();
        org.joda.time.Hours hours19 = org.joda.time.Hours.SEVEN;
        org.joda.time.PeriodType periodType20 = hours19.getPeriodType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (-1), (long) (-1073741824), periodType20, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((-60000L), (long) 658, periodType20, chronology23);
        org.joda.time.PeriodType periodType25 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType26 = periodType20.withSecondsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration10.toPeriod(periodType20, chronology27);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test13814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13814");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.minus(0);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration11.toPeriod(periodType12, chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType18 = periodType17.withMonthsRemoved();
        org.joda.time.Period period19 = duration11.toPeriodTo(readableInstant16, periodType18);
        org.joda.time.Minutes minutes20 = duration11.toStandardMinutes();
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes24 = minutes20.minus((int) (short) 0);
        org.joda.time.Minutes minutes25 = minutes24.negated();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutes(54);
        org.joda.time.Minutes minutes28 = minutes25.minus(minutes27);
        org.joda.time.Minutes minutes30 = minutes25.minus((int) (short) 10);
        org.joda.time.Minutes minutes31 = minutes9.minus(minutes30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes33 = minutes31.minus(2400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483639 + -2400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
    }

    @Test
    public void test13815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13815");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT0.032S");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        java.lang.Object obj5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(obj5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration10.toPeriod(periodType11, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType17 = periodType16.withMonthsRemoved();
        org.joda.time.Period period18 = duration10.toPeriodTo(readableInstant15, periodType17);
        org.joda.time.Period period19 = duration10.toPeriod();
        org.joda.time.Duration duration20 = duration6.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration6.toDuration();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType23 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration6, periodType24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str28 = duration27.toString();
        org.joda.time.Duration duration30 = duration27.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration37, chronology38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType43 = seconds42.getFieldType();
        mutablePeriod33.add(durationFieldType43, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableDuration47);
        mutablePeriod48.setHours((int) (short) 100);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration52, chronology53);
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration52, chronology55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration52.isEqual(readableDuration57);
        org.joda.time.Duration duration59 = duration27.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds62 = duration61.toStandardSeconds();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds65 = duration64.toStandardSeconds();
        boolean boolean66 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = duration61.minus((long) 3);
        org.joda.time.Duration duration69 = duration61.toDuration();
        boolean boolean70 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration73 = duration61.withDurationAdded(540000L, 32);
        int int74 = duration6.compareTo((org.joda.time.ReadableDuration) duration73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration6.toIntervalTo(readableInstant75);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval76);
        mutablePeriod1.addHours(6);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        mutablePeriod1.setPeriod(readableInstant80, readableInstant81);
        org.joda.time.Period period83 = mutablePeriod1.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT600S" + "'", str28, "PT600S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test13816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13816");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 0, (int) (short) -1, (int) ' ', 3, 2, 25, (int) ' ', (int) (short) 100);
        int int9 = mutablePeriod8.getHours();
        mutablePeriod8.setMillis((int) 'a');
        org.joda.time.Chronology chronology14 = null;
        mutablePeriod8.setPeriod((-24L), (long) 25, chronology14);
        int int16 = mutablePeriod8.getSeconds();
        mutablePeriod8.addHours(9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test13817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13817");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod6.setPeriod((long) 13, 0L, chronology9);
        int int11 = mutablePeriod6.getSeconds();
        int int12 = mutablePeriod6.size();
        mutablePeriod6.addYears((-596526));
        mutablePeriod6.clear();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test13818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13818");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 0, 52, (int) (short) -1, 52, (-1), (int) ' ', (int) '4', 8);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        mutablePeriod8.addMinutes((int) (byte) 10);
        mutablePeriod8.addMonths((-1073741824));
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "P-1073741772M-1W52DT-1H42M52.008S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "P-1073741772M-1W52DT-1H42M52.008S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "P-1073741772M-1W52DT-1H42M52.008S");
    }

    @Test
    public void test13819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13819");
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = periodType5.indexOf(durationFieldType6);
        org.joda.time.PeriodType periodType8 = periodType5.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', (long) 'a', periodType8);
        java.lang.String str10 = periodType8.getName();
        org.joda.time.PeriodType periodType11 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType8.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = periodType13.getFieldType(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Days" + "'", str10, "Days");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13820");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(5);
        org.joda.time.Seconds seconds2 = minutes1.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = seconds2.getFieldType((-91));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -91");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test13821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13821");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        mutablePeriod4.setMinutes(8);
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        boolean boolean13 = weeks10.isLessThan(weeks12);
        org.joda.time.Weeks weeks14 = weeks10.negated();
        org.joda.time.MutablePeriod mutablePeriod15 = weeks14.toMutablePeriod();
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod15.setPeriod((long) 13, 0L, chronology18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        boolean boolean24 = weeks21.isLessThan(weeks23);
        org.joda.time.Weeks weeks25 = weeks21.negated();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) weeks21, chronology26);
        org.joda.time.Weeks weeks29 = weeks21.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration30 = weeks21.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.Chronology chronology32 = null;
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration30, chronology32);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration30);
        int int35 = mutablePeriod4.getWeeks();
        mutablePeriod4.addWeeks(107);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test13822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13822");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType6 = seconds5.getFieldType();
        mutablePeriod2.add(durationFieldType6, 52);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod2.add(readableInterval9);
        mutablePeriod2.setYears(0);
        mutablePeriod2.addMonths((int) 'a');
        java.lang.String str15 = mutablePeriod2.toString();
        java.lang.Object obj16 = null;
        boolean boolean17 = mutablePeriod2.equals(obj16);
        mutablePeriod2.setWeeks(1);
        mutablePeriod2.addHours(3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P97MT52S" + "'", str15, "P97MT52S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13823");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.Period period6 = period1.plusHours((int) (short) 1);
        org.joda.time.Period period8 = period1.withYears(52);
        org.joda.time.Period period10 = period1.minusWeeks((int) (byte) 100);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.PeriodType periodType12 = period10.getPeriodType();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13824");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.minus(0);
        org.joda.time.Minutes minutes11 = minutes4.multipliedBy((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType12 = minutes4.getFieldType();
        org.joda.time.Minutes minutes14 = minutes4.dividedBy(30);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes14);
    }

    @Test
    public void test13825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13825");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(600000L, (-24L), chronology2);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        int int5 = period3.size();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test13826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13826");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        org.joda.time.Weeks weeks8 = weeks5.dividedBy(600);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType11, chronology12);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Weeks weeks18 = period17.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = weeks18.isSupported(durationFieldType19);
        boolean boolean21 = weeks5.isGreaterThan(weeks18);
        org.joda.time.Weeks weeks23 = weeks18.dividedBy(40);
        org.joda.time.Weeks weeks25 = weeks23.multipliedBy((-2147483638));
        org.joda.time.PeriodType periodType26 = weeks23.getPeriodType();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        org.joda.time.Weeks weeks32 = weeks28.negated();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Weeks weeks34 = org.joda.time.Weeks.weeksIn(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn(readableInterval35);
        boolean boolean37 = weeks34.isLessThan(weeks36);
        org.joda.time.Weeks weeks38 = weeks34.negated();
        org.joda.time.Weeks weeks40 = weeks38.minus((int) (byte) 100);
        org.joda.time.Weeks weeks41 = weeks32.plus(weeks38);
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeksIn(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.weeksIn(readableInterval44);
        boolean boolean46 = weeks43.isLessThan(weeks45);
        org.joda.time.Weeks weeks47 = weeks43.negated();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Weeks weeks49 = org.joda.time.Weeks.weeksIn(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.weeksIn(readableInterval50);
        boolean boolean52 = weeks49.isLessThan(weeks51);
        org.joda.time.Weeks weeks53 = weeks49.negated();
        org.joda.time.Weeks weeks55 = weeks53.minus((int) (byte) 100);
        org.joda.time.Weeks weeks56 = weeks47.plus(weeks53);
        org.joda.time.DurationFieldType durationFieldType57 = weeks53.getFieldType();
        org.joda.time.Weeks weeks58 = weeks38.plus(weeks53);
        org.joda.time.ReadableInterval readableInterval59 = null;
        org.joda.time.Weeks weeks60 = org.joda.time.Weeks.weeksIn(readableInterval59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.Weeks weeks62 = org.joda.time.Weeks.weeksIn(readableInterval61);
        boolean boolean63 = weeks60.isLessThan(weeks62);
        org.joda.time.Weeks weeks64 = weeks60.negated();
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.Weeks weeks66 = org.joda.time.Weeks.weeksIn(readableInterval65);
        org.joda.time.ReadableInterval readableInterval67 = null;
        org.joda.time.Weeks weeks68 = org.joda.time.Weeks.weeksIn(readableInterval67);
        boolean boolean69 = weeks66.isLessThan(weeks68);
        org.joda.time.Weeks weeks70 = weeks66.negated();
        org.joda.time.Weeks weeks72 = weeks70.minus((int) (byte) 100);
        org.joda.time.Weeks weeks73 = weeks64.plus(weeks70);
        org.joda.time.DurationFieldType durationFieldType74 = weeks70.getFieldType();
        org.joda.time.ReadableInterval readableInterval75 = null;
        org.joda.time.Weeks weeks76 = org.joda.time.Weeks.weeksIn(readableInterval75);
        org.joda.time.ReadableInterval readableInterval77 = null;
        org.joda.time.Weeks weeks78 = org.joda.time.Weeks.weeksIn(readableInterval77);
        boolean boolean79 = weeks76.isLessThan(weeks78);
        org.joda.time.Weeks weeks81 = weeks78.minus((int) (short) -1);
        org.joda.time.Weeks weeks82 = weeks81.negated();
        org.joda.time.Weeks weeks84 = weeks81.multipliedBy(0);
        org.joda.time.Weeks weeks86 = weeks84.multipliedBy(0);
        org.joda.time.Weeks weeks88 = weeks84.plus((int) '4');
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((java.lang.Object) weeks84, chronology89);
        org.joda.time.Weeks weeks92 = weeks84.multipliedBy((int) (short) -1);
        boolean boolean93 = weeks70.isLessThan(weeks84);
        boolean boolean94 = weeks38.isLessThan(weeks70);
        org.joda.time.Duration duration95 = weeks70.toStandardDuration();
        boolean boolean96 = weeks23.isGreaterThan(weeks70);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(weeks76);
        org.junit.Assert.assertNotNull(weeks78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks84);
        org.junit.Assert.assertNotNull(weeks86);
        org.junit.Assert.assertNotNull(weeks88);
        org.junit.Assert.assertNotNull(weeks92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test13827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13827");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType2);
        int int4 = period3.getMillis();
        org.joda.time.Period period6 = period3.plusYears(13);
        org.joda.time.Seconds seconds7 = period3.toStandardSeconds();
        int[] intArray8 = period3.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = period3.getFieldType((-31));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 25]");
    }

    @Test
    public void test13828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13828");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period6 = period4.withDays((int) 'a');
        org.joda.time.Weeks weeks7 = period6.toStandardWeeks();
        int int8 = weeks7.getWeeks();
        org.joda.time.Weeks weeks10 = weeks7.plus((int) (byte) 0);
        org.joda.time.Duration duration11 = weeks10.toStandardDuration();
        org.joda.time.Weeks weeks12 = weeks10.negated();
        org.joda.time.Weeks weeks14 = weeks12.plus((int) ' ');
        org.joda.time.Weeks weeks16 = weeks14.minus((-637));
        org.joda.time.Weeks weeks18 = weeks14.minus((int) ' ');
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
    }

    @Test
    public void test13829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13829");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(540000L, (long) (-1), chronology2);
        org.joda.time.Period period4 = period3.toPeriod();
        org.joda.time.Period period6 = period4.plusMonths(10);
        org.joda.time.Period period8 = period6.minusWeeks((-59));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test13830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13830");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        java.lang.String str8 = periodType5.toString();
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(864000000L, (long) (-515), periodType5);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType15 = periodType14.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        boolean boolean24 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType27 = periodType26.withMinutesRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, readableInstant25, periodType26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration22.toIntervalFrom(readableInstant29);
        mutablePeriod17.add((org.joda.time.ReadableInterval) interval30);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval30);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearWeekDay]" + "'", str8, "PeriodType[YearWeekDay]");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(interval30);
    }

    @Test
    public void test13831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13831");
        org.joda.time.Hours hours0 = org.joda.time.Hours.TWO;
        int int1 = hours0.getHours();
        org.joda.time.Hours hours2 = hours0.negated();
        java.lang.String str3 = hours2.toString();
        org.joda.time.Hours hours4 = hours2.negated();
        org.joda.time.PeriodType periodType5 = hours2.getPeriodType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', chronology7);
        int int9 = mutablePeriod8.getHours();
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        org.joda.time.Hours hours12 = duration10.toStandardHours();
        long long13 = duration10.getStandardMinutes();
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) 25);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((java.lang.Object) duration16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((-60L), periodType22);
        org.joda.time.Period period24 = duration18.toPeriodFrom(readableInstant19, periodType22);
        org.joda.time.Hours hours25 = period24.toStandardHours();
        int int26 = hours25.getHours();
        org.joda.time.Hours hours27 = hours2.minus(hours25);
        org.joda.time.MutablePeriod mutablePeriod28 = hours25.toMutablePeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-2H" + "'", str3, "PT-2H");
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test13832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13832");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.withHours((int) (byte) 1);
        org.joda.time.Period period5 = period3.withHours((int) (short) -1);
        org.joda.time.Period period7 = period3.minusMinutes((-3));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test13833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13833");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.multipliedBy((int) (short) 10);
        org.joda.time.Period period8 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period10 = period8.withDays((int) 'a');
        org.joda.time.Weeks weeks11 = period10.toStandardWeeks();
        int int12 = weeks11.getWeeks();
        org.joda.time.Weeks weeks14 = weeks11.plus((int) (byte) 0);
        org.joda.time.Duration duration15 = weeks14.toStandardDuration();
        org.joda.time.Weeks weeks16 = weeks14.negated();
        org.joda.time.Weeks weeks17 = weeks3.minus(weeks14);
        org.joda.time.Weeks weeks18 = weeks3.negated();
        org.joda.time.MutablePeriod mutablePeriod19 = weeks18.toMutablePeriod();
        int int20 = weeks18.size();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test13834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13834");
        org.joda.time.Period period8 = new org.joda.time.Period(4, 2, 2, (int) (byte) -1, (int) (short) 10, (-672), (int) (short) 10, (-60));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13835");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Period period10 = period7.withMillis(100);
        org.joda.time.Period period12 = period10.plusMonths(100);
        org.joda.time.Period period14 = period12.plusWeeks(10);
        java.lang.String str15 = period14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Period period17 = period14.minus(readablePeriod16);
        org.joda.time.Period period19 = period17.plusYears((int) (byte) 10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P100M10WT1M0.100S" + "'", str15, "P100M10WT1M0.100S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test13836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13836");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        org.joda.time.Seconds seconds10 = seconds6.negated();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter2.withParseType(periodType11);
        boolean boolean13 = periodFormatter2.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        java.lang.String str19 = seconds18.toString();
        org.joda.time.PeriodType periodType20 = seconds18.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter15.withParseType(periodType22);
        java.util.Locale locale24 = null;
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter23.withLocale(locale24);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((int) (byte) 1, 0, (-32), 52);
        java.lang.Object obj31 = mutablePeriod30.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = periodFormatter25.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod30, "PT345600S", 5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT60S" + "'", str19, "PT60S");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT1H-31.948S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT1H-31.948S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT1H-31.948S");
    }

    @Test
    public void test13837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13837");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Days days16 = days7.plus((int) (byte) 1);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Days days18 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days20 = days18.minus(25);
        org.joda.time.Days days21 = days20.negated();
        org.joda.time.Days days22 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days24 = days22.minus(25);
        org.joda.time.Days days25 = days24.negated();
        org.joda.time.Days days26 = days20.plus(days25);
        java.lang.String str27 = days26.toString();
        boolean boolean28 = days16.isLessThan(days26);
        org.joda.time.Duration duration29 = days16.toStandardDuration();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((-1L));
        long long32 = duration31.getMillis();
        long long33 = duration31.getMillis();
        boolean boolean34 = duration29.isEqual((org.joda.time.ReadableDuration) duration31);
        long long35 = duration31.getMillis();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P0D" + "'", str27, "P0D");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-86400000L) + "'", long32 == (-86400000L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-86400000L) + "'", long33 == (-86400000L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-86400000L) + "'", long35 == (-86400000L));
    }

    @Test
    public void test13838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13838");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean3 = hours0.isGreaterThan(hours2);
        org.joda.time.Hours hours5 = hours0.minus((int) (byte) 0);
        org.joda.time.Hours hours7 = hours5.minus((int) '#');
        org.joda.time.Duration duration8 = hours7.toStandardDuration();
        org.joda.time.Duration duration9 = hours7.toStandardDuration();
        java.lang.String str10 = hours7.toString();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        int int17 = mutablePeriod15.get(durationFieldType16);
        org.joda.time.Hours hours18 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Hours hours20 = hours18.dividedBy((int) (short) -1);
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours23 = hours21.minus(0);
        org.joda.time.Hours hours24 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours26 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean27 = hours24.isGreaterThan(hours26);
        boolean boolean28 = hours23.isLessThan(hours26);
        java.lang.String str29 = hours23.toString();
        org.joda.time.Hours hours30 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours31 = hours23.plus(hours30);
        org.joda.time.Hours hours32 = hours18.minus(hours23);
        org.joda.time.Duration duration33 = org.joda.time.Duration.ZERO;
        long long34 = duration33.getStandardDays();
        org.joda.time.Hours hours35 = duration33.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType36 = hours35.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod37 = hours35.toMutablePeriod();
        org.joda.time.Hours hours38 = org.joda.time.Hours.THREE;
        org.joda.time.DurationFieldType durationFieldType39 = hours38.getFieldType();
        org.joda.time.Hours hours40 = hours35.plus(hours38);
        org.joda.time.Hours hours41 = hours23.plus(hours40);
        java.lang.String str42 = hours23.toString();
        org.joda.time.DurationFieldType durationFieldType43 = hours23.getFieldType();
        org.joda.time.Hours hours44 = hours7.plus(hours23);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT-32H" + "'", str10, "PT-32H");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT4H" + "'", str29, "PT4H");
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT4H" + "'", str42, "PT4H");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(hours44);
    }

    @Test
    public void test13839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13839");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant7, periodType8);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, readableDuration12);
        mutablePeriod13.setHours((int) (short) 100);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration17, chronology18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType23 = seconds22.getFieldType();
        mutablePeriod13.add(durationFieldType23, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
        mutablePeriod28.setHours((int) (short) 100);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration32, chronology35);
        int int37 = duration4.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration38 = duration32.toDuration();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays(0L);
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = duration40.toPeriod();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType45, chronology46);
        org.joda.time.Duration duration48 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.Period period51 = period47.withFields((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = period47.normalizedStandard();
        org.joda.time.Period period54 = period52.plusDays((int) (short) 100);
        org.joda.time.Period period56 = period54.plusDays(35);
        org.joda.time.Period period57 = period42.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(readableInstant58, readableDuration59);
        mutablePeriod60.setHours((int) (short) 100);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        mutablePeriod60.setPeriod((org.joda.time.ReadableDuration) duration64, chronology65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds69 = duration68.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType70 = seconds69.getFieldType();
        mutablePeriod60.add(durationFieldType70, (int) (short) 0);
        java.lang.String str73 = durationFieldType70.toString();
        boolean boolean74 = period54.isSupported(durationFieldType70);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(readableInstant75, readableDuration76);
        org.joda.time.Period period78 = mutablePeriod77.toPeriod();
        int int79 = period78.size();
        org.joda.time.Period period80 = period78.toPeriod();
        int int81 = period80.getYears();
        org.joda.time.Period period83 = period80.plusWeeks((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(readableInstant84, readableDuration85);
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds89 = duration88.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType90 = seconds89.getFieldType();
        mutablePeriod86.add(durationFieldType90, 52);
        int int93 = period83.get(durationFieldType90);
        java.lang.String str94 = durationFieldType90.getName();
        org.joda.time.Period period96 = period54.withField(durationFieldType90, (int) '4');
        int int97 = period96.getDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "seconds" + "'", str73, "seconds");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(seconds89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "seconds" + "'", str94, "seconds");
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
    }

    @Test
    public void test13840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13840");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours9 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean12 = hours9.isGreaterThan(hours11);
        org.joda.time.Period period13 = period7.withFields((org.joda.time.ReadablePeriod) hours11);
        org.joda.time.Period period15 = period7.plusYears((int) '4');
        org.joda.time.Period period17 = period15.plusDays(60);
        org.joda.time.Period period19 = period15.plusMinutes((int) '#');
        org.joda.time.Period period21 = period19.minusYears(32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks22 = period19.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test13841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13841");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(25, (int) 'a', (int) (short) 10, 4, 8, (int) (short) 100, (int) (short) 0, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DurationField durationField11 = durationFieldType9.getField(chronology10);
        mutablePeriod8.add(durationFieldType9, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod15.addWeeks((int) (byte) 0);
        int int18 = mutablePeriod15.getWeeks();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 0, (long) 2, chronology21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType27 = periodType26.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds32 = duration31.toStandardSeconds();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        boolean boolean36 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType39 = periodType38.withMinutesRemoved();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, readableInstant37, periodType38);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration34.toIntervalFrom(readableInstant41);
        mutablePeriod29.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        mutablePeriod22.setPeriod((org.joda.time.ReadableInterval) interval42);
        mutablePeriod15.setPeriod((org.joda.time.ReadableInterval) interval42);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Seconds seconds48 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Seconds seconds49 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval42);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
    }

    @Test
    public void test13842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13842");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 1);
        org.joda.time.Duration duration3 = duration1.plus((long) 35);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.Seconds seconds5 = seconds4.negated();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
    }

    @Test
    public void test13843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13843");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT-60S");
        int int2 = seconds1.getSeconds();
        org.joda.time.Seconds seconds4 = seconds1.minus(4);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType6 = seconds5.getPeriodType();
        java.lang.String str7 = seconds5.toString();
        org.joda.time.Seconds seconds9 = seconds5.plus((int) (short) 1);
        int int10 = seconds9.getSeconds();
        int int11 = seconds9.getSeconds();
        org.joda.time.Seconds seconds12 = seconds1.plus(seconds9);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = seconds1.compareTo(baseSingleFieldPeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-60) + "'", int2 == (-60));
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(seconds12);
    }

    @Test
    public void test13844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13844");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        org.joda.time.PeriodType periodType9 = periodFormatter8.getParseType();
        boolean boolean10 = periodFormatter8.isParser();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType13);
        int int15 = period14.getMillis();
        org.joda.time.Period period17 = period14.plusDays((int) 'a');
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        java.lang.String str21 = seconds20.toString();
        org.joda.time.PeriodType periodType22 = seconds20.getPeriodType();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withDaysRemoved();
        org.joda.time.Period period25 = period17.normalizedStandard(periodType24);
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter8.withParseType(periodType24);
        java.lang.StringBuffer stringBuffer27 = null;
        org.joda.time.Period period29 = org.joda.time.Period.years(7);
        int int30 = period29.getHours();
        org.joda.time.Period period32 = period29.plusHours((int) (short) 0);
        int int33 = period32.size();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter8.printTo(stringBuffer27, (org.joda.time.ReadablePeriod) period32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 25 + "'", int15 == 25);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT60S" + "'", str21, "PT60S");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
    }

    @Test
    public void test13845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13845");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration17.toPeriodTo(readableInstant19);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration23 = duration8.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period25 = duration23.toPeriod(periodType24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        boolean boolean32 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period33 = duration27.toPeriod();
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Seconds seconds35 = period34.toStandardSeconds();
        org.joda.time.Period period36 = period34.negated();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period34.toDurationTo(readableInstant37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        boolean boolean43 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration40);
        boolean boolean44 = duration23.isEqual((org.joda.time.ReadableDuration) duration40);
        java.lang.String str45 = duration40.toString();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration40, readableInstant46);
        org.joda.time.Period period48 = period47.negated();
        org.joda.time.Period period50 = period48.plusWeeks((-62));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT600S" + "'", str45, "PT600S");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test13846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13846");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 'a', (long) (short) 0, periodType6);
        java.lang.String str8 = periodType6.toString();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType6);
        org.joda.time.Hours hours10 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours12 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean13 = hours10.isGreaterThan(hours12);
        org.joda.time.Hours hours15 = hours10.minus((int) (byte) 0);
        org.joda.time.Hours hours17 = hours15.plus(0);
        org.joda.time.Hours hours19 = hours17.dividedBy(32);
        org.joda.time.PeriodType periodType20 = hours19.getPeriodType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) readableInstant1, periodType20, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.addMonths(600);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Millis]" + "'", str8, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test13847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13847");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = period1.plusHours((-1));
        org.joda.time.Period period12 = period1.withDays((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod14 = org.joda.time.MutablePeriod.parse("PT60S");
        org.joda.time.Period period15 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        int int16 = mutablePeriod14.getHours();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationTo(readableInstant17);
        mutablePeriod14.addWeeks(60);
        mutablePeriod14.addMillis(10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test13848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13848");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes8 = minutes0.negated();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes12 = minutes10.dividedBy((int) '#');
        org.joda.time.Minutes minutes13 = minutes0.minus(minutes10);
        java.lang.String str14 = minutes13.toString();
        java.lang.String str15 = minutes13.toString();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.minutesIn(readableInterval16);
        java.lang.String str18 = minutes17.toString();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType20 = minutes19.getPeriodType();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes24 = minutes19.minus(minutes21);
        boolean boolean25 = minutes17.isLessThan(minutes19);
        org.joda.time.Minutes minutes27 = minutes17.plus(3);
        org.joda.time.PeriodType periodType28 = minutes17.getPeriodType();
        boolean boolean29 = minutes13.equals((java.lang.Object) minutes17);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0M" + "'", str15, "PT0M");
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0M" + "'", str18, "PT0M");
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test13849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13849");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) days0, periodType1, chronology2);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod8.get(durationFieldType9);
        org.joda.time.Chronology chronology11 = null;
        boolean boolean12 = durationFieldType9.isSupported(chronology11);
        mutablePeriod3.add(durationFieldType9, (int) (short) -1);
        mutablePeriod3.addYears((-7));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test13850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13850");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT600S");
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT0.052S");
        org.joda.time.Duration duration5 = duration3.minus((long) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType11);
        org.joda.time.Period period13 = duration3.toPeriod(periodType11);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) 10);
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = periodType23.indexOf(durationFieldType24);
        org.joda.time.PeriodType periodType26 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', (long) 'a', periodType26);
        java.lang.String str28 = periodType26.getName();
        org.joda.time.PeriodType periodType29 = periodType26.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant15, (org.joda.time.ReadableDuration) duration17, periodType30);
        org.joda.time.Period period32 = duration17.toPeriod();
        org.joda.time.Duration duration34 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 0);
        org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) duration3);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Days" + "'", str28, "Days");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
    }

    @Test
    public void test13851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13851");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 100, 60L);
        long long3 = duration2.getStandardSeconds();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test13852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13852");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.Period period6 = period1.plusHours((int) (short) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        java.lang.String str10 = seconds9.toString();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = seconds9.isSupported(durationFieldType11);
        org.joda.time.Seconds seconds13 = null;
        org.joda.time.Seconds seconds14 = seconds9.minus(seconds13);
        org.joda.time.Period period15 = period1.withFields((org.joda.time.ReadablePeriod) seconds13);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.Period period18 = period15.multipliedBy(600);
        org.joda.time.Period period20 = period18.minusYears(194);
        int int21 = period18.getMinutes();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT60S" + "'", str10, "PT60S");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test13853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13853");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        boolean boolean4 = weeks1.isLessThan(weeks3);
        org.joda.time.Weeks weeks5 = weeks1.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks1, chronology6);
        org.joda.time.Weeks weeks9 = weeks1.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks11 = weeks9.multipliedBy((int) (short) -1);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksIn(readableInterval14);
        boolean boolean16 = weeks13.isLessThan(weeks15);
        org.joda.time.Weeks weeks17 = weeks13.negated();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) weeks13, chronology18);
        org.joda.time.Weeks weeks21 = weeks13.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.weeksIn(readableInterval24);
        boolean boolean26 = weeks23.isLessThan(weeks25);
        org.joda.time.Weeks weeks27 = weeks23.negated();
        org.joda.time.MutablePeriod mutablePeriod28 = weeks27.toMutablePeriod();
        org.joda.time.Weeks weeks29 = weeks13.minus(weeks27);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.weeksIn(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        boolean boolean34 = weeks31.isLessThan(weeks33);
        org.joda.time.Weeks weeks36 = weeks33.minus((int) (short) -1);
        org.joda.time.Weeks weeks38 = weeks36.multipliedBy(0);
        org.joda.time.Weeks weeks39 = null;
        boolean boolean40 = weeks36.isLessThan(weeks39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeksIn(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.weeksIn(readableInterval43);
        boolean boolean45 = weeks42.isLessThan(weeks44);
        org.joda.time.Weeks weeks46 = weeks42.negated();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((java.lang.Object) weeks42, chronology47);
        int[] intArray49 = period48.getValues();
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = period48.getFieldTypes();
        boolean boolean51 = weeks36.equals((java.lang.Object) durationFieldTypeArray50);
        org.joda.time.Weeks weeks52 = weeks29.minus(weeks36);
        org.joda.time.Weeks weeks53 = org.joda.time.Weeks.TWO;
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.weeksIn(readableInterval54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Weeks weeks57 = org.joda.time.Weeks.weeksIn(readableInterval56);
        boolean boolean58 = weeks55.isLessThan(weeks57);
        org.joda.time.Weeks weeks59 = weeks55.negated();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeksIn(readableInterval60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeksIn(readableInterval62);
        boolean boolean64 = weeks61.isLessThan(weeks63);
        org.joda.time.Weeks weeks65 = weeks61.negated();
        org.joda.time.Weeks weeks67 = weeks65.minus((int) (byte) 100);
        org.joda.time.Weeks weeks68 = weeks59.plus(weeks65);
        boolean boolean69 = weeks53.isLessThan(weeks65);
        org.joda.time.Weeks weeks71 = weeks53.multipliedBy((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.Weeks weeks73 = org.joda.time.Weeks.weeksIn(readableInterval72);
        org.joda.time.Weeks weeks75 = weeks73.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks76 = weeks71.plus(weeks73);
        org.joda.time.Weeks weeks77 = weeks52.plus(weeks76);
        org.joda.time.Weeks weeks79 = weeks76.multipliedBy((int) (byte) -1);
        boolean boolean80 = weeks11.isLessThan(weeks76);
        org.joda.time.PeriodType periodType81 = weeks11.getPeriodType();
        org.joda.time.Weeks weeks82 = weeks11.negated();
        org.joda.time.Weeks weeks84 = weeks11.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks85 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks11);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(weeks71);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertNotNull(weeks76);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks84);
        org.junit.Assert.assertNotNull(weeks85);
    }

    @Test
    public void test13854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13854");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-86400000L));
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.joda.time.Period period3 = days2.toPeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) days2);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test13855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13855");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, (long) '#');
        int int3 = period2.getSeconds();
        org.joda.time.Period period4 = period2.toPeriod();
        org.joda.time.Period period6 = period2.plusWeeks(0);
        org.joda.time.Period period8 = period2.withSeconds(600);
        org.joda.time.Period period10 = period8.withMinutes((int) (byte) 100);
        org.joda.time.Period period12 = period10.withHours(97);
        org.joda.time.Period period14 = period12.plusDays((int) '#');
        int int15 = period12.getYears();
        org.joda.time.Period period17 = period12.minusWeeks(23);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test13856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13856");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.plusDays(1);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period8 = period3.withFields((org.joda.time.ReadablePeriod) minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        int int13 = minutes11.getMinutes();
        java.lang.String str14 = minutes11.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        java.lang.String str17 = minutes15.toString();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes19 = minutes11.negated();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((int) '#');
        org.joda.time.Minutes minutes24 = minutes11.minus(minutes21);
        boolean boolean25 = minutes10.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes26 = minutes7.minus(minutes21);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant32, readableDuration33);
        mutablePeriod34.setPeriod((long) ' ', (long) 52);
        mutablePeriod34.addDays(100);
        org.joda.time.PeriodType periodType40 = mutablePeriod34.getPeriodType();
        org.joda.time.Period period41 = new org.joda.time.Period((long) (short) 0, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType40);
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant27, readableInstant28, periodType40);
        org.joda.time.Period period45 = period43.plusMonths(13);
        org.joda.time.Duration duration46 = period43.toStandardDuration();
        org.joda.time.Period period47 = period43.negated();
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy(100);
        org.joda.time.Period period51 = minutes50.toPeriod();
        boolean boolean52 = minutes21.isLessThan(minutes50);
        org.joda.time.DurationFieldType durationFieldType53 = minutes21.getFieldType();
        org.joda.time.Minutes minutes54 = minutes21.negated();
        org.joda.time.PeriodType periodType55 = minutes21.getPeriodType();
        int int56 = periodType55.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2147483648M" + "'", str17, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test13857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13857");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        int int14 = minutes12.getValue((int) (byte) 0);
        org.joda.time.Minutes minutes16 = minutes12.minus(7);
        org.joda.time.Minutes minutes17 = null;
        org.joda.time.Minutes minutes18 = minutes16.minus(minutes17);
        org.joda.time.PeriodType periodType19 = minutes18.getPeriodType();
        org.joda.time.Minutes minutes21 = minutes18.minus(71);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test13858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13858");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardDays();
        org.joda.time.Hours hours2 = duration0.toStandardHours();
        org.joda.time.Duration duration4 = duration0.withMillis(0L);
        org.joda.time.Duration duration5 = duration0.toDuration();
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        long long7 = duration6.getStandardDays();
        org.joda.time.Hours hours8 = duration6.toStandardHours();
        long long9 = duration6.getStandardMinutes();
        org.joda.time.Duration duration10 = duration6.toDuration();
        org.joda.time.Duration duration12 = duration0.withDurationAdded((org.joda.time.ReadableDuration) duration10, 600);
        java.lang.String str13 = duration12.toString();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
    }

    @Test
    public void test13859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13859");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.Object obj4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(obj4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration5);
        long long8 = duration5.getMillis();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days10 = duration1.toStandardDays();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration1.toPeriod(chronology11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration14.toPeriod(periodType15, chronology17);
        org.joda.time.Days days19 = org.joda.time.Days.ZERO;
        int int20 = days19.getDays();
        org.joda.time.Period period22 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days23 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.PeriodType periodType27 = days26.getPeriodType();
        boolean boolean28 = days23.isGreaterThan(days26);
        org.joda.time.Period period30 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days31 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Days days32 = days26.minus(days31);
        org.joda.time.Days days33 = days19.minus(days26);
        boolean boolean34 = duration14.equals((java.lang.Object) days26);
        org.joda.time.Period period35 = duration14.toPeriod();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant38, readableDuration39);
        mutablePeriod40.setHours((int) (short) 100);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration44, chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant37, (org.joda.time.ReadableDuration) duration44, periodType48);
        org.joda.time.Duration duration52 = duration44.withMillis((long) 10);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant36, (org.joda.time.ReadableDuration) duration44);
        boolean boolean54 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration14.toPeriod(chronology55);
        boolean boolean57 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Days days64 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) days64, periodType65, chronology66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 52, periodType65);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 7, (-60L), periodType65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(4L, (long) (-672), periodType65, chronology70);
        org.joda.time.Period period72 = duration1.toPeriodTo(readableInstant58, periodType65);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test13860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PT-25H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13861");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-6048000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13862");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.multipliedBy((int) (short) 100);
        java.lang.String str4 = seconds3.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
    }

    @Test
    public void test13863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13863");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        boolean boolean7 = days2.isGreaterThan(days5);
        int int8 = days2.size();
        org.joda.time.Days days9 = days2.negated();
        org.joda.time.Days days10 = days2.negated();
        org.joda.time.Days days12 = days10.dividedBy((-8));
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period20 = period17.withSeconds((int) ' ');
        org.joda.time.Period period21 = period14.minus((org.joda.time.ReadablePeriod) period17);
        int int22 = period17.getDays();
        java.lang.String str23 = period17.toString();
        org.joda.time.Period period25 = period17.plusMillis(0);
        int int26 = period17.getMillis();
        org.joda.time.Period period28 = period17.minusWeeks((-97));
        org.joda.time.Days days29 = period17.toStandardDays();
        boolean boolean30 = days10.isLessThan(days29);
        java.lang.String str31 = days29.toString();
        int int32 = days29.getDays();
        org.joda.time.Days days33 = org.joda.time.Days.THREE;
        org.joda.time.Days days35 = days33.minus((-32));
        org.joda.time.Days days36 = days29.minus(days33);
        org.joda.time.Days days37 = days36.negated();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P0D" + "'", str31, "P0D");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
    }

    @Test
    public void test13864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13864");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withMillis((int) (byte) -1);
        org.joda.time.Period period5 = period1.withMillis(0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        boolean boolean10 = weeks7.isLessThan(weeks9);
        org.joda.time.Weeks weeks12 = weeks9.minus((int) (short) -1);
        org.joda.time.Weeks weeks14 = weeks12.multipliedBy(0);
        boolean boolean15 = period1.equals((java.lang.Object) weeks14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn(readableInterval16);
        org.joda.time.Weeks weeks19 = weeks17.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks21 = weeks17.dividedBy((int) 'a');
        java.lang.String str22 = weeks17.toString();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksIn(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksIn(readableInterval25);
        boolean boolean27 = weeks24.isLessThan(weeks26);
        org.joda.time.Weeks weeks28 = weeks24.negated();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) weeks24, chronology29);
        org.joda.time.Weeks weeks32 = weeks24.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Weeks weeks34 = org.joda.time.Weeks.weeksIn(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeksIn(readableInterval35);
        boolean boolean37 = weeks34.isLessThan(weeks36);
        org.joda.time.Weeks weeks38 = weeks34.negated();
        org.joda.time.MutablePeriod mutablePeriod39 = weeks38.toMutablePeriod();
        org.joda.time.Weeks weeks40 = weeks24.minus(weeks38);
        org.joda.time.Weeks weeks41 = weeks17.plus(weeks40);
        org.joda.time.Weeks weeks42 = weeks14.plus(weeks40);
        org.joda.time.DurationFieldType durationFieldType43 = weeks42.getFieldType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P0W" + "'", str22, "P0W");
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(durationFieldType43);
    }

    @Test
    public void test13865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13865");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period10 = period1.plusHours((-1));
        org.joda.time.Period period12 = period1.withDays((int) 'a');
        org.joda.time.Period period14 = period12.withSeconds(52);
        int int15 = period12.getMillis();
        org.joda.time.Period period17 = period12.minusYears(0);
        int int18 = period12.getYears();
        org.joda.time.Period period20 = period12.plusMinutes(60);
        org.joda.time.Period period22 = period20.plusMillis((int) (byte) 10);
        org.joda.time.Period period24 = period20.withSeconds((int) (short) 0);
        org.joda.time.Period period26 = org.joda.time.Period.days((int) (byte) 1);
        org.joda.time.Period period28 = period26.minusMillis(1);
        org.joda.time.Period period29 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        int int30 = period29.size();
        org.joda.time.Period period32 = period29.multipliedBy(688);
        org.joda.time.Period period34 = period29.plusWeeks((-3));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test13866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13866");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((-86400000L), (long) (-2147483588), chronology2);
    }

    @Test
    public void test13867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13867");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PT20S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13868");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) '#');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13869");
        org.joda.time.Period period4 = new org.joda.time.Period(8, 2, (-1), (int) (short) 0);
        org.joda.time.Period period6 = period4.minusWeeks((int) (byte) 100);
        int int7 = period6.getMonths();
        int int8 = period6.getWeeks();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-100) + "'", int8 == (-100));
    }

    @Test
    public void test13870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13870");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Seconds seconds2 = period1.toStandardSeconds();
        org.joda.time.Period period4 = period1.withMonths(0);
        int int5 = period4.getMinutes();
        org.joda.time.Period period7 = period4.withHours(40);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) period7);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test13871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13871");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant4, readableDuration5);
        mutablePeriod6.setHours((int) (short) 100);
        boolean boolean9 = periodType3.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        long long11 = duration10.getStandardDays();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        int int18 = period16.get(durationFieldType17);
        int int19 = mutablePeriod6.get(durationFieldType17);
        mutablePeriod6.addMillis((int) (byte) 0);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod6.setPeriod((-60001L), chronology23);
        mutablePeriod6.setMinutes((-637));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13872");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = periodFormatter2.getLocale();
        boolean boolean8 = periodFormatter2.isParser();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter2.withLocale(locale9);
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = periodFormatter2.parsePeriod("PT540S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNull(periodPrinter11);
    }

    @Test
    public void test13873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13873");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (byte) 1);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13874");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodParser periodParser4 = periodFormatter3.getParser();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.joda.time.Seconds seconds10 = seconds7.plus(25);
        org.joda.time.Seconds seconds11 = seconds7.negated();
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter3.withParseType(periodType12);
        boolean boolean14 = periodFormatter3.isPrinter();
        java.util.Locale locale15 = periodFormatter3.getLocale();
        boolean boolean16 = periodFormatter3.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter17 = periodFormatter3.getPrinter();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter3.withParseType(periodType18);
        boolean boolean21 = periodFormatter3.isParser();
        org.joda.time.format.PeriodParser periodParser22 = periodFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = org.joda.time.Period.parse("P100M10WT1M0.100S", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(periodPrinter17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(periodParser22);
    }

    @Test
    public void test13875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13875");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 10, chronology1);
        org.joda.time.Period period4 = period2.minusHours(100);
        org.joda.time.Period period6 = period4.withSeconds(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test13876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13876");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Period period2 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Days days5 = days3.minus(10);
        boolean boolean6 = days0.isGreaterThan(days3);
        org.joda.time.Days days7 = org.joda.time.Days.ZERO;
        org.joda.time.Days days8 = org.joda.time.Days.ZERO;
        org.joda.time.Period period10 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Days days13 = days11.minus(10);
        boolean boolean14 = days8.isGreaterThan(days11);
        org.joda.time.Days days15 = days7.minus(days8);
        org.joda.time.Days days16 = days0.plus(days7);
        org.joda.time.Duration duration17 = days0.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, readableInstant22, periodType23);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType23);
        org.joda.time.Period period26 = duration17.toPeriodFrom(readableInstant18, periodType23);
        org.joda.time.Period period28 = period26.withYears((-73));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = period28.withMinutes((-637));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test13877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13877");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.DurationFieldType durationFieldType11 = period9.getFieldType((int) (byte) 0);
        org.joda.time.PeriodType periodType12 = period9.getPeriodType();
        org.joda.time.Period period14 = period9.multipliedBy(20);
        org.joda.time.Period period15 = period9.normalizedStandard();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13878");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 671, (long) 88500);
    }

    @Test
    public void test13879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13879");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableDuration17);
        mutablePeriod18.setHours((int) (short) 100);
        boolean boolean21 = periodType15.equals((java.lang.Object) mutablePeriod18);
        org.joda.time.PeriodType periodType22 = periodType15.withMonthsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant11, periodType15);
        org.joda.time.PeriodType periodType24 = periodType15.withMonthsRemoved();
        java.lang.String str25 = periodType24.toString();
        java.lang.String str26 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(periodType24);
        mutablePeriod27.addMillis((int) (short) 0);
        mutablePeriod27.setDays((-97));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod27.setMonths(596);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Days]" + "'", str25, "PeriodType[Days]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Days" + "'", str26, "Days");
    }

    @Test
    public void test13880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13880");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes4 = minutes1.plus(minutes3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.ZERO;
        boolean boolean7 = minutes5.isLessThan(minutes6);
        boolean boolean8 = minutes1.isLessThan(minutes5);
        org.joda.time.PeriodType periodType9 = minutes1.getPeriodType();
        org.joda.time.Duration duration10 = minutes1.toStandardDuration();
        long long11 = duration10.getStandardHours();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration10.toPeriodFrom(readableInstant12);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (short) 0, (long) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        java.lang.Object obj19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(obj19);
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant17, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration24.toPeriod(periodType25, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.Period period32 = duration24.toPeriodTo(readableInstant29, periodType31);
        org.joda.time.Period period33 = duration24.toPeriod();
        org.joda.time.Duration duration34 = duration20.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration35 = duration20.toDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.Duration duration37 = duration16.plus((org.joda.time.ReadableDuration) duration35);
        long long38 = duration37.getStandardMinutes();
        boolean boolean39 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration37);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13881");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration7.toPeriod(periodType8, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.Period period15 = duration7.toPeriodTo(readableInstant12, periodType14);
        org.joda.time.Period period16 = duration7.toPeriod();
        org.joda.time.Duration duration17 = duration3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration18 = duration3.toDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.setPeriod(1L, (long) (byte) 100);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType27 = seconds26.getPeriodType();
        java.lang.String str28 = seconds26.toString();
        org.joda.time.Seconds seconds30 = seconds26.plus((int) (short) 1);
        int int31 = seconds30.getSeconds();
        mutablePeriod22.add((org.joda.time.ReadablePeriod) seconds30);
        mutablePeriod22.setMinutes(8);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds37 = duration36.toStandardSeconds();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds40 = duration39.toStandardSeconds();
        boolean boolean41 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds44 = duration43.toStandardSeconds();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds47 = duration46.toStandardSeconds();
        boolean boolean48 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period49 = duration43.toPeriod();
        boolean boolean50 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = duration39.toPeriodTo(readableInstant51);
        long long53 = duration39.getStandardDays();
        org.joda.time.format.PeriodPrinter periodPrinter54 = null;
        org.joda.time.format.PeriodParser periodParser55 = null;
        org.joda.time.format.PeriodFormatter periodFormatter56 = new org.joda.time.format.PeriodFormatter(periodPrinter54, periodParser55);
        org.joda.time.format.PeriodParser periodParser57 = periodFormatter56.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter58 = periodFormatter56.getPrinter();
        java.util.Locale locale59 = null;
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter56.withLocale(locale59);
        java.util.Locale locale61 = null;
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter60.withLocale(locale61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(periodType63);
        org.joda.time.format.PeriodFormatter periodFormatter65 = periodFormatter60.withParseType(periodType63);
        org.joda.time.Period period66 = duration39.toPeriod(periodType63);
        long long67 = duration39.getStandardMinutes();
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration39);
        long long69 = duration39.getStandardHours();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds73 = duration72.toStandardSeconds();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds76 = duration75.toStandardSeconds();
        boolean boolean77 = duration72.isLongerThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType80 = periodType79.withMinutesRemoved();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration75, readableInstant78, periodType79);
        org.joda.time.Period period82 = new org.joda.time.Period(readableInstant70, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration83 = duration75.toDuration();
        org.joda.time.Duration duration84 = duration83.toDuration();
        int int85 = duration39.compareTo((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration87 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration83, (-2147483648));
        org.joda.time.Seconds seconds88 = duration19.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration19.toIntervalTo(readableInstant89);
        org.joda.time.Period period91 = duration19.toPeriod();
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNull(periodParser57);
        org.junit.Assert.assertNull(periodPrinter58);
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodFormatter65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(seconds73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(seconds76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(seconds88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test13882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(100L, chronology1);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        int int9 = mutablePeriod7.get(durationFieldType8);
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = durationFieldType8.isSupported(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DurationField durationField13 = durationFieldType8.getField(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DurationField durationField15 = durationFieldType8.getField(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType8.getField(chronology16);
        org.joda.time.Period period19 = period2.withField(durationFieldType8, 32);
        java.lang.String str20 = durationFieldType8.toString();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str25 = duration24.toString();
        org.joda.time.Duration duration27 = duration24.minus((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType30 = minutes29.getPeriodType();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = duration27.toPeriodFrom(readableInstant28, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 0, (long) 3, periodType30);
        org.joda.time.PeriodType periodType34 = periodType30.withMonthsRemoved();
        org.joda.time.PeriodType periodType35 = periodType30.withYearsRemoved();
        org.joda.time.Chronology chronology36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) str20, periodType35, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"days\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT600S" + "'", str25, "PT600S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test13883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13883");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.minus(0);
        org.joda.time.Hours hours3 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean6 = hours3.isGreaterThan(hours5);
        boolean boolean7 = hours2.isLessThan(hours5);
        java.lang.String str8 = hours2.toString();
        org.joda.time.Hours hours9 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours10 = hours2.plus(hours9);
        org.joda.time.Hours hours12 = hours10.multipliedBy(658);
        org.joda.time.Duration duration13 = org.joda.time.Duration.ZERO;
        long long14 = duration13.getStandardDays();
        org.joda.time.Hours hours15 = duration13.toStandardHours();
        org.joda.time.Hours hours16 = hours15.negated();
        org.joda.time.Hours hours17 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours19 = hours17.minus(0);
        org.joda.time.Hours hours20 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours22 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean23 = hours20.isGreaterThan(hours22);
        boolean boolean24 = hours19.isLessThan(hours22);
        java.lang.String str25 = hours19.toString();
        org.joda.time.Hours hours26 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours27 = hours19.plus(hours26);
        org.joda.time.Duration duration28 = hours26.toStandardDuration();
        org.joda.time.Hours hours30 = hours26.minus((int) '#');
        boolean boolean31 = hours16.isLessThan(hours30);
        org.joda.time.Duration duration32 = hours30.toStandardDuration();
        org.joda.time.Hours hours33 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours35 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean36 = hours33.isGreaterThan(hours35);
        org.joda.time.Hours hours37 = hours30.plus(hours33);
        org.joda.time.Hours hours38 = hours10.minus(hours37);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT4H" + "'", str8, "PT4H");
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT4H" + "'", str25, "PT4H");
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
    }

    @Test
    public void test13884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13884");
        org.joda.time.Days days1 = org.joda.time.Days.days(3);
        int int2 = days1.getDays();
        java.lang.String str3 = days1.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P3D" + "'", str3, "P3D");
    }

    @Test
    public void test13885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13885");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 25);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Interval interval3 = duration1.toIntervalTo(readableInstant2);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DurationFieldType durationFieldType5 = weeks4.getFieldType();
        org.joda.time.Weeks weeks7 = weeks4.multipliedBy((int) (short) 1);
        org.joda.time.Weeks weeks8 = null;
        org.joda.time.Weeks weeks9 = weeks7.minus(weeks8);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
    }

    @Test
    public void test13886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13886");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 75, 3600000L, chronology2);
    }

    @Test
    public void test13887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13887");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration17.toPeriodTo(readableInstant19);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration23 = duration8.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant24, readableDuration25);
        mutablePeriod26.setHours((int) (short) 100);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration30, chronology31);
        int int33 = mutablePeriod26.getWeeks();
        int int34 = mutablePeriod26.size();
        mutablePeriod26.addMonths(42);
        boolean boolean37 = duration21.equals((java.lang.Object) 42);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration41 = duration39.plus((long) (byte) 1);
        org.joda.time.Duration duration42 = duration21.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds46 = duration45.toStandardSeconds();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds49 = duration48.toStandardSeconds();
        boolean boolean50 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType53 = periodType52.withMinutesRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration48, readableInstant51, periodType52);
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant43, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration56 = duration21.plus((org.joda.time.ReadableDuration) duration48);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test13888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13888");
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = duration2.toPeriod(chronology3);
        org.joda.time.Days days5 = duration2.toStandardDays();
        long long6 = duration2.getStandardMinutes();
        org.joda.time.Duration duration7 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        boolean boolean10 = duration2.isEqual((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = periodType14.indexOf(durationFieldType15);
        org.joda.time.PeriodType periodType17 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period19 = duration7.toPeriod(periodType17);
        org.joda.time.Period period20 = new org.joda.time.Period(84326400L, (-5184000L), periodType17);
        org.joda.time.Period period22 = period20.withDays(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = period22.withSeconds(194);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test13889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13889");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isPrinter();
        boolean boolean12 = periodFormatter10.isParser();
        boolean boolean13 = periodFormatter10.isPrinter();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter10.withLocale(locale14);
        boolean boolean16 = periodFormatter10.isParser();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant24, periodType25);
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter10.withParseType(periodType25);
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodFormatter28);
    }

    @Test
    public void test13890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13890");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        int int2 = minutes0.getMinutes();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        java.lang.String str6 = minutes4.toString();
        boolean boolean7 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes9 = minutes4.minus(0);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod11);
        boolean boolean13 = minutes4.isGreaterThan(minutes12);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType15 = minutes14.getPeriodType();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.ZERO;
        boolean boolean20 = minutes18.isLessThan(minutes19);
        boolean boolean21 = minutes14.isLessThan(minutes18);
        org.joda.time.Minutes minutes23 = minutes18.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy(54);
        org.joda.time.Minutes minutes26 = null;
        boolean boolean27 = minutes25.isGreaterThan(minutes26);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType29 = minutes28.getPeriodType();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes31 = minutes28.plus(minutes30);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.ZERO;
        boolean boolean34 = minutes32.isLessThan(minutes33);
        boolean boolean35 = minutes28.isLessThan(minutes32);
        org.joda.time.DurationFieldType durationFieldType36 = minutes32.getFieldType();
        org.joda.time.Minutes minutes38 = minutes32.multipliedBy((int) (short) 10);
        boolean boolean39 = minutes25.isLessThan(minutes38);
        boolean boolean40 = minutes4.isGreaterThan(minutes25);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration42.toPeriod(periodType43, chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType49 = periodType48.withMonthsRemoved();
        org.joda.time.Period period50 = duration42.toPeriodTo(readableInstant47, periodType49);
        org.joda.time.Minutes minutes51 = duration42.toStandardMinutes();
        org.joda.time.Minutes minutes53 = minutes51.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes55 = minutes51.minus((int) (short) 0);
        org.joda.time.Minutes minutes56 = minutes55.negated();
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType58 = minutes57.getPeriodType();
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes61 = minutes59.multipliedBy((int) ' ');
        org.joda.time.Minutes minutes62 = minutes57.minus(minutes59);
        boolean boolean63 = minutes55.isGreaterThan(minutes57);
        boolean boolean64 = minutes25.equals((java.lang.Object) boolean63);
        org.joda.time.Minutes minutes65 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.ZERO;
        boolean boolean67 = minutes65.isLessThan(minutes66);
        org.joda.time.Minutes minutes69 = minutes66.plus((int) (byte) 0);
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType71 = minutes70.getPeriodType();
        org.joda.time.Minutes minutes72 = minutes69.plus(minutes70);
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes76 = minutes74.dividedBy((int) '#');
        org.joda.time.Minutes minutes77 = minutes70.minus(minutes74);
        org.joda.time.Minutes minutes78 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes79 = org.joda.time.Minutes.ZERO;
        boolean boolean80 = minutes78.isLessThan(minutes79);
        org.joda.time.Minutes minutes82 = minutes79.plus((int) (byte) 0);
        org.joda.time.Minutes minutes83 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType84 = minutes83.getPeriodType();
        org.joda.time.Minutes minutes85 = minutes82.plus(minutes83);
        org.joda.time.Minutes minutes86 = minutes74.plus(minutes83);
        org.joda.time.PeriodType periodType87 = minutes74.getPeriodType();
        org.joda.time.Minutes minutes88 = minutes25.minus(minutes74);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0M" + "'", str3, "PT0M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-2147483648M" + "'", str6, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(minutes88);
    }

    @Test
    public void test13891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13891");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-1));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = period6.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withYearsRemoved();
        org.joda.time.Period period14 = duration1.toPeriodTo(readableInstant2, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = duration1.toPeriodFrom(readableInstant15);
        org.joda.time.Duration duration18 = duration1.withMillis((long) ' ');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (-1), periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, periodType25);
        org.joda.time.Period period27 = duration1.toPeriodTo(readableInstant19, periodType25);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 10);
        long long30 = duration29.getMillis();
        boolean boolean31 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = duration29.toPeriodFrom(readableInstant32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, readableInstant34);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period38 = period35.withFieldAdded(durationFieldType36, (-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 600000L + "'", long30 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test13892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13892");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.minus(10);
        boolean boolean7 = days1.isGreaterThan(days4);
        org.joda.time.Days days8 = days0.minus(days1);
        org.joda.time.Days days9 = org.joda.time.Days.ZERO;
        int int10 = days9.getDays();
        org.joda.time.Period period12 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        boolean boolean18 = days13.isGreaterThan(days16);
        org.joda.time.Period period20 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Days days22 = days16.minus(days21);
        org.joda.time.Days days23 = days9.minus(days16);
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        boolean boolean31 = days26.isGreaterThan(days29);
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Days days35 = days29.minus(days34);
        org.joda.time.Days days36 = days9.plus(days35);
        org.joda.time.Days days37 = days1.minus(days36);
        org.joda.time.Days days38 = org.joda.time.Days.ZERO;
        org.joda.time.Days days39 = days38.negated();
        int int40 = days38.size();
        org.joda.time.Days days42 = days38.minus(0);
        java.lang.String str43 = days38.toString();
        org.joda.time.Period period45 = org.joda.time.Period.weeks((int) (short) 100);
        boolean boolean46 = days38.equals((java.lang.Object) period45);
        org.joda.time.Days days47 = days36.plus(days38);
        org.joda.time.Days days49 = org.joda.time.Days.days(1);
        org.joda.time.Days days51 = days49.minus(600);
        org.joda.time.Days days53 = days49.multipliedBy(600);
        boolean boolean54 = days47.isLessThan(days49);
        org.joda.time.Period period56 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days57 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period59 = period56.withSeconds((int) ' ');
        int int60 = period59.getSeconds();
        org.joda.time.Period period62 = period59.minusMillis(0);
        org.joda.time.Days days63 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period65 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days66 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period68 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days69 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period68);
        org.joda.time.PeriodType periodType70 = days69.getPeriodType();
        boolean boolean71 = days66.isGreaterThan(days69);
        int int72 = days66.size();
        org.joda.time.Days days73 = days66.negated();
        org.joda.time.Days days75 = days73.minus(3);
        org.joda.time.Days days76 = days75.negated();
        java.lang.String str77 = days76.toString();
        org.joda.time.Period period79 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days80 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Period period82 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days83 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period82);
        org.joda.time.PeriodType periodType84 = days83.getPeriodType();
        boolean boolean85 = days80.isGreaterThan(days83);
        org.joda.time.Days days87 = days80.minus(1);
        org.joda.time.Days days89 = days87.dividedBy(60);
        org.joda.time.Days days90 = days76.plus(days87);
        org.joda.time.Days days91 = days63.minus(days90);
        org.joda.time.Days days93 = days91.minus(10);
        org.joda.time.Days days94 = days47.plus(days93);
        java.lang.String str95 = days93.toString();
        org.joda.time.Days days97 = days93.minus((int) (byte) 100);
        org.joda.time.Days days99 = days93.dividedBy(13);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0D" + "'", str43, "P0D");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "P3D" + "'", str77, "P3D");
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(days83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(days89);
        org.junit.Assert.assertNotNull(days90);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertNotNull(days93);
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "P-12D" + "'", str95, "P-12D");
        org.junit.Assert.assertNotNull(days97);
        org.junit.Assert.assertNotNull(days99);
    }

    @Test
    public void test13893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13893");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = duration1.toPeriod(chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        java.lang.String str7 = seconds6.toString();
        org.joda.time.PeriodType periodType8 = seconds6.getPeriodType();
        org.joda.time.PeriodType periodType9 = seconds6.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration1, periodType9);
        int int11 = mutablePeriod10.getDays();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) 2);
        org.joda.time.Chronology chronology14 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration13, chronology14);
        org.joda.time.Duration duration17 = duration13.plus((long) 54);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration13.toIntervalFrom(readableInstant18);
        java.lang.Object obj20 = null;
        boolean boolean21 = duration13.equals(obj20);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT60S" + "'", str7, "PT60S");
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13894");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days1 = days0.negated();
        java.lang.String str2 = days0.toString();
        org.joda.time.Days days3 = org.joda.time.Days.ZERO;
        int int4 = days3.getDays();
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        boolean boolean12 = days7.isGreaterThan(days10);
        org.joda.time.Period period14 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Days days16 = days10.minus(days15);
        org.joda.time.Days days17 = days3.minus(days10);
        org.joda.time.Days days19 = days10.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType21 = days19.getFieldType((int) (short) 0);
        org.joda.time.Days days22 = org.joda.time.Days.ZERO;
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Days days27 = days25.minus(10);
        boolean boolean28 = days22.isGreaterThan(days25);
        org.joda.time.Days days29 = days19.plus(days22);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Days days31 = days0.plus(days29);
        java.lang.String str32 = days29.toString();
        org.joda.time.Days days34 = days29.multipliedBy((-6));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P0D" + "'", str2, "P0D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P1D" + "'", str32, "P1D");
        org.junit.Assert.assertNotNull(days34);
    }

    @Test
    public void test13895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13895");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT-2147483638M0.035S");
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13896");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType3 = seconds2.getPeriodType();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType4);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test13897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13897");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(88500, (-21167965), (int) (short) 1, 0);
    }

    @Test
    public void test13898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13898");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) '#');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13899");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT0.033S");
        int int2 = mutablePeriod1.size();
        int int3 = mutablePeriod1.getSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13900");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod2 = hours0.toMutablePeriod();
        org.joda.time.Hours hours3 = hours0.negated();
        org.joda.time.Hours hours5 = hours0.plus((-999));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
    }

    @Test
    public void test13901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13901");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period3.plusMillis(32);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType8 = periodType6.getFieldType(2);
        java.lang.String str9 = periodType6.getName();
        org.joda.time.Period period10 = new org.joda.time.Period((java.lang.Object) period3, periodType6);
        org.joda.time.Period period12 = period3.minusMonths((int) (short) 0);
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Days days14 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days16 = days14.minus(25);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration18.toPeriod(periodType19, chronology21);
        org.joda.time.Days days23 = org.joda.time.Days.ZERO;
        int int24 = days23.getDays();
        org.joda.time.Period period26 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.PeriodType periodType31 = days30.getPeriodType();
        boolean boolean32 = days27.isGreaterThan(days30);
        org.joda.time.Period period34 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days35 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Days days36 = days30.minus(days35);
        org.joda.time.Days days37 = days23.minus(days30);
        boolean boolean38 = duration18.equals((java.lang.Object) days30);
        org.joda.time.Period period40 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days41 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Days days43 = days41.minus(10);
        org.joda.time.Days days45 = days43.plus((int) (short) -1);
        org.joda.time.Days days46 = days30.plus(days43);
        org.joda.time.Days days48 = days43.minus((-32));
        org.joda.time.Days days49 = days16.plus(days48);
        org.joda.time.DurationFieldType durationFieldType50 = days48.getFieldType();
        org.joda.time.Days days52 = days48.plus((int) (byte) -1);
        boolean boolean53 = period13.equals((java.lang.Object) days48);
        org.joda.time.Period period55 = period13.minusSeconds(74);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "YearMonthDayTime" + "'", str9, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test13902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13902");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType13 = seconds12.getFieldType();
        org.joda.time.Seconds seconds15 = seconds12.plus(25);
        org.joda.time.Seconds seconds16 = seconds12.negated();
        org.joda.time.Seconds seconds17 = seconds9.minus(seconds12);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.seconds((int) 'a');
        org.joda.time.Seconds seconds20 = seconds12.plus(seconds19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod23.addYears((int) '4');
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod23.add((long) 100, chronology27);
        mutablePeriod23.add(1, 10, (int) 'a', 52, (int) (short) 100, 0, (int) (byte) 0, (int) (byte) 10);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.seconds(0);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) seconds39);
        org.joda.time.Seconds seconds42 = seconds39.multipliedBy((int) (byte) 1);
        org.joda.time.Seconds seconds43 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType44 = seconds43.getPeriodType();
        java.lang.String str45 = seconds43.toString();
        java.lang.String str46 = seconds43.toString();
        org.joda.time.Seconds seconds47 = null;
        org.joda.time.Seconds seconds48 = seconds43.minus(seconds47);
        org.joda.time.Seconds seconds49 = seconds42.minus(seconds48);
        org.joda.time.Seconds seconds50 = seconds12.plus(seconds42);
        org.joda.time.Duration duration51 = seconds12.toStandardDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0S" + "'", str46, "PT0S");
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(duration51);
    }

    @Test
    public void test13903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13903");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        boolean boolean9 = days4.isGreaterThan(days7);
        org.joda.time.Period period11 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days13 = days7.minus(days12);
        org.joda.time.Days days14 = days0.minus(days7);
        org.joda.time.Period period16 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType21 = days20.getPeriodType();
        boolean boolean22 = days17.isGreaterThan(days20);
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Days days26 = days20.minus(days25);
        org.joda.time.Days days27 = days0.plus(days26);
        org.joda.time.Days days29 = days0.dividedBy(7);
        org.joda.time.Days days30 = org.joda.time.Days.ZERO;
        int int31 = days30.getDays();
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period36 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType38 = days37.getPeriodType();
        boolean boolean39 = days34.isGreaterThan(days37);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Days days43 = days37.minus(days42);
        org.joda.time.Days days44 = days30.minus(days37);
        org.joda.time.Days days46 = days37.plus((int) (byte) 1);
        org.joda.time.Duration duration47 = days46.toStandardDuration();
        org.joda.time.Days days48 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days50 = days48.minus(25);
        org.joda.time.Days days51 = days50.negated();
        org.joda.time.Days days52 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days54 = days52.minus(25);
        org.joda.time.Days days55 = days54.negated();
        org.joda.time.Days days56 = days50.plus(days55);
        java.lang.String str57 = days56.toString();
        boolean boolean58 = days46.isLessThan(days56);
        org.joda.time.Days days59 = days56.negated();
        org.joda.time.Days days60 = days0.plus(days56);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "P0D" + "'", str57, "P0D");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(days60);
    }

    @Test
    public void test13904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13904");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = period1.withSeconds((int) ' ');
        java.lang.String str5 = period1.toString();
        int int6 = period1.getMinutes();
        int int7 = period1.getDays();
        org.joda.time.Period period9 = period1.minusSeconds((-672));
        org.joda.time.Days days10 = period9.toStandardDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
    }

    @Test
    public void test13905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13905");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-539L), (long) 9);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
    }

    @Test
    public void test13906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13906");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableInstant1);
        org.joda.time.Period period4 = period2.minusWeeks(32);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) 1, periodType8, chronology9);
        org.joda.time.PeriodType periodType11 = mutablePeriod10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant5, readableInstant6, periodType12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) period2, periodType12, chronology14);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test13907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13907");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Period period9 = duration6.toPeriod();
        org.joda.time.Period period11 = period9.withWeeks((int) (byte) 10);
        org.joda.time.Period period13 = period9.withMinutes(0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13908");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) ' ');
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.minus(7);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes0.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT3M" + "'", str3, "PT3M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test13909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13909");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours3 = hours1.plus(1);
        org.joda.time.Hours hours4 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours6 = hours4.minus(10);
        boolean boolean7 = hours1.isLessThan(hours4);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod12.get(durationFieldType13);
        org.joda.time.Hours hours15 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Hours hours17 = hours15.dividedBy((int) (short) -1);
        org.joda.time.Hours hours18 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours20 = hours18.minus(0);
        org.joda.time.Hours hours21 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours23 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean24 = hours21.isGreaterThan(hours23);
        boolean boolean25 = hours20.isLessThan(hours23);
        java.lang.String str26 = hours20.toString();
        org.joda.time.Hours hours27 = org.joda.time.Hours.ZERO;
        org.joda.time.Hours hours28 = hours20.plus(hours27);
        org.joda.time.Hours hours29 = hours15.minus(hours20);
        org.joda.time.Hours hours31 = hours20.dividedBy(1);
        org.joda.time.Hours hours32 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours33 = hours32.negated();
        org.joda.time.Hours hours34 = org.joda.time.Hours.ONE;
        boolean boolean35 = hours33.isLessThan(hours34);
        org.joda.time.DurationFieldType durationFieldType36 = hours33.getFieldType();
        org.joda.time.Duration duration37 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.Hours hours40 = duration37.toStandardHours();
        org.joda.time.Hours hours41 = hours33.minus(hours40);
        boolean boolean42 = hours20.isGreaterThan(hours33);
        java.lang.String str43 = hours33.toString();
        org.joda.time.Hours hours44 = hours1.plus(hours33);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT4H" + "'", str26, "PT4H");
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT-8H" + "'", str43, "PT-8H");
        org.junit.Assert.assertNotNull(hours44);
    }

    @Test
    public void test13910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13910");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType10 = days9.getPeriodType();
        boolean boolean11 = days6.isGreaterThan(days9);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days15 = days9.minus(days14);
        org.joda.time.Period period17 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Days days20 = days18.minus(10);
        org.joda.time.Days days21 = days9.plus(days18);
        org.joda.time.Days days23 = days21.dividedBy(100);
        org.joda.time.Days days24 = null;
        org.joda.time.Days days25 = days23.plus(days24);
        org.joda.time.Days days26 = days23.negated();
        boolean boolean27 = days2.isGreaterThan(days26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) days2);
        java.lang.String str29 = days2.toString();
        org.joda.time.Days days31 = days2.minus(13);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = days31.getValue(74);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 74");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P0D" + "'", str29, "P0D");
        org.junit.Assert.assertNotNull(days31);
    }

    @Test
    public void test13911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13911");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy((int) (short) -1);
        org.joda.time.Hours hours11 = hours9.plus((int) (short) 10);
        org.joda.time.Hours hours13 = hours9.dividedBy((int) '4');
        org.joda.time.Hours hours14 = hours13.negated();
        org.joda.time.MutablePeriod mutablePeriod15 = hours13.toMutablePeriod();
        org.joda.time.Hours hours17 = hours13.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration18 = hours13.toStandardDuration();
        java.lang.String str19 = hours13.toString();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0H" + "'", str19, "PT0H");
    }

    @Test
    public void test13912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13912");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-1));
        int int2 = minutes1.getMinutes();
        org.joda.time.Minutes minutes4 = minutes1.dividedBy((-2147483648));
        org.joda.time.MutablePeriod mutablePeriod5 = minutes1.toMutablePeriod();
        mutablePeriod5.setPeriod((-1073741764), (-32), (-62), (-31), 5, (int) 'a', (-596526), 108);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test13913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13913");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(4320L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13914");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        org.joda.time.Period period7 = period4.normalizedStandard();
        java.lang.String str8 = period7.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period10 = period7.normalizedStandard(periodType9);
        org.joda.time.Period period12 = period7.minusHours(3);
        int int13 = period12.getYears();
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period12.withSeconds((int) (short) -1);
        org.joda.time.Period period18 = period12.minusDays((int) (short) 0);
        org.joda.time.Period period19 = period12.toPeriod();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period12.toDurationTo(readableInstant20);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.052S" + "'", str8, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test13915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13915");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 31, chronology1);
    }

    @Test
    public void test13916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13916");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, (long) '#');
        int int3 = period2.getSeconds();
        org.joda.time.Period period5 = period2.plusMillis((int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test13917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13917");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Period period7 = duration1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType13 = seconds12.getFieldType();
        org.joda.time.Seconds seconds15 = seconds12.plus(25);
        org.joda.time.Seconds seconds16 = seconds12.negated();
        org.joda.time.Seconds seconds17 = seconds9.minus(seconds12);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.seconds((int) 'a');
        org.joda.time.Seconds seconds20 = seconds12.plus(seconds19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 'a', (long) 0);
        mutablePeriod23.addYears((int) '4');
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod23.add((long) 100, chronology27);
        mutablePeriod23.add(1, 10, (int) 'a', 52, (int) (short) 100, 0, (int) (byte) 0, (int) (byte) 10);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.seconds(0);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) seconds39);
        org.joda.time.Seconds seconds42 = seconds39.multipliedBy((int) (byte) 1);
        org.joda.time.Seconds seconds43 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType44 = seconds43.getPeriodType();
        java.lang.String str45 = seconds43.toString();
        java.lang.String str46 = seconds43.toString();
        org.joda.time.Seconds seconds47 = null;
        org.joda.time.Seconds seconds48 = seconds43.minus(seconds47);
        org.joda.time.Seconds seconds49 = seconds42.minus(seconds48);
        org.joda.time.Seconds seconds50 = seconds12.plus(seconds42);
        org.joda.time.Seconds seconds51 = seconds12.negated();
        org.joda.time.Seconds seconds53 = seconds51.minus((-15));
        org.joda.time.MutablePeriod mutablePeriod54 = seconds53.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0S" + "'", str46, "PT0S");
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
    }

    @Test
    public void test13918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13918");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.withHours(32);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.Period period6 = period1.plusHours((int) (short) 1);
        org.joda.time.Period period8 = period1.withYears(52);
        org.joda.time.Period period10 = period1.minusWeeks((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) period1);
        java.lang.String str12 = mutablePeriod11.toString();
        mutablePeriod11.addMinutes(52);
        org.joda.time.Chronology chronology17 = null;
        mutablePeriod11.setPeriod(6000000L, 0L, chronology17);
        mutablePeriod11.addSeconds((-2));
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.ZERO;
        org.joda.time.PeriodType periodType25 = seconds24.getPeriodType();
        int int26 = periodType25.size();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType25);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-3600000L), periodType25);
        mutablePeriod28.add((long) 2);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        java.lang.Object obj33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(obj33);
        org.joda.time.Period period35 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant31, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.toDuration();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration37.toIntervalTo(readableInstant38);
        mutablePeriod28.setPeriod((org.joda.time.ReadableInterval) interval39);
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Seconds seconds42 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Seconds seconds44 = seconds42.dividedBy((-2147483638));
        org.joda.time.Seconds seconds46 = seconds42.dividedBy(15120008);
        org.joda.time.PeriodType periodType47 = seconds42.getPeriodType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.052S" + "'", str12, "PT0.052S");
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test13919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13919");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(540000L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        mutablePeriod1.setPeriod(readableInstant2, readableInstant3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.millis((long) 8);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = duration6.toPeriod(chronology7);
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration6, chronology9);
        long long11 = duration6.getStandardMinutes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', chronology13);
        int int15 = mutablePeriod14.getHours();
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        long long17 = duration16.getStandardDays();
        org.joda.time.Hours hours18 = duration16.toStandardHours();
        long long19 = duration16.getStandardMinutes();
        mutablePeriod14.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 25);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((java.lang.Object) duration22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((-60L), periodType28);
        org.joda.time.Period period30 = duration24.toPeriodFrom(readableInstant25, periodType28);
        long long31 = duration24.getMillis();
        boolean boolean32 = duration6.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Hours hours33 = duration24.toStandardHours();
        org.joda.time.Duration duration34 = org.joda.time.Duration.ZERO;
        long long35 = duration34.getStandardDays();
        org.joda.time.Hours hours36 = duration34.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType37 = hours36.getFieldType();
        org.joda.time.Hours hours38 = null;
        org.joda.time.Hours hours39 = hours36.minus(hours38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period43 = period41.withHours(32);
        org.joda.time.Hours hours44 = period41.toStandardHours();
        org.joda.time.Hours hours45 = hours44.negated();
        boolean boolean46 = hours39.isGreaterThan(hours44);
        org.joda.time.Hours hours47 = org.joda.time.Hours.FOUR;
        org.joda.time.Duration duration48 = hours47.toStandardDuration();
        org.joda.time.Hours hours50 = hours47.dividedBy((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.days();
        int int57 = mutablePeriod55.get(durationFieldType56);
        org.joda.time.Hours hours58 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Hours hours60 = hours58.dividedBy((int) (short) -1);
        org.joda.time.Hours hours62 = hours60.plus((int) (short) 10);
        boolean boolean63 = hours50.isGreaterThan(hours62);
        org.joda.time.Hours hours64 = hours39.plus(hours62);
        boolean boolean65 = hours33.isLessThan(hours39);
        org.joda.time.Hours hours67 = hours33.dividedBy(38);
        org.joda.time.Duration duration68 = hours67.toStandardDuration();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 90000000L + "'", long31 == 90000000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(hours58);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test13920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13920");
        org.joda.time.Period period2 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
        mutablePeriod7.setHours((int) (short) 100);
        boolean boolean10 = periodType4.equals((java.lang.Object) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = periodType4.withYearsRemoved();
        int int12 = periodType11.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 10, periodType11, chronology13);
        java.lang.String str15 = periodType11.getName();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Days" + "'", str15, "Days");
    }

    @Test
    public void test13921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13921");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setHours((int) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6, chronology7);
        org.joda.time.Period period9 = duration6.toPeriod();
        org.joda.time.Period period11 = period9.withWeeks((int) (byte) 10);
        org.joda.time.Period period13 = period9.withMonths((-637));
        org.joda.time.Period period15 = period13.plusMonths(135);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13922");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        long long14 = duration3.getStandardSeconds();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration21 = duration3.withDurationAdded(17340L, 4);
        org.joda.time.Duration duration23 = duration21.minus((long) (-637));
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) (-160));
        boolean boolean26 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test13923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13923");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(101L, (long) 35, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 10);
        org.joda.time.Duration duration7 = duration5.plus((-60001L));
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 8);
        long long10 = duration9.getStandardMinutes();
        java.lang.String str11 = duration9.toString();
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Minutes minutes13 = duration9.toStandardMinutes();
        org.joda.time.Minutes minutes15 = minutes13.dividedBy(21168000);
        org.joda.time.Period period16 = period3.withFields((org.joda.time.ReadablePeriod) minutes13);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 8L + "'", long10 == 8L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT480S" + "'", str11, "PT480S");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test13924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13924");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withHours(0);
        int int6 = period3.getWeeks();
        org.joda.time.Period period8 = period3.plusSeconds((int) (byte) 100);
        org.joda.time.Period period9 = period3.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) period3, chronology10);
        org.joda.time.Period period13 = period3.minusMillis((int) (short) 1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.Seconds seconds20 = seconds18.dividedBy(32);
        org.joda.time.PeriodType periodType21 = seconds18.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        int int23 = periodType21.size();
        org.joda.time.Period period24 = new org.joda.time.Period((long) (-940), 84326400000L, periodType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period13.withPeriodType(periodType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test13925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13925");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration5.toPeriod(periodType6, chronology8);
        org.joda.time.PeriodType periodType10 = periodType6.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 52, (long) 0, periodType10);
        java.lang.String str13 = periodType10.getName();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType10);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod14.setMonths((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Millis" + "'", str13, "Millis");
    }

    @Test
    public void test13926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13926");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT0S");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        mutablePeriod1.setPeriod(readableInstant2, readableInstant3);
        mutablePeriod1.add((-2147483638), 0, 3, 38, (-97), 13, 10, (-7));
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test13927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13927");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 10);
        mutablePeriod1.addMonths(100);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        int int7 = mutablePeriod1.getMonths();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        java.lang.Object obj11 = null;
        org.joda.time.Duration duration12 = new org.joda.time.Duration(obj11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant9, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        long long17 = duration16.getStandardDays();
        org.joda.time.Hours hours18 = duration16.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType19 = hours18.getFieldType();
        boolean boolean20 = periodType15.isSupported(durationFieldType19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant8, (org.joda.time.ReadableDuration) duration12, periodType15);
        mutablePeriod21.setSeconds((int) '4');
        mutablePeriod21.clear();
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod21.setPeriod((long) 6, chronology26);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod1.setSeconds(71);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue((-17), (-20));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test13928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13928");
        org.joda.time.Days days1 = org.joda.time.Days.days(32);
        org.joda.time.Days days2 = org.joda.time.Days.ZERO;
        int int3 = days2.getDays();
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType10 = days9.getPeriodType();
        boolean boolean11 = days6.isGreaterThan(days9);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days15 = days9.minus(days14);
        org.joda.time.Days days16 = days2.minus(days9);
        java.lang.String str17 = days16.toString();
        org.joda.time.Days days18 = days1.minus(days16);
        org.joda.time.DurationFieldType durationFieldType19 = days1.getFieldType();
        org.joda.time.Period period21 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days22 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days25 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        org.joda.time.PeriodType periodType26 = days25.getPeriodType();
        boolean boolean27 = days22.isGreaterThan(days25);
        org.joda.time.Days days29 = days22.minus(1);
        org.joda.time.Days days31 = days29.dividedBy(60);
        org.joda.time.Days days33 = days29.plus((int) (short) 100);
        org.joda.time.Days days34 = days1.minus(days29);
        org.joda.time.PeriodType periodType35 = days1.getPeriodType();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P0D" + "'", str17, "P0D");
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test13929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13929");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(2147483647, (int) (byte) 0, 0, 2);
        int int5 = mutablePeriod4.getYears();
        org.joda.time.Period period7 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days8 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period10 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days11 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period10);
        org.joda.time.PeriodType periodType12 = days11.getPeriodType();
        boolean boolean13 = days8.isGreaterThan(days11);
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Days days17 = days11.minus(days16);
        org.joda.time.Days days18 = null;
        boolean boolean19 = days17.isGreaterThan(days18);
        int int20 = days17.getDays();
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) days17);
        org.joda.time.Days days22 = org.joda.time.Days.ZERO;
        int int23 = days22.getDays();
        org.joda.time.Period period25 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days26 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        boolean boolean31 = days26.isGreaterThan(days29);
        org.joda.time.Period period33 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Days days35 = days29.minus(days34);
        org.joda.time.Days days36 = days22.minus(days29);
        org.joda.time.Days days38 = days29.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType40 = days38.getFieldType((int) (short) 0);
        org.joda.time.Days days41 = org.joda.time.Days.ZERO;
        org.joda.time.Period period43 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Days days46 = days44.minus(10);
        boolean boolean47 = days41.isGreaterThan(days44);
        org.joda.time.Days days48 = days38.plus(days41);
        boolean boolean49 = days17.isLessThan(days41);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test13930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13930");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (byte) -1);
        org.joda.time.Period period2 = period1.normalizedStandard();
        int int3 = period2.getMonths();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13931");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(8744033);
        org.joda.time.Days days2 = period1.toStandardDays();
        org.joda.time.Weeks weeks3 = days2.toStandardWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(weeks3);
    }

    @Test
    public void test13932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13932");
        org.joda.time.Period period1 = org.joda.time.Period.hours(15120008);
        int int2 = period1.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test13933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13933");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (-515));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13934");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (-7), (long) 23, chronology2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType5 = seconds4.getFieldType();
        org.joda.time.Chronology chronology6 = null;
        boolean boolean7 = durationFieldType5.isSupported(chronology6);
        java.lang.String str8 = durationFieldType5.toString();
        mutablePeriod3.add(durationFieldType5, (-7));
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "seconds" + "'", str8, "seconds");
    }

    @Test
    public void test13935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13935");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        java.lang.String str1 = days0.toString();
        org.joda.time.Weeks weeks2 = days0.toStandardWeeks();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        org.joda.time.Weeks weeks6 = weeks4.multipliedBy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = days0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) weeks4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Weeks");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P6D" + "'", str1, "P6D");
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
    }

    @Test
    public void test13936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13936");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType11 = period9.getFieldType((int) (short) 1);
        org.joda.time.Period period13 = period9.plusDays(10);
        boolean boolean14 = periodType7.equals((java.lang.Object) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) ' ', periodType7);
        org.joda.time.PeriodType periodType16 = periodType7.withDaysRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 2, (long) 32, periodType16, chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        int int20 = periodType16.indexOf(durationFieldType19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(540000L, (long) 600, periodType16);
        org.joda.time.PeriodType periodType22 = periodType16.withYearsRemoved();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant23, readableDuration24);
        org.joda.time.Period period26 = mutablePeriod25.toPeriod();
        int int27 = period26.size();
        org.joda.time.Period period29 = period26.plusDays(1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = period29.plusMonths(25);
        org.joda.time.Period period34 = period32.minusMinutes((int) (byte) -1);
        org.joda.time.Period period36 = period34.plusMinutes((-1));
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days39 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days42 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period44 = period41.withSeconds((int) ' ');
        org.joda.time.Period period45 = period38.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period47 = period38.plusHours((-1));
        org.joda.time.Period period49 = period38.withDays((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod51 = org.joda.time.MutablePeriod.parse("PT60S");
        org.joda.time.Period period52 = period38.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Period period53 = period36.withFields((org.joda.time.ReadablePeriod) period52);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        org.joda.time.Days days55 = org.joda.time.Days.ZERO;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) days55, periodType56, chronology57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.minutes();
        boolean boolean60 = days55.isSupported(durationFieldType59);
        int int61 = mutablePeriod54.get(durationFieldType59);
        boolean boolean62 = periodType16.isSupported(durationFieldType59);
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType16);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test13937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13937");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = seconds2.plus(25);
        org.joda.time.Seconds seconds6 = seconds2.negated();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds8 = seconds2.plus(seconds7);
        org.joda.time.Duration duration9 = seconds7.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) '#', periodType14);
        int int16 = period15.getMillis();
        org.joda.time.Period period18 = period15.plusDays((int) 'a');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        java.lang.String str22 = seconds21.toString();
        org.joda.time.PeriodType periodType23 = seconds21.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withDaysRemoved();
        org.joda.time.Period period26 = period18.normalizedStandard(periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withMonthsRemoved();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 10, periodType25, chronology28);
        org.joda.time.PeriodType periodType30 = periodType25.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant10, periodType30);
        int int32 = mutablePeriod31.getHours();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod31.setMinutes(74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 25 + "'", int16 == 25);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT60S" + "'", str22, "PT60S");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test13938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13938");
        org.joda.time.Days days0 = org.joda.time.Days.SEVEN;
        org.joda.time.Days days2 = days0.dividedBy((int) (short) -1);
        org.joda.time.Days days4 = days2.minus(0);
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod6 = days2.toMutablePeriod();
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod6.setPeriod((long) 11, chronology8);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test13939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13939");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 0, (long) (byte) 10, periodType2, chronology3);
        org.joda.time.Duration duration5 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration5.toPeriod(chronology6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours9 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) -1);
        boolean boolean12 = hours9.isGreaterThan(hours11);
        org.joda.time.Period period13 = period7.withFields((org.joda.time.ReadablePeriod) hours11);
        org.joda.time.Period period15 = period7.plusYears((int) '4');
        org.joda.time.Period period17 = period15.plusDays(60);
        org.joda.time.Period period19 = period15.plusMinutes((int) '#');
        org.joda.time.Period period21 = period19.minusYears(32);
        org.joda.time.Period period23 = period21.plusMinutes(990);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test13940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13940");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100, 60, (int) (short) 1, 0);
        mutablePeriod4.setDays((int) (byte) 10);
    }

    @Test
    public void test13941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13941");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        int int6 = mutablePeriod4.get(durationFieldType5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Hours hours9 = hours7.dividedBy(3);
        org.joda.time.Hours hours10 = hours9.negated();
        org.joda.time.Hours hours12 = hours10.plus(13);
        org.joda.time.Hours hours13 = hours10.negated();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
    }

    @Test
    public void test13942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13942");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Period period3 = duration1.toPeriod();
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        int int6 = period5.getMonths();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
        org.joda.time.Period period11 = mutablePeriod10.toPeriod();
        org.joda.time.Period period13 = period11.withHours(0);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        int int15 = period11.indexOf(durationFieldType14);
        int int16 = periodType7.indexOf(durationFieldType14);
        java.lang.String str17 = durationFieldType14.toString();
        org.joda.time.Period period19 = period5.withFieldAdded(durationFieldType14, 7);
        org.joda.time.Period period20 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period22 = period3.minusMinutes(97);
        org.joda.time.Period period24 = period3.plusMillis((int) (short) 100);
        int int25 = period24.getWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "days" + "'", str17, "days");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test13943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13943");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration10.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = duration10.toPeriod();
        org.joda.time.Period period17 = duration10.toPeriod();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test13944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13944");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.Object obj4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(obj4);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration5);
        long long8 = duration5.getMillis();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration1.toIntervalFrom(readableInstant10);
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval11);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(days12);
    }

    @Test
    public void test13945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13945");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(0L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant2, periodType3);
        long long5 = duration1.getMillis();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType7 = periodType6.withMillisRemoved();
        org.joda.time.Period period8 = duration1.toPeriod(periodType7);
        org.joda.time.PeriodType periodType9 = periodType7.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test13946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13946");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period5 = period3.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Weeks weeks7 = weeks1.plus(weeks6);
        org.joda.time.Weeks weeks9 = weeks1.plus((int) (byte) 10);
        org.joda.time.Weeks weeks11 = weeks1.multipliedBy((-2147483648));
        org.joda.time.Weeks weeks12 = weeks1.negated();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks14 = weeks12.plus(weeks13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn(readableInterval17);
        boolean boolean19 = weeks16.isLessThan(weeks18);
        org.joda.time.Weeks weeks20 = weeks16.negated();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((java.lang.Object) weeks16, chronology21);
        org.joda.time.Weeks weeks23 = weeks14.plus(weeks16);
        org.joda.time.Period period28 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period30 = period28.withDays((int) 'a');
        org.joda.time.Weeks weeks31 = period30.toStandardWeeks();
        int int32 = weeks31.getWeeks();
        org.joda.time.Weeks weeks34 = weeks31.plus((int) (byte) 0);
        org.joda.time.Duration duration35 = weeks34.toStandardDuration();
        org.joda.time.Weeks weeks36 = weeks34.negated();
        org.joda.time.Period period41 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period43 = period41.withDays((int) 'a');
        org.joda.time.Weeks weeks44 = period43.toStandardWeeks();
        int int45 = weeks44.getWeeks();
        org.joda.time.DurationFieldType durationFieldType46 = weeks44.getFieldType();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeksIn(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.weeksIn(readableInterval49);
        boolean boolean51 = weeks48.isLessThan(weeks50);
        org.joda.time.Weeks weeks52 = weeks48.negated();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((java.lang.Object) weeks48, chronology53);
        org.joda.time.Weeks weeks56 = weeks48.multipliedBy((int) (byte) 1);
        org.joda.time.Weeks weeks57 = weeks48.negated();
        org.joda.time.Weeks weeks58 = weeks44.minus(weeks48);
        org.joda.time.Weeks weeks59 = weeks34.minus(weeks48);
        org.joda.time.PeriodType periodType60 = weeks34.getPeriodType();
        boolean boolean61 = weeks16.isLessThan(weeks34);
        java.lang.String str62 = weeks16.toString();
        org.joda.time.Weeks weeks64 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks66 = weeks64.plus((int) (short) 0);
        org.joda.time.Weeks weeks67 = weeks66.negated();
        boolean boolean68 = weeks16.isLessThan(weeks66);
        org.joda.time.Weeks weeks70 = weeks16.multipliedBy((-5));
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 13 + "'", int45 == 13);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "P0W" + "'", str62, "P0W");
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(weeks70);
    }

    @Test
    public void test13947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13947");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((int) ' ');
        org.joda.time.Hours hours2 = weeks1.toStandardHours();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test13948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13948");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        org.joda.time.Period period3 = mutablePeriod2.toPeriod();
        org.joda.time.Period period5 = period3.withMinutes(0);
        org.joda.time.PeriodType periodType6 = period3.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test13949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13949");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration8.toPeriod();
        boolean boolean15 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = duration4.toPeriodTo(readableInstant16);
        long long18 = duration4.getStandardDays();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period21 = duration20.toPeriod();
        long long22 = duration20.getStandardSeconds();
        boolean boolean23 = duration4.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        boolean boolean30 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, readableInstant31, periodType32);
        boolean boolean35 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Seconds seconds36 = duration28.toStandardSeconds();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration38.toPeriod(periodType39, chronology41);
        int int43 = duration28.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str46 = duration45.toString();
        boolean boolean48 = duration45.equals((java.lang.Object) 100.0d);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds54 = duration53.toStandardSeconds();
        boolean boolean55 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Seconds seconds58 = duration53.toStandardSeconds();
        boolean boolean59 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration53);
        boolean boolean60 = duration38.isEqual((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration61 = duration38.toDuration();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((-1L));
        long long64 = duration63.getMillis();
        long long65 = duration63.getMillis();
        org.joda.time.Period period66 = duration63.toPeriod();
        long long67 = duration63.getStandardHours();
        java.lang.String str68 = duration63.toString();
        int int69 = duration61.compareTo((org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60L) + "'", long22 == (-60L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT600S" + "'", str46, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-86400000L) + "'", long64 == (-86400000L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-86400000L) + "'", long65 == (-86400000L));
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-24L) + "'", long67 == (-24L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT-86400S" + "'", str68, "PT-86400S");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test13950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13950");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days2 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = period4.withSeconds((int) ' ');
        org.joda.time.Period period8 = period1.minus((org.joda.time.ReadablePeriod) period4);
        int int9 = period4.getDays();
        java.lang.String str10 = period4.toString();
        org.joda.time.Period period12 = period4.plusHours((-8));
        org.joda.time.Period period14 = period12.withWeeks(2147483647);
        org.joda.time.Period period16 = period12.minusYears(3);
        org.joda.time.PeriodType periodType17 = period12.getPeriodType();
        org.joda.time.Period period19 = period12.minusDays((-97));
        org.joda.time.Period period21 = period12.minusYears(6);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test13951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13951");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.Period period1 = hours0.toPeriod();
        int int2 = hours0.getHours();
        java.lang.String str3 = hours0.toString();
        org.joda.time.Hours hours5 = hours0.minus((-1073741824));
        org.joda.time.Hours hours7 = hours0.minus(600);
        org.joda.time.Hours hours8 = org.joda.time.Hours.TWO;
        org.joda.time.Duration duration9 = hours8.toStandardDuration();
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours13 = hours11.multipliedBy((-1));
        org.joda.time.Hours hours15 = hours13.minus((int) (byte) 1);
        boolean boolean16 = hours8.isGreaterThan(hours13);
        org.joda.time.Hours hours17 = hours0.minus(hours13);
        org.joda.time.Duration duration18 = hours0.toStandardDuration();
        org.joda.time.Hours hours19 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours20 = hours19.negated();
        java.lang.String str21 = hours20.toString();
        java.lang.String str22 = hours20.toString();
        org.joda.time.Duration duration23 = org.joda.time.Duration.ZERO;
        long long24 = duration23.getStandardDays();
        org.joda.time.Hours hours25 = duration23.toStandardHours();
        long long26 = duration23.getStandardMinutes();
        long long27 = duration23.getStandardDays();
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        boolean boolean29 = hours20.isGreaterThan(hours28);
        org.joda.time.Hours hours31 = hours20.multipliedBy((-60));
        org.joda.time.Duration duration32 = hours31.toStandardDuration();
        boolean boolean33 = hours0.isLessThan(hours31);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT1H" + "'", str3, "PT1H");
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT-8H" + "'", str21, "PT-8H");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-8H" + "'", str22, "PT-8H");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test13952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13952");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        org.joda.time.Period period5 = period3.minusYears((int) (short) 10);
        org.joda.time.Period period6 = period3.negated();
        org.joda.time.Period period8 = period6.withWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds9 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-32YT-1M");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test13953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13953");
        org.joda.time.Days days1 = org.joda.time.Days.days(32);
        org.joda.time.Days days2 = org.joda.time.Days.ZERO;
        int int3 = days2.getDays();
        org.joda.time.Period period5 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType10 = days9.getPeriodType();
        boolean boolean11 = days6.isGreaterThan(days9);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days15 = days9.minus(days14);
        org.joda.time.Days days16 = days2.minus(days9);
        java.lang.String str17 = days16.toString();
        org.joda.time.Days days18 = days1.minus(days16);
        org.joda.time.Days days20 = days18.dividedBy(60);
        org.joda.time.Days days22 = days18.minus(8);
        org.joda.time.Days days24 = days22.dividedBy((-87));
        org.joda.time.Period period28 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days29 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
        mutablePeriod33.setHours((int) (short) 100);
        boolean boolean36 = periodType30.equals((java.lang.Object) mutablePeriod33);
        org.joda.time.Period period37 = new org.joda.time.Period((long) 0, 0L, periodType30);
        int int38 = period37.getMillis();
        org.joda.time.Days days39 = period37.toStandardDays();
        org.joda.time.Days days40 = days24.minus(days39);
        org.joda.time.Period period42 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period45 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period45);
        org.joda.time.PeriodType periodType47 = days46.getPeriodType();
        boolean boolean48 = days43.isGreaterThan(days46);
        int int49 = days43.size();
        org.joda.time.Days days50 = days43.negated();
        org.joda.time.Days days52 = days50.minus(3);
        org.joda.time.Days days54 = days50.plus(75);
        org.joda.time.Days days55 = days39.minus(days50);
        org.joda.time.Period period57 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days58 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days61 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period60);
        org.joda.time.PeriodType periodType62 = days61.getPeriodType();
        boolean boolean63 = days58.isGreaterThan(days61);
        org.joda.time.Period period65 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days66 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Days days67 = days61.minus(days66);
        int int68 = days61.size();
        org.joda.time.Days days69 = org.joda.time.Days.ZERO;
        org.joda.time.Period period71 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days72 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Days days74 = days72.minus(10);
        boolean boolean75 = days69.isGreaterThan(days72);
        org.joda.time.Days days76 = days61.minus(days72);
        org.joda.time.Duration duration77 = days76.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType78 = days76.getFieldType();
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((java.lang.Object) days76, periodType79, chronology80);
        org.joda.time.Days days83 = days76.plus((-672));
        org.joda.time.DurationFieldType durationFieldType85 = days83.getFieldType((int) (byte) 0);
        org.joda.time.Days days86 = days50.minus(days83);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P0D" + "'", str17, "P0D");
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(days83);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(days86);
    }

    @Test
    public void test13954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13954");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = duration3.toPeriod(periodType4, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.Period period11 = duration3.toPeriodTo(readableInstant8, periodType10);
        org.joda.time.Duration duration12 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableDuration19);
        mutablePeriod20.setHours((int) (short) 100);
        boolean boolean23 = periodType17.equals((java.lang.Object) mutablePeriod20);
        org.joda.time.PeriodType periodType24 = periodType17.withMonthsRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, readableInstant13, periodType17);
        org.joda.time.PeriodType periodType26 = periodType17.withMonthsRemoved();
        java.lang.String str27 = periodType26.toString();
        java.lang.String str28 = periodType26.getName();
        org.joda.time.PeriodType periodType29 = periodType26.withHoursRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 90000000L, periodType26, chronology30);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Days]" + "'", str27, "PeriodType[Days]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Days" + "'", str28, "Days");
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test13955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13955");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.Duration duration12 = duration10.plus((long) (-1));
        org.joda.time.Duration duration14 = duration12.minus(1L);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test13956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13956");
        org.joda.time.Period period1 = org.joda.time.Period.months(54);
        int int2 = period1.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test13957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13957");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType4 = periodType3.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant2, periodType3);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod5.copy();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutablePeriod5.setPeriod(readableInstant7, readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant10, readableDuration11);
        mutablePeriod12.setHours((int) (short) 100);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration16, chronology17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType22 = seconds21.getFieldType();
        mutablePeriod12.add(durationFieldType22, (int) (short) 0);
        java.lang.String str25 = durationFieldType22.toString();
        java.lang.String str26 = durationFieldType22.toString();
        int int27 = mutablePeriod5.indexOf(durationFieldType22);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "seconds" + "'", str25, "seconds");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "seconds" + "'", str26, "seconds");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test13958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13958");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(17340L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType4 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes6 = minutes3.plus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.ZERO;
        boolean boolean9 = minutes7.isLessThan(minutes8);
        boolean boolean10 = minutes3.isLessThan(minutes7);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        int int13 = minutes11.getMinutes();
        java.lang.String str14 = minutes11.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        java.lang.String str17 = minutes15.toString();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes20 = minutes15.minus(0);
        int int21 = minutes20.getMinutes();
        org.joda.time.Minutes minutes22 = minutes7.plus(minutes20);
        org.joda.time.Duration duration23 = minutes7.toStandardDuration();
        long long24 = duration23.getStandardHours();
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) duration1, chronology26);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1040400L + "'", long2 == 1040400L);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2147483648M" + "'", str17, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2147483648) + "'", int21 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test13959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13959");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        boolean boolean6 = minutes4.isLessThan(minutes5);
        boolean boolean7 = minutes0.isLessThan(minutes4);
        int int8 = minutes0.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 25);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int12 = minutes11.getMinutes();
        boolean boolean13 = minutes0.isGreaterThan(minutes11);
        org.joda.time.Duration duration14 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType16 = minutes15.getPeriodType();
        int int17 = minutes15.getMinutes();
        java.lang.String str18 = minutes15.toString();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType20 = minutes19.getFieldType();
        java.lang.String str21 = minutes19.toString();
        boolean boolean22 = minutes15.isLessThan(minutes19);
        org.joda.time.Minutes minutes23 = minutes15.negated();
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy((-672));
        org.joda.time.Minutes minutes26 = minutes0.plus(minutes25);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes29 = minutes26.minus(minutes28);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (-8), 60L);
        boolean boolean33 = minutes29.equals((java.lang.Object) (-8));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0M" + "'", str18, "PT0M");
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT-2147483648M" + "'", str21, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13960");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(obj2);
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        java.lang.Object obj9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(obj9);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant7, (org.joda.time.ReadableDuration) duration10);
        int int13 = duration3.compareTo((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant16);
        mutablePeriod17.addMinutes((-160));
        org.joda.time.Period period21 = org.joda.time.Period.hours((-32));
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationTo(readableInstant22);
        long long24 = duration23.getMillis();
        long long25 = duration23.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        java.lang.Object obj29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(obj29);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant27, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.toDuration();
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant26, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration33, 10);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration23, chronology37);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-115200000L) + "'", long24 == (-115200000L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1920L) + "'", long25 == (-1920L));
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test13961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13961");
        org.joda.time.Period period4 = new org.joda.time.Period((-97), (-672), 15120008, (-2));
        org.joda.time.Period period6 = period4.plusDays(25);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test13962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13962");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(obj0, periodType1, chronology2);
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setWeeks((-60));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test13963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13963");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        mutablePeriod1.addMillis((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutablePeriod1.mergePeriod(readablePeriod4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Duration duration7 = hours6.toStandardDuration();
        org.joda.time.Period period8 = duration7.toPeriod();
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration12 = duration7.withDurationAdded(35791394L, 7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration7.toPeriod(chronology13);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test13964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13964");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.standardMinutesIn(readablePeriod0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        boolean boolean4 = minutes2.isLessThan(minutes3);
        boolean boolean5 = minutes1.isGreaterThan(minutes2);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration7.toPeriod(periodType8, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        org.joda.time.Period period15 = duration7.toPeriodTo(readableInstant12, periodType14);
        org.joda.time.Minutes minutes16 = duration7.toStandardMinutes();
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy((int) (short) -1);
        int int20 = minutes18.getValue((int) (byte) 0);
        boolean boolean21 = minutes1.isLessThan(minutes18);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, (long) (byte) 1, chronology25);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.ZERO;
        boolean boolean30 = minutes28.isLessThan(minutes29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType32 = minutes31.getPeriodType();
        int int33 = minutes31.getMinutes();
        java.lang.String str34 = minutes31.toString();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType36 = minutes35.getFieldType();
        java.lang.String str37 = minutes35.toString();
        boolean boolean38 = minutes31.isLessThan(minutes35);
        int int39 = minutes31.size();
        org.joda.time.Minutes minutes40 = minutes28.plus(minutes31);
        org.joda.time.Minutes minutes41 = minutes28.negated();
        org.joda.time.Minutes minutes42 = minutes27.plus(minutes41);
        boolean boolean43 = minutes22.isGreaterThan(minutes41);
        org.joda.time.Minutes minutes45 = minutes41.dividedBy(71);
        boolean boolean46 = minutes1.isGreaterThan(minutes41);
        org.joda.time.Minutes minutes48 = minutes41.plus(2400);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0M" + "'", str34, "PT0M");
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT-2147483648M" + "'", str37, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(minutes48);
    }

    @Test
    public void test13965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13965");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(72000000L);
    }

    @Test
    public void test13966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13966");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant12, periodType13);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant4, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period18 = duration9.toPeriod(periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
        mutablePeriod22.setHours((int) (short) 100);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration26, chronology27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant19, (org.joda.time.ReadableDuration) duration26, periodType30);
        org.joda.time.Period period33 = duration9.toPeriod(periodType30);
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter2.withParseType(periodType30);
        org.joda.time.format.PeriodParser periodParser35 = periodFormatter2.getParser();
        java.util.Locale locale36 = periodFormatter2.getLocale();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType42 = periodType41.withWeeksRemoved();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration40.toPeriod(periodType41, chronology43);
        org.joda.time.PeriodType periodType45 = periodType41.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(periodType45);
        org.joda.time.Period period47 = new org.joda.time.Period((long) 52, (long) 0, periodType45);
        java.lang.String str48 = periodType45.getName();
        org.joda.time.format.PeriodFormatter periodFormatter49 = periodFormatter2.withParseType(periodType45);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period57 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType59 = period57.getFieldType((int) (short) 1);
        org.joda.time.Period period61 = period57.plusDays(10);
        boolean boolean62 = periodType55.equals((java.lang.Object) 10);
        org.joda.time.Period period63 = new org.joda.time.Period((long) ' ', periodType55);
        org.joda.time.PeriodType periodType64 = periodType55.withDaysRemoved();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 2, (long) 32, periodType64, chronology65);
        org.joda.time.DurationFieldType durationFieldType67 = null;
        int int68 = periodType64.indexOf(durationFieldType67);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType64);
        org.joda.time.PeriodType periodType70 = periodType64.withSecondsRemoved();
        org.joda.time.PeriodType periodType71 = periodType64.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter72 = periodFormatter2.withParseType(periodType71);
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNull(periodParser35);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Millis" + "'", str48, "Millis");
        org.junit.Assert.assertNotNull(periodFormatter49);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodFormatter72);
    }

    @Test
    public void test13967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13967");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.plusYears((int) ' ');
        int int4 = period1.getWeeks();
        org.joda.time.Duration duration5 = period1.toStandardDuration();
        java.lang.String str6 = duration5.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT60S" + "'", str6, "PT60S");
    }

    @Test
    public void test13968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13968");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks3 = weeks1.plus((int) (short) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        boolean boolean8 = weeks5.isLessThan(weeks7);
        org.joda.time.Weeks weeks9 = weeks5.negated();
        org.joda.time.MutablePeriod mutablePeriod10 = weeks9.toMutablePeriod();
        org.joda.time.Weeks weeks12 = weeks9.dividedBy(600);
        org.joda.time.DurationFieldType durationFieldType13 = weeks9.getFieldType();
        org.joda.time.Duration duration14 = weeks9.toStandardDuration();
        boolean boolean15 = weeks1.isLessThan(weeks9);
        int int16 = weeks1.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test13969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13969");
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ZERO;
        boolean boolean10 = minutes8.isLessThan(minutes9);
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) (short) 10);
        org.joda.time.PeriodType periodType13 = minutes12.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-31), 88500, (-91), 416, 0, 0, (-999), (int) (short) 1, periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test13970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13970");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(100);
        org.joda.time.Period period3 = period1.withMinutes(4);
        org.joda.time.Period period5 = period1.minusMinutes(70);
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) 70, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test13971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13971");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds6 = seconds2.minus(seconds5);
        org.joda.time.Seconds seconds7 = seconds2.negated();
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds10 = seconds7.minus(seconds9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str12 = durationFieldType11.getName();
        int int13 = seconds9.get(durationFieldType11);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType16 = seconds14.getFieldType();
        org.joda.time.PeriodType periodType17 = seconds14.getPeriodType();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType21 = seconds20.getFieldType();
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds24 = seconds20.minus(seconds23);
        boolean boolean25 = seconds14.isLessThan(seconds24);
        org.joda.time.Seconds seconds26 = seconds9.plus(seconds24);
        org.joda.time.PeriodType periodType27 = seconds24.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekyears" + "'", str12, "weekyears");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test13972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13972");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', 90000000L);
    }

    @Test
    public void test13973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13973");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period6 = period4.withHours(32);
        org.joda.time.Period period7 = period4.normalizedStandard();
        java.lang.String str8 = period7.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period10 = period7.normalizedStandard(periodType9);
        org.joda.time.Period period12 = period7.minusHours(3);
        int int13 = period12.getYears();
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period2.minusYears(59);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = period16.getValue(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.052S" + "'", str8, "PT0.052S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test13974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13974");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 8, (long) 10);
        org.joda.time.Duration duration5 = duration2.withDurationAdded(540000L, (int) (byte) 10);
        org.joda.time.Duration duration7 = duration5.minus(600000L);
        org.joda.time.Duration duration10 = new org.joda.time.Duration(60000L, (-1L));
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1L));
        mutablePeriod12.addSeconds(100);
        java.lang.Object obj15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(obj15);
        org.joda.time.Duration duration17 = duration16.toDuration();
        mutablePeriod12.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 1);
        boolean boolean21 = duration7.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.minus((-5184000L));
        long long24 = duration23.getStandardDays();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration23.toPeriod(chronology25);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
    }

    @Test
    public void test13975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13975");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
        org.joda.time.Period period4 = mutablePeriod3.toPeriod();
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter8.getParser();
        java.util.Locale locale10 = periodFormatter8.getLocale();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.ZERO;
        boolean boolean17 = minutes15.isLessThan(minutes16);
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.PeriodType periodType19 = minutes11.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType19);
        boolean boolean21 = duration5.equals((java.lang.Object) periodType19);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration5);
        mutablePeriod22.addYears(21168000);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNull(periodParser9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13976");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Period period3 = period2.toPeriod();
        org.joda.time.Period period5 = period3.plusMillis(0);
        org.joda.time.Period period7 = period5.minusSeconds(60);
        org.joda.time.Period period9 = period5.plusWeeks(60);
        int int10 = period9.getMonths();
        org.joda.time.Period period12 = period9.withSeconds(51);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test13977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13977");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 0);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.joda.time.Days days4 = days2.minus(5);
        org.joda.time.Period period6 = org.joda.time.Period.hours(0);
        org.joda.time.DurationFieldType durationFieldType8 = period6.getFieldType((int) (short) 1);
        org.joda.time.Period period10 = period6.withSeconds((-1));
        org.joda.time.Days days11 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Days days12 = days2.plus(days11);
        org.joda.time.Days days14 = org.joda.time.Days.days((int) (short) 1);
        boolean boolean15 = days11.isLessThan(days14);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days14);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(days16);
    }

    @Test
    public void test13978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13978");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.PeriodType periodType4 = seconds2.getPeriodType();
        org.joda.time.Seconds seconds6 = seconds2.minus((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType7 = seconds2.getFieldType();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType11 = seconds10.getFieldType();
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.parseSeconds("P0W");
        org.joda.time.Seconds seconds14 = seconds10.minus(seconds13);
        org.joda.time.Seconds seconds15 = seconds10.negated();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration19.toPeriod(periodType20, chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType26 = periodType25.withMonthsRemoved();
        org.joda.time.Period period27 = duration19.toPeriodTo(readableInstant24, periodType26);
        org.joda.time.Period period28 = duration19.toPeriod();
        boolean boolean29 = duration17.equals((java.lang.Object) period28);
        org.joda.time.Seconds seconds30 = duration17.toStandardSeconds();
        org.joda.time.Seconds seconds31 = seconds10.minus(seconds30);
        int int32 = seconds10.getSeconds();
        int int33 = seconds10.getSeconds();
        org.joda.time.DurationFieldType durationFieldType34 = null;
        boolean boolean35 = seconds10.isSupported(durationFieldType34);
        org.joda.time.Seconds seconds36 = seconds2.plus(seconds10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 60 + "'", int32 == 60);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 60 + "'", int33 == 60);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(seconds36);
    }

    @Test
    public void test13979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13979");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period5 = period3.withMillis((int) (byte) -1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Weeks weeks7 = weeks1.plus(weeks6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        org.joda.time.Weeks weeks13 = weeks9.negated();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) weeks9, chronology14);
        org.joda.time.Weeks weeks17 = weeks9.multipliedBy((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks23 = weeks19.negated();
        org.joda.time.MutablePeriod mutablePeriod24 = weeks23.toMutablePeriod();
        org.joda.time.Weeks weeks25 = weeks9.minus(weeks23);
        org.joda.time.Weeks weeks26 = weeks1.plus(weeks23);
        java.lang.String str27 = weeks23.toString();
        org.joda.time.DurationFieldType durationFieldType28 = weeks23.getFieldType();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P0W" + "'", str27, "P0W");
        org.junit.Assert.assertNotNull(durationFieldType28);
    }

    @Test
    public void test13980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13980");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = duration0.toPeriod(chronology1);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusHours((int) (short) 1);
        org.joda.time.Period period7 = org.joda.time.Period.days(1);
        org.joda.time.Period period8 = period2.minus((org.joda.time.ReadablePeriod) period7);
        int int9 = period8.getMillis();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13981");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter4.getParser();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType9 = seconds8.getFieldType();
        org.joda.time.Seconds seconds11 = seconds8.plus(25);
        org.joda.time.Seconds seconds12 = seconds8.negated();
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter4.withParseType(periodType13);
        boolean boolean15 = periodFormatter4.isParser();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter4.withLocale(locale16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        java.lang.String str21 = seconds20.toString();
        org.joda.time.PeriodType periodType22 = seconds20.getPeriodType();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter17.withParseType(periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withMinutesRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType24);
        java.lang.Class<?> wildcardClass28 = periodType24.getClass();
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT60S" + "'", str21, "PT60S");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test13982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13982");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (byte) 100);
        int int2 = period1.getSeconds();
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Duration duration4 = hours3.toStandardDuration();
        org.joda.time.Hours hours6 = hours3.dividedBy((int) ' ');
        org.joda.time.PeriodType periodType7 = hours6.getPeriodType();
        java.lang.String str8 = periodType7.toString();
        org.joda.time.Period period9 = period1.normalizedStandard(periodType7);
        int int10 = period1.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Hours]" + "'", str8, "PeriodType[Hours]");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test13983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13983");
        org.joda.time.Days days3 = org.joda.time.Days.days(0);
        org.joda.time.Days days5 = days3.dividedBy(7);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration7.toPeriod(periodType8, chronology10);
        org.joda.time.Days days12 = org.joda.time.Days.ZERO;
        int int13 = days12.getDays();
        org.joda.time.Period period15 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days19 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.PeriodType periodType20 = days19.getPeriodType();
        boolean boolean21 = days16.isGreaterThan(days19);
        org.joda.time.Period period23 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Days days25 = days19.minus(days24);
        org.joda.time.Days days26 = days12.minus(days19);
        boolean boolean27 = duration7.equals((java.lang.Object) days19);
        org.joda.time.Period period29 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days30 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Days days32 = days30.minus(10);
        org.joda.time.Days days34 = days32.plus((int) (short) -1);
        org.joda.time.Days days35 = days19.plus(days32);
        org.joda.time.Days days36 = days3.plus(days35);
        org.joda.time.PeriodType periodType37 = days3.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((int) (short) -1, (int) '#', (int) ' ', 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        int int44 = mutablePeriod42.get(durationFieldType43);
        mutablePeriod42.setPeriod((long) (-32));
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod42.toMutablePeriod();
        mutablePeriod47.addDays(59);
        boolean boolean50 = periodType37.equals((java.lang.Object) mutablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 51840000, 1L, periodType37, chronology51);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test13984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13984");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period6 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Days days7 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = period6.withSeconds((int) ' ');
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withYearsRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((-1L), 60000L, periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withHoursRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((long) (-2147483638), periodType15);
        java.lang.String str17 = periodType15.toString();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PeriodType[Millis]" + "'", str17, "PeriodType[Millis]");
    }

    @Test
    public void test13985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13985");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '4', (int) (short) 100, (int) (byte) -1);
        org.joda.time.Period period6 = period4.withDays((int) 'a');
        org.joda.time.Weeks weeks7 = period6.toStandardWeeks();
        org.joda.time.Period period9 = period6.withMillis((-1));
        int int10 = period6.getYears();
        java.lang.String str11 = period6.toString();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P97DT52M99.999S" + "'", str11, "P97DT52M99.999S");
    }

    @Test
    public void test13986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13986");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-112));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13987");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.eras();
        int int5 = period3.get(durationFieldType4);
        org.joda.time.Days days6 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days8 = days6.plus(75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = days8.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days8);
    }

    @Test
    public void test13988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13988");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Seconds seconds3 = duration1.toStandardSeconds();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType7 = seconds6.getFieldType();
        org.joda.time.Seconds seconds9 = seconds6.plus(25);
        boolean boolean10 = seconds3.isLessThan(seconds9);
        org.joda.time.Seconds seconds11 = seconds3.negated();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Duration duration15 = duration13.plus((long) 10);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Seconds seconds17 = duration15.toStandardSeconds();
        org.joda.time.Seconds seconds18 = seconds3.plus(seconds17);
        org.joda.time.DurationFieldType durationFieldType19 = seconds3.getFieldType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(durationFieldType19);
    }

    @Test
    public void test13989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13989");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = duration1.toPeriod(periodType2, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = duration1.toPeriodTo(readableInstant6, periodType8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes14 = minutes10.minus((int) (short) 0);
        org.joda.time.Minutes minutes15 = minutes14.negated();
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) minutes16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableDuration19);
        org.joda.time.Period period21 = mutablePeriod20.toPeriod();
        int int22 = period21.size();
        org.joda.time.Period period24 = period21.plusDays(1);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.THREE;
        org.joda.time.Period period26 = period21.withFields((org.joda.time.ReadablePeriod) minutes25);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType30 = minutes29.getPeriodType();
        int int31 = minutes29.getMinutes();
        java.lang.String str32 = minutes29.toString();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType34 = minutes33.getFieldType();
        java.lang.String str35 = minutes33.toString();
        boolean boolean36 = minutes29.isLessThan(minutes33);
        org.joda.time.Minutes minutes37 = minutes29.negated();
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.parseMinutes("P0D");
        org.joda.time.Minutes minutes41 = minutes39.dividedBy((int) '#');
        org.joda.time.Minutes minutes42 = minutes29.minus(minutes39);
        boolean boolean43 = minutes28.isGreaterThan(minutes39);
        org.joda.time.Minutes minutes44 = minutes25.minus(minutes39);
        org.joda.time.Duration duration45 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes47 = minutes25.plus((-1073741824));
        org.joda.time.Minutes minutes48 = minutes16.minus(minutes47);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0M" + "'", str32, "PT0M");
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT-2147483648M" + "'", str35, "PT-2147483648M");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
    }

    @Test
    public void test13990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13990");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (-1));
        org.joda.time.Hours hours2 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        mutablePeriod1.setPeriod(100000L, (long) 3);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test13991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13991");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(13);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        java.lang.Object obj5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Hours hours8 = org.joda.time.Hours.hours((int) (byte) -1);
        org.joda.time.Hours hours10 = hours8.multipliedBy((-1));
        java.lang.String str11 = hours10.toString();
        org.joda.time.Duration duration12 = hours10.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant13, readableInstant14, periodType15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant6, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(obj5, periodType15, chronology18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(90000000L, periodType15);
        org.joda.time.Period period22 = period1.normalizedStandard(periodType15);
        org.joda.time.Duration duration23 = period22.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = period22.minusSeconds((-160));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1H" + "'", str11, "PT1H");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test13992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13992");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType6 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes8 = minutes5.plus(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.ZERO;
        boolean boolean11 = minutes9.isLessThan(minutes10);
        boolean boolean12 = minutes5.isLessThan(minutes9);
        org.joda.time.PeriodType periodType13 = minutes5.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter2.withParseType(periodType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((-539L), (-1L), chronology17);
        int int19 = mutablePeriod18.getYears();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = periodFormatter14.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod18, "PT0.025S", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13993");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str2 = duration1.toString();
        boolean boolean4 = duration1.equals((java.lang.Object) 100.0d);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        boolean boolean11 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        boolean boolean15 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration9);
        java.lang.String str16 = duration1.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration1.toPeriod(chronology17);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT600S" + "'", str2, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT600S" + "'", str16, "PT600S");
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test13994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13994");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) 10);
        java.lang.String str5 = duration4.toString();
        org.joda.time.ReadableDuration readableDuration6 = null;
        boolean boolean7 = duration4.isLongerThan(readableDuration6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10, periodType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4, periodType11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType11);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT600S" + "'", str5, "PT600S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test13995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13995");
        org.joda.time.Period period1 = org.joda.time.Period.months(0);
        int int3 = period1.getValue((int) (byte) 0);
        java.lang.String str4 = period1.toString();
        org.joda.time.Minutes minutes5 = period1.toStandardMinutes();
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test13996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13996");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        long long2 = duration1.getStandardDays();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType4 = hours3.getFieldType();
        boolean boolean5 = periodType0.isSupported(durationFieldType4);
        int int6 = periodType0.size();
        org.joda.time.PeriodType periodType7 = periodType0.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test13997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13997");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (-100), 8L);
    }

    @Test
    public void test13998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13998");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 5, periodType1, chronology2);
        mutablePeriod3.add(15120008, (-35), 27, 32000, (-515), 214748364, (-60), 54);
    }

    @Test
    public void test13999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13999");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(52);
        org.joda.time.Period period3 = period1.withHours(0);
        org.joda.time.Period period5 = period1.minusYears(100);
        org.joda.time.Period period7 = period5.plusMillis((int) (short) 0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test14000");
        org.joda.time.Period period1 = org.joda.time.Period.hours(96);
        org.junit.Assert.assertNotNull(period1);
    }
}

